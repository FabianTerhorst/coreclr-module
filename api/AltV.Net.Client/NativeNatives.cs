using System.Numerics;
using WebAssembly;
using WebAssembly.Core;

namespace AltV.Net.Client
{
	public class NativeNatives
	{
		private readonly JSObject native;

		private Function setDebugLinesAndSpheresDrawingActive;
		private Function drawDebugLine;
		private Function drawDebugLineWithTwoColours;
		private Function drawDebugSphere;
		private Function drawDebugBox;
		private Function drawDebugCross;
		private Function drawDebugText;
		private Function drawDebugText2d;
		private Function drawLine;
		private Function drawPoly;
		private Function __0x29280002282F1928;
		private Function __0x736D7AA1B750856B;
		private Function drawBox;
		private Function setBackfaceculling;
		private Function __0xC5C8F970D4EDFF71;
		private Function __0x1DD2139A9A20DCE8;
		private Function __0x90A78ECAA4E78453;
		private Function __0x0A46AF8A78DC5E0A;
		private Function __0x4862437A486F91B0;
		private Function __0x1670F8D05056F257;
		private Function __0x7FA5D82B8F58EC06;
		private Function __0x5B0316762AFD4A64;
		private Function __0x346EF3ECAAAB149E;
		private Function beginTakeHighQualityPhoto;
		private Function getStatusOfTakeHighQualityPhoto;
		private Function __0xD801CC02177FA3F1;
		private Function __0x1BBC135A4D25EDDE;
		private Function __0xF3F776ADA161E47D;
		private Function saveHighQualityPhoto;
		private Function getStatusOfSaveHighQualityPhoto;
		private Function __0x759650634F07B6B4;
		private Function __0xCB82A0BF0E3E3265;
		private Function __0x6A12D88881435DCA;
		private Function __0x1072F115DAB0717E;
		private Function getMaximumNumberOfPhotos;
		private Function getMaximumNumberOfCloudPhotos;
		private Function getCurrentNumberOfPhotos;
		private Function __0x2A893980E96B659A;
		private Function __0xF5BED327CEA362B1;
		private Function __0x4AF92ACD3141D96C;
		private Function __0xE791DF1F73ED2C8B;
		private Function __0xEC72C258667BE5EA;
		private Function returnTwo;
		private Function drawLightWithRangeAndShadow;
		private Function drawLightWithRange;
		private Function drawSpotLight;
		private Function drawSpotLightWithShadow;
		private Function fadeUpPedLight;
		private Function updateLightsOnEntity;
		private Function __0x9641588DAB93B4B5;
		private Function __0x393BD2275CEB7793;
		private Function drawMarker;
		private Function drawMarker2;
		private Function __0x799017F9E3B10112;
		private Function createCheckpoint;
		private Function setCheckpointScale;
		private Function __0x44621483FF966526;
		private Function setCheckpointCylinderHeight;
		private Function setCheckpointRgba;
		private Function setCheckpointIconRgba;
		private Function __0xF51D36185993515D;
		private Function __0xFCF6788FC4860CD4;
		private Function __0x615D3925E87A3B26;
		private Function __0xDB1EA9411C8911EC;
		private Function __0x3C788E7F6438754D;
		private Function deleteCheckpoint;
		private Function __0x22A249A53034450A;
		private Function __0xDC459CFA0CCE245B;
		private Function requestStreamedTextureDict;
		private Function hasStreamedTextureDictLoaded;
		private Function setStreamedTextureDictAsNoLongerNeeded;
		private Function drawRect;
		private Function setScriptGfxDrawBehindPausemenu;
		private Function setScriptGfxDrawOrder;
		private Function setScriptGfxAlign;
		private Function resetScriptGfxAlign;
		private Function setScriptGfxAlignParams;
		private Function getScriptGfxPosition;
		private Function getSafeZoneSize;
		private Function drawSprite;
		private Function __0x2D3B147AFAD49DE0;
		private Function drawInteractiveSprite;
		private Function addEntityIcon;
		private Function setEntityIconVisibility;
		private Function setEntityIconColor;
		private Function setDrawOrigin;
		private Function clearDrawOrigin;
		private Function setBinkMovieRequested;
		private Function playBinkMovie;
		private Function stopBinkMovie;
		private Function releaseBinkMovie;
		private Function drawBinkMovie;
		private Function setBinkMovieProgress;
		private Function getBinkMovieProgress;
		private Function setBinkMovieUnk;
		private Function attachTvAudioToEntity;
		private Function setTvAudioFrontend;
		private Function __0x6805D58CAA427B72;
		private Function loadMovieMeshSet;
		private Function releaseMovieMeshSet;
		private Function __0x9B6E70C5CEEF4EEB;
		private Function getScreenResolution;
		private Function getActiveScreenResolution;
		private Function getAspectRatio;
		private Function __0xB2EBE8CBC58B90E9;
		private Function getIsWidescreen;
		private Function getIsHidef;
		private Function __0xEFABC7722293DA7C;
		private Function setNightvision;
		private Function getRequestingnightvision;
		private Function getUsingnightvision;
		private Function __0xEF398BEEE4EF45F9;
		private Function __0x814AF7DCAACC597B;
		private Function __0x43FA7CBE20DAB219;
		private Function setNoiseoveride;
		private Function setNoisinessoveride;
		private Function getScreenCoordFromWorldCoord;
		private Function getTextureResolution;
		private Function __0x95EB5E34F821BABE;
		private Function __0xE2892E7E55D7073A;
		private Function setFlash;
		private Function disableOcclusionThisFrame;
		private Function setArtificialLightsState;
		private Function __0xC35A6D07C93802B2;
		private Function createTrackedPoint;
		private Function setTrackedPointInfo;
		private Function isTrackedPointVisible;
		private Function destroyTrackedPoint;
		private Function __0xBE197EAA669238F4;
		private Function __0x61F95E5BB3E0A8C6;
		private Function __0xAE51BC858F32BA66;
		private Function __0x649C97D52332341A;
		private Function __0x2C42340F916C5930;
		private Function __0x14FC5833464340A8;
		private Function __0x0218BA067D249DEA;
		private Function __0x1612C45F9E3E0D44;
		private Function __0x5DEBD9C4DC995692;
		private Function __0xAAE9BE70EC7C69AB;
		private Function grassLodShrinkScriptAreas;
		private Function grassLodResetScriptAreas;
		private Function __0x03FC694AE06C5A20;
		private Function __0xD2936CAB8B58FCBD;
		private Function __0x5F0F3F56635809EF;
		private Function __0x5E9DAF5A20F15908;
		private Function __0x36F6626459D91457;
		private Function __0x259BA6D4E6F808F1;
		private Function setFarShadowsSuppressed;
		private Function __0x25FC3E33A31AD0C9;
		private Function cascadeshadowsSetType;
		private Function cascadeshadowsResetType;
		private Function __0x6DDBF9DFFC4AC080;
		private Function __0xD39D13C9FEBF0511;
		private Function __0x02AC28F3A01FA04A;
		private Function __0x0AE73D8DF3A762B2;
		private Function __0xCA465D9CC0D231BA;
		private Function golfTrailSetEnabled;
		private Function golfTrailSetPath;
		private Function golfTrailSetRadius;
		private Function golfTrailSetColour;
		private Function golfTrailSetTessellation;
		private Function __0xC0416B061F2B7E5E;
		private Function golfTrailSetFixedControlPoint;
		private Function golfTrailSetShaderParams;
		private Function golfTrailSetFacing;
		private Function __0xA4819F5E23E2FFAD;
		private Function __0xA4664972A9B8F8BA;
		private Function setSeethrough;
		private Function getUsingseethrough;
		private Function seethroughReset;
		private Function seethroughSetFadeStartDistance;
		private Function seethroughSetFadeEndDistance;
		private Function seethroughGetMaxThickness;
		private Function seethroughSetMaxThickness;
		private Function seethroughSetNoiseAmountMin;
		private Function seethroughSetNoiseAmountMax;
		private Function seethroughSetHiLightIntensity;
		private Function seethroughSetHiLightNoise;
		private Function seethroughSetHeatscale;
		private Function seethroughSetColorNear;
		private Function __0xB3C641F3630BF6DA;
		private Function __0xE59343E9E96529E7;
		private Function __0x6A51F78772175A51;
		private Function __0xE63D7C6EECECB66B;
		private Function __0xE3E2C1B4C59DBC77;
		private Function triggerScreenblurFadeIn;
		private Function triggerScreenblurFadeOut;
		private Function __0xDE81239437E8C5A8;
		private Function getScreenblurFadeCurrentTime;
		private Function isScreenblurFadeRunning;
		private Function togglePausedRenderphases;
		private Function getTogglePausedRenderphasesStatus;
		private Function resetPausedRenderphases;
		private Function __0x851CD923176EBA7C;
		private Function setHidofEnvBlurParams;
		private Function __0xB569F41F3E7E83A4;
		private Function __0x7AC24EAB6D74118D;
		private Function __0xBCEDB009461DA156;
		private Function __0x27FEB5254759CDE3;
		private Function startParticleFxNonLoopedAtCoord;
		private Function startNetworkedParticleFxNonLoopedAtCoord;
		private Function startParticleFxNonLoopedOnPedBone;
		private Function startNetworkedParticleFxNonLoopedOnPedBone;
		private Function startParticleFxNonLoopedOnEntity;
		private Function startNetworkedParticleFxNonLoopedOnEntity;
		private Function setParticleFxNonLoopedColour;
		private Function setParticleFxNonLoopedAlpha;
		private Function __0x8CDE909A0370BB3A;
		private Function startParticleFxLoopedAtCoord;
		private Function startParticleFxLoopedOnPedBone;
		private Function startParticleFxLoopedOnEntity;
		private Function startParticleFxLoopedOnEntityBone;
		private Function startNetworkedParticleFxLoopedOnEntity;
		private Function startNetworkedParticleFxLoopedOnEntityBone;
		private Function stopParticleFxLooped;
		private Function removeParticleFx;
		private Function removeParticleFxFromEntity;
		private Function removeParticleFxInRange;
		private Function __0xBA0127DA25FD54C9;
		private Function doesParticleFxLoopedExist;
		private Function setParticleFxLoopedOffsets;
		private Function setParticleFxLoopedEvolution;
		private Function setParticleFxLoopedColour;
		private Function setParticleFxLoopedAlpha;
		private Function setParticleFxLoopedScale;
		private Function setParticleFxLoopedFarClipDist;
		private Function setParticleFxCamInsideVehicle;
		private Function setParticleFxCamInsideNonplayerVehicle;
		private Function setParticleFxShootoutBoat;
		private Function __0x2A251AA48B2B46DB;
		private Function __0x908311265D42A820;
		private Function __0x5F6DF3D92271E8A1;
		private Function __0x2B40A97646381508;
		private Function enableClownBloodVfx;
		private Function enableAlienBloodVfx;
		private Function __0x27E32866E9A5C416;
		private Function __0xBB90E12CAC1DAB25;
		private Function __0xCA4AE345A153D573;
		private Function __0x54E22EA2C1956A8D;
		private Function __0x949F397A288B28B3;
		private Function __0xBA3D194057C79A7B;
		private Function __0x5DBF05DB5926D089;
		private Function __0x9B079E5221D984D3;
		private Function useParticleFxAsset;
		private Function setParticleFxOverride;
		private Function resetParticleFxOverride;
		private Function __0xA46B73FAA3460AE1;
		private Function __0xF78B803082D4386F;
		private Function washDecalsInRange;
		private Function washDecalsFromVehicle;
		private Function fadeDecalsInRange;
		private Function removeDecalsInRange;
		private Function removeDecalsFromObject;
		private Function removeDecalsFromObjectFacing;
		private Function removeDecalsFromVehicle;
		private Function addDecal;
		private Function addPetrolDecal;
		private Function startPetrolTrailDecals;
		private Function addPetrolTrailDecalInfo;
		private Function endPetrolTrailDecals;
		private Function removeDecal;
		private Function isDecalAlive;
		private Function getDecalWashLevel;
		private Function __0xD9454B5752C857DC;
		private Function __0x27CFB1B1E078CB2D;
		private Function __0x4B5CFC83122DF602;
		private Function getIsPetrolDecalInRange;
		private Function overrideDecalTexture;
		private Function undoDecalTextureOverride;
		private Function moveVehicleDecals;
		private Function addVehicleCrewEmblem;
		private Function __0x82ACC484FFA3B05F;
		private Function removeVehicleCrewEmblem;
		private Function getVehicleCrewEmblemRequestState;
		private Function doesVehicleHaveCrewEmblem;
		private Function __0x0E4299C549F0D1F1;
		private Function __0x02369D5C8A51FDCF;
		private Function __0x46D1A61A21F566FC;
		private Function overrideInteriorSmokeName;
		private Function overrideInteriorSmokeLevel;
		private Function overrideInteriorSmokeEnd;
		private Function __0xA44FF770DFBC5DAE;
		private Function disableVehicleDistantlights;
		private Function __0x03300B57FCAC6DDB;
		private Function __0x98EDF76A7271E4F2;
		private Function setForcePedFootstepsTracks;
		private Function setForceVehicleTrails;
		private Function disableScriptAmbientEffects;
		private Function presetInteriorAmbientCache;
		private Function setTimecycleModifier;
		private Function setTimecycleModifierStrength;
		private Function setTransitionTimecycleModifier;
		private Function __0x1CBA05AE7BD7EE05;
		private Function clearTimecycleModifier;
		private Function getTimecycleModifierIndex;
		private Function getTimecycleTransitionModifierIndex;
		private Function __0x98D18905BF723B99;
		private Function pushTimecycleModifier;
		private Function popTimecycleModifier;
		private Function setCurrentPlayerTcmodifier;
		private Function setPlayerTcmodifierTransition;
		private Function setNextPlayerTcmodifier;
		private Function addTcmodifierOverride;
		private Function __0x15E33297C3E8DC60;
		private Function setExtraTimecycleModifier;
		private Function clearExtraTimecycleModifier;
		private Function getExtraTimecycleModifierIndex;
		private Function setExtraTimecycleModifierStrength;
		private Function resetExtraTimecycleModifierStrength;
		private Function requestScaleformMovie;
		private Function requestScaleformMovieInstance;
		private Function requestScaleformMovieInteractive;
		private Function hasScaleformMovieLoaded;
		private Function __0x2FCB133CA50A49EB;
		private Function __0x86255B1FC929E33E;
		private Function hasScaleformMovieFilenameLoaded;
		private Function hasScaleformContainerMovieLoadedIntoParent;
		private Function setScaleformMovieAsNoLongerNeeded;
		private Function setScaleformMovieToUseSystemTime;
		private Function __0x32F34FF7F617643B;
		private Function __0xE6A9F00D4240B519;
		private Function drawScaleformMovie;
		private Function drawScaleformMovieFullscreen;
		private Function drawScaleformMovieFullscreenMasked;
		private Function drawScaleformMovie3d;
		private Function drawScaleformMovie3dSolid;
		private Function callScaleformMovieMethod;
		private Function callScaleformMovieMethodWithNumber;
		private Function callScaleformMovieMethodWithString;
		private Function callScaleformMovieMethodWithNumberAndString;
		private Function beginScaleformScriptHudMovieMethod;
		private Function beginScaleformMovieMethod;
		private Function beginScaleformMovieMethodOnFrontend;
		private Function beginScaleformMovieMethodOnFrontendHeader;
		private Function endScaleformMovieMethod;
		private Function endScaleformMovieMethodReturnValue;
		private Function isScaleformMovieMethodReturnValueReady;
		private Function getScaleformMovieMethodReturnValueInt;
		private Function getScaleformMovieMethodReturnValueBool;
		private Function getScaleformMovieMethodReturnValueString;
		private Function scaleformMovieMethodAddParamInt;
		private Function scaleformMovieMethodAddParamFloat;
		private Function scaleformMovieMethodAddParamBool;
		private Function beginTextCommandScaleformString;
		private Function endTextCommandScaleformString;
		private Function endTextCommandScaleformString2;
		private Function scaleformMovieMethodAddParamTextureNameString2;
		private Function scaleformMovieMethodAddParamTextureNameString;
		private Function scaleformMovieMethodAddParamPlayerNameString;
		private Function __0x5E657EF1099EDD65;
		private Function scaleformMovieMethodAddParamLatestBriefString;
		private Function requestScaleformScriptHudMovie;
		private Function hasScaleformScriptHudMovieLoaded;
		private Function removeScaleformScriptHudMovie;
		private Function __0xD1C7CB175E012964;
		private Function setTvChannel;
		private Function getTvChannel;
		private Function setTvVolume;
		private Function getTvVolume;
		private Function drawTvChannel;
		private Function setTvChannelPlaylist;
		private Function setTvChannelPlaylistAtHour;
		private Function clearTvChannelPlaylist;
		private Function isPlaylistUnk;
		private Function isTvPlaylistItemPlaying;
		private Function enableMovieKeyframeWait;
		private Function __0xD1C55B110E4DF534;
		private Function __0x30432A0118736E00;
		private Function enableMovieSubtitles;
		private Function ui3dsceneIsAvailable;
		private Function ui3dscenePushPreset;
		private Function __0x98C4FE6EC34154CA;
		private Function __0x7A42B2E236E71415;
		private Function __0x108BE26959A9D9BB;
		private Function terraingridActivate;
		private Function terraingridSetParams;
		private Function terraingridSetColours;
		private Function animpostfxPlay;
		private Function animpostfxStop;
		private Function animpostfxGetUnk;
		private Function animpostfxIsRunning;
		private Function animpostfxStopAll;
		private Function animpostfxStopAndDoUnk;
		private Function wait;
		private Function startNewScript;
		private Function startNewScriptWithArgs;
		private Function startNewScriptWithNameHash;
		private Function startNewScriptWithNameHashAndArgs;
		private Function timera;
		private Function timerb;
		private Function settimera;
		private Function settimerb;
		private Function timestep;
		private Function sin;
		private Function cos;
		private Function sqrt;
		private Function pow;
		private Function log10;
		private Function vmag;
		private Function vmag2;
		private Function vdist;
		private Function vdist2;
		private Function shiftLeft;
		private Function shiftRight;
		private Function floor;
		private Function ceil;
		private Function round;
		private Function toFloat;
		private Function setThreadPriority;
		private Function appDataValid;
		private Function appGetInt;
		private Function appGetFloat;
		private Function appGetString;
		private Function appSetInt;
		private Function appSetFloat;
		private Function appSetString;
		private Function appSetApp;
		private Function appSetBlock;
		private Function appClearBlock;
		private Function appCloseApp;
		private Function appCloseBlock;
		private Function appHasLinkedSocialClubAccount;
		private Function appHasSyncedData;
		private Function appSaveData;
		private Function appGetDeletedFileStatus;
		private Function appDeleteAppData;
		private Function playPedRingtone;
		private Function isPedRingtonePlaying;
		private Function stopPedRingtone;
		private Function isMobilePhoneCallOngoing;
		private Function __0xC8B1B2425604CDD0;
		private Function createNewScriptedConversation;
		private Function addLineToConversation;
		private Function addPedToConversation;
		private Function __0x33E3C6C6F2F0B506;
		private Function __0x892B6AB8F33606F5;
		private Function setMicrophonePosition;
		private Function __0x0B568201DD99F0EB;
		private Function __0x61631F5DF50D1C34;
		private Function startScriptPhoneConversation;
		private Function preloadScriptPhoneConversation;
		private Function startScriptConversation;
		private Function preloadScriptConversation;
		private Function startPreloadedConversation;
		private Function getIsPreloadedConversationReady;
		private Function isScriptedConversationOngoing;
		private Function isScriptedConversationLoaded;
		private Function getCurrentScriptedConversationLine;
		private Function pauseScriptedConversation;
		private Function restartScriptedConversation;
		private Function stopScriptedConversation;
		private Function skipToNextScriptedConversationLine;
		private Function interruptConversation;
		private Function interruptConversationAndPause;
		private Function __0xAA19F5572C38B564;
		private Function __0xB542DE8C3D1CB210;
		private Function registerScriptWithAudio;
		private Function unregisterScriptWithAudio;
		private Function requestMissionAudioBank;
		private Function requestAmbientAudioBank;
		private Function requestScriptAudioBank;
		private Function __0x40763EA7B9B783E7;
		private Function hintAmbientAudioBank;
		private Function hintScriptAudioBank;
		private Function releaseMissionAudioBank;
		private Function releaseAmbientAudioBank;
		private Function releaseNamedScriptAudioBank;
		private Function releaseScriptAudioBank;
		private Function __0x19AF7ED9B9D23058;
		private Function __0x9AC92EED5E4793AB;
		private Function __0x11579D940949C49E;
		private Function getSoundId;
		private Function releaseSoundId;
		private Function playSound;
		private Function playSoundFrontend;
		private Function playDeferredSoundFrontend;
		private Function playSoundFromEntity;
		private Function __0x5B9853296731E88D;
		private Function playSoundFromCoord;
		private Function __0x7EC3C679D0E7E46B;
		private Function stopSound;
		private Function getNetworkIdFromSoundId;
		private Function getSoundIdFromNetworkId;
		private Function setVariableOnSound;
		private Function setVariableOnStream;
		private Function overrideUnderwaterStream;
		private Function setVariableOnUnderWaterStream;
		private Function hasSoundFinished;
		private Function playAmbientSpeech1;
		private Function playAmbientSpeech2;
		private Function playAmbientSpeechWithVoice;
		private Function playAmbientSpeechAtCoords;
		private Function overrideTrevorRage;
		private Function resetTrevorRage;
		private Function setPlayerAngry;
		private Function playPain;
		private Function releaseWeaponAudio;
		private Function activateAudioSlowmoMode;
		private Function deactivateAudioSlowmoMode;
		private Function setAmbientVoiceName;
		private Function setAmbientVoiceNameHash;
		private Function getAmbientVoiceNameHash;
		private Function setPedScream;
		private Function __0x1B7ABE26CBCBF8C7;
		private Function setPedVoiceGroup;
		private Function __0xA5342D390CDA41D6;
		private Function stopCurrentPlayingSpeech;
		private Function stopCurrentPlayingAmbientSpeech;
		private Function isAmbientSpeechPlaying;
		private Function isScriptedSpeechPlaying;
		private Function isAnySpeechPlaying;
		private Function canPedSpeak;
		private Function isPedInCurrentConversation;
		private Function setPedIsDrunk;
		private Function playAnimalVocalization;
		private Function isAnimalVocalizationPlaying;
		private Function setAnimalMood;
		private Function isMobilePhoneRadioActive;
		private Function setMobilePhoneRadioState;
		private Function getPlayerRadioStationIndex;
		private Function getPlayerRadioStationName;
		private Function getRadioStationName;
		private Function getPlayerRadioStationGenre;
		private Function isRadioRetuning;
		private Function isRadioFadedOut;
		private Function __0xFF266D1D0EB1195D;
		private Function __0xDD6BCF9E94425DF9;
		private Function setRadioToStationName;
		private Function setVehRadioStation;
		private Function __0x0BE4BE946463F917;
		private Function __0xC1805D05E6D4FE10;
		private Function setEmitterRadioStation;
		private Function setStaticEmitterEnabled;
		private Function linkStaticEmitterToEntity;
		private Function setRadioToStationIndex;
		private Function setFrontendRadioActive;
		private Function unlockMissionNewsStory;
		private Function isMissionNewsStoryUnlocked;
		private Function getAudibleMusicTrackTextId;
		private Function playEndCreditsMusic;
		private Function skipRadioForward;
		private Function freezeRadioStation;
		private Function unfreezeRadioStation;
		private Function setRadioAutoUnfreeze;
		private Function setInitialPlayerStation;
		private Function setUserRadioControlEnabled;
		private Function setRadioTrack;
		private Function setRadioTrackMix;
		private Function setVehicleRadioLoud;
		private Function isVehicleRadioLoud;
		private Function setMobileRadioEnabledDuringGameplay;
		private Function doesPlayerVehHaveRadio;
		private Function isPlayerVehRadioEnable;
		private Function setVehicleRadioEnabled;
		private Function __0xDA07819E452FFE8F;
		private Function setCustomRadioTrackList;
		private Function clearCustomRadioTrackList;
		private Function getNumUnlockedRadioStations;
		private Function findRadioStationIndex;
		private Function setRadioStationMusicOnly;
		private Function setRadioFrontendFadeTime;
		private Function unlockRadioStationTrackList;
		private Function updateLsur;
		private Function lockRadioStation;
		private Function __0xC64A06D939F826F5;
		private Function __0x3E65CDE5215832C1;
		private Function __0x34D66BC058019CE0;
		private Function __0xF3365489E0DD50F9;
		private Function setAmbientZoneState;
		private Function clearAmbientZoneState;
		private Function setAmbientZoneListState;
		private Function clearAmbientZoneListState;
		private Function setAmbientZoneStatePersistent;
		private Function setAmbientZoneListStatePersistent;
		private Function isAmbientZoneEnabled;
		private Function __0x5D2BFAAB8D956E0E;
		private Function setCutsceneAudioOverride;
		private Function setVariableOnCutsceneAudio;
		private Function playPoliceReport;
		private Function cancelCurrentPoliceReport;
		private Function blipSiren;
		private Function overrideVehHorn;
		private Function isHornActive;
		private Function setAggressiveHorns;
		private Function __0x02E93C796ABD3A97;
		private Function __0x58BB377BEC7CD5F4;
		private Function __0x9BD7BD55E4533183;
		private Function isStreamPlaying;
		private Function getStreamPlayTime;
		private Function loadStream;
		private Function loadStreamWithStartOffset;
		private Function playStreamFromPed;
		private Function playStreamFromVehicle;
		private Function playStreamFromObject;
		private Function playStreamFrontend;
		private Function playStreamFromPosition;
		private Function stopStream;
		private Function stopPedSpeaking;
		private Function __0xF8AD2EED7C47E8FE;
		private Function disablePedPainAudio;
		private Function isAmbientSpeechDisabled;
		private Function __0xA8A7D434AFB4B97B;
		private Function __0x2ACABED337622DF2;
		private Function setSirenWithNoDriver;
		private Function __0x66C3FB05206041BA;
		private Function soundVehicleHornThisFrame;
		private Function setHornEnabled;
		private Function setAudioVehiclePriority;
		private Function __0x9D3AF56E94C9AE98;
		private Function useSirenAsHorn;
		private Function forceVehicleEngineAudio;
		private Function __0xCA4CEA6AE0000A7E;
		private Function __0xF1F8157B8C3F171C;
		private Function __0xD2DCCD8E16E20997;
		private Function __0x5DB8010EE71FDEF2;
		private Function setVehicleAudioEngineDamageFactor;
		private Function __0x01BB4D577D38BD9E;
		private Function __0x1C073274E065C6D2;
		private Function enableVehicleExhaustPops;
		private Function setVehicleBoostActive;
		private Function __0x6FDDAD856E36988A;
		private Function setScriptUpdateDoorAudio;
		private Function playVehicleDoorOpenSound;
		private Function playVehicleDoorCloseSound;
		private Function enableStallWarningSounds;
		private Function isGameInControlOfMusic;
		private Function setGpsActive;
		private Function playMissionCompleteAudio;
		private Function isMissionCompletePlaying;
		private Function isMissionCompleteReadyForUi;
		private Function blockDeathJingle;
		private Function startAudioScene;
		private Function stopAudioScene;
		private Function stopAudioScenes;
		private Function isAudioSceneActive;
		private Function setAudioSceneVariable;
		private Function __0xA5F377B175A699C5;
		private Function addEntityToAudioMixGroup;
		private Function removeEntityFromAudioMixGroup;
		private Function audioIsScriptedMusicPlaying;
		private Function __0x2DD39BF3E2F9C47F;
		private Function prepareMusicEvent;
		private Function cancelMusicEvent;
		private Function triggerMusicEvent;
		private Function isMusicOneshotPlaying;
		private Function getMusicPlaytime;
		private Function __0x159B7318403A1CD8;
		private Function recordBrokenGlass;
		private Function clearAllBrokenGlass;
		private Function __0x70B8EC8FC108A634;
		private Function __0x149AEE66F0CB3A99;
		private Function __0x8BF907833BE275DE;
		private Function __0x062D5EAD4DA2FA6A;
		private Function prepareAlarm;
		private Function startAlarm;
		private Function stopAlarm;
		private Function stopAllAlarms;
		private Function isAlarmPlaying;
		private Function getVehicleDefaultHorn;
		private Function getVehicleDefaultHornIgnoreMods;
		private Function resetPedAudioFlags;
		private Function __0x0653B735BFBDFE87;
		private Function __0x29DA3CA8D8B2692D;
		private Function overridePlayerGroundMaterial;
		private Function __0xBF4DC1784BE94DFA;
		private Function overrideMicrophoneSettings;
		private Function freezeMicrophone;
		private Function distantCopCarSirens;
		private Function __0x43FA0DFC5DF87815;
		private Function __0xB81CF134AEB56FFB;
		private Function setAudioFlag;
		private Function prepareSynchronizedAudioEvent;
		private Function prepareSynchronizedAudioEventForScene;
		private Function playSynchronizedAudioEvent;
		private Function stopSynchronizedAudioEvent;
		private Function __0xC8EDE9BDBCCBA6D4;
		private Function setSynchronizedAudioEventPositionThisFrame;
		private Function setAudioSpecialEffectMode;
		private Function setPortalSettingsOverride;
		private Function removePortalSettingsOverride;
		private Function __0xE4E6DD5566D28C82;
		private Function __0x3A48AB4445D499BE;
		private Function setPedTalk;
		private Function __0x0150B6FF25A9E2E5;
		private Function __0xBEF34B1D9624D5DD;
		private Function stopCutsceneAudio;
		private Function hasMultiplayerAudioDataLoaded;
		private Function hasMultiplayerAudioDataUnloaded;
		private Function getVehicleDefaultHornVariation;
		private Function setVehicleHornVariation;
		private Function addScriptToRandomPed;
		private Function registerObjectScriptBrain;
		private Function isObjectWithinBrainActivationRange;
		private Function registerWorldPointScriptBrain;
		private Function isWorldPointWithinBrainActivationRange;
		private Function enableScriptBrainSet;
		private Function disableScriptBrainSet;
		private Function __0x0B40ED49D7D6FF84;
		private Function __0x4D953DF78EBF8158;
		private Function __0x6D6840CEE8845831;
		private Function __0x6E91B04E08773030;
		private Function renderScriptCams;
		private Function renderFirstPersonCam;
		private Function createCam;
		private Function createCamWithParams;
		private Function createCamera;
		private Function createCameraWithParams;
		private Function destroyCam;
		private Function destroyAllCams;
		private Function doesCamExist;
		private Function setCamActive;
		private Function isCamActive;
		private Function isCamRendering;
		private Function getRenderingCam;
		private Function getCamCoord;
		private Function getCamRot;
		private Function getCamFov;
		private Function getCamNearClip;
		private Function getCamFarClip;
		private Function getCamFarDof;
		private Function setCamParams;
		private Function setCamCoord;
		private Function setCamRot;
		private Function setCamFov;
		private Function setCamNearClip;
		private Function setCamFarClip;
		private Function setCamMotionBlurStrength;
		private Function setCamNearDof;
		private Function setCamFarDof;
		private Function setCamDofStrength;
		private Function setCamDofPlanes;
		private Function setCamUseShallowDofMode;
		private Function setUseHiDof;
		private Function __0xF55E4046F6F831DC;
		private Function __0xE111A7C0D200CBC5;
		private Function setCamDofFnumberOfLens;
		private Function setCamDofFocalLengthMultiplier;
		private Function setCamDofFocusDistanceBias;
		private Function setCamDofMaxNearInFocusDistance;
		private Function setCamDofMaxNearInFocusDistanceBlendLevel;
		private Function attachCamToEntity;
		private Function attachCamToPedBone;
		private Function attachCamToPedBone2;
		private Function attachCamToVehicleBone;
		private Function detachCam;
		private Function setCamInheritRollVehicle;
		private Function pointCamAtCoord;
		private Function pointCamAtEntity;
		private Function pointCamAtPedBone;
		private Function stopCamPointing;
		private Function setCamAffectsAiming;
		private Function __0x661B5C8654ADD825;
		private Function __0xA2767257A320FC82;
		private Function __0x271017B9BA825366;
		private Function setCamDebugName;
		private Function addCamSplineNode;
		private Function addCamSplineNodeUsingCameraFrame;
		private Function addCamSplineNodeUsingCamera;
		private Function addCamSplineNodeUsingGameplayFrame;
		private Function setCamSplinePhase;
		private Function getCamSplinePhase;
		private Function getCamSplineNodePhase;
		private Function setCamSplineDuration;
		private Function setCamSplineSmoothingStyle;
		private Function getCamSplineNodeIndex;
		private Function setCamSplineNodeEase;
		private Function setCamSplineNodeVelocityScale;
		private Function overrideCamSplineVelocity;
		private Function overrideCamSplineMotionBlur;
		private Function setCamSplineNodeExtraFlags;
		private Function isCamSplinePaused;
		private Function setCamActiveWithInterp;
		private Function isCamInterpolating;
		private Function shakeCam;
		private Function animatedShakeCam;
		private Function isCamShaking;
		private Function setCamShakeAmplitude;
		private Function stopCamShaking;
		private Function shakeScriptGlobal;
		private Function animatedShakeScriptGlobal;
		private Function isScriptGlobalShaking;
		private Function stopScriptGlobalShaking;
		private Function playCamAnim;
		private Function isCamPlayingAnim;
		private Function setCamAnimCurrentPhase;
		private Function getCamAnimCurrentPhase;
		private Function playSynchronizedCamAnim;
		private Function setFlyCamHorizontalResponse;
		private Function setFlyCamVerticalSpeedMultiplier;
		private Function setFlyCamMaxHeight;
		private Function setFlyCamCoordAndConstrain;
		private Function __0xC8B5C4A79CC18B94;
		private Function __0x5C48A1D6E3B33179;
		private Function isScreenFadedOut;
		private Function isScreenFadedIn;
		private Function isScreenFadingOut;
		private Function isScreenFadingIn;
		private Function doScreenFadeIn;
		private Function doScreenFadeOut;
		private Function setWidescreenBorders;
		private Function __0x4879E4FE39074CDF;
		private Function getGameplayCamCoord;
		private Function getGameplayCamRot;
		private Function getGameplayCamFov;
		private Function __0x487A82C650EB7799;
		private Function __0x0225778816FDC28C;
		private Function getGameplayCamRelativeHeading;
		private Function setGameplayCamRelativeHeading;
		private Function getGameplayCamRelativePitch;
		private Function setGameplayCamRelativePitch;
		private Function setGameplayCamRelativeRotation;
		private Function __0x28B022A17B068A3A;
		private Function setGameplayCamRawYaw;
		private Function setGameplayCamRawPitch;
		private Function __0x469F2ECDEC046337;
		private Function shakeGameplayCam;
		private Function isGameplayCamShaking;
		private Function setGameplayCamShakeAmplitude;
		private Function stopGameplayCamShaking;
		private Function __0x8BBACBF51DA047A8;
		private Function isGameplayCamRendering;
		private Function __0x3044240D2E0FA842;
		private Function __0x705A276EBFF3133D;
		private Function __0xDB90C6CCA48940F1;
		private Function enableCrosshairThisFrame;
		private Function isGameplayCamLookingBehind;
		private Function __0x2AED6301F67007D5;
		private Function __0x49482F9FCD825AAA;
		private Function __0xFD3151CD37EA2245;
		private Function __0xB1381B97F70C7B30;
		private Function __0xDD79DF9F4D26E1C9;
		private Function isSphereVisible;
		private Function isFollowPedCamActive;
		private Function setFollowPedCamThisUpdate;
		private Function __0x271401846BD26E92;
		private Function __0xC8391C309684595A;
		private Function clampGameplayCamYaw;
		private Function clampGameplayCamPitch;
		private Function animateGameplayCamZoom;
		private Function __0xE9EA16D6E54CDCA4;
		private Function disableFirstPersonCamThisFrame;
		private Function __0x59424BD75174C9B1;
		private Function __0x9F97DA93681F87EA;
		private Function getFollowPedCamZoomLevel;
		private Function getFollowPedCamViewMode;
		private Function setFollowPedCamViewMode;
		private Function isFollowVehicleCamActive;
		private Function __0x91EF6EE6419E5B97;
		private Function __0x9DFE13ECDC1EC196;
		private Function __0x79C0E43EB9B944E2;
		private Function getFollowVehicleCamZoomLevel;
		private Function setFollowVehicleCamZoomLevel;
		private Function getFollowVehicleCamViewMode;
		private Function setFollowVehicleCamViewMode;
		private Function __0xEE778F8C7E1142E2;
		private Function __0x2A2173E46DAECD12;
		private Function __0x19CAFA3C87F7C2FF;
		private Function useStuntCameraThisFrame;
		private Function __0x425A920FDB9A0DDA;
		private Function __0x0AA27680A0BD43FA;
		private Function __0x5C90CAB09951A12F;
		private Function isAimCamActive;
		private Function isAimCamThirdPersonActive;
		private Function isFirstPersonAimCamActive;
		private Function disableAimCamThisUpdate;
		private Function getFirstPersonAimCamZoomFactor;
		private Function setFirstPersonAimCamZoomFactor;
		private Function __0xCED08CBE8EBB97C7;
		private Function __0x2F7F2B26DD3F18EE;
		private Function setFirstPersonCamPitchRange;
		private Function setFirstPersonCamNearClip;
		private Function setThirdPersonAimCamNearClip;
		private Function __0x4008EDF7D6E48175;
		private Function __0x380B4968D1E09E55;
		private Function getFinalRenderedCamCoord;
		private Function getFinalRenderedCamRot;
		private Function getFinalRenderedInWhenFriendlyRot;
		private Function getFinalRenderedCamFov;
		private Function getFinalRenderedInWhenFriendlyFov;
		private Function getFinalRenderedCamNearClip;
		private Function getFinalRenderedCamFarClip;
		private Function getFinalRenderedCamNearDof;
		private Function getFinalRenderedCamFarDof;
		private Function getFinalRenderedCamMotionBlurStrength;
		private Function setGameplayCoordHint;
		private Function setGameplayPedHint;
		private Function setGameplayVehicleHint;
		private Function setGameplayObjectHint;
		private Function setGameplayEntityHint;
		private Function isGameplayHintActive;
		private Function stopGameplayHint;
		private Function __0xCCD078C2665D2973;
		private Function __0x247ACBC4ABBC9D1C;
		private Function __0xBF72910D0F26F025;
		private Function setGameplayHintFov;
		private Function setGameplayHintAnimOffsetz;
		private Function setGameplayHintAngle;
		private Function setGameplayHintAnimOffsetx;
		private Function setGameplayHintAnimOffsety;
		private Function setGameplayHintAnimCloseup;
		private Function setCinematicButtonActive;
		private Function isCinematicCamRendering;
		private Function shakeCinematicCam;
		private Function isCinematicCamShaking;
		private Function setCinematicCamShakeAmplitude;
		private Function stopCinematicCamShaking;
		private Function disableVehicleFirstPersonCamThisFrame;
		private Function __0x62ECFCFDEE7885D6;
		private Function __0x9E4CFFF989258472;
		private Function invalidateIdleCam;
		private Function __0xCA9D2AA3E326D720;
		private Function isInVehicleCamDisabled;
		private Function createCinematicShot;
		private Function isCinematicShotActive;
		private Function stopCinematicShot;
		private Function __0xA41BCD7213805AAC;
		private Function __0xDC9DA9E8789F5246;
		private Function setCinematicModeActive;
		private Function __0x1F2300CB7FA7B7F6;
		private Function __0x17FCA7199A530203;
		private Function __0xD7360051C885628B;
		private Function __0xF5F1E89A970B7796;
		private Function __0x7B8A361C1813FBEF;
		private Function stopCutsceneCamShaking;
		private Function __0x324C5AA411DA7737;
		private Function __0x12DED8CA53D47EA5;
		private Function getFocusPedOnScreen;
		private Function __0x5A43C76F7FC7BA5F;
		private Function setCamEffect;
		private Function __0x5C41E6BABC9E2112;
		private Function setGameplayCamVehicleCamera;
		private Function setGameplayCamVehicleCameraName;
		private Function __0xEAF0FA793D05C592;
		private Function __0x62374889A4D59F72;
		private Function replayFreeCamGetMaxRange;
		private Function setClockTime;
		private Function pauseClock;
		private Function advanceClockTimeTo;
		private Function addToClockTime;
		private Function getClockHours;
		private Function getClockMinutes;
		private Function getClockSeconds;
		private Function setClockDate;
		private Function getClockDayOfWeek;
		private Function getClockDayOfMonth;
		private Function getClockMonth;
		private Function getClockYear;
		private Function getMillisecondsPerGameMinute;
		private Function getPosixTime;
		private Function getUtcTime;
		private Function getLocalTime;
		private Function requestCutscene;
		private Function requestCutsceneWithPlaybackList;
		private Function removeCutscene;
		private Function hasCutsceneLoaded;
		private Function hasThisCutsceneLoaded;
		private Function __0x8D9DF6ECA8768583;
		private Function canRequestAssetsForCutsceneEntity;
		private Function isCutscenePlaybackFlagSet;
		private Function setCutsceneEntityStreamingFlags;
		private Function requestCutFile;
		private Function hasCutFileLoaded;
		private Function removeCutFile;
		private Function getCutFileNumSections;
		private Function startCutscene;
		private Function startCutsceneAtCoords;
		private Function stopCutscene;
		private Function stopCutsceneImmediately;
		private Function setCutsceneOrigin;
		private Function __0x011883F41211432A;
		private Function getCutsceneTime;
		private Function getCutsceneTotalDuration;
		private Function __0x971D7B15BCDBEF99;
		private Function wasCutsceneSkipped;
		private Function hasCutsceneFinished;
		private Function isCutsceneActive;
		private Function isCutscenePlaying;
		private Function getCutsceneSectionPlaying;
		private Function getEntityIndexOfCutsceneEntity;
		private Function __0x583DF8E3D4AFBD98;
		private Function __0x4CEBC1ED31E8925E;
		private Function __0x4FCD976DA686580C;
		private Function registerEntityForCutscene;
		private Function getEntityIndexOfRegisteredEntity;
		private Function __0x7F96F23FA9B73327;
		private Function setCutsceneTriggerArea;
		private Function canSetEnterStateForRegisteredEntity;
		private Function canSetExitStateForRegisteredEntity;
		private Function canSetExitStateForCamera;
		private Function __0xC61B86C9F61EB404;
		private Function setCutsceneFadeValues;
		private Function __0x20746F7B1032A3C7;
		private Function __0x06EE9048FD080382;
		private Function __0xA0FE76168A189DDB;
		private Function __0x2F137B508DE238F2;
		private Function __0xE36A98D8AB3D3C66;
		private Function __0x5EDEF0CF8C1DAB3C;
		private Function __0x41FAA8FB2ECE8720;
		private Function registerSynchronisedScriptSpeech;
		private Function setCutscenePedComponentVariation;
		private Function setCutscenePedComponentVariationFromPed;
		private Function doesCutsceneEntityExist;
		private Function setCutscenePedPropVariation;
		private Function __0x708BDD8CD795B043;
		private Function datafileWatchRequestId;
		private Function datafileClearWatchList;
		private Function datafileIsValidRequestId;
		private Function datafileHasLoadedFileData;
		private Function datafileHasValidFileData;
		private Function datafileSelectActiveFile;
		private Function datafileDeleteRequestedFile;
		private Function ugcCreateContent;
		private Function ugcCreateMission;
		private Function ugcUpdateContent;
		private Function ugcUpdateMission;
		private Function ugcSetPlayerData;
		private Function datafileSelectUgcData;
		private Function datafileSelectUgcStats;
		private Function datafileSelectUgcPlayerData;
		private Function datafileSelectCreatorStats;
		private Function datafileLoadOfflineUgc;
		private Function datafileCreate;
		private Function datafileDelete;
		private Function datafileStoreMissionHeader;
		private Function datafileFlushMissionHeader;
		private Function datafileGetFileDict;
		private Function datafileStartSaveToCloud;
		private Function datafileUpdateSaveToCloud;
		private Function datafileIsSavePending;
		private Function objectValueAddBoolean;
		private Function objectValueAddInteger;
		private Function objectValueAddFloat;
		private Function objectValueAddString;
		private Function objectValueAddVector3;
		private Function objectValueAddObject;
		private Function objectValueAddArray;
		private Function objectValueGetBoolean;
		private Function objectValueGetInteger;
		private Function objectValueGetFloat;
		private Function objectValueGetString;
		private Function objectValueGetVector3;
		private Function objectValueGetObject;
		private Function objectValueGetArray;
		private Function objectValueGetType;
		private Function arrayValueAddBoolean;
		private Function arrayValueAddInteger;
		private Function arrayValueAddFloat;
		private Function arrayValueAddString;
		private Function arrayValueAddVector3;
		private Function arrayValueAddObject;
		private Function arrayValueGetBoolean;
		private Function arrayValueGetInteger;
		private Function arrayValueGetFloat;
		private Function arrayValueGetString;
		private Function arrayValueGetVector3;
		private Function arrayValueGetObject;
		private Function arrayValueGetSize;
		private Function arrayValueGetType;
		private Function decorSetTime;
		private Function decorSetBool;
		private Function decorSetFloat;
		private Function decorSetInt;
		private Function decorGetBool;
		private Function decorGetFloat;
		private Function decorGetInt;
		private Function decorExistOn;
		private Function decorRemove;
		private Function decorRegister;
		private Function decorIsRegisteredAsType;
		private Function decorRegisterLock;
		private Function __0x241FCA5B1AA14F75;
		private Function isDlcPresent;
		private Function __0xF2E07819EF1A5289;
		private Function __0x9489659372A81585;
		private Function __0xA213B11DFF526300;
		private Function getExtraContentPackHasBeenInstalled;
		private Function getIsLoadingScreenActive;
		private Function __0xC4637A6D03C24CC3;
		private Function hasCloudRequestsFinished;
		private Function onEnterSp;
		private Function onEnterMp;
		private Function doesEntityExist;
		private Function doesEntityBelongToThisScript;
		private Function doesEntityHaveDrawable;
		private Function doesEntityHavePhysics;
		private Function hasEntityAnimFinished;
		private Function hasEntityBeenDamagedByAnyObject;
		private Function hasEntityBeenDamagedByAnyPed;
		private Function hasEntityBeenDamagedByAnyVehicle;
		private Function hasEntityBeenDamagedByEntity;
		private Function hasEntityClearLosToEntity;
		private Function hasEntityClearLosToEntityInFront;
		private Function hasEntityCollidedWithAnything;
		private Function getLastMaterialHitByEntity;
		private Function getCollisionNormalOfLastHitForEntity;
		private Function forceEntityAiAndAnimationUpdate;
		private Function getEntityAnimCurrentTime;
		private Function getEntityAnimTotalTime;
		private Function getAnimDuration;
		private Function getEntityAttachedTo;
		private Function getEntityCoords;
		private Function getEntityForwardVector;
		private Function getEntityForwardX;
		private Function getEntityForwardY;
		private Function getEntityHeading;
		private Function getEntityPhysicsHeading;
		private Function getEntityHealth;
		private Function getEntityMaxHealth;
		private Function setEntityMaxHealth;
		private Function getEntityHeight;
		private Function getEntityHeightAboveGround;
		private Function getEntityMatrix;
		private Function getEntityModel;
		private Function getOffsetFromEntityGivenWorldCoords;
		private Function getOffsetFromEntityInWorldCoords;
		private Function getEntityPitch;
		private Function getEntityQuaternion;
		private Function getEntityRoll;
		private Function getEntityRotation;
		private Function getEntityRotationVelocity;
		private Function getEntityScript;
		private Function getEntitySpeed;
		private Function getEntitySpeedVector;
		private Function getEntityUprightValue;
		private Function getEntityVelocity;
		private Function getObjectIndexFromEntityIndex;
		private Function getPedIndexFromEntityIndex;
		private Function getVehicleIndexFromEntityIndex;
		private Function getWorldPositionOfEntityBone;
		private Function getNearestPlayerToEntity;
		private Function getNearestPlayerToEntityOnTeam;
		private Function getEntityType;
		private Function getEntityPopulationType;
		private Function isAnEntity;
		private Function isEntityAPed;
		private Function isEntityAMissionEntity;
		private Function isEntityAVehicle;
		private Function isEntityAnObject;
		private Function isEntityAtCoord;
		private Function isEntityAtEntity;
		private Function isEntityAttached;
		private Function isEntityAttachedToAnyObject;
		private Function isEntityAttachedToAnyPed;
		private Function isEntityAttachedToAnyVehicle;
		private Function isEntityAttachedToEntity;
		private Function isEntityDead;
		private Function isEntityInAir;
		private Function isEntityInAngledArea;
		private Function isEntityInArea;
		private Function isEntityInZone;
		private Function isEntityInWater;
		private Function getEntitySubmergedLevel;
		private Function __0x694E00132F2823ED;
		private Function isEntityOnScreen;
		private Function isEntityPlayingAnim;
		private Function isEntityStatic;
		private Function isEntityTouchingEntity;
		private Function isEntityTouchingModel;
		private Function isEntityUpright;
		private Function isEntityUpsidedown;
		private Function isEntityVisible;
		private Function isEntityVisibleToScript;
		private Function isEntityOccluded;
		private Function wouldEntityBeOccluded;
		private Function isEntityWaitingForWorldCollision;
		private Function applyForceToEntityCenterOfMass;
		private Function applyForceToEntity;
		private Function attachEntityToEntity;
		private Function attachEntityBoneToEntityBone;
		private Function attachEntityBoneToEntityBonePhysically;
		private Function attachEntityToEntityPhysically;
		private Function processEntityAttachments;
		private Function getEntityBoneIndexByName;
		private Function clearEntityLastDamageEntity;
		private Function deleteEntity;
		private Function detachEntity;
		private Function freezeEntityPosition;
		private Function setEntitySomething;
		private Function playEntityAnim;
		private Function playSynchronizedEntityAnim;
		private Function playSynchronizedMapEntityAnim;
		private Function stopSynchronizedMapEntityAnim;
		private Function stopEntityAnim;
		private Function stopSynchronizedEntityAnim;
		private Function hasAnimEventFired;
		private Function findAnimEventPhase;
		private Function setEntityAnimCurrentTime;
		private Function setEntityAnimSpeed;
		private Function setEntityAsMissionEntity;
		private Function setEntityAsNoLongerNeeded;
		private Function setPedAsNoLongerNeeded;
		private Function setVehicleAsNoLongerNeeded;
		private Function setObjectAsNoLongerNeeded;
		private Function setEntityCanBeDamaged;
		private Function getEntityCanBeDamaged;
		private Function setEntityCanBeDamagedByRelationshipGroup;
		private Function __0x352E2B5CF420BF3B;
		private Function setEntityCanBeTargetedWithoutLos;
		private Function setEntityCollision;
		private Function getEntityCollisionDisabled;
		private Function setEntityCompletelyDisableCollision;
		private Function setEntityCoords;
		private Function setEntityCoords2;
		private Function setEntityCoordsNoOffset;
		private Function setEntityDynamic;
		private Function setEntityHeading;
		private Function setEntityHealth;
		private Function setEntityInvincible;
		private Function setEntityIsTargetPriority;
		private Function setEntityLights;
		private Function setEntityLoadCollisionFlag;
		private Function hasCollisionLoadedAroundEntity;
		private Function setEntityMaxSpeed;
		private Function setEntityOnlyDamagedByPlayer;
		private Function setEntityOnlyDamagedByRelationshipGroup;
		private Function setEntityProofs;
		private Function getEntityProofs;
		private Function setEntityQuaternion;
		private Function setEntityRecordsCollisions;
		private Function setEntityRotation;
		private Function setEntityVisible;
		private Function __0xC34BC448DA29F5E9;
		private Function __0xE66377CDDADA4810;
		private Function setEntityVelocity;
		private Function setEntityHasGravity;
		private Function setEntityLodDist;
		private Function getEntityLodDist;
		private Function setEntityAlpha;
		private Function getEntityAlpha;
		private Function resetEntityAlpha;
		private Function __0x490861B88F4FD846;
		private Function __0xCEA7C8E1B48FF68C;
		private Function __0x5C3B791D580E0BC2;
		private Function setEntityAlwaysPrerender;
		private Function setEntityRenderScorched;
		private Function setEntityTrafficlightOverride;
		private Function __0x78E8E3A640178255;
		private Function createModelSwap;
		private Function removeModelSwap;
		private Function createModelHide;
		private Function createModelHideExcludingScriptObjects;
		private Function removeModelHide;
		private Function createForcedObject;
		private Function removeForcedObject;
		private Function setEntityNoCollisionEntity;
		private Function setEntityMotionBlur;
		private Function setCanAutoVaultOnEntity;
		private Function setCanClimbOnEntity;
		private Function __0xDC6F8601FAF2E893;
		private Function __0x2C2E3DC128F44309;
		private Function __0x1A092BB0C3808B96;
		private Function __0xCE6294A232D03786;
		private Function __0x46F8696933A63C9B;
		private Function __0xBD8D32550E5CEBFE;
		private Function __0xB328DCC3A3AA401B;
		private Function enableEntityUnk;
		private Function __0xB17BC6453F6CF5AC;
		private Function __0x68B562E124CC0AEF;
		private Function __0x36F32DE87082343E;
		private Function getEntityPickup;
		private Function __0xD7B80E7C3BEFC396;
		private Function setDecisionMaker;
		private Function clearDecisionMakerEventResponse;
		private Function blockDecisionMakerEvent;
		private Function unblockDecisionMakerEvent;
		private Function addShockingEventAtPosition;
		private Function addShockingEventForEntity;
		private Function isShockingEventInSphere;
		private Function removeShockingEvent;
		private Function removeAllShockingEvents;
		private Function removeShockingEventSpawnBlockingAreas;
		private Function suppressShockingEventsNextFrame;
		private Function suppressShockingEventTypeNextFrame;
		private Function suppressAgitationEventsNextFrame;
		private Function getNumDecorations;
		private Function getTattooCollectionData;
		private Function initShopPedComponent;
		private Function initShopPedProp;
		private Function __0x50F457823CE6EB5F;
		private Function getNumPropsFromOutfit;
		private Function getShopPedQueryComponent;
		private Function getShopPedComponent;
		private Function getShopPedQueryProp;
		private Function getShopPedProp;
		private Function getHashNameForComponent;
		private Function getHashNameForProp;
		private Function getItemVariantsCount;
		private Function getShopPedApparelVariantPropCount;
		private Function getVariantComponent;
		private Function getVariantProp;
		private Function getShopPedApparelForcedComponentCount;
		private Function getShopPedApparelForcedPropCount;
		private Function getForcedComponent;
		private Function getForcedProp;
		private Function isTagRestricted;
		private Function __0xF3FBE2D50A6A8C28;
		private Function getShopPedQueryOutfit;
		private Function getShopPedOutfit;
		private Function getShopPedOutfitLocate;
		private Function getShopPedOutfitPropVariant;
		private Function getShopPedOutfitComponentVariant;
		private Function getNumDlcVehicles;
		private Function getDlcVehicleModel;
		private Function getDlcVehicleData;
		private Function getDlcVehicleFlags;
		private Function getNumDlcWeapons;
		private Function getDlcWeaponData;
		private Function getNumDlcWeaponComponents;
		private Function getDlcWeaponComponentData;
		private Function isContentItemLocked;
		private Function isDlcVehicleMod;
		private Function getDlcVehicleModLockHash;
		private Function loadContentChangeSetGroup;
		private Function unloadContentChangeSetGroup;
		private Function startScriptFire;
		private Function removeScriptFire;
		private Function startEntityFire;
		private Function stopEntityFire;
		private Function isEntityOnFire;
		private Function getNumberOfFiresInRange;
		private Function setFireSpreadRate;
		private Function stopFireInRange;
		private Function getClosestFirePos;
		private Function addExplosion;
		private Function addOwnedExplosion;
		private Function addExplosionWithUserVfx;
		private Function isExplosionInArea;
		private Function isExplosionActiveInArea;
		private Function isExplosionInSphere;
		private Function getEntityInsideExplosionSphere;
		private Function isExplosionInAngledArea;
		private Function getEntityInsideExplosionArea;
		private Function beginTextCommandBusyspinnerOn;
		private Function endTextCommandBusyspinnerOn;
		private Function busyspinnerOff;
		private Function preloadBusyspinner;
		private Function busyspinnerIsOn;
		private Function busyspinnerIsDisplaying;
		private Function __0x9245E81072704B8A;
		private Function setMouseCursorActiveThisFrame;
		private Function setMouseCursorSprite;
		private Function __0x98215325A695E78A;
		private Function __0x3D9ACB1EB139E702;
		private Function __0x632B2940C67F4EA9;
		private Function thefeedOnlyShowTooltips;
		private Function thefeedSetScriptedMenuHeight;
		private Function thefeedDisable;
		private Function thefeedHideThisFrame;
		private Function __0x15CFA549788D35EF;
		private Function thefeedFlushQueue;
		private Function thefeedRemoveItem;
		private Function thefeedForceRenderOn;
		private Function thefeedForceRenderOff;
		private Function thefeedPause;
		private Function thefeedResume;
		private Function thefeedIsPaused;
		private Function thefeedSpsExtendWidescreenOn;
		private Function thefeedSpsExtendWidescreenOff;
		private Function thefeedGetFirstVisibleDeleteRemaining;
		private Function thefeedCommentTeleportPoolOn;
		private Function thefeedCommentTeleportPoolOff;
		private Function thefeedSetNextPostBackgroundColor;
		private Function thefeedSetAnimpostfxColor;
		private Function thefeedSetAnimpostfxCount;
		private Function thefeedSetAnimpostfxSound;
		private Function thefeedResetAllParameters;
		private Function thefeedFreezeNextPost;
		private Function thefeedClearFrozenPost;
		private Function thefeedSetFlushAnimpostfx;
		private Function thefeedAddTxdRef;
		private Function beginTextCommandThefeedPost;
		private Function endTextCommandThefeedPostStats;
		private Function endTextCommandThefeedPostMessagetext;
		private Function endTextCommandThefeedPostMessagetextGxtEntry;
		private Function endTextCommandThefeedPostMessagetextTu;
		private Function endTextCommandThefeedPostMessagetextWithCrewTag;
		private Function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon;
		private Function endTextCommandThefeedPostTicker;
		private Function endTextCommandThefeedPostTickerForced;
		private Function endTextCommandThefeedPostTickerWithTokens;
		private Function endTextCommandThefeedPostAward;
		private Function endTextCommandThefeedPostCrewtag;
		private Function endTextCommandThefeedPostCrewtagWithGameName;
		private Function endTextCommandThefeedPostUnlock;
		private Function endTextCommandThefeedPostUnlockTu;
		private Function endTextCommandThefeedPostUnlockTuWithColor;
		private Function endTextCommandThefeedPostMpticker;
		private Function endTextCommandThefeedPostCrewRankup;
		private Function endTextCommandThefeedPostVersusTu;
		private Function endTextCommandThefeedPostReplayIcon;
		private Function endTextCommandThefeedPostReplayInput;
		private Function beginTextCommandPrint;
		private Function endTextCommandPrint;
		private Function beginTextCommandIsMessageDisplayed;
		private Function endTextCommandIsMessageDisplayed;
		private Function beginTextCommandDisplayText;
		private Function endTextCommandDisplayText;
		private Function beginTextCommandGetWidth;
		private Function endTextCommandGetWidth;
		private Function beginTextCommandLineCount;
		private Function endTextCommandLineCount;
		private Function beginTextCommandDisplayHelp;
		private Function endTextCommandDisplayHelp;
		private Function beginTextCommandIsThisHelpMessageBeingDisplayed;
		private Function endTextCommandIsThisHelpMessageBeingDisplayed;
		private Function beginTextCommandSetBlipName;
		private Function endTextCommandSetBlipName;
		private Function beginTextCommandObjective;
		private Function endTextCommandObjective;
		private Function beginTextCommandClearPrint;
		private Function endTextCommandClearPrint;
		private Function beginTextCommandOverrideButtonText;
		private Function endTextCommandOverrideButtonText;
		private Function addTextComponentInteger;
		private Function addTextComponentFloat;
		private Function addTextComponentSubstringTextLabel;
		private Function addTextComponentSubstringTextLabelHashKey;
		private Function addTextComponentSubstringBlipName;
		private Function addTextComponentSubstringPlayerName;
		private Function addTextComponentSubstringTime;
		private Function addTextComponentFormattedInteger;
		private Function addTextComponentSubstringPhoneNumber;
		private Function addTextComponentSubstringWebsite;
		private Function addTextComponentSubstringUnk;
		private Function setColourOfNextTextComponent;
		private Function getTextSubstring;
		private Function getTextSubstringSafe;
		private Function getTextSubstringSlice;
		private Function getLabelText;
		private Function clearPrints;
		private Function clearBrief;
		private Function clearAllHelpMessages;
		private Function clearThisPrint;
		private Function clearSmallPrints;
		private Function doesTextBlockExist;
		private Function requestAdditionalText;
		private Function requestAdditionalTextForDlc;
		private Function hasAdditionalTextLoaded;
		private Function clearAdditionalText;
		private Function isStreamingAdditionalText;
		private Function hasThisAdditionalTextLoaded;
		private Function isMessageBeingDisplayed;
		private Function doesTextLabelExist;
		private Function __0x98C3CF913D895111;
		private Function getLengthOfStringWithThisTextLabel;
		private Function getLengthOfLiteralString;
		private Function getLengthOfLiteralStringInBytes;
		private Function getStreetNameFromHashKey;
		private Function isHudPreferenceSwitchedOn;
		private Function isRadarPreferenceSwitchedOn;
		private Function isSubtitlePreferenceSwitchedOn;
		private Function displayHud;
		private Function __0x7669F9E39DC17063;
		private Function displayHudWhenPausedThisFrame;
		private Function displayRadar;
		private Function __0xCD74233600C4EA6B;
		private Function __0xC2D2AD9EAAE265B8;
		private Function isHudHidden;
		private Function isRadarHidden;
		private Function isMinimapRendering;
		private Function __0x0C698D8F099174C7;
		private Function __0xE4C3B169876D33D7;
		private Function __0xEB81A3DADD503187;
		private Function setBlipRoute;
		private Function clearAllBlipRoutes;
		private Function setBlipRouteColour;
		private Function __0x2790F4B17D098E26;
		private Function __0x6CDD58146A436083;
		private Function __0xD1942374085C8469;
		private Function addNextMessageToPreviousBriefs;
		private Function __0x57D760D55F54E071;
		private Function setRadarZoomPrecise;
		private Function setRadarZoom;
		private Function setRadarZoomToBlip;
		private Function setRadarZoomToDistance;
		private Function __0xD2049635DEB9C375;
		private Function getHudColour;
		private Function setScriptVariableHudColour;
		private Function setScriptVariable2HudColour;
		private Function replaceHudColour;
		private Function replaceHudColourWithRgba;
		private Function setAbilityBarVisibilityInMultiplayer;
		private Function flashAbilityBar;
		private Function setAbilityBarValue;
		private Function flashWantedDisplay;
		private Function __0xBA8D65C1C65702E5;
		private Function getTextScaleHeight;
		private Function setTextScale;
		private Function setTextColour;
		private Function setTextCentre;
		private Function setTextRightJustify;
		private Function setTextJustification;
		private Function setTextWrap;
		private Function setTextLeading;
		private Function setTextProportional;
		private Function setTextFont;
		private Function setTextDropShadow;
		private Function setTextDropshadow;
		private Function setTextOutline;
		private Function setTextEdge;
		private Function setTextRenderId;
		private Function getDefaultScriptRendertargetRenderId;
		private Function registerNamedRendertarget;
		private Function isNamedRendertargetRegistered;
		private Function releaseNamedRendertarget;
		private Function linkNamedRendertarget;
		private Function getNamedRendertargetRenderId;
		private Function isNamedRendertargetLinked;
		private Function clearHelp;
		private Function isHelpMessageOnScreen;
		private Function __0x214CD562A939246A;
		private Function isHelpMessageBeingDisplayed;
		private Function isHelpMessageFadingOut;
		private Function setHelpMessageTextStyle;
		private Function getLevelBlipSprite;
		private Function getWaypointBlipSprite;
		private Function getNumberOfActiveBlips;
		private Function getNextBlipInfoId;
		private Function getFirstBlipInfoId;
		private Function __0xD484BF71050CA1EE;
		private Function getBlipInfoIdCoord;
		private Function getBlipInfoIdDisplay;
		private Function getBlipInfoIdType;
		private Function getBlipInfoIdEntityIndex;
		private Function getBlipInfoIdPickupIndex;
		private Function getBlipFromEntity;
		private Function addBlipForRadius;
		private Function addBlipForArea;
		private Function addBlipForEntity;
		private Function addBlipForPickup;
		private Function addBlipForCoord;
		private Function triggerSonarBlip;
		private Function allowSonarBlips;
		private Function setBlipCoords;
		private Function getBlipCoords;
		private Function setBlipSprite;
		private Function getBlipSprite;
		private Function __0x9FCB3CBFB3EAD69A;
		private Function __0xB7B873520C84C118;
		private Function setBlipNameFromTextFile;
		private Function setBlipNameToPlayerName;
		private Function setBlipAlpha;
		private Function getBlipAlpha;
		private Function setBlipFade;
		private Function __0x2C173AE2BDB9385E;
		private Function setBlipRotation;
		private Function setBlipSquaredRotation;
		private Function setBlipFlashTimer;
		private Function setBlipFlashInterval;
		private Function setBlipColour;
		private Function setBlipSecondaryColour;
		private Function getBlipColour;
		private Function getBlipHudColour;
		private Function isBlipShortRange;
		private Function isBlipOnMinimap;
		private Function doesBlipHaveGpsRoute;
		private Function setBlipHiddenOnLegend;
		private Function setBlipHighDetail;
		private Function setBlipAsMissionCreatorBlip;
		private Function isMissionCreatorBlip;
		private Function getNewSelectedMissionCreatorBlip;
		private Function isHoveringOverMissionCreatorBlip;
		private Function __0xF1A6C18B35BCADE6;
		private Function __0x2916A928514C9827;
		private Function __0xB552929B85FC27EC;
		private Function setBlipFlashes;
		private Function setBlipFlashesAlternate;
		private Function isBlipFlashing;
		private Function setBlipAsShortRange;
		private Function setBlipScale;
		private Function __0xCD6524439909C979;
		private Function setBlipPriority;
		private Function setBlipDisplay;
		private Function setBlipCategory;
		private Function removeBlip;
		private Function setBlipAsFriendly;
		private Function pulseBlip;
		private Function showNumberOnBlip;
		private Function hideNumberOnBlip;
		private Function showHeightOnBlip;
		private Function showTickOnBlip;
		private Function showHeadingIndicatorOnBlip;
		private Function showOutlineIndicatorOnBlip;
		private Function showFriendIndicatorOnBlip;
		private Function showCrewIndicatorOnBlip;
		private Function setBlipDisplayIndicatorOnBlip;
		private Function __0x4B5B620C9B59ED34;
		private Function __0x2C9F302398E13141;
		private Function setBlipShrink;
		private Function setRadiusBlipEdge;
		private Function doesBlipExist;
		private Function setWaypointOff;
		private Function deleteWaypoint;
		private Function refreshWaypoint;
		private Function isWaypointActive;
		private Function setNewWaypoint;
		private Function setBlipBright;
		private Function setBlipShowCone;
		private Function __0xC594B315EDF2D4AF;
		private Function __0xF83D0FEBE75E62C9;
		private Function __0x35A3CD97B2C0A6D2;
		private Function __0x8410C5E0CD847B9D;
		private Function setMinimapComponent;
		private Function showSigninUi;
		private Function getMainPlayerBlipId;
		private Function __0x41350B4FC28E3941;
		private Function hideLoadingOnFadeThisFrame;
		private Function setRadarAsInteriorThisFrame;
		private Function __0x504DFE62A1692296;
		private Function setRadarAsExteriorThisFrame;
		private Function setPlayerBlipPositionThisFrame;
		private Function __0xA17784FCA9548D15;
		private Function isMinimapInInterior;
		private Function hideMinimapExteriorMapThisFrame;
		private Function hideMinimapInteriorMapThisFrame;
		private Function dontTiltMinimapThisFrame;
		private Function __0x55F5A5F07134DE60;
		private Function setWidescreenFormat;
		private Function displayAreaName;
		private Function displayCash;
		private Function __0x170F541E1CADD1DE;
		private Function setPlayerCashChange;
		private Function displayAmmoThisFrame;
		private Function displaySniperScopeThisFrame;
		private Function hideHudAndRadarThisFrame;
		private Function __0xE67C6DFD386EA5E7;
		private Function setMultiplayerWalletCash;
		private Function removeMultiplayerWalletCash;
		private Function setMultiplayerBankCash;
		private Function removeMultiplayerBankCash;
		private Function setMultiplayerHudCash;
		private Function removeMultiplayerHudCash;
		private Function hideHelpTextThisFrame;
		private Function __0x801879A9B4F4B2FB;
		private Function displayHelpTextThisFrame;
		private Function hudForceWeaponWheel;
		private Function __0x488043841BBE156F;
		private Function blockWeaponWheelThisFrame;
		private Function hudWeaponWheelGetSelectedHash;
		private Function hudWeaponWheelSetSlotHash;
		private Function hudWeaponWheelGetSlotHash;
		private Function hudWeaponWheelIgnoreControlInput;
		private Function setGpsFlags;
		private Function clearGpsFlags;
		private Function setRaceTrackRender;
		private Function clearGpsRaceTrack;
		private Function startGpsCustomRoute;
		private Function addPointToGpsCustomRoute;
		private Function setGpsCustomRouteRender;
		private Function clearGpsCustomRoute;
		private Function startGpsMultiRoute;
		private Function addPointToGpsMultiRoute;
		private Function setGpsMultiRouteRender;
		private Function clearGpsMultiRoute;
		private Function clearGpsPlayerWaypoint;
		private Function setGpsFlashes;
		private Function __0x7B21E0BB01E8224A;
		private Function flashMinimapDisplay;
		private Function flashMinimapDisplayWithColor;
		private Function toggleStealthRadar;
		private Function setMinimapInSpectatorMode;
		private Function setMissionName;
		private Function setMissionName2;
		private Function __0x817B86108EB94E51;
		private Function setMinimapBlockWaypoint;
		private Function setMinimapInPrologue;
		private Function setMinimapHideFow;
		private Function getMinimapRevealPercentage;
		private Function getMinimapAreaIsRevealed;
		private Function __0x62E849B7EB28E770;
		private Function __0x0923DBF87DFF735E;
		private Function setMinimapGolfCourse;
		private Function setMinimapGolfCourseOff;
		private Function lockMinimapAngle;
		private Function unlockMinimapAngle;
		private Function lockMinimapPosition;
		private Function unlockMinimapPosition;
		private Function setMinimapAltitudeIndicatorLevel;
		private Function setHealthHudDisplayValues;
		private Function setMaxHealthHudDisplay;
		private Function setMaxArmourHudDisplay;
		private Function setBigmapActive;
		private Function isHudComponentActive;
		private Function isScriptedHudComponentActive;
		private Function hideScriptedHudComponentThisFrame;
		private Function showScriptedHudComponentThisFrame;
		private Function isScriptedHudComponentHiddenThisFrame;
		private Function hideHudComponentThisFrame;
		private Function showHudComponentThisFrame;
		private Function hideAreaAndVehicleNameThisFrame;
		private Function resetReticuleValues;
		private Function resetHudComponentValues;
		private Function setHudComponentPosition;
		private Function getHudComponentPosition;
		private Function clearReminderMessage;
		private Function getScreenCoordFromWorldCoord2;
		private Function openReportugcMenu;
		private Function forceCloseReportugcMenu;
		private Function isReportugcMenuOpen;
		private Function isFloatingHelpTextOnScreen;
		private Function setFloatingHelpTextScreenPosition;
		private Function setFloatingHelpTextWorldPosition;
		private Function setFloatingHelpTextToEntity;
		private Function setFloatingHelpTextStyle;
		private Function clearFloatingHelp;
		private Function createMpGamerTagWithCrewColor;
		private Function isMpGamerTagMovieActive;
		private Function createFakeMpGamerTag;
		private Function removeMpGamerTag;
		private Function isMpGamerTagActive;
		private Function isMpGamerTagFree;
		private Function setMpGamerTagVisibility;
		private Function __0xEE76FF7E6A0166B0;
		private Function setMpGamerTagIcons;
		private Function setMpGamerHealthBarDisplay;
		private Function setMpGamerHealthBarMax;
		private Function setMpGamerTagColour;
		private Function setMpGamerTagHealthBarColour;
		private Function setMpGamerTagAlpha;
		private Function setMpGamerTagWantedLevel;
		private Function setMpGamerTagUnk;
		private Function setMpGamerTagName;
		private Function isValidMpGamerTagMovie;
		private Function setMpGamerTagBigText;
		private Function getCurrentWebpageId;
		private Function getCurrentWebsiteId;
		private Function __0xE3B05614DCE1D014;
		private Function __0xB99C4E4D9499DF29;
		private Function isWarningMessageActive2;
		private Function setWarningMessage;
		private Function setWarningMessageWithHeader;
		private Function setWarningMessageWithHeaderAndSubstringFlags;
		private Function setWarningMessageWithHeaderUnk;
		private Function setWarningMessage4;
		private Function getWarningMessageTitleHash;
		private Function setWarningMessageListRow;
		private Function __0xDAF87174BE7454FF;
		private Function removeWarningMessageListItems;
		private Function isWarningMessageActive;
		private Function clearDynamicPauseMenuErrorMessage;
		private Function raceGalleryFullscreen;
		private Function raceGalleryNextBlipSprite;
		private Function raceGalleryAddBlip;
		private Function clearRaceGalleryBlips;
		private Function forceSonarBlipsThisFrame;
		private Function __0x3F0CF9CB7E589B88;
		private Function __0x82CEDC33687E1F50;
		private Function __0x211C4EF450086857;
		private Function __0xBF4F34A85CA2970C;
		private Function activateFrontendMenu;
		private Function restartFrontendMenu;
		private Function getCurrentFrontendMenuVersion;
		private Function setPauseMenuActive;
		private Function disableFrontendThisFrame;
		private Function suppressFrontendRenderingThisFrame;
		private Function allowPauseMenuWhenDeadThisFrame;
		private Function setFrontendActive;
		private Function isPauseMenuActive;
		private Function __0x2F057596F2BD0061;
		private Function getPauseMenuState;
		private Function __0x5BFF36D6ED83E0AE;
		private Function isPauseMenuRestarting;
		private Function logDebugInfo;
		private Function __0x77F16B447824DA6C;
		private Function __0xCDCA26E80FAECB8F;
		private Function __0x2DE6C5E2E996F178;
		private Function pauseMenuActivateContext;
		private Function pauseMenuDeactivateContext;
		private Function pauseMenuIsContextActive;
		private Function __0x2A25ADC48F87841F;
		private Function __0xDE03620F8703A9DF;
		private Function __0x359AF31A4B52F5ED;
		private Function __0x13C4B962653A5280;
		private Function __0xC8E1071177A23BE5;
		private Function __0x4895BDEA16E7C080;
		private Function __0xC78E239AC5B2DDB9;
		private Function __0xF06EBB91A81E09E3;
		private Function isFrontendReadyForControl;
		private Function __0xEC9264727EEC0F28;
		private Function __0x14621BB1DF14E2B2;
		private Function __0x66E7CB63C97B7D20;
		private Function __0x593FEAE1F73392D4;
		private Function __0x4E3CD0EF8A489541;
		private Function __0xF284AC67940C6812;
		private Function __0x2E22FEFA0100275E;
		private Function __0x0CF54F20DE43879C;
		private Function __0x36C1451A88A09630;
		private Function __0x7E17BE53E1AAABAF;
		private Function __0xA238192F33110615;
		private Function __0xEF4CED81CEBEDC6D;
		private Function __0xCA6B2F7CE32AB653;
		private Function __0x90A6526CF0381030;
		private Function __0x24A49BEAF468DC90;
		private Function __0x5FBD7095FE7AE57F;
		private Function __0x8F08017F9D7C47BD;
		private Function __0x052991E59076E4E4;
		private Function clearPedInPauseMenu;
		private Function givePedToPauseMenu;
		private Function setPauseMenuPedLighting;
		private Function setPauseMenuPedSleepState;
		private Function openOnlinePoliciesMenu;
		private Function __0xF13FE2A80C05C561;
		private Function isOnlinePoliciesMenuActive;
		private Function openSocialClubMenu;
		private Function closeSocialClubMenu;
		private Function setSocialClubTour;
		private Function isSocialClubActive;
		private Function __0x1185A8087587322C;
		private Function forceCloseTextInputBox;
		private Function __0x577599CCED639CA2;
		private Function overrideMultiplayerChatPrefix;
		private Function isMultiplayerChatActive;
		private Function closeMultiplayerChat;
		private Function __0x7C226D5346D4D10A;
		private Function overrideMultiplayerChatColour;
		private Function setTextChatUnk;
		private Function flagPlayerContextInTournament;
		private Function setPedHasAiBlip;
		private Function setPedHasAiBlipWithColor;
		private Function doesPedHaveAiBlip;
		private Function setPedAiBlipGangId;
		private Function setPedAiBlipHasCone;
		private Function setPedAiBlipForcedOn;
		private Function setPedAiBlipNoticeRange;
		private Function setPedAiBlipSprite;
		private Function getAiBlip2;
		private Function getAiBlip;
		private Function hasDirectorModeBeenTriggered;
		private Function setDirectorModeClearTriggeredFlag;
		private Function setPlayerIsInDirectorMode;
		private Function __0x04655F9D075D0AE5;
		private Function getInteriorHeading;
		private Function getInteriorInfo;
		private Function getInteriorGroupId;
		private Function getOffsetFromInteriorInWorldCoords;
		private Function isInteriorScene;
		private Function isValidInterior;
		private Function clearRoomForEntity;
		private Function forceRoomForEntity;
		private Function getRoomKeyFromEntity;
		private Function getKeyForEntityInRoom;
		private Function getInteriorFromEntity;
		private Function __0x82EBB79E258FA2B7;
		private Function __0x38C1CB1CB119A016;
		private Function forceRoomForGameViewport;
		private Function __0xAF348AFCB575A441;
		private Function __0x405DC2AEF6AF95B9;
		private Function getRoomKeyForGameViewport;
		private Function clearRoomForGameViewport;
		private Function __0xE7D267EC6CA966C3;
		private Function getInteriorAtCoords;
		private Function addPickupToInteriorRoomByName;
		private Function pinInteriorInMemory;
		private Function unpinInterior;
		private Function isInteriorReady;
		private Function __0x4C2330E61D3DEB56;
		private Function getInteriorAtCoordsWithType;
		private Function getInteriorAtCoordsWithTypehash;
		private Function __0x483ACA1176CA93F1;
		private Function areCoordsCollidingWithExterior;
		private Function getInteriorFromCollision;
		private Function __0x7ECDF98587E92DEC;
		private Function activateInteriorEntitySet;
		private Function deactivateInteriorEntitySet;
		private Function isInteriorEntitySetActive;
		private Function setInteriorEntitySetColor;
		private Function refreshInterior;
		private Function enableExteriorCullModelThisFrame;
		private Function enableScriptCullModelThisFrame;
		private Function disableInterior;
		private Function isInteriorDisabled;
		private Function capInterior;
		private Function isInteriorCapped;
		private Function __0x9E6542F0CE8E70A3;
		private Function __0x7241CCB7D020DB69;
		private Function createItemset;
		private Function destroyItemset;
		private Function isItemsetValid;
		private Function addToItemset;
		private Function removeFromItemset;
		private Function getItemsetSize;
		private Function getIndexedItemInItemset;
		private Function isInItemset;
		private Function cleanItemset;
		private Function __0xF2CA003F167E21D2;
		private Function loadingscreenGetLoadFreemode;
		private Function loadingscreenSetLoadFreemode;
		private Function loadingscreenGetLoadFreemodeWithEventName;
		private Function loadingscreenSetLoadFreemodeWithEventName;
		private Function loadingscreenIsLoadingFreemode;
		private Function loadingscreenSetIsLoadingFreemode;
		private Function __0xFA1E0E893D915215;
		private Function localizationGetSystemLanguage;
		private Function getCurrentLanguage;
		private Function localizationGetUserLanguage;
		private Function getAllocatedStackSize;
		private Function getNumberOfFreeStacksOfThisSize;
		private Function setRandomSeed;
		private Function setTimeScale;
		private Function setMissionFlag;
		private Function getMissionFlag;
		private Function setRandomEventFlag;
		private Function getRandomEventFlag;
		private Function getGlobalCharBuffer;
		private Function __0x4DCDF92BF64236CD;
		private Function __0x31125FD509D9043F;
		private Function __0xEBD3205A207939ED;
		private Function __0x97E7E2C04245115B;
		private Function __0xEB078CA2B5E82ADD;
		private Function __0x703CC7F60CBB2B57;
		private Function __0x8951EB9C6906D3C8;
		private Function __0xBA4B8D83BDC75551;
		private Function hasResumedFromSuspend;
		private Function __0x65D2EBB47E1CEC21;
		private Function __0x6F2135B6129620C1;
		private Function __0x8D74E26F54B4E5C3;
		private Function getBaseElementMetadata;
		private Function getPrevWeatherTypeHashName;
		private Function getNextWeatherTypeHashName;
		private Function isPrevWeatherType;
		private Function isNextWeatherType;
		private Function setWeatherTypePersist;
		private Function setWeatherTypeNowPersist;
		private Function setWeatherTypeNow;
		private Function setWeatherTypeOvertimePersist;
		private Function setRandomWeatherType;
		private Function clearWeatherTypePersist;
		private Function __0x0CF97F497FE7D048;
		private Function getWeatherTypeTransition;
		private Function setWeatherTypeTransition;
		private Function setOverrideWeather;
		private Function clearOverrideWeather;
		private Function __0xB8F87EAD7533B176;
		private Function __0xC3EAD29AB273ECE8;
		private Function __0xA7A1127490312C36;
		private Function __0x31727907B2C43C55;
		private Function __0x405591EC8FD9096D;
		private Function __0xF751B16FB32ABC1D;
		private Function __0xB3E6360DDE733E82;
		private Function __0x7C9C0B1EEB1F9072;
		private Function __0x6216B116083A7CB4;
		private Function __0x9F5E6BB6B34540DA;
		private Function __0xB9854DFDE0D833D6;
		private Function __0xC54A08C85AE4D410;
		private Function __0xA8434F1DFF41D6E7;
		private Function __0xC3C221ADDDE31A11;
		private Function setWind;
		private Function setWindSpeed;
		private Function getWindSpeed;
		private Function setWindDirection;
		private Function getWindDirection;
		private Function setRainFxIntensity;
		private Function getRainLevel;
		private Function getSnowLevel;
		private Function forceLightningFlash;
		private Function __0x02DEAAC8F8EA7FE7;
		private Function preloadCloudHat;
		private Function loadCloudHat;
		private Function unloadCloudHat;
		private Function clearCloudHat;
		private Function setCloudHatOpacity;
		private Function getCloudHatOpacity;
		private Function getGameTimer;
		private Function getFrameTime;
		private Function getBenchmarkTime;
		private Function getFrameCount;
		private Function getRandomFloatInRange;
		private Function getRandomIntInRange;
		private Function getRandomIntInRange2;
		private Function getGroundZFor3dCoord;
		private Function getGroundZAndNormalFor3dCoord;
		private Function getGroundZFor3dCoord2;
		private Function asin;
		private Function acos;
		private Function tan;
		private Function atan;
		private Function atan2;
		private Function getDistanceBetweenCoords;
		private Function getAngleBetween2dVectors;
		private Function getHeadingFromVector2d;
		private Function __0x7F8F6405F4777AF6;
		private Function __0x21C235BC64831E5A;
		private Function __0xF56DFB7B61BE7276;
		private Function setBit;
		private Function clearBit;
		private Function getHashKey;
		private Function slerpNearQuaternion;
		private Function isAreaOccupied;
		private Function isPositionOccupied;
		private Function isPointObscuredByAMissionEntity;
		private Function clearArea;
		private Function clearAreaOfEverything;
		private Function clearAreaOfVehicles;
		private Function clearAngledAreaOfVehicles;
		private Function clearAreaOfObjects;
		private Function clearAreaOfPeds;
		private Function clearAreaOfCops;
		private Function clearAreaOfProjectiles;
		private Function __0x7EC6F9A478A6A512;
		private Function setSaveMenuActive;
		private Function __0x397BAA01068BAA96;
		private Function setCreditsActive;
		private Function __0xB51B9AB9EF81868C;
		private Function haveCreditsReachedEnd;
		private Function terminateAllScriptsWithThisName;
		private Function networkSetScriptIsSafeForNetworkGame;
		private Function addHospitalRestart;
		private Function disableHospitalRestart;
		private Function addPoliceRestart;
		private Function disablePoliceRestart;
		private Function setRestartCustomPosition;
		private Function clearRestartCustomPosition;
		private Function pauseDeathArrestRestart;
		private Function ignoreNextRestart;
		private Function setFadeOutAfterDeath;
		private Function setFadeOutAfterArrest;
		private Function setFadeInAfterDeathArrest;
		private Function setFadeInAfterLoad;
		private Function registerSaveHouse;
		private Function setSaveHouse;
		private Function overrideSaveHouse;
		private Function __0xA4A0065E39C9F25C;
		private Function doAutoSave;
		private Function getIsAutoSaveOff;
		private Function isAutoSaveInProgress;
		private Function __0x2107A3773771186D;
		private Function __0x06462A961E94B67C;
		private Function beginReplayStats;
		private Function addReplayStatValue;
		private Function endReplayStats;
		private Function __0xD642319C54AADEB6;
		private Function __0x5B1F2E327B6B6FE1;
		private Function getReplayStatMissionType;
		private Function getReplayStatCount;
		private Function getReplayStatAtIndex;
		private Function clearReplayStats;
		private Function __0x72DE52178C291CB5;
		private Function __0x44A0BDC559B35F6E;
		private Function __0xEB2104E905C6F2E9;
		private Function __0x2B5E102E4A42F2BF;
		private Function isMemoryCardInUse;
		private Function shootSingleBulletBetweenCoords;
		private Function shootSingleBulletBetweenCoordsIgnoreEntity;
		private Function shootSingleBulletBetweenCoordsIgnoreEntityNew;
		private Function getModelDimensions;
		private Function setFakeWantedLevel;
		private Function getFakeWantedLevel;
		private Function isBitSet;
		private Function usingMissionCreator;
		private Function allowMissionCreatorWarp;
		private Function setMinigameInProgress;
		private Function isMinigameInProgress;
		private Function isThisAMinigameScript;
		private Function isSniperInverted;
		private Function shouldUseMetricMeasurements;
		private Function getProfileSetting;
		private Function areStringsEqual;
		private Function compareStrings;
		private Function absi;
		private Function absf;
		private Function isSniperBulletInArea;
		private Function isProjectileInArea;
		private Function isProjectileTypeInArea;
		private Function isProjectileTypeInAngledArea;
		private Function isProjectileTypeInRadius;
		private Function getIsProjectileTypeInArea;
		private Function getProjectileNearPedCoords;
		private Function getProjectileNearPed;
		private Function isBulletInAngledArea;
		private Function isBulletInArea;
		private Function isBulletInBox;
		private Function hasBulletImpactedInArea;
		private Function hasBulletImpactedInBox;
		private Function isOrbisVersion;
		private Function isDurangoVersion;
		private Function isXbox360Version;
		private Function isPs3Version;
		private Function isPcVersion;
		private Function isAussieVersion;
		private Function isStringNull;
		private Function isStringNullOrEmpty;
		private Function stringToInt;
		private Function setBitsInRange;
		private Function getBitsInRange;
		private Function addStuntJump;
		private Function addStuntJumpAngled;
		private Function __0xFB80AB299D2EE1BD;
		private Function deleteStuntJump;
		private Function enableStuntJumpSet;
		private Function disableStuntJumpSet;
		private Function setStuntJumpsCanTrigger;
		private Function isStuntJumpInProgress;
		private Function isStuntJumpMessageShowing;
		private Function getNumSuccessfulStuntJumps;
		private Function getTotalSuccessfulStuntJumps;
		private Function cancelStuntJump;
		private Function setGamePaused;
		private Function setThisScriptCanBePaused;
		private Function setThisScriptCanRemoveBlipsCreatedByAnyScript;
		private Function hasButtonCombinationJustBeenEntered;
		private Function hasCheatStringJustBeenEntered;
		private Function setInstancePriorityMode;
		private Function setInstancePriorityHint;
		private Function isFrontendFading;
		private Function populateNow;
		private Function getIndexOfCurrentLevel;
		private Function setGravityLevel;
		private Function startSaveData;
		private Function stopSaveData;
		private Function __0xA09F896CE912481F;
		private Function registerIntToSave;
		private Function registerInt64ToSave;
		private Function registerEnumToSave;
		private Function registerFloatToSave;
		private Function registerBoolToSave;
		private Function registerTextLabelToSave;
		private Function registerTextLabelToSave2;
		private Function __0x48F069265A0E4BEC;
		private Function __0x8269816F6CFD40F8;
		private Function __0xFAA457EF263E8763;
		private Function startSaveStructWithSize;
		private Function stopSaveStruct;
		private Function startSaveArrayWithSize;
		private Function stopSaveArray;
		private Function copyMemory;
		private Function enableDispatchService;
		private Function blockDispatchServiceResourceCreation;
		private Function getNumDispatchedUnitsForPlayer;
		private Function createIncident;
		private Function createIncidentWithEntity;
		private Function deleteIncident;
		private Function isIncidentValid;
		private Function setIncidentRequestedUnits;
		private Function setIncidentUnk;
		private Function findSpawnPointInDirection;
		private Function addPopMultiplierArea;
		private Function doesPopMultiplierAreaExist;
		private Function removePopMultiplierArea;
		private Function isPopMultiplierAreaUnk;
		private Function addPopMultiplierSphere;
		private Function doesPopMultiplierSphereExist;
		private Function removePopMultiplierSphere;
		private Function enableTennisMode;
		private Function isTennisMode;
		private Function playTennisSwingAnim;
		private Function getTennisSwingAnimComplete;
		private Function __0x19BFED045C647C49;
		private Function __0xE95B0C7D5BA3B96B;
		private Function playTennisDiveAnim;
		private Function __0x54F157E0336A3822;
		private Function setDispatchSpawnLocation;
		private Function resetDispatchIdealSpawnDistance;
		private Function setDispatchIdealSpawnDistance;
		private Function resetDispatchTimeBetweenSpawnAttempts;
		private Function setDispatchTimeBetweenSpawnAttempts;
		private Function setDispatchTimeBetweenSpawnAttemptsMultiplier;
		private Function addDispatchSpawnBlockingAngledArea;
		private Function addDispatchSpawnBlockingArea;
		private Function removeDispatchSpawnBlockingArea;
		private Function resetDispatchSpawnBlockingAreas;
		private Function __0xD9F692D349249528;
		private Function __0xE532EC1A63231B4F;
		private Function addTacticalAnalysisPoint;
		private Function clearTacticalAnalysisPoints;
		private Function __0x2587A48BC88DFADF;
		private Function displayOnscreenKeyboardWithLongerInitialString;
		private Function displayOnscreenKeyboard;
		private Function updateOnscreenKeyboard;
		private Function getOnscreenKeyboardResult;
		private Function cancelOnscreenKeyboard;
		private Function __0x3ED1438C1F5C6612;
		private Function removeStealthKill;
		private Function __0x1EAE0A6E978894A2;
		private Function setExplosiveAmmoThisFrame;
		private Function setFireAmmoThisFrame;
		private Function setExplosiveMeleeThisFrame;
		private Function setSuperJumpThisFrame;
		private Function __0x438822C279B73B93;
		private Function __0xA1183BCFEE0F93D1;
		private Function __0x6FDDF453C0C756EC;
		private Function __0xFB00CA71DA386228;
		private Function areProfileSettingsValid;
		private Function __0xE3D969D2785FFB5E;
		private Function resetLocalplayerState;
		private Function __0x0A60017F841A54F2;
		private Function __0x1FF6BF9A63E5757F;
		private Function __0x1BB299305C3E8C13;
		private Function __0x8EF5573A1F801A5C;
		private Function startBenchmarkRecording;
		private Function stopBenchmarkRecording;
		private Function resetBenchmarkRecording;
		private Function saveBenchmarkRecording;
		private Function uiIsSingleplayerPauseMenuActive;
		private Function landingMenuIsActive;
		private Function isCommandLineBenchmarkValueSet;
		private Function getBenchmarkIterationsFromCommandLine;
		private Function getBenchmarkPassFromCommandLine;
		private Function restartGame;
		private Function forceSocialClubUpdate;
		private Function hasAsyncInstallFinished;
		private Function cleanupAsyncInstall;
		private Function isInPowerSavingMode;
		private Function getPowerSavingModeDuration;
		private Function setPlayerIsInAnimalForm;
		private Function getIsPlayerInAnimalForm;
		private Function setPlayerRockstarEditorDisabled;
		private Function __0x23227DF0B2115469;
		private Function __0xD10282B6E3751BA0;
		private Function __0x693478ACBD7F18E7;
		private Function createMobilePhone;
		private Function destroyMobilePhone;
		private Function setMobilePhoneScale;
		private Function setMobilePhoneRotation;
		private Function getMobilePhoneRotation;
		private Function setMobilePhonePosition;
		private Function getMobilePhonePosition;
		private Function scriptIsMovingMobilePhoneOffscreen;
		private Function canPhoneBeSeenOnScreen;
		private Function setMobilePhoneUnk;
		private Function cellCamMoveFinger;
		private Function cellCamSetLean;
		private Function cellCamActivate;
		private Function cellCamDisableThisFrame;
		private Function __0xA2CCBE62CD4C91A4;
		private Function __0x1B0B4AEED5B9B41C;
		private Function __0x53F4892D18EC90A4;
		private Function __0x3117D84EFA60F77B;
		private Function __0x15E69E2802C24B8D;
		private Function __0xAC2890471901861C;
		private Function __0xD6ADE981781FCA09;
		private Function __0xF1E22DC13F5EEBAD;
		private Function __0x466DA42C89865553;
		private Function cellCamIsCharVisibleNoFaceCheck;
		private Function getMobilePhoneRenderId;
		private Function networkInitializeCash;
		private Function networkDeleteCharacter;
		private Function networkManualDeleteCharacter;
		private Function networkGetIsHighEarner;
		private Function networkClearCharacterWallet;
		private Function networkGivePlayerJobshareCash;
		private Function networkReceivePlayerJobshareCash;
		private Function networkCanShareJobCash;
		private Function networkRefundCash;
		private Function networkDeductCash;
		private Function networkMoneyCanBet;
		private Function networkCanBet;
		private Function networkCanBuyLotteryTicket;
		private Function networkCasinoCanUseGamblingType;
		private Function networkCasinoCanPurchaseChipsWithPvc;
		private Function networkCasinoCanGamble;
		private Function networkCasinoCanPurchaseChipsWithPvc2;
		private Function networkCasinoPurchaseChips;
		private Function networkCasinoSellChips;
		private Function __0xCD0F5B5D932AE473;
		private Function canPayGoon;
		private Function networkEarnFromCashingOut;
		private Function networkEarnFromPickup;
		private Function networkEarnFromGangPickup;
		private Function networkEarnFromAssassinateTargetKilled;
		private Function networkEarnFromArmourTruck;
		private Function networkEarnFromCrateDrop;
		private Function networkEarnFromBetting;
		private Function networkEarnFromJob;
		private Function networkEarnFromJobX2;
		private Function networkEarnFromPremiumJob;
		private Function networkEarnFromBendJob;
		private Function networkEarnFromChallengeWin;
		private Function networkEarnFromBounty;
		private Function networkEarnFromImportExport;
		private Function networkEarnFromHoldups;
		private Function networkEarnFromProperty;
		private Function networkEarnFromAiTargetKill;
		private Function networkEarnFromNotBadsport;
		private Function networkEarnFromRockstar;
		private Function networkEarnFromVehicle;
		private Function networkEarnFromPersonalVehicle;
		private Function networkEarnFromDailyObjectives;
		private Function networkEarnFromAmbientJob;
		private Function __0xD20D79671A598594;
		private Function networkEarnFromJobBonus;
		private Function __0x9D4FDBB035229669;
		private Function __0x11B0A20C493F7E36;
		private Function __0xCDA1C62BE2777802;
		private Function __0x08B0CA7A6AB3AC32;
		private Function __0x0CB1BE0633C024A8;
		private Function networkEarnFromWarehouse;
		private Function networkEarnFromContraband;
		private Function __0x84C0116D012E8FC2;
		private Function __0x6B7E4FB50D5F3D65;
		private Function __0x31BA138F6304FB9F;
		private Function __0x55A1E095DB052FA5;
		private Function networkEarnFromBusinessProduct;
		private Function networkEarnFromVehicleExport;
		private Function networkEarnFromSmuggling;
		private Function __0xF6B170F9A02E9E87;
		private Function __0x42FCE14F50F27291;
		private Function __0xA75EAC69F59E96E7;
		private Function __0xC5156361F26E2212;
		private Function __0x0B39CF0D53F1C883;
		private Function __0x1FDA0AA679C9919B;
		private Function __0xFFFBA1B1F7C0B6F4;
		private Function networkCanSpendMoney;
		private Function networkCanSpendMoney2;
		private Function networkBuyItem;
		private Function networkSpentTaxi;
		private Function networkPayEmployeeWage;
		private Function networkPayUtilityBill;
		private Function networkPayMatchEntryFee;
		private Function networkSpentBetting;
		private Function networkSpentWager;
		private Function networkSpentInStripclub;
		private Function networkBuyHealthcare;
		private Function networkBuyAirstrike;
		private Function networkBuyBackupGang;
		private Function networkBuyHeliStrike;
		private Function networkSpentAmmoDrop;
		private Function networkBuyBounty;
		private Function networkBuyProperty;
		private Function networkBuySmokes;
		private Function networkSpentHeliPickup;
		private Function networkSpentBoatPickup;
		private Function networkSpentBullShark;
		private Function networkSpentCashDrop;
		private Function networkSpentHireMugger;
		private Function networkSpentRobbedByMugger;
		private Function networkSpentHireMercenary;
		private Function networkSpentBuyWantedlevel;
		private Function networkSpentBuyOfftheradar;
		private Function networkSpentBuyRevealPlayers;
		private Function networkSpentCarwash;
		private Function networkSpentCinema;
		private Function networkSpentTelescope;
		private Function networkSpentHoldups;
		private Function networkSpentBuyPassiveMode;
		private Function networkSpentBankInterest;
		private Function networkSpentProstitutes;
		private Function networkSpentArrestBail;
		private Function networkSpentPayVehicleInsurancePremium;
		private Function networkSpentCallPlayer;
		private Function networkSpentBounty;
		private Function networkSpentFromRockstar;
		private Function __0x9B5016A6433A68C5;
		private Function processCashGift;
		private Function networkSpentPlayerHealthcare;
		private Function networkSpentNoCops;
		private Function networkSpentRequestJob;
		private Function networkSpentRequestHeist;
		private Function networkBuyLotteryTicket;
		private Function networkBuyFairgroundRide;
		private Function __0x7C4FCCD2E4DEB394;
		private Function networkSpentJobSkip;
		private Function networkSpentBoss;
		private Function networkSpentPayGoon;
		private Function __0xDBC966A01C02BCA7;
		private Function networkSpentMoveYacht;
		private Function __0xFC4EE00A7B3BFB76;
		private Function networkBuyContraband;
		private Function networkSpentVipUtilityCharges;
		private Function __0x112209CE0290C03A;
		private Function __0xED5FD7AF10F5E262;
		private Function __0x0D30EB83668E63C5;
		private Function __0xB49ECA122467D05F;
		private Function __0xE23ADC6FCB1F29AE;
		private Function __0x0FE8E1FCD2B86B33;
		private Function __0x69EF772B192614C1;
		private Function __0x8E243837643D9583;
		private Function __0xBD0EFB25CCA8F97A;
		private Function __0xA95F667A755725DA;
		private Function networkSpentPurchaseWarehouse;
		private Function __0x4128464231E3CA0B;
		private Function __0x2FAB6614CE22E196;
		private Function __0x05F04155A226FBBF;
		private Function __0xE8B0B270B6E7C76E;
		private Function __0x5BCDE0F640C773D2;
		private Function __0x998E18CEB44487FC;
		private Function __0xFA07759E6FDDD7CF;
		private Function __0x6FD97159FE3C971A;
		private Function __0x675D19C6067CAE08;
		private Function __0xA51B086B0B2C0F7A;
		private Function __0xD7CCCBA28C4ECAF0;
		private Function __0x0035BB914316F1E3;
		private Function __0x5F456788B05FAEAC;
		private Function __0xA75CCF58A60A5FD1;
		private Function __0xB4C2EC463672474E;
		private Function __0x2AFC2D19B50797F2;
		private Function networkSpentImportExportRepair;
		private Function networkSpentPurchaseHangar;
		private Function networkSpentUpgradeHangar;
		private Function networkSpentHangarUtilityCharges;
		private Function networkSpentHangarStaffCharges;
		private Function networkSpentBuyTruck;
		private Function networkSpentUpgradeTruck;
		private Function networkSpentBuyBunker;
		private Function networkSpentUpgradeBunker;
		private Function networkEarnFromSellBunker;
		private Function networkSpentBallisticEquipment;
		private Function networkEarnFromRdrBonus;
		private Function networkEarnFromWagePayment;
		private Function networkEarnFromWagePaymentBonus;
		private Function networkSpentBuyBase;
		private Function networkSpentUpgradeBase;
		private Function networkSpentBuyTiltrotor;
		private Function networkSpentUpgradeTiltrotor;
		private Function networkSpentEmployAssassins;
		private Function networkSpentGangopsCannon;
		private Function networkSpentGangopsStartMission;
		private Function networkEarnFromSellBase;
		private Function networkEarnFromTargetRefund;
		private Function networkEarnFromGangopsWages;
		private Function networkEarnFromGangopsWagesBonus;
		private Function networkEarnFromDarChallenge;
		private Function networkEarnFromDoomsdayFinaleBonus;
		private Function networkEarnFromGangopsAwards;
		private Function networkEarnFromGangopsElite;
		private Function networkRivalDeliveryCompleted;
		private Function networkSpentGangopsStartStrand;
		private Function networkSpentGangopsTripSkip;
		private Function networkEarnFromGangopsJobsPrepParticipation;
		private Function networkEarnFromGangopsJobsSetup;
		private Function networkEarnFromGangopsJobsFinale;
		private Function __0x2A7CEC72C3443BCC;
		private Function __0xE0F82D68C7039158;
		private Function __0xB4DEAE67F35E2ACD;
		private Function networkEarnFromBbEventBonus;
		private Function __0x2A93C46AAB1EACC9;
		private Function __0x226C284C830D0CA8;
		private Function networkEarnFromHackerTruckMission;
		private Function __0xED76D195E6E3BF7F;
		private Function __0x1DC9B749E7AE282B;
		private Function __0xC6E74CF8C884C880;
		private Function __0x65482BFD0923C8A1;
		private Function networkSpentRdrhatchetBonus;
		private Function networkSpentNightclubEntryFee;
		private Function networkSpentNightclubBarDrink;
		private Function networkSpentBountyHunterMission;
		private Function networkSpentRehireDj;
		private Function networkSpentArenaJoinSpectator;
		private Function networkEarnFromArenaSkillLevelProgression;
		private Function networkEarnFromArenaCareerProgression;
		private Function networkSpentMakeItRain;
		private Function networkSpentBuyArena;
		private Function networkSpentUpgradeArena;
		private Function networkSpentArenaSpectatorBox;
		private Function networkSpentSpinTheWheelPayment;
		private Function networkEarnFromSpinTheWheelCash;
		private Function networkSpentArenaPremium;
		private Function networkEarnFromArenaWar;
		private Function networkEarnFromAssassinateTargetKilled2;
		private Function networkEarnFromBbEventCargo;
		private Function networkEarnFromRcTimeTrial;
		private Function networkEarnFromDailyObjectiveEvent;
		private Function networkSpentCasinoMembership;
		private Function networkSpentBuyCasino;
		private Function networkSpentUpgradeCasino;
		private Function networkSpentCasinoGeneric;
		private Function networkEarnFromTimeTrialWin;
		private Function networkEarnFromCollectionItem;
		private Function networkEarnFromCollectablesActionFigures;
		private Function networkEarnFromCompleteCollection;
		private Function networkEarnFromSellingVehicle;
		private Function networkEarnFromCasinoMissionReward;
		private Function networkEarnFromCasinoStoryMissionReward;
		private Function networkEarnFromCasinoMissionParticipation;
		private Function networkEarnFromCasinoAward;
		private Function networkGetVcBankBalance;
		private Function networkGetVcWalletBalance;
		private Function networkGetVcBalance;
		private Function networkGetEvcBalance;
		private Function networkGetPvcBalance;
		private Function networkGetStringWalletBalance;
		private Function networkGetStringBankBalance;
		private Function networkGetStringBankWalletBalance;
		private Function networkGetVcWalletBalanceIsNotLessThan;
		private Function networkGetVcBankBalanceIsNotLessThan;
		private Function networkGetVcBankWalletBalanceIsNotLessThan;
		private Function networkGetPvcTransferBalance;
		private Function __0x08E8EEADFD0DC4A0;
		private Function networkCanReceivePlayerCash;
		private Function networkGetRemainingVcDailyTransfers2;
		private Function withdrawVc;
		private Function depositVc;
		private Function __0xE154B48B68EF72BC;
		private Function __0x6FCF8DDEA146C45B;
		private Function netGameserverUseServerTransactions;
		private Function netGameserverCatalogItemExists;
		private Function netGameserverCatalogItemExistsHash;
		private Function netGameserverGetPrice;
		private Function netGameserverCatalogIsReady;
		private Function netGameserverIsCatalogValid;
		private Function __0x85F6C9ABA1DE2BCF;
		private Function __0x357B152EF96C30B6;
		private Function netGameserverGetCatalogState;
		private Function __0xE3E5A7C64CA2C6ED;
		private Function __0x0395CB47B022E62C;
		private Function netGameserverStartSession;
		private Function __0x72EB7BA9B69BF6AB;
		private Function __0x170910093218C8B9;
		private Function __0xC13C38E47EA5DF31;
		private Function netGameserverIsSessionValid;
		private Function __0x74A0FD0688F1EE45;
		private Function netGameserverSessionApplyReceivedData;
		private Function netGameserverIsSessionRefreshPending;
		private Function netGameserverGetBalance;
		private Function __0x613F125BA3BD2EB9;
		private Function netGameserverGetTransactionManagerData;
		private Function netGameserverBasketStart;
		private Function netGameserverBasketDelete;
		private Function netGameserverBasketEnd;
		private Function netGameserverBasketAddItem;
		private Function netGameserverBasketIsFull;
		private Function netGameserverBasketApplyServerData;
		private Function netGameserverCheckoutStart;
		private Function __0xC830417D630A50F9;
		private Function __0x79EDAC677CA62F81;
		private Function netGameserverBeginService;
		private Function netGameserverEndService;
		private Function netGameserverDeleteCharacterSlot;
		private Function netGameserverDeleteCharacterSlotGetStatus;
		private Function netGameserverDeleteSetTelemetryNonceSeed;
		private Function netGameserverTransferBankToWallet;
		private Function netGameserverTransferWalletToBank;
		private Function netGameserverTransferCashGetStatus;
		private Function netGameserverTransferCashGetStatus2;
		private Function netGameserverTransferCashSetTelemetryNonceSeed;
		private Function netGameserverSetTelemetryNonceSeed;
		private Function getOnlineVersion;
		private Function networkIsSignedIn;
		private Function networkIsSignedOnline;
		private Function __0xBD545D44CCE70597;
		private Function __0xEBCAB9E5048434F4;
		private Function __0x74FB3E29E6D10FA9;
		private Function __0x7808619F31FF22DB;
		private Function __0xA0FA4EC6A05DA44E;
		private Function networkHaveJustUploadLater;
		private Function __0x8D11E61A4ABF49CC;
		private Function networkIsCloudAvailable;
		private Function networkHasSocialClubAccount;
		private Function __0xBA9775570DB788CF;
		private Function networkIsHost;
		private Function networkGetHost;
		private Function __0x4237E822315D8BA9;
		private Function networkHaveOnlinePrivileges;
		private Function networkHasAgeRestrictedProfile;
		private Function networkHaveUserContentPrivileges;
		private Function __0xAEEF48CDF5B6CE7C;
		private Function __0x78321BEA235FD8CD;
		private Function __0x595F028698072DD9;
		private Function __0x83F28CE49FBBFFBA;
		private Function __0x07EAB372C8841D99;
		private Function __0x906CA41A4B74ECA4;
		private Function __0x023ACAB2DC9DC4A4;
		private Function __0x76BF03FADBF154F5;
		private Function networkGetAgeGroup;
		private Function __0x0CF6CC51AA18F0F8;
		private Function __0x64E5C4CC82847B73;
		private Function __0x1F7BC3539F9E0224;
		private Function networkHaveOnlinePrivilege2;
		private Function __0xA8ACB6459542A8C8;
		private Function __0x83FE8D7229593017;
		private Function __0x53C10C8BD774F2C9;
		private Function networkCanBail;
		private Function networkBail;
		private Function __0x283B6062A2C01E9B;
		private Function __0x8B4FFC790CA131EF;
		private Function networkTransitionTrack;
		private Function __0x04918A41BC9B8157;
		private Function networkCanAccessMultiplayer;
		private Function networkIsMultiplayerDisabled;
		private Function networkCanEnterMultiplayer;
		private Function networkSessionEnter;
		private Function networkSessionFriendMatchmaking;
		private Function networkSessionCrewMatchmaking;
		private Function networkSessionActivityQuickmatch;
		private Function networkSessionHost;
		private Function networkSessionHostClosed;
		private Function networkSessionHostFriendsOnly;
		private Function networkSessionIsClosedFriends;
		private Function networkSessionIsClosedCrew;
		private Function networkSessionIsSolo;
		private Function networkSessionIsPrivate;
		private Function networkSessionEnd;
		private Function networkSessionKickPlayer;
		private Function networkSessionGetKickVote;
		private Function __0x041C7F2A6C9894E6;
		private Function __0x59DF79317F85A7E0;
		private Function __0xFFE1E5B792D92B34;
		private Function networkSessionSetMatchmakingGroup;
		private Function networkSessionSetMatchmakingGroupMax;
		private Function networkSessionGetMatchmakingGroupFree;
		private Function __0xCAE55F48D3D7875C;
		private Function __0xF49ABC20D8552257;
		private Function __0x4811BBAC21C5FCD5;
		private Function __0x5539C3EBF104A53A;
		private Function __0x702BC4D605522539;
		private Function networkSessionSetMatchmakingPropertyId;
		private Function networkSessionSetMatchmakingMentalState;
		private Function __0x5ECD378EE64450AB;
		private Function __0x59D421683D31835A;
		private Function __0x1153FA02A659051C;
		private Function networkSessionHosted;
		private Function networkAddFollowers;
		private Function networkClearFollowers;
		private Function networkGetGlobalMultiplayerClock;
		private Function __0x600F8CB31C7AAB6E;
		private Function networkGetTargetingMode;
		private Function __0xE532D6811B3A4D2A;
		private Function networkFindMatchedGamers;
		private Function networkIsFindingGamers;
		private Function __0xF9B83B77929D8863;
		private Function networkGetNumFoundGamers;
		private Function networkGetFoundGamer;
		private Function networkClearFoundGamers;
		private Function networkGetGamerStatus;
		private Function __0x2CC848A861D01493;
		private Function __0x94A8394D150B013A;
		private Function __0x5AE17C6B0134B7F1;
		private Function networkGetGamerStatusResult;
		private Function networkClearGetGamerStatus;
		private Function networkSessionJoinInvite;
		private Function networkSessionCancelInvite;
		private Function networkSessionForceCancelInvite;
		private Function networkHasPendingInvite;
		private Function __0xC42DD763159F3461;
		private Function networkAcceptInvite;
		private Function networkSessionWasInvited;
		private Function networkSessionGetInviter;
		private Function __0xD313DE83394AF134;
		private Function __0xBDB6F89C729CF388;
		private Function networkSuppressInvite;
		private Function networkBlockInvites;
		private Function networkBlockInvites2;
		private Function __0xF814FEC6A19FD6E0;
		private Function networkBlockKickedPlayers;
		private Function __0x7AC752103856FB20;
		private Function networkIsOfflineInvitePending;
		private Function __0x140E6A44870A11CE;
		private Function networkSessionHostSinglePlayer;
		private Function networkSessionLeaveSinglePlayer;
		private Function networkIsGameInProgress;
		private Function networkIsSessionActive;
		private Function networkIsInSession;
		private Function networkIsSessionStarted;
		private Function networkIsSessionBusy;
		private Function networkCanSessionEnd;
		private Function networkSessionMarkVisible;
		private Function networkSessionIsVisible;
		private Function networkSessionBlockJoinRequests;
		private Function networkSessionChangeSlots;
		private Function networkSessionGetPrivateSlots;
		private Function networkSessionVoiceHost;
		private Function networkSessionVoiceLeave;
		private Function networkSessionVoiceConnectToPlayer;
		private Function networkSetKeepFocuspoint;
		private Function __0x5B8ED3DB018927B1;
		private Function networkSessionIsInVoiceSession;
		private Function __0xB5D3453C98456528;
		private Function networkSessionIsVoiceSessionBusy;
		private Function networkSendTextMessage;
		private Function networkSetActivitySpectator;
		private Function networkIsActivitySpectator;
		private Function __0x0E4F77F7B9D74D84;
		private Function networkSetActivitySpectatorMax;
		private Function networkGetActivityPlayerNum;
		private Function networkIsActivitySpectatorFromHandle;
		private Function networkHostTransition;
		private Function networkDoTransitionQuickmatch;
		private Function networkDoTransitionQuickmatchAsync;
		private Function networkDoTransitionQuickmatchWithGroup;
		private Function networkJoinGroupActivity;
		private Function __0x1888694923EF4591;
		private Function __0xB13E88E655E5A3BC;
		private Function networkIsTransitionClosedFriends;
		private Function networkIsTransitionClosedCrew;
		private Function networkIsTransitionSolo;
		private Function networkIsTransitionPrivate;
		private Function __0x617F49C2668E6155;
		private Function __0x261E97AD7BCF3D40;
		private Function __0x39917E1B4CB0F911;
		private Function __0x2CE9D95E4051AECD;
		private Function networkSetTransitionCreatorHandle;
		private Function networkClearTransitionCreatorHandle;
		private Function networkInviteGamersToTransition;
		private Function networkSetGamerInvitedToTransition;
		private Function networkLeaveTransition;
		private Function networkLaunchTransition;
		private Function __0xA2E9C1AB8A92E8CD;
		private Function networkBailTransition;
		private Function networkDoTransitionToGame;
		private Function networkDoTransitionToNewGame;
		private Function networkDoTransitionToFreemode;
		private Function networkDoTransitionToNewFreemode;
		private Function networkIsTransitionToGame;
		private Function networkGetTransitionMembers;
		private Function networkApplyTransitionParameter;
		private Function networkApplyTransitionParameterString;
		private Function networkSendTransitionGamerInstruction;
		private Function networkMarkTransitionGamerAsFullyJoined;
		private Function networkIsTransitionHost;
		private Function networkIsTransitionHostFromHandle;
		private Function networkGetTransitionHost;
		private Function networkIsInTransition;
		private Function networkIsTransitionStarted;
		private Function networkIsTransitionBusy;
		private Function networkIsTransitionMatchmaking;
		private Function __0xC571D0E77D8BBC29;
		private Function __0x1398582B7F72B3ED;
		private Function __0x1F8E00FB18239600;
		private Function __0xF6F4383B7C92F11A;
		private Function networkOpenTransitionMatchmaking;
		private Function networkCloseTransitionMatchmaking;
		private Function networkIsTransitionOpenToMatchmaking;
		private Function networkSetTransitionVisibilityLock;
		private Function networkIsTransitionVisibilityLocked;
		private Function networkSetTransitionActivityId;
		private Function networkChangeTransitionSlots;
		private Function __0x973D76AA760A6CB6;
		private Function networkHasPlayerStartedTransition;
		private Function networkAreTransitionDetailsValid;
		private Function networkJoinTransition;
		private Function networkHasInvitedGamerToTransition;
		private Function __0x3F9990BF5F22759C;
		private Function networkIsActivitySession;
		private Function __0x4A9FDE3A5A6D0437;
		private Function networkSendPresenceInvite;
		private Function networkSendPresenceTransitionInvite;
		private Function __0x1171A97A3D3981B6;
		private Function __0x742B58F723233ED9;
		private Function networkGetNumPresenceInvites;
		private Function networkAcceptPresenceInvite;
		private Function networkRemovePresenceInvite;
		private Function networkGetPresenceInviteId;
		private Function networkGetPresenceInviteInviter;
		private Function networkGetPresenceInviteHandle;
		private Function networkGetPresenceInviteSessionId;
		private Function networkGetPresenceInviteContentId;
		private Function __0xD39B3FFF8FFDD5BF;
		private Function __0x728C4CC7920CD102;
		private Function networkGetPresenceInviteFromAdmin;
		private Function __0x8806CEBFABD3CE05;
		private Function networkHasFollowInvite;
		private Function networkActionFollowInvite;
		private Function networkClearFollowInvite;
		private Function __0xEBF8284D8CADEB53;
		private Function networkRemoveTransitionInvite;
		private Function networkRemoveAllTransitionInvite;
		private Function __0xF083835B70BA9BFE;
		private Function networkInviteGamers;
		private Function networkHasInvitedGamer;
		private Function __0x71DC455F5CD1C2B1;
		private Function __0x3855FB5EB2C5E8B2;
		private Function networkGetCurrentlySelectedGamerHandleFromInviteMenu;
		private Function networkSetCurrentlySelectedGamerHandleFromInviteMenu;
		private Function networkSetInviteOnCallForInviteMenu;
		private Function networkCheckDataManagerSucceededForHandle;
		private Function __0x4AD490AE1536933B;
		private Function __0x0D77A82DC2D0DA59;
		private Function filloutPmPlayerList;
		private Function filloutPmPlayerListWithNames;
		private Function __0xE26CCFF8094D8C74;
		private Function networkSetCurrentDataManagerHandle;
		private Function networkIsInPlatformParty;
		private Function networkGetPlatformPartyUnk;
		private Function networkGetPlatformPartyMembers;
		private Function networkIsInPlatformPartyChat;
		private Function networkIsChattingInPlatformParty;
		private Function __0x2BF66D2E7414F686;
		private Function __0x14922ED3E38761F0;
		private Function __0x6CE50E47F5543D0C;
		private Function __0xFA2888E3833C8E96;
		private Function __0x25D990F8E0E3F13C;
		private Function __0xF1B84178F8674195;
		private Function networkGetRandomInt;
		private Function networkGetRandomIntRanged;
		private Function networkPlayerIsCheater;
		private Function networkPlayerGetCheaterReason;
		private Function networkPlayerIsBadsport;
		private Function triggerScriptCrcCheckOnPlayer;
		private Function __0xA12D3A5A3753CC23;
		private Function __0xF287F506767CC8A9;
		private Function remoteCheatDetected;
		private Function badSportPlayerLeftDetected;
		private Function networkApplyPedScarData;
		private Function networkSetThisScriptIsNetworkScript;
		private Function networkIsThisScriptMarked;
		private Function networkGetThisScriptIsNetworkScript;
		private Function networkGetMaxNumParticipants;
		private Function networkGetNumParticipants;
		private Function networkGetScriptStatus;
		private Function networkRegisterHostBroadcastVariables;
		private Function networkRegisterPlayerBroadcastVariables;
		private Function networkFinishBroadcastingData;
		private Function __0x5D10B3795F3FC886;
		private Function networkGetPlayerIndex;
		private Function networkGetParticipantIndex;
		private Function networkGetPlayerIndexFromPed;
		private Function networkGetNumConnectedPlayers;
		private Function networkIsPlayerConnected;
		private Function networkGetTotalNumPlayers;
		private Function networkIsParticipantActive;
		private Function networkIsPlayerActive;
		private Function networkIsPlayerAParticipant;
		private Function networkIsHostOfThisScript;
		private Function networkGetHostOfThisScript;
		private Function networkGetHostOfScript;
		private Function networkSetMissionFinished;
		private Function networkIsScriptActive;
		private Function __0x560B423D73015E77;
		private Function networkGetNumScriptParticipants;
		private Function __0x638A3A81733086DB;
		private Function networkIsPlayerAParticipantOnScript;
		private Function __0x2302C0264EA58D31;
		private Function __0x741A3D8380319A81;
		private Function participantId;
		private Function participantIdToInt;
		private Function __0x2DA41ED6E1FCD7A5;
		private Function networkGetDestroyerOfNetworkId;
		private Function __0xC434133D9BA52777;
		private Function __0x83660B734994124D;
		private Function networkGetDestroyerOfEntity;
		private Function networkGetEntityKillerOfPlayer;
		private Function networkResurrectLocalPlayer;
		private Function networkSetLocalPlayerInvincibleTime;
		private Function networkIsLocalPlayerInvincible;
		private Function networkDisableInvincibleFlashing;
		private Function networkSetLocalPlayerSyncLookAt;
		private Function __0xB07D3185E11657A5;
		private Function networkGetNetworkIdFromEntity;
		private Function networkGetEntityFromNetworkId;
		private Function networkGetEntityIsNetworked;
		private Function networkGetEntityIsLocal;
		private Function networkRegisterEntityAsNetworked;
		private Function networkUnregisterNetworkedEntity;
		private Function networkDoesNetworkIdExist;
		private Function networkDoesEntityExistWithNetworkId;
		private Function networkRequestControlOfNetworkId;
		private Function networkHasControlOfNetworkId;
		private Function __0x7242F8B741CE1086;
		private Function networkRequestControlOfEntity;
		private Function networkRequestControlOfDoor;
		private Function networkHasControlOfEntity;
		private Function networkHasControlOfPickup;
		private Function networkHasControlOfDoor;
		private Function networkIsDoorNetworked;
		private Function vehToNet;
		private Function pedToNet;
		private Function objToNet;
		private Function netToVeh;
		private Function netToPed;
		private Function netToObj;
		private Function netToEnt;
		private Function networkGetLocalHandle;
		private Function networkHandleFromUserId;
		private Function networkHandleFromMemberId;
		private Function networkHandleFromPlayer;
		private Function networkHashFromPlayerHandle;
		private Function networkHashFromGamerHandle;
		private Function networkHandleFromFriend;
		private Function networkGamertagFromHandleStart;
		private Function networkGamertagFromHandlePending;
		private Function networkGamertagFromHandleSucceeded;
		private Function networkGetGamertagFromHandle;
		private Function __0xD66C9E72B3CC4982;
		private Function __0x58CC181719256197;
		private Function networkAreHandlesTheSame;
		private Function networkIsHandleValid;
		private Function networkGetPlayerFromGamerHandle;
		private Function networkMemberIdFromGamerHandle;
		private Function networkIsGamerInMySession;
		private Function networkShowProfileUi;
		private Function networkPlayerGetName;
		private Function networkPlayerGetUserid;
		private Function networkPlayerIsRockstarDev;
		private Function networkPlayerIndexIsCheater;
		private Function networkGetEntityNetScriptId;
		private Function __0x37D5F739FD494675;
		private Function networkIsInactiveProfile;
		private Function networkGetMaxFriends;
		private Function networkGetFriendCount;
		private Function networkGetFriendName;
		private Function networkGetFriendNameFromIndex;
		private Function networkIsFriendOnline;
		private Function networkIsFriendHandleOnline;
		private Function networkIsFriendInSameTitle;
		private Function networkIsFriendInMultiplayer;
		private Function networkIsFriend;
		private Function networkIsPendingFriend;
		private Function networkIsAddingFriend;
		private Function networkAddFriend;
		private Function networkIsFriendIndexOnline;
		private Function networkSetPlayerIsPassive;
		private Function networkGetPlayerOwnsWaypoint;
		private Function networkCanSetWaypoint;
		private Function __0x4C2A9FDC22377075;
		private Function __0xB309EBEA797E001F;
		private Function __0x26F07DD83A5F7F98;
		private Function networkHasHeadset;
		private Function __0x7D395EA61622E116;
		private Function networkIsLocalTalking;
		private Function networkGamerHasHeadset;
		private Function networkIsGamerTalking;
		private Function networkCanCommunicateWithGamer2;
		private Function networkCanCommunicateWithGamer;
		private Function networkIsGamerMutedByMe;
		private Function networkAmIMutedByGamer;
		private Function networkIsGamerBlockedByMe;
		private Function networkAmIBlockedByGamer;
		private Function networkCanViewGamerUserContent;
		private Function networkHasViewGamerUserContentResult;
		private Function networkCanPlayMultiplayerWithGamer;
		private Function networkCanGamerPlayMultiplayerWithMe;
		private Function networkIsPlayerTalking;
		private Function networkPlayerHasHeadset;
		private Function networkIsPlayerMutedByMe;
		private Function networkAmIMutedByPlayer;
		private Function networkIsPlayerBlockedByMe;
		private Function networkAmIBlockedByPlayer;
		private Function networkGetPlayerLoudness;
		private Function networkSetTalkerProximity;
		private Function networkGetTalkerProximity;
		private Function networkSetVoiceActive;
		private Function __0xCFEB46DCD7D8D5EB;
		private Function networkOverrideTransitionChat;
		private Function networkSetTeamOnlyChat;
		private Function __0x265559DA40B3F327;
		private Function __0x4348BFDA56023A2F;
		private Function networkOverrideTeamRestrictions;
		private Function networkSetOverrideSpectatorMode;
		private Function __0x3C5C1E2C2FF814B1;
		private Function __0x9D7AFCBF21C51712;
		private Function networkSetNoSpectatorChat;
		private Function __0x6A5D89D7769A40D8;
		private Function networkOverrideChatRestrictions;
		private Function networkOverrideSendRestrictions;
		private Function networkOverrideSendRestrictionsAll;
		private Function networkOverrideReceiveRestrictions;
		private Function networkOverrideReceiveRestrictionsAll;
		private Function networkSetVoiceChannel;
		private Function networkClearVoiceChannel;
		private Function networkApplyVoiceProximityOverride;
		private Function networkClearVoiceProximityOverride;
		private Function __0x5E3AA4CA2B6FB0EE;
		private Function __0xCA575C391FEA25CC;
		private Function __0xADB57E5B663CCA8B;
		private Function __0x8EF52ACAECC51D9C;
		private Function networkIsTextChatActive;
		private Function shutdownAndLaunchSinglePlayerGame;
		private Function shutdownAndLoadMostRecentSave;
		private Function networkSetFriendlyFireOption;
		private Function networkSetRichPresence;
		private Function networkSetRichPresenceString;
		private Function networkGetTimeoutTime;
		private Function networkRespawnCoords;
		private Function __0xBF22E0F32968E967;
		private Function removeAllStickyBombsFromEntity;
		private Function __0x2E4C123D1C8A710E;
		private Function networkClanServiceIsValid;
		private Function networkClanPlayerIsActive;
		private Function networkClanPlayerGetDesc;
		private Function networkClanIsRockstarClan;
		private Function networkClanGetUiFormattedTag;
		private Function networkClanGetLocalMembershipsCount;
		private Function networkClanGetMembershipDesc;
		private Function networkClanDownloadMembership;
		private Function networkClanDownloadMembershipPending;
		private Function networkIsClanMembershipFinishedDownloading;
		private Function networkClanRemoteMembershipsAreInCache;
		private Function networkClanGetMembershipCount;
		private Function networkClanGetMembershipValid;
		private Function networkClanGetMembership;
		private Function networkClanJoin;
		private Function networkClanAnimation;
		private Function __0x2B51EDBEFC301339;
		private Function __0xC32EA7A2F6CA7557;
		private Function networkClanGetEmblemTxdName;
		private Function networkClanRequestEmblem;
		private Function networkClanIsEmblemReady;
		private Function networkClanReleaseEmblem;
		private Function networkGetPrimaryClanDataClear;
		private Function networkGetPrimaryClanDataCancel;
		private Function networkGetPrimaryClanDataStart;
		private Function networkGetPrimaryClanDataPending;
		private Function networkGetPrimaryClanDataSuccess;
		private Function networkGetPrimaryClanDataNew;
		private Function setNetworkIdCanMigrate;
		private Function setNetworkIdExistsOnAllMachines;
		private Function setNetworkIdSyncToPlayer;
		private Function networkSetEntityCanBlend;
		private Function __0x0379DAF89BA09AA5;
		private Function networkSetEntityInvisibleToNetwork;
		private Function setNetworkIdVisibleInCutscene;
		private Function __0x32EBD154CB6B8B99;
		private Function __0x6540EDC4F45DA089;
		private Function setNetworkCutsceneEntities;
		private Function __0x3FA36981311FA4FF;
		private Function isNetworkIdOwnedByParticipant;
		private Function setLocalPlayerVisibleInCutscene;
		private Function setLocalPlayerInvisibleLocally;
		private Function setLocalPlayerVisibleLocally;
		private Function setPlayerInvisibleLocally;
		private Function setPlayerVisibleLocally;
		private Function fadeOutLocalPlayer;
		private Function networkFadeOutEntity;
		private Function networkFadeInEntity;
		private Function networkIsPlayerFading;
		private Function networkIsEntityFading;
		private Function isPlayerInCutscene;
		private Function setEntityVisibleInCutscene;
		private Function setEntityLocallyInvisible;
		private Function setEntityLocallyVisible;
		private Function isDamageTrackerActiveOnNetworkId;
		private Function activateDamageTrackerOnNetworkId;
		private Function isDamageTrackerActiveOnPlayer;
		private Function activateDamageTrackerOnPlayer;
		private Function isSphereVisibleToAnotherMachine;
		private Function isSphereVisibleToPlayer;
		private Function reserveNetworkMissionObjects;
		private Function reserveNetworkMissionPeds;
		private Function reserveNetworkMissionVehicles;
		private Function reserveNetworkLocalObjects;
		private Function reserveNetworkLocalPeds;
		private Function reserveNetworkLocalVehicles;
		private Function canRegisterMissionObjects;
		private Function canRegisterMissionPeds;
		private Function canRegisterMissionVehicles;
		private Function canRegisterMissionPickups;
		private Function __0xE16AA70CE9BEEDC3;
		private Function canRegisterMissionEntities;
		private Function getNumReservedMissionObjects;
		private Function getNumReservedMissionPeds;
		private Function getNumReservedMissionVehicles;
		private Function getNumCreatedMissionObjects;
		private Function getNumCreatedMissionPeds;
		private Function getNumCreatedMissionVehicles;
		private Function __0xE42D626EEC94E5D9;
		private Function getMaxNumNetworkObjects;
		private Function getMaxNumNetworkPeds;
		private Function getMaxNumNetworkVehicles;
		private Function getMaxNumNetworkPickups;
		private Function __0xBA7F0B77D80A4EB7;
		private Function getNetworkTime;
		private Function getNetworkTimeAccurate;
		private Function hasNetworkTimeStarted;
		private Function getTimeOffset;
		private Function isTimeLessThan;
		private Function isTimeMoreThan;
		private Function isTimeEqualTo;
		private Function getTimeDifference;
		private Function getTimeAsString;
		private Function __0xF12E6CD06C73D69E;
		private Function getCloudTimeAsInt;
		private Function getDateAndTimeFromUnixEpoch;
		private Function networkSetInSpectatorMode;
		private Function networkSetInSpectatorModeExtended;
		private Function networkSetInFreeCamMode;
		private Function __0x5C707A667DF8B9FA;
		private Function networkIsInSpectatorMode;
		private Function networkSetInMpCutscene;
		private Function networkIsInMpCutscene;
		private Function networkIsPlayerInMpCutscene;
		private Function __0xFAC18E7356BD3210;
		private Function setNetworkVehicleRespotTimer;
		private Function setNetworkVehicleAsGhost;
		private Function __0xA2A707979FE754DC;
		private Function __0x838DA0936A24ED4D;
		private Function usePlayerColourInsteadOfTeamColour;
		private Function __0x21D04D7BC538C146;
		private Function __0x13F1FCB111B820B0;
		private Function __0xA7C511FA1C5BDA38;
		private Function __0x658500AE6D723A7E;
		private Function __0x17330EBF2F2124A8;
		private Function __0x4BA166079D658ED4;
		private Function __0xD7B6C73CAD419BCF;
		private Function __0x7EF7649B64D7FF10;
		private Function __0x77758139EC9B66C7;
		private Function networkCreateSynchronisedScene;
		private Function networkAddPedToSynchronisedScene;
		private Function __0xA5EAFE473E45C442;
		private Function networkAddEntityToSynchronisedScene;
		private Function __0x45F35C0EDC33B03B;
		private Function networkForceLocalUseOfSyncedSceneCamera;
		private Function networkAttachSynchronisedSceneToEntity;
		private Function networkStartSynchronisedScene;
		private Function networkStopSynchronisedScene;
		private Function networkConvertSynchronisedSceneToSynchronizedScene;
		private Function __0xC9B43A33D09CADA7;
		private Function __0x144DA052257AE7D8;
		private Function __0xFB1F9381E80FA13F;
		private Function networkStartRespawnSearchForPlayer;
		private Function networkStartRespawnSearchInAngledAreaForPlayer;
		private Function networkQueryRespawnResults;
		private Function networkCancelRespawnSearch;
		private Function networkGetRespawnResult;
		private Function networkGetRespawnResultFlags;
		private Function networkStartSoloTutorialSession;
		private Function __0xFB680D403909DC70;
		private Function networkEndTutorialSession;
		private Function networkIsInTutorialSession;
		private Function __0xB37E4E6A2388CA7B;
		private Function networkIsTutorialSessionChangePending;
		private Function networkGetPlayerTutorialSessionInstance;
		private Function networkIsPlayerEqualToIndex;
		private Function networkConcealPlayer;
		private Function networkIsPlayerConcealed;
		private Function networkConcealEntity;
		private Function networkIsEntityConcealed;
		private Function networkOverrideClockTime;
		private Function networkClearClockTimeOverride;
		private Function networkIsClockTimeOverridden;
		private Function networkAddEntityArea;
		private Function networkAddEntityAngledArea;
		private Function networkAddEntityDisplayedBoundaries;
		private Function __0x2B1C623823DB0D9D;
		private Function networkRemoveEntityArea;
		private Function networkEntityAreaDoesExist;
		private Function __0x4DF7CFFF471A7FB1;
		private Function networkEntityAreaIsOccupied;
		private Function networkSetNetworkIdDynamic;
		private Function __0xA6FCECCF4721D679;
		private Function __0x95BAF97C82464629;
		private Function networkRequestCloudBackgroundScripts;
		private Function networkIsCloudBackgroundScriptsRequestPending;
		private Function networkRequestCloudTunables;
		private Function networkIsTunableCloudRequestPending;
		private Function networkGetTunableCloudCrc;
		private Function networkDoesTunableExist;
		private Function networkAccessTunableInt;
		private Function networkAccessTunableFloat;
		private Function networkAccessTunableBool;
		private Function networkDoesTunableExistHash;
		private Function networkAllocateTunablesRegistrationDataMap;
		private Function networkAccessTunableIntHash;
		private Function networkRegisterTunableIntHash;
		private Function networkAccessTunableFloatHash;
		private Function networkRegisterTunableFloatHash;
		private Function networkAccessTunableBoolHash;
		private Function networkRegisterTunableBoolHash;
		private Function networkTryAccessTunableBoolHash;
		private Function networkGetContentModifierListId;
		private Function __0x7DB53B37A2F211A0;
		private Function networkResetBodyTracker;
		private Function networkGetNumBodyTrackers;
		private Function __0x2E0BF682CC778D49;
		private Function __0x0EDE326D47CD0F3E;
		private Function networkSetVehicleWheelsDestructible;
		private Function __0x38B7C51AB1EDC7D8;
		private Function networkExplodeVehicle;
		private Function __0x2A5E0621DD815A9A;
		private Function __0xCD71A4ECAB22709E;
		private Function networkOverrideCoordsAndHeading;
		private Function __0xE6717E652B8C8D8A;
		private Function networkDisableProximityMigration;
		private Function networkSetPropertyId;
		private Function networkClearPropertyId;
		private Function __0x367EF5E2F439B4C6;
		private Function __0x94538037EE44F5CF;
		private Function networkCacheLocalPlayerHeadBlendData;
		private Function networkHasCachedPlayerHeadBlendData;
		private Function networkApplyCachedPlayerHeadBlendData;
		private Function getNumCommerceItems;
		private Function isCommerceDataValid;
		private Function __0xB606E6CC59664972;
		private Function __0x1D4DC17C38FEAFF0;
		private Function getCommerceItemId;
		private Function getCommerceItemName;
		private Function getCommerceProductPrice;
		private Function getCommerceItemNumCats;
		private Function getCommerceItemCat;
		private Function __0x58C21165F6545892;
		private Function isCommerceStoreOpen;
		private Function setStoreEnabled;
		private Function requestCommerceItemImage;
		private Function releaseAllCommerceItemImages;
		private Function __0x722F5D28B61C5EA8;
		private Function isStoreAvailableToUser;
		private Function __0x265635150FB0D82E;
		private Function __0x444C4525ECE0A4B9;
		private Function __0x59328EB08C5CEB2B;
		private Function __0xFAE628F1E9ADB239;
		private Function __0x754615490A029508;
		private Function __0x155467ACA0F55705;
		private Function cloudDeleteMemberFile;
		private Function cloudHasRequestCompleted;
		private Function __0x3A3D5568AF297CD5;
		private Function cloudCheckAvailability;
		private Function __0xC7ABAC5DE675EE3B;
		private Function cloudGetAvailabilityCheckResult;
		private Function __0x8B0C2964BA471961;
		private Function __0x88B588B41FF7868E;
		private Function __0x67FC09BC554A75E5;
		private Function __0x966DD84FB6A46017;
		private Function ugcCopyContent;
		private Function __0x9FEDF86898F100E9;
		private Function ugcHasCreateFinished;
		private Function __0x24E4E51FC16305F9;
		private Function ugcGetCreateResult;
		private Function ugcGetCreateContentId;
		private Function ugcClearCreateResult;
		private Function ugcQueryMyContent;
		private Function __0x692D58DF40657E8C;
		private Function ugcQueryByContentId;
		private Function ugcQueryByContentIds;
		private Function ugcQueryRecentlyCreatedContent;
		private Function ugcGetBookmarkedContent;
		private Function ugcGetMyContent;
		private Function ugcGetFriendContent;
		private Function ugcGetCrewContent;
		private Function ugcGetGetByCategory;
		private Function setBalanceAddMachine;
		private Function setBalanceAddMachines;
		private Function __0xA7862BC5ED1DFD7E;
		private Function __0x97A770BEEF227E2B;
		private Function __0x5324A0E3E4CE3570;
		private Function ugcCancelQuery;
		private Function ugcIsGetting;
		private Function ugcHasGetFinished;
		private Function __0x941E5306BCD7C2C7;
		private Function __0xC87E740D9F3872CC;
		private Function ugcGetQueryResult;
		private Function ugcGetContentNum;
		private Function ugcGetContentTotal;
		private Function ugcGetContentHash;
		private Function ugcClearQueryResults;
		private Function ugcGetContentUserId;
		private Function __0x584770794D758C18;
		private Function __0x8C8D2739BA44AF0F;
		private Function ugcGetContentUserName;
		private Function __0xAEAB987727C5A8A4;
		private Function getContentCategory;
		private Function ugcGetContentId;
		private Function ugcGetRootContentId;
		private Function ugcGetContentName;
		private Function ugcGetContentDescriptionHash;
		private Function ugcGetContentPath;
		private Function ugcGetContentUpdatedDate;
		private Function ugcGetContentFileVersion;
		private Function __0x1D610EB0FEA716D9;
		private Function __0x7FCC39C46C3C03BD;
		private Function ugcGetContentLanguage;
		private Function ugcGetContentIsPublished;
		private Function ugcGetContentIsVerified;
		private Function ugcGetContentRating;
		private Function ugcGetContentRatingCount;
		private Function ugcGetContentRatingPositiveCount;
		private Function ugcGetContentRatingNegativeCount;
		private Function ugcGetContentHasPlayerRecord;
		private Function ugcGetContentHasPlayerBookmarked;
		private Function ugcRequestContentDataFromIndex;
		private Function ugcRequestContentDataFromParams;
		private Function ugcRequestCachedDescription;
		private Function __0x2D5DC831176D0114;
		private Function __0xEBFA8D50ADDC54C4;
		private Function __0x162C23CA83ED0A62;
		private Function ugcGetCachedDescription;
		private Function __0x5A34CD9C3C5BEC44;
		private Function __0x68103E2247887242;
		private Function ugcPublish;
		private Function ugcSetBookmarked;
		private Function ugcSetDeleted;
		private Function __0x45E816772E93A9DB;
		private Function ugcHasModifyFinished;
		private Function __0x793FF272D5B365F4;
		private Function ugcGetModifyResult;
		private Function ugcClearModifyResult;
		private Function __0xB746D20B17F2A229;
		private Function __0x63B406D7884BFA95;
		private Function __0x4D02279C83BE69FE;
		private Function ugcGetCreatorNum;
		private Function ugcPoliciesMakePrivate;
		private Function ugcClearOfflineQuery;
		private Function __0xF98DDE0A8ED09323;
		private Function __0xFD75DABC0957BF33;
		private Function ugcIsLanguageSupported;
		private Function facebookSetHeistComplete;
		private Function facebookSetCreateCharacterComplete;
		private Function facebookSetMilestoneComplete;
		private Function facebookIsSendingData;
		private Function facebookDoUnkCheck;
		private Function facebookIsAvailable;
		private Function textureDownloadRequest;
		private Function __0x0B203B4AFDE53A4F;
		private Function ugcTextureDownloadRequest;
		private Function textureDownloadRelease;
		private Function textureDownloadHasFailed;
		private Function textureDownloadGetName;
		private Function getStatusOfTextureDownload;
		private Function __0x60EDD13EB3AC1FF3;
		private Function networkShouldShowConnectivityTroubleshooting;
		private Function networkIsCableConnected;
		private Function networkGetRosPrivilege9;
		private Function networkGetRosPrivilege10;
		private Function networkHasPlayerBeenBanned;
		private Function networkHaveSocialClubPrivilege;
		private Function networkGetRosPrivilege3;
		private Function networkGetRosPrivilege4;
		private Function networkHasRosPrivilege;
		private Function networkHasRosPrivilegeEndDate;
		private Function networkGetRosPrivilege24;
		private Function networkGetRosPrivilege25;
		private Function __0x36391F397731595D;
		private Function __0xDEB2B99A1AF1A2A6;
		private Function __0x9465E683B12D3F6B;
		private Function __0xCA59CCAE5D01E4CE;
		private Function networkHasGameBeenAltered;
		private Function networkUpdatePlayerScars;
		private Function __0xC505036A35AFD01B;
		private Function __0x267C78C60E806B9A;
		private Function __0x6BFF5F84102DF80A;
		private Function __0x5C497525F803486B;
		private Function __0x6FB7BB3607D27FA2;
		private Function __0x45A83257ED02D9BC;
		private Function __0x16D3D49902F697BB;
		private Function __0xD414BE129BB81B32;
		private Function __0x0E3A041ED6AC2B45;
		private Function __0x350C23949E43686C;
		private Function networkGetNumUnackedForPlayer;
		private Function __0x3765C3A3E8192E10;
		private Function networkGetOldestResendCountForPlayer;
		private Function networkReportMyself;
		private Function __0x64D779659BC37B19;
		private Function networkGetPlayerCoords;
		private Function __0x33DE49EDF4DDE77A;
		private Function __0xAA5FAFCD2C5F5E47;
		private Function __0xAEDF1BC1C133D6E3;
		private Function __0x2555CF7DA5473794;
		private Function __0x6FD992C4A1C1B986;
		private Function __0xDB663CC9FF3407A9;
		private Function createObject;
		private Function createObjectNoOffset;
		private Function deleteObject;
		private Function placeObjectOnGroundProperly;
		private Function placeObjectOnGroundProperly2;
		private Function __0xAFE24E4D29249E4A;
		private Function slideObject;
		private Function setObjectTargettable;
		private Function setObjectSomething;
		private Function getClosestObjectOfType;
		private Function hasObjectBeenBroken;
		private Function hasClosestObjectOfTypeBeenBroken;
		private Function hasClosestObjectOfTypeBeenCompletelyDestroyed;
		private Function __0x2542269291C6AC84;
		private Function getObjectOffsetFromCoords;
		private Function getCoordsAndRotationOfClosestObjectOfType;
		private Function setStateOfClosestDoorOfType;
		private Function getStateOfClosestDoorOfType;
		private Function doorControl;
		private Function addDoorToSystem;
		private Function removeDoorFromSystem;
		private Function doorSystemSetDoorState;
		private Function doorSystemGetDoorState;
		private Function doorSystemGetDoorPendingState;
		private Function doorSystemSetAutomaticRate;
		private Function doorSystemSetAutomaticDistance;
		private Function doorSystemSetOpenRatio;
		private Function doorSystemGetOpenRatio;
		private Function doorSystemSetSpringRemoved;
		private Function doorSystemSetHoldOpen;
		private Function __0xA85A21582451E951;
		private Function isDoorRegisteredWithSystem;
		private Function isDoorClosed;
		private Function __0xC7F29CA00F46350E;
		private Function __0x701FDA1E82076BA4;
		private Function doorSystemGetIsPhysicsLoaded;
		private Function doorSystemFindExistingDoor;
		private Function isGarageEmpty;
		private Function isPlayerEntirelyInsideGarage;
		private Function isPlayerPartiallyInsideGarage;
		private Function areEntitiesEntirelyInsideGarage;
		private Function isAnyEntityEntirelyInsideGarage;
		private Function isObjectEntirelyInsideGarage;
		private Function isObjectPartiallyInsideGarage;
		private Function clearGarageArea;
		private Function __0x190428512B240692;
		private Function __0x659F9D71F52843F8;
		private Function enableSavingInGarage;
		private Function __0x66A49D021870FE88;
		private Function doesObjectOfTypeExistAtCoords;
		private Function isPointInAngledArea;
		private Function setObjectCanClimbOn;
		private Function setObjectPhysicsParams;
		private Function getObjectFragmentDamageHealth;
		private Function setActivateObjectPhysicsAsSoonAsItIsUnfrozen;
		private Function isAnyObjectNearPoint;
		private Function isObjectNearPoint;
		private Function removeObjectHighDetailModel;
		private Function __0xE7E4C198B0185900;
		private Function __0xE05F6AEEFEB0BB02;
		private Function __0xF9C1681347C8BD15;
		private Function trackObjectVisibility;
		private Function isObjectVisible;
		private Function __0xC6033D32241F6FB5;
		private Function __0xEB6F1A9B5510A5D2;
		private Function setUnkGlobalBoolRelatedToDamage;
		private Function setCreateWeaponObjectLightSource;
		private Function getRayfireMapObject;
		private Function setStateOfRayfireMapObject;
		private Function getStateOfRayfireMapObject;
		private Function doesRayfireMapObjectExist;
		private Function getRayfireMapObjectAnimPhase;
		private Function createPickup;
		private Function createPickupRotate;
		private Function __0x394CD08E31313C28;
		private Function __0x826D1EE4D1CAFC78;
		private Function createAmbientPickup;
		private Function __0x1E3F1B1B891A2AAA;
		private Function createPortablePickup;
		private Function createPortablePickup2;
		private Function attachPortablePickupToPed;
		private Function detachPortablePickupFromPed;
		private Function hidePickup;
		private Function __0x0BF3B3BD47D79C08;
		private Function __0x78857FC65CADB909;
		private Function getSafePickupCoords;
		private Function __0xD4A7A435B3710D05;
		private Function __0xB7C6D80FB371659A;
		private Function getPickupCoords;
		private Function __0x8DCA505A5C196F05;
		private Function removeAllPickupsOfType;
		private Function hasPickupBeenCollected;
		private Function removePickup;
		private Function createMoneyPickups;
		private Function doesPickupExist;
		private Function doesPickupObjectExist;
		private Function getPickupObject;
		private Function __0xFC481C641EBBD27D;
		private Function __0x0378C08504160D0D;
		private Function doesPickupOfTypeExistInArea;
		private Function setPickupRegenerationTime;
		private Function __0x758A5C1B3B1E1990;
		private Function __0x616093EC6B139DD9;
		private Function setLocalPlayerCanUsePickupsWithThisModel;
		private Function __0xFDC07C58E8AAB715;
		private Function setTeamPickupObject;
		private Function __0x92AEFB5F6E294023;
		private Function __0x0596843B34B95CE5;
		private Function __0xA08FE5E49BDC39DD;
		private Function __0x62454A641B41F3C5;
		private Function __0x39A5FB7EAF150840;
		private Function __0xDB41D07A45A6D4B7;
		private Function setPickupGenerationRangeMultiplier;
		private Function getPickupGenerationRangeMultiplier;
		private Function __0x31F924B53EADDF65;
		private Function __0x1C1B69FAE509BA97;
		private Function __0x858EC9FD25DE04AA;
		private Function __0x3ED2B83AB2E82799;
		private Function __0x8881C98A31117998;
		private Function __0x8CFF648FBD7330F1;
		private Function __0x46F3ADD1E2D5BAF2;
		private Function __0x641F272B52E2F0F8;
		private Function __0x4C134B4DF76025D0;
		private Function __0xAA059C615DE9DD03;
		private Function __0xF92099527DB8E2A7;
		private Function __0xA2C1F5E92AFE49ED;
		private Function __0x762DB2D380B48D04;
		private Function highlightPlacementCoords;
		private Function __0x7813E8B8C4AE4799;
		private Function __0xBFFE53AE7E67FCDC;
		private Function __0xD05A3241B9A86F19;
		private Function __0xB2D0BDE54F0E8E5A;
		private Function getWeaponTypeFromPickupType;
		private Function __0xD6429A016084F1A5;
		private Function isPickupWeaponObjectValid;
		private Function getObjectTextureVariation;
		private Function setObjectTextureVariation;
		private Function __0xF12E33034D887F66;
		private Function setObjectLightColor;
		private Function setObjectColour;
		private Function __0x3B2FD68DB5F8331C;
		private Function setObjectStuntPropSpeedup;
		private Function setObjectStuntPropDuration;
		private Function getPickupHash;
		private Function setForceObjectThisFrame;
		private Function markObjectForDeletion;
		private Function __0x8CAAB2BD3EA58BD4;
		private Function __0x63ECF581BC70E363;
		private Function setEnableArenaPropPhysics;
		private Function setEnableArenaPropPhysicsOnPed;
		private Function __0x734E1714D077DA9A;
		private Function __0x1A6CBB06E2D0D79D;
		private Function getIsArenaPropPhysicsDisabled;
		private Function __0x3BD770D281982DB5;
		private Function __0x1C57C94A6446492A;
		private Function __0xB5B7742424BD4445;
		private Function isControlEnabled;
		private Function isControlPressed;
		private Function isControlReleased;
		private Function isControlJustPressed;
		private Function isControlJustReleased;
		private Function getControlValue;
		private Function getControlNormal;
		private Function __0x5B73C77D9EB66E24;
		private Function getControlUnboundNormal;
		private Function setControlNormal;
		private Function isDisabledControlPressed;
		private Function isDisabledControlReleased;
		private Function isDisabledControlJustPressed;
		private Function isDisabledControlJustReleased;
		private Function getDisabledControlNormal;
		private Function getDisabledControlUnboundNormal;
		private Function __0xD7D22F5592AED8BA;
		private Function isInputDisabled;
		private Function isInputJustDisabled;
		private Function setCursorLocation;
		private Function __0x23F09EADC01449D6;
		private Function __0x6CD79468A1E595C6;
		private Function getControlInstructionalButton;
		private Function getControlGroupInstructionalButton;
		private Function setControlGroupColor;
		private Function __0xCB0360EFEFB2580D;
		private Function setPadShake;
		private Function __0x14D29BB12D47F68C;
		private Function stopPadShake;
		private Function __0xF239400E16C23E08;
		private Function __0xA0CEFCEA390AAB9B;
		private Function isLookInverted;
		private Function __0xE1615EC03B3BB4FD;
		private Function getLocalPlayerAimState;
		private Function getLocalPlayerAimState2;
		private Function __0x25AAA32BDC98F2A3;
		private Function getIsUsingAlternateDriveby;
		private Function getAllowMovementWhileZoomed;
		private Function setPlayerpadShakesWhenControllerDisabled;
		private Function setInputExclusive;
		private Function disableControlAction;
		private Function enableControlAction;
		private Function disableAllControlActions;
		private Function enableAllControlActions;
		private Function switchToInputMappingScheme;
		private Function switchToInputMappingScheme2;
		private Function resetInputMappingScheme;
		private Function disableInputGroup;
		private Function setRoadsInArea;
		private Function setRoadsInAngledArea;
		private Function setPedPathsInArea;
		private Function getSafeCoordForPed;
		private Function getClosestVehicleNode;
		private Function getClosestMajorVehicleNode;
		private Function getClosestVehicleNodeWithHeading;
		private Function getNthClosestVehicleNode;
		private Function getNthClosestVehicleNodeId;
		private Function getNthClosestVehicleNodeWithHeading;
		private Function getNthClosestVehicleNodeIdWithHeading;
		private Function getNthClosestVehicleNodeFavourDirection;
		private Function getVehicleNodeProperties;
		private Function isVehicleNodeIdValid;
		private Function getVehicleNodePosition;
		private Function getVehicleNodeIsGpsAllowed;
		private Function getVehicleNodeIsSwitchedOff;
		private Function getClosestRoad;
		private Function __0x228E5C6AD4D74BFD;
		private Function arePathNodesLoadedInArea;
		private Function __0x07FB139B592FA687;
		private Function setRoadsBackToOriginal;
		private Function setRoadsBackToOriginalInAngledArea;
		private Function setAmbientPedRangeMultiplierThisFrame;
		private Function __0xAA76052DDA9BFC3E;
		private Function setPedPathsBackToOriginal;
		private Function getRandomVehicleNode;
		private Function getStreetNameAtCoord;
		private Function generateDirectionsToCoord;
		private Function setIgnoreNoGpsFlag;
		private Function setIgnoreSecondaryRouteNodes;
		private Function setGpsDisabledZone;
		private Function getGpsBlipRouteLength;
		private Function __0xF3162836C28F9DA5;
		private Function getGpsBlipRouteFound;
		private Function getRoadSidePointWithHeading;
		private Function getPointOnRoadSide;
		private Function isPointOnRoad;
		private Function getNextGpsDisabledZoneIndex;
		private Function setGpsDisabledZoneAtIndex;
		private Function clearGpsDisabledZoneAtIndex;
		private Function addNavmeshRequiredRegion;
		private Function removeNavmeshRequiredRegions;
		private Function isNavmeshRequiredRegionOwnedByAnyThread;
		private Function disableNavmeshInArea;
		private Function areAllNavmeshRegionsLoaded;
		private Function isNavmeshLoadedInArea;
		private Function __0x01708E8DD3FF8C65;
		private Function addNavmeshBlockingObject;
		private Function updateNavmeshBlockingObject;
		private Function removeNavmeshBlockingObject;
		private Function doesNavmeshBlockingObjectExist;
		private Function getHeightmapTopZForPosition;
		private Function getHeightmapTopZForArea;
		private Function getHeightmapBottomZForPosition;
		private Function getHeightmapBottomZForArea;
		private Function calculateTravelDistanceBetweenPoints;
		private Function createPed;
		private Function deletePed;
		private Function clonePed;
		private Function clonePedEx;
		private Function clonePedToTarget;
		private Function clonePedToTargetEx;
		private Function isPedInVehicle;
		private Function isPedInModel;
		private Function isPedInAnyVehicle;
		private Function isCopPedInArea3d;
		private Function isPedInjured;
		private Function isPedHurt;
		private Function isPedFatallyInjured;
		private Function isPedDeadOrDying;
		private Function isConversationPedDead;
		private Function isPedAimingFromCover;
		private Function isPedReloading;
		private Function isPedAPlayer;
		private Function createPedInsideVehicle;
		private Function setPedDesiredHeading;
		private Function freezePedCameraRotation;
		private Function isPedFacingPed;
		private Function isPedInMeleeCombat;
		private Function isPedStopped;
		private Function isPedShootingInArea;
		private Function isAnyPedShootingInArea;
		private Function isPedShooting;
		private Function setPedAccuracy;
		private Function getPedAccuracy;
		private Function __0x87DDEB611B329A9C;
		private Function isPedModel;
		private Function explodePedHead;
		private Function removePedElegantly;
		private Function addArmourToPed;
		private Function setPedArmour;
		private Function setPedIntoVehicle;
		private Function setPedAllowVehiclesOverride;
		private Function canCreateRandomPed;
		private Function createRandomPed;
		private Function createRandomPedAsDriver;
		private Function canCreateRandomDriver;
		private Function canCreateRandomBikeRider;
		private Function setPedMoveAnimsBlendOut;
		private Function setPedCanBeDraggedOut;
		private Function __0xF2BEBCDFAFDAA19E;
		private Function isPedMale;
		private Function isPedHuman;
		private Function getVehiclePedIsIn;
		private Function resetPedLastVehicle;
		private Function setPedDensityMultiplierThisFrame;
		private Function setScenarioPedDensityMultiplierThisFrame;
		private Function __0x5A7F62FDA59759BD;
		private Function setScriptedConversionCoordThisFrame;
		private Function setPedNonCreationArea;
		private Function clearPedNonCreationArea;
		private Function __0x4759CC730F947C81;
		private Function isPedOnMount;
		private Function getMount;
		private Function isPedOnVehicle;
		private Function isPedOnSpecificVehicle;
		private Function setPedMoney;
		private Function getPedMoney;
		private Function __0xFF4803BC019852D9;
		private Function __0x6B0E6172C9A4D902;
		private Function __0x9911F4A24485F653;
		private Function setPedSuffersCriticalHits;
		private Function __0xAFC976FD0580C7B3;
		private Function isPedSittingInVehicle;
		private Function isPedSittingInAnyVehicle;
		private Function isPedOnFoot;
		private Function isPedOnAnyBike;
		private Function isPedPlantingBomb;
		private Function getDeadPedPickupCoords;
		private Function isPedInAnyBoat;
		private Function isPedInAnySub;
		private Function isPedInAnyHeli;
		private Function isPedInAnyPlane;
		private Function isPedInFlyingVehicle;
		private Function setPedDiesInWater;
		private Function setPedDiesInSinkingVehicle;
		private Function getPedArmour;
		private Function setPedStayInVehicleWhenJacked;
		private Function setPedCanBeShotInVehicle;
		private Function getPedLastDamageBone;
		private Function clearPedLastDamageBone;
		private Function setAiWeaponDamageModifier;
		private Function resetAiWeaponDamageModifier;
		private Function setAiMeleeWeaponDamageModifier;
		private Function resetAiMeleeWeaponDamageModifier;
		private Function __0x2F3C3D9F50681DE4;
		private Function setPedCanBeTargetted;
		private Function setPedCanBeTargettedByTeam;
		private Function setPedCanBeTargettedByPlayer;
		private Function __0x061CB768363D6424;
		private Function __0xFD325494792302D7;
		private Function isPedInAnyPoliceVehicle;
		private Function forcePedToOpenParachute;
		private Function isPedInParachuteFreeFall;
		private Function isPedFalling;
		private Function isPedJumping;
		private Function __0x412F1364FA066CFB;
		private Function __0x451D05012CCEC234;
		private Function isPedClimbing;
		private Function isPedVaulting;
		private Function isPedDiving;
		private Function isPedJumpingOutOfVehicle;
		private Function isPedOpeningADoor;
		private Function getPedParachuteState;
		private Function getPedParachuteLandingType;
		private Function setPedParachuteTintIndex;
		private Function getPedParachuteTintIndex;
		private Function setPedReserveParachuteTintIndex;
		private Function createParachuteObject;
		private Function setPedDucking;
		private Function isPedDucking;
		private Function isPedInAnyTaxi;
		private Function setPedIdRange;
		private Function setPedHighlyPerceptive;
		private Function __0x2F074C904D85129E;
		private Function __0xEC4B4B3B9908052A;
		private Function __0x733C87D4CE22BEA2;
		private Function setPedSeeingRange;
		private Function setPedHearingRange;
		private Function setPedVisualFieldMinAngle;
		private Function setPedVisualFieldMaxAngle;
		private Function setPedVisualFieldMinElevationAngle;
		private Function setPedVisualFieldMaxElevationAngle;
		private Function setPedVisualFieldPeripheralRange;
		private Function setPedVisualFieldCenterAngle;
		private Function getPedVisualFieldCenterAngle;
		private Function setPedStealthMovement;
		private Function getPedStealthMovement;
		private Function createGroup;
		private Function setPedAsGroupLeader;
		private Function setPedAsGroupMember;
		private Function setPedCanTeleportToGroupLeader;
		private Function removeGroup;
		private Function removePedFromGroup;
		private Function isPedGroupMember;
		private Function isPedHangingOnToVehicle;
		private Function setGroupSeparationRange;
		private Function setPedMinGroundTimeForStungun;
		private Function isPedProne;
		private Function isPedInCombat;
		private Function canPedInCombatSeeTarget;
		private Function isPedDoingDriveby;
		private Function isPedJacking;
		private Function isPedBeingJacked;
		private Function isPedBeingStunned;
		private Function getPedsJacker;
		private Function getJackTarget;
		private Function isPedFleeing;
		private Function isPedInCover;
		private Function isPedInCoverFacingLeft;
		private Function isPedInHighCover;
		private Function isPedGoingIntoCover;
		private Function setPedPinnedDown;
		private Function getSeatPedIsTryingToEnter;
		private Function getVehiclePedIsTryingToEnter;
		private Function getPedSourceOfDeath;
		private Function getPedCauseOfDeath;
		private Function getPedTimeOfDeath;
		private Function __0x5407B7288D0478B7;
		private Function __0x336B3D200AB007CB;
		private Function setPedRelationshipGroupDefaultHash;
		private Function setPedRelationshipGroupHash;
		private Function setRelationshipBetweenGroups;
		private Function clearRelationshipBetweenGroups;
		private Function addRelationshipGroup;
		private Function removeRelationshipGroup;
		private Function doesRelationshipGroupExist;
		private Function getRelationshipBetweenPeds;
		private Function getPedRelationshipGroupDefaultHash;
		private Function getPedRelationshipGroupHash;
		private Function getRelationshipBetweenGroups;
		private Function __0x5615E0C5EB2BC6E2;
		private Function __0xAD27D957598E49E9;
		private Function setPedCanBeTargetedWithoutLos;
		private Function setPedToInformRespectedFriends;
		private Function isPedRespondingToEvent;
		private Function setPedFiringPattern;
		private Function setPedShootRate;
		private Function setCombatFloat;
		private Function getCombatFloat;
		private Function getGroupSize;
		private Function doesGroupExist;
		private Function getPedGroupIndex;
		private Function isPedInGroup;
		private Function getPlayerPedIsFollowing;
		private Function setGroupFormation;
		private Function setGroupFormationSpacing;
		private Function resetGroupFormationDefaultSpacing;
		private Function getVehiclePedIsUsing;
		private Function getVehiclePedIsEntering;
		private Function setPedGravity;
		private Function applyDamageToPed;
		private Function getTimeOfLastPedWeaponDamage;
		private Function setPedAllowedToDuck;
		private Function setPedNeverLeavesGroup;
		private Function getPedType;
		private Function setPedAsCop;
		private Function setPedMaxHealth;
		private Function getPedMaxHealth;
		private Function setPedMaxTimeInWater;
		private Function setPedMaxTimeUnderwater;
		private Function __0x2735233A786B1BEF;
		private Function setPedVehicleForcedSeatUsage;
		private Function clearAllPedVehicleForcedSeatUsage;
		private Function __0xB282749D5E028163;
		private Function setPedCanBeKnockedOffVehicle;
		private Function canKnockPedOffVehicle;
		private Function knockPedOffVehicle;
		private Function setPedCoordsNoGang;
		private Function getPedAsGroupMember;
		private Function getPedAsGroupLeader;
		private Function setPedKeepTask;
		private Function __0x49E50BDB8BA4DAB2;
		private Function isPedSwimming;
		private Function isPedSwimmingUnderWater;
		private Function setPedCoordsKeepVehicle;
		private Function setPedDiesInVehicle;
		private Function setCreateRandomCops;
		private Function setCreateRandomCopsNotOnScenarios;
		private Function setCreateRandomCopsOnScenarios;
		private Function canCreateRandomCops;
		private Function setPedAsEnemy;
		private Function setPedCanSmashGlass;
		private Function isPedInAnyTrain;
		private Function isPedGettingIntoAVehicle;
		private Function isPedTryingToEnterALockedVehicle;
		private Function setEnableHandcuffs;
		private Function setEnableBoundAnkles;
		private Function setEnableScuba;
		private Function setCanAttackFriendly;
		private Function getPedAlertness;
		private Function setPedAlertness;
		private Function setPedGetOutUpsideDownVehicle;
		private Function setPedMovementClipset;
		private Function resetPedMovementClipset;
		private Function setPedStrafeClipset;
		private Function resetPedStrafeClipset;
		private Function setPedWeaponMovementClipset;
		private Function resetPedWeaponMovementClipset;
		private Function setPedDriveByClipsetOverride;
		private Function clearPedDriveByClipsetOverride;
		private Function setPedCoverClipsetOverride;
		private Function clearPedCoverClipsetOverride;
		private Function __0x80054D7FCC70EEC6;
		private Function setPedInVehicleContext;
		private Function resetPedInVehicleContext;
		private Function isScriptedScenarioPedUsingConditionalAnim;
		private Function setPedAlternateWalkAnim;
		private Function clearPedAlternateWalkAnim;
		private Function setPedAlternateMovementAnim;
		private Function clearPedAlternateMovementAnim;
		private Function setPedGestureGroup;
		private Function getAnimInitialOffsetPosition;
		private Function getAnimInitialOffsetRotation;
		private Function getPedDrawableVariation;
		private Function getNumberOfPedDrawableVariations;
		private Function getPedTextureVariation;
		private Function getNumberOfPedTextureVariations;
		private Function getNumberOfPedPropDrawableVariations;
		private Function getNumberOfPedPropTextureVariations;
		private Function getPedPaletteVariation;
		private Function __0x9E30E91FB03A2CAF;
		private Function __0x1E77FA7A62EE6C4C;
		private Function __0xF033419D1B81FAE8;
		private Function isPedComponentVariationValid;
		private Function setPedComponentVariation;
		private Function setPedRandomComponentVariation;
		private Function setPedRandomProps;
		private Function setPedDefaultComponentVariation;
		private Function setPedBlendFromParents;
		private Function setPedHeadBlendData;
		private Function getPedHeadBlendData;
		private Function updatePedHeadBlendData;
		private Function setPedEyeColor;
		private Function __0x76BBA2CEE66D47E9;
		private Function setPedHeadOverlay;
		private Function getPedHeadOverlayValue;
		private Function getPedHeadOverlayNum;
		private Function setPedHeadOverlayColor;
		private Function setPedHairColor;
		private Function getNumHairColors;
		private Function getNumMakeupColors;
		private Function getPedHairRgbColor;
		private Function getPedMakeupRgbColor;
		private Function isPedHairColorValid2;
		private Function __0xEA9960D07DADCF10;
		private Function isPedLipstickColorValid2;
		private Function isPedBlushColorValid2;
		private Function isPedHairColorValid;
		private Function __0xAAA6A3698A69E048;
		private Function isPedLipstickColorValid;
		private Function isPedBlushColorValid;
		private Function __0x09E7ECA981D9B210;
		private Function __0xC56FBF2F228E1DAC;
		private Function setPedFaceFeature;
		private Function hasPedHeadBlendFinished;
		private Function __0x4668D80430D6C299;
		private Function setHeadBlendPaletteColor;
		private Function disableHeadBlendPaletteColor;
		private Function getPedHeadBlendFirstIndex;
		private Function getNumParentPedsOfType;
		private Function setPedPreloadVariationData;
		private Function hasPedPreloadVariationDataFinished;
		private Function releasePedPreloadVariationData;
		private Function setPedPreloadPropData;
		private Function hasPedPreloadPropDataFinished;
		private Function releasePedPreloadPropData;
		private Function getPedPropIndex;
		private Function setPedPropIndex;
		private Function knockOffPedProp;
		private Function clearPedProp;
		private Function clearAllPedProps;
		private Function dropAmbientProp;
		private Function getPedPropTextureIndex;
		private Function clearPedParachutePackVariation;
		private Function __0x36C6984C3ED0C911;
		private Function clearPedScubaGearVariation;
		private Function __0xFEC9A3B1820F3331;
		private Function setBlockingOfNonTemporaryEvents;
		private Function setPedBoundsOrientation;
		private Function registerTarget;
		private Function registerHatedTargetsAroundPed;
		private Function getRandomPedAtCoord;
		private Function getClosestPed;
		private Function setScenarioPedsToBeReturnedByNextCommand;
		private Function __0x03EA03AF85A85CB7;
		private Function setDriverRacingModifier;
		private Function setDriverAbility;
		private Function setDriverAggressiveness;
		private Function canPedRagdoll;
		private Function setPedToRagdoll;
		private Function setPedToRagdollWithFall;
		private Function setPedRagdollOnCollision;
		private Function isPedRagdoll;
		private Function isPedRunningRagdollTask;
		private Function setPedRagdollForceFall;
		private Function resetPedRagdollTimer;
		private Function setPedCanRagdoll;
		private Function isPedRunningMeleeTask;
		private Function isPedRunningMobilePhoneTask;
		private Function __0xA3F3564A5B3646C0;
		private Function setRagdollBlockingFlags;
		private Function clearRagdollBlockingFlags;
		private Function setPedAngledDefensiveArea;
		private Function setPedSphereDefensiveArea;
		private Function setPedDefensiveSphereAttachedToPed;
		private Function setPedDefensiveSphereAttachedToVehicle;
		private Function setPedDefensiveAreaAttachedToPed;
		private Function setPedDefensiveAreaDirection;
		private Function removePedDefensiveArea;
		private Function getPedDefensiveAreaPosition;
		private Function isPedDefensiveAreaActive;
		private Function setPedPreferredCoverSet;
		private Function removePedPreferredCoverSet;
		private Function reviveInjuredPed;
		private Function resurrectPed;
		private Function setPedNameDebug;
		private Function getPedExtractedDisplacement;
		private Function setPedDiesWhenInjured;
		private Function setPedEnableWeaponBlocking;
		private Function __0xF9ACF4A08098EA25;
		private Function resetPedVisibleDamage;
		private Function applyPedBloodDamageByZone;
		private Function applyPedBlood;
		private Function applyPedBloodByZone;
		private Function applyPedBloodSpecific;
		private Function applyPedDamageDecal;
		private Function applyPedDamagePack;
		private Function clearPedBloodDamage;
		private Function clearPedBloodDamageByZone;
		private Function hidePedBloodDamageByZone;
		private Function clearPedDamageDecalByZone;
		private Function getPedDecorationsState;
		private Function __0x2B694AFCF64E6994;
		private Function clearPedWetness;
		private Function setPedWetnessHeight;
		private Function setPedWetnessEnabledThisFrame;
		private Function clearPedEnvDirt;
		private Function setPedSweat;
		private Function addPedDecorationFromHashes;
		private Function addPedDecorationFromHashesInCorona;
		private Function getPedDecorationZoneFromHashes;
		private Function clearPedDecorations;
		private Function clearPedDecorationsLeaveScars;
		private Function wasPedSkeletonUpdated;
		private Function getPedBoneCoords;
		private Function createNmMessage;
		private Function givePedNmMessage;
		private Function addScenarioBlockingArea;
		private Function removeScenarioBlockingAreas;
		private Function removeScenarioBlockingArea;
		private Function setScenarioPedsSpawnInSphereArea;
		private Function doesScenarioBlockingAreaExist;
		private Function isPedUsingScenario;
		private Function isPedUsingAnyScenario;
		private Function setPedPanicExitScenario;
		private Function __0x9A77DFD295E29B09;
		private Function __0x25361A96E0F7E419;
		private Function __0xEC6935EBE0847B90;
		private Function __0xA3A9299C4F2ADB98;
		private Function __0xF1C03A5352243A30;
		private Function __0xEEED8FAFEC331A70;
		private Function __0x425AECF167663F48;
		private Function __0x5B6010B3CBC29095;
		private Function __0xCEDA60A74219D064;
		private Function playFacialAnim;
		private Function __0x5687C7F05B39E401;
		private Function setFacialIdleAnimOverride;
		private Function clearFacialIdleAnimOverride;
		private Function setPedCanPlayGestureAnims;
		private Function setPedCanPlayVisemeAnims;
		private Function setPedCanPlayInjuredAnims;
		private Function setPedCanPlayAmbientAnims;
		private Function setPedCanPlayAmbientBaseAnims;
		private Function __0xC2EE020F5FB4DB53;
		private Function setPedCanArmIk;
		private Function setPedCanHeadIk;
		private Function setPedCanLegIk;
		private Function setPedCanTorsoIk;
		private Function setPedCanTorsoReactIk;
		private Function __0x6647C5F6F5792496;
		private Function setPedCanUseAutoConversationLookat;
		private Function isPedHeadtrackingPed;
		private Function isPedHeadtrackingEntity;
		private Function setPedPrimaryLookat;
		private Function setPedClothPackageIndex;
		private Function setPedClothProne;
		private Function __0xA660FAF550EB37E5;
		private Function setPedConfigFlag;
		private Function setPedResetFlag;
		private Function getPedConfigFlag;
		private Function getPedResetFlag;
		private Function setPedGroupMemberPassengerIndex;
		private Function setPedCanEvasiveDive;
		private Function isPedEvasiveDiving;
		private Function setPedShootsAtCoord;
		private Function setPedModelIsSuppressed;
		private Function stopAnyPedModelBeingSuppressed;
		private Function setPedCanBeTargetedWhenInjured;
		private Function setPedGeneratesDeadBodyEvents;
		private Function blockPedDeadBodyShockingEvents;
		private Function __0x3E9679C1DFCF422C;
		private Function setPedCanRagdollFromPlayerImpact;
		private Function givePedHelmet;
		private Function removePedHelmet;
		private Function __0x14590DDBEDB1EC85;
		private Function setPedHelmet;
		private Function setPedHelmetFlag;
		private Function setPedHelmetPropIndex;
		private Function setPedHelmetUnk;
		private Function isPedHelmetUnk;
		private Function setPedHelmetTextureIndex;
		private Function isPedWearingHelmet;
		private Function __0x687C0B594907D2E8;
		private Function __0x451294E859ECC018;
		private Function __0x9D728C1E12BF5518;
		private Function __0xF2385935BFFD4D92;
		private Function setPedToLoadCover;
		private Function setPedCanCowerInCover;
		private Function setPedCanPeekInCover;
		private Function setPedPlaysHeadOnHornAnimWhenDiesInVehicle;
		private Function setPedLegIkMode;
		private Function setPedMotionBlur;
		private Function setPedCanSwitchWeapon;
		private Function setPedDiesInstantlyInWater;
		private Function __0x1A330D297AAC6BC1;
		private Function stopPedWeaponFiringWhenDropped;
		private Function setScriptedAnimSeatOffset;
		private Function setPedCombatMovement;
		private Function getPedCombatMovement;
		private Function setPedCombatAbility;
		private Function setPedCombatRange;
		private Function getPedCombatRange;
		private Function setPedCombatAttributes;
		private Function setPedTargetLossResponse;
		private Function isPedPerformingMeleeAction;
		private Function isPedPerformingStealthKill;
		private Function isPedPerformingDependentComboLimit;
		private Function isPedBeingStealthKilled;
		private Function getMeleeTargetForPed;
		private Function wasPedKilledByStealth;
		private Function wasPedKilledByTakedown;
		private Function wasPedKnockedOut;
		private Function setPedFleeAttributes;
		private Function setPedCowerHash;
		private Function __0x2016C603D6B8987C;
		private Function setPedSteersAroundPeds;
		private Function setPedSteersAroundObjects;
		private Function setPedSteersAroundVehicles;
		private Function __0xA9B61A329BFDCBEA;
		private Function setPedIncreasedAvoidanceRadius;
		private Function setPedBlocksPathingWhenDead;
		private Function __0xA52D5247A4227E14;
		private Function isAnyPedNearPoint;
		private Function __0x2208438012482A1A;
		private Function isPedHeadingTowardsPosition;
		private Function requestPedVisibilityTracking;
		private Function requestPedVehicleVisibilityTracking;
		private Function __0xCD018C591F94CB43;
		private Function __0x75BA1CB3B7D40CAF;
		private Function isTrackedPedVisible;
		private Function __0x511F1A683387C7E2;
		private Function isPedTracked;
		private Function hasPedReceivedEvent;
		private Function canPedSeeHatedPed;
		private Function __0x9C6A6C19B6C0C496;
		private Function __0x2DFC81C9B9608549;
		private Function getPedBoneIndex;
		private Function getPedRagdollBoneIndex;
		private Function setPedEnveffScale;
		private Function getPedEnveffScale;
		private Function setEnablePedEnveffScale;
		private Function __0x110F526AB784111F;
		private Function setPedEnveffColorModulator;
		private Function setPedReflectionIntensity;
		private Function getPedReflectionIntensity;
		private Function isPedShaderEffectValid;
		private Function __0xE906EC930F5FE7C8;
		private Function __0x1216E0BFA72CC703;
		private Function __0x2B5AA717A181FB4C;
		private Function __0xB8B52E498014F5B0;
		private Function createSynchronizedScene;
		private Function createSynchronizedScene2;
		private Function isSynchronizedSceneRunning;
		private Function setSynchronizedSceneOrigin;
		private Function setSynchronizedScenePhase;
		private Function getSynchronizedScenePhase;
		private Function setSynchronizedSceneRate;
		private Function getSynchronizedSceneRate;
		private Function setSynchronizedSceneLooped;
		private Function isSynchronizedSceneLooped;
		private Function setSynchronizedSceneOcclusionPortal;
		private Function __0x7F2F4F13AC5257EF;
		private Function attachSynchronizedSceneToEntity;
		private Function detachSynchronizedScene;
		private Function disposeSynchronizedScene;
		private Function forcePedMotionState;
		private Function __0xF60165E1D2C5370B;
		private Function setPedMaxMoveBlendRatio;
		private Function setPedMinMoveBlendRatio;
		private Function setPedMoveRateOverride;
		private Function __0x0B3E35AC043707D9;
		private Function __0x46B05BCAE43856B0;
		private Function getPedNearbyVehicles;
		private Function getPedNearbyPeds;
		private Function hasStreamedPedAssetsLoaded;
		private Function isPedUsingActionMode;
		private Function setPedUsingActionMode;
		private Function setMovementModeOverride;
		private Function setPedCapsule;
		private Function registerPedheadshot;
		private Function registerPedheadshot3;
		private Function registerPedheadshotTransparent;
		private Function unregisterPedheadshot;
		private Function isPedheadshotValid;
		private Function isPedheadshotReady;
		private Function getPedheadshotTxdString;
		private Function requestPedheadshotImgUpload;
		private Function releasePedheadshotImgUpload;
		private Function isPedheadshotImgUploadAvailable;
		private Function hasPedheadshotImgUploadFailed;
		private Function hasPedheadshotImgUploadSucceeded;
		private Function setPedHeatscaleOverride;
		private Function disablePedHeatscaleOverride;
		private Function __0x2DF9038C90AD5264;
		private Function __0xB2AFF10216DEFA2F;
		private Function __0xFEE4A5459472A9F8;
		private Function __0x3C67506996001F5E;
		private Function __0xA586FBEB32A53DBB;
		private Function __0xF445DE8DA80A1792;
		private Function __0xA635C11B8C44AFC2;
		private Function __0x280C7E3AC7F56E90;
		private Function __0xB782F8238512BAD5;
		private Function setIkTarget;
		private Function __0xED3C76ADFA6D07C4;
		private Function requestActionModeAsset;
		private Function hasActionModeAssetLoaded;
		private Function removeActionModeAsset;
		private Function requestStealthModeAsset;
		private Function hasStealthModeAssetLoaded;
		private Function removeStealthModeAsset;
		private Function setPedLodMultiplier;
		private Function __0xE861D0B05C7662B8;
		private Function setForceFootstepUpdate;
		private Function setForceStepType;
		private Function isAnyHostilePedNearPoint;
		private Function __0x820E9892A77E97CD;
		private Function __0x06087579E7AA85A9;
		private Function setPopControlSphereThisFrame;
		private Function __0xD33DAA36272177C4;
		private Function __0x711794453CFD692B;
		private Function __0x83A169EABCDB10A2;
		private Function __0x288DF530C92DAD6F;
		private Function __0x3795688A307E1EB6;
		private Function __0x0F62619393661D6E;
		private Function __0xDFE68C4B787E1BFB;
		private Function setEnableScubaGearLight;
		private Function isScubaGearLightEnabled;
		private Function __0x637822DC2AFEEBF8;
		private Function __0xFAB944D4D481ACCB;
		private Function addRope;
		private Function deleteRope;
		private Function deleteChildRope;
		private Function doesRopeExist;
		private Function ropeDrawShadowEnabled;
		private Function loadRopeData;
		private Function pinRopeVertex;
		private Function unpinRopeVertex;
		private Function getRopeVertexCount;
		private Function attachEntitiesToRope;
		private Function attachRopeToEntity;
		private Function detachRopeFromEntity;
		private Function ropeSetUpdatePinverts;
		private Function ropeSetUpdateOrder;
		private Function __0x36CCB9BE67B970FD;
		private Function __0x84DE3B5FB3E666F0;
		private Function getRopeLastVertexCoord;
		private Function getRopeVertexCoord;
		private Function startRopeWinding;
		private Function stopRopeWinding;
		private Function startRopeUnwindingFront;
		private Function stopRopeUnwindingFront;
		private Function ropeConvertToSimple;
		private Function ropeLoadTextures;
		private Function ropeAreTexturesLoaded;
		private Function ropeUnloadTextures;
		private Function doesRopeBelongToThisScript;
		private Function __0xBC0CE682D4D05650;
		private Function __0xB1B6216CA2E7B55E;
		private Function __0xB743F735C03D7810;
		private Function ropeGetDistanceBetweenEnds;
		private Function ropeForceLength;
		private Function ropeResetLength;
		private Function applyImpulseToCloth;
		private Function setDamping;
		private Function activatePhysics;
		private Function setCgoffset;
		private Function getCgoffset;
		private Function setCgAtBoundcenter;
		private Function breakEntityGlass;
		private Function getHasObjectFragInst;
		private Function setDisableBreaking;
		private Function __0xCC6E963682533882;
		private Function setDisableFragDamage;
		private Function setEntityProofUnk;
		private Function __0x9EBD751E5787BAF2;
		private Function __0xAA6A6098851C396F;
		private Function getPlayerPed;
		private Function getPlayerPedScriptIndex;
		private Function setPlayerModel;
		private Function changePlayerPed;
		private Function getPlayerRgbColour;
		private Function getNumberOfPlayers;
		private Function getPlayerTeam;
		private Function setPlayerTeam;
		private Function getNumberOfPlayersInTeam;
		private Function getPlayerName;
		private Function getWantedLevelRadius;
		private Function getPlayerWantedCentrePosition;
		private Function setPlayerWantedCentrePosition;
		private Function getWantedLevelThreshold;
		private Function setPlayerWantedLevel;
		private Function setPlayerWantedLevelNoDrop;
		private Function setPlayerWantedLevelNow;
		private Function arePlayerFlashingStarsAboutToDrop;
		private Function arePlayerStarsGreyedOut;
		private Function __0x7E07C78925D5FD96;
		private Function setDispatchCopsForPlayer;
		private Function isPlayerWantedLevelGreater;
		private Function clearPlayerWantedLevel;
		private Function isPlayerDead;
		private Function isPlayerPressingHorn;
		private Function setPlayerControl;
		private Function getPlayerWantedLevel;
		private Function setMaxWantedLevel;
		private Function setPoliceRadarBlips;
		private Function setPoliceIgnorePlayer;
		private Function isPlayerPlaying;
		private Function setEveryoneIgnorePlayer;
		private Function setAllRandomPedsFlee;
		private Function setAllRandomPedsFleeThisFrame;
		private Function __0xDE45D1A1EF45EE61;
		private Function __0xC3376F42B1FACCC6;
		private Function __0xFAC75988A7D078D3;
		private Function setIgnoreLowPriorityShockingEvents;
		private Function setWantedLevelMultiplier;
		private Function setWantedLevelDifficulty;
		private Function resetWantedLevelDifficulty;
		private Function startFiringAmnesty;
		private Function reportCrime;
		private Function switchCrimeType;
		private Function __0xBC9490CA15AEA8FB;
		private Function __0x4669B3ED80F24B4E;
		private Function __0x2F41A3BAE005E5FA;
		private Function __0xAD73CE5A09E42D12;
		private Function __0x36F1B38855F2A8DF;
		private Function __0xDC64D2C53493ED12;
		private Function __0xB45EFF719D8427A6;
		private Function __0x0032A6DBA562C518;
		private Function canPlayerStartMission;
		private Function isPlayerReadyForCutscene;
		private Function isPlayerTargettingEntity;
		private Function getPlayerTargetEntity;
		private Function isPlayerFreeAiming;
		private Function isPlayerFreeAimingAtEntity;
		private Function getEntityPlayerIsFreeAimingAt;
		private Function setPlayerLockonRangeOverride;
		private Function setPlayerCanDoDriveBy;
		private Function setPlayerCanBeHassledByGangs;
		private Function setPlayerCanUseCover;
		private Function getMaxWantedLevel;
		private Function isPlayerTargettingAnything;
		private Function setPlayerSprint;
		private Function resetPlayerStamina;
		private Function restorePlayerStamina;
		private Function getPlayerSprintStaminaRemaining;
		private Function getPlayerSprintTimeRemaining;
		private Function getPlayerUnderwaterTimeRemaining;
		private Function __0xA0D3E4F7AAFB7E78;
		private Function getPlayerGroup;
		private Function getPlayerMaxArmour;
		private Function isPlayerControlOn;
		private Function isPlayerCamControlDisabled;
		private Function isPlayerScriptControlOn;
		private Function isPlayerClimbing;
		private Function isPlayerBeingArrested;
		private Function resetPlayerArrestState;
		private Function getPlayersLastVehicle;
		private Function getPlayerIndex;
		private Function intToPlayerindex;
		private Function intToParticipantindex;
		private Function getTimeSincePlayerHitVehicle;
		private Function getTimeSincePlayerHitPed;
		private Function getTimeSincePlayerDroveOnPavement;
		private Function getTimeSincePlayerDroveAgainstTraffic;
		private Function isPlayerFreeForAmbientTask;
		private Function playerId;
		private Function playerPedId;
		private Function networkPlayerIdToInt;
		private Function hasForceCleanupOccurred;
		private Function forceCleanup;
		private Function forceCleanupForAllThreadsWithThisName;
		private Function forceCleanupForThreadWithThisId;
		private Function getCauseOfMostRecentForceCleanup;
		private Function setPlayerMayOnlyEnterThisVehicle;
		private Function setPlayerMayNotEnterAnyVehicle;
		private Function giveAchievementToPlayer;
		private Function setAchievementProgress;
		private Function getAchievementProgress;
		private Function hasAchievementBeenPassed;
		private Function isPlayerOnline;
		private Function isPlayerLoggingInNp;
		private Function displaySystemSigninUi;
		private Function isSystemUiBeingDisplayed;
		private Function setPlayerInvincible;
		private Function getPlayerInvincible;
		private Function setPlayerInvincibleKeepRagdollEnabled;
		private Function __0xCAC57395B151135F;
		private Function removePlayerHelmet;
		private Function givePlayerRagdollControl;
		private Function setPlayerLockon;
		private Function setPlayerTargetingMode;
		private Function setPlayerTargetLevel;
		private Function __0xB9CF1F793A9F1BF1;
		private Function __0xCB645E85E97EA48B;
		private Function clearPlayerHasDamagedAtLeastOnePed;
		private Function hasPlayerDamagedAtLeastOnePed;
		private Function clearPlayerHasDamagedAtLeastOneNonAnimalPed;
		private Function hasPlayerDamagedAtLeastOneNonAnimalPed;
		private Function setAirDragMultiplierForPlayersVehicle;
		private Function setSwimMultiplierForPlayer;
		private Function setRunSprintMultiplierForPlayer;
		private Function getTimeSinceLastArrest;
		private Function getTimeSinceLastDeath;
		private Function assistedMovementCloseRoute;
		private Function assistedMovementFlushRoute;
		private Function setPlayerForcedAim;
		private Function setPlayerForcedZoom;
		private Function setPlayerForceSkipAimIntro;
		private Function disablePlayerFiring;
		private Function __0xB885852C39CC265D;
		private Function setDisableAmbientMeleeMove;
		private Function setPlayerMaxArmour;
		private Function specialAbilityActivate;
		private Function setSpecialAbility;
		private Function specialAbilityDeplete;
		private Function specialAbilityDeactivate;
		private Function specialAbilityDeactivateFast;
		private Function specialAbilityReset;
		private Function specialAbilityChargeOnMissionFailed;
		private Function specialAbilityChargeSmall;
		private Function specialAbilityChargeMedium;
		private Function specialAbilityChargeLarge;
		private Function specialAbilityChargeContinuous;
		private Function specialAbilityChargeAbsolute;
		private Function specialAbilityChargeNormalized;
		private Function specialAbilityFillMeter;
		private Function specialAbilityDepleteMeter;
		private Function specialAbilityLock;
		private Function specialAbilityUnlock;
		private Function isSpecialAbilityUnlocked;
		private Function isSpecialAbilityActive;
		private Function isSpecialAbilityMeterFull;
		private Function enableSpecialAbility;
		private Function isSpecialAbilityEnabled;
		private Function setSpecialAbilityMultiplier;
		private Function __0xFFEE8FA29AB9A18E;
		private Function __0x5FC472C501CCADB3;
		private Function __0xF10B44FD479D69F3;
		private Function __0xDD2620B7B9D16FF1;
		private Function startPlayerTeleport;
		private Function hasPlayerTeleportFinished;
		private Function stopPlayerTeleport;
		private Function isPlayerTeleportActive;
		private Function getPlayerCurrentStealthNoise;
		private Function setPlayerHealthRechargeMultiplier;
		private Function getPlayerHealthRechargeLimit;
		private Function setPlayerHealthRechargeLimit;
		private Function setPlayerFallDistance;
		private Function setPlayerWeaponDamageModifier;
		private Function setPlayerWeaponDefenseModifier;
		private Function setPlayerWeaponDefenseModifier2;
		private Function setPlayerMeleeWeaponDamageModifier;
		private Function setPlayerMeleeWeaponDefenseModifier;
		private Function setPlayerVehicleDamageModifier;
		private Function setPlayerVehicleDefenseModifier;
		private Function __0x8D768602ADEF2245;
		private Function __0xD821056B9ACF8052;
		private Function __0x31E90B8873A4CD3B;
		private Function setPlayerParachuteTintIndex;
		private Function getPlayerParachuteTintIndex;
		private Function setPlayerReserveParachuteTintIndex;
		private Function getPlayerReserveParachuteTintIndex;
		private Function setPlayerParachutePackTintIndex;
		private Function getPlayerParachutePackTintIndex;
		private Function setPlayerHasReserveParachute;
		private Function getPlayerHasReserveParachute;
		private Function setPlayerCanLeaveParachuteSmokeTrail;
		private Function setPlayerParachuteSmokeTrailColor;
		private Function getPlayerParachuteSmokeTrailColor;
		private Function setPlayerResetFlagPreferRearSeats;
		private Function setPlayerNoiseMultiplier;
		private Function setPlayerSneakingNoiseMultiplier;
		private Function canPedHearPlayer;
		private Function simulatePlayerInputGait;
		private Function resetPlayerInputGait;
		private Function setAutoGiveParachuteWhenEnterPlane;
		private Function setAutoGiveScubaGearWhenExitVehicle;
		private Function setPlayerStealthPerceptionModifier;
		private Function __0x690A61A6D13583F6;
		private Function __0x9EDD76E87D5D51BA;
		private Function setPlayerSimulateAiming;
		private Function setPlayerClothPinFrames;
		private Function setPlayerClothPackageIndex;
		private Function setPlayerClothLockCounter;
		private Function playerAttachVirtualBound;
		private Function playerDetachVirtualBound;
		private Function hasPlayerBeenSpottedInStolenVehicle;
		private Function isPlayerBattleAware;
		private Function __0xBC0753C9CA14B506;
		private Function extendWorldBoundaryForPlayer;
		private Function resetWorldBoundaryForPlayer;
		private Function isPlayerRidingTrain;
		private Function hasPlayerLeftTheWorld;
		private Function setPlayerLeavePedBehind;
		private Function setPlayerParachuteVariationOverride;
		private Function clearPlayerParachuteVariationOverride;
		private Function setPlayerParachuteModelOverride;
		private Function clearPlayerParachuteModelOverride;
		private Function setPlayerParachutePackModelOverride;
		private Function clearPlayerParachutePackModelOverride;
		private Function disablePlayerVehicleRewards;
		private Function __0x2F7CEB6520288061;
		private Function setPlayerBluetoothState;
		private Function isPlayerBluetoothEnable;
		private Function __0x5501B7A5CDB79D37;
		private Function getPlayerFakeWantedLevel;
		private Function __0x55FCC0C390620314;
		private Function __0x2382AB11450AE7BA;
		private Function __0x6E4361FF3E8CD7CA;
		private Function __0x237440E46D918649;
		private Function setPlayerHomingRocketDisabled;
		private Function __0x7BAE68775557AE0B;
		private Function __0x7148E0F43D11F0D9;
		private Function __0x70A382ADEC069DD3;
		private Function __0x48621C9FCA3EBD28;
		private Function __0x81CBAE94390F9F89;
		private Function __0x13B350B8AD0EEE10;
		private Function __0x293220DA1B46CEBC;
		private Function __0x208784099002BC30;
		private Function stopRecordingThisFrame;
		private Function __0xF854439EFBB3B583;
		private Function disableRockstarEditorCameraChanges;
		private Function __0x66972397E0757E7A;
		private Function startRecording;
		private Function stopRecordingAndSaveClip;
		private Function stopRecordingAndDiscardClip;
		private Function saveRecordingClip;
		private Function isRecording;
		private Function __0xDF4B952F7D381B95;
		private Function __0x4282E08174868BE3;
		private Function __0x33D47E85B476ABCD;
		private Function __0x7E2BD3EF6C205F09;
		private Function isInteriorRenderingDisabled;
		private Function __0x5AD3932DAEB1E5D3;
		private Function __0xE058175F8EAFE79A;
		private Function resetEditorValues;
		private Function activateRockstarEditor;
		private Function requestScript;
		private Function setScriptAsNoLongerNeeded;
		private Function hasScriptLoaded;
		private Function doesScriptExist;
		private Function requestScriptWithNameHash;
		private Function setScriptWithNameHashAsNoLongerNeeded;
		private Function hasScriptWithNameHashLoaded;
		private Function doesScriptWithNameHashExist;
		private Function terminateThread;
		private Function isThreadActive;
		private Function getNameOfThread;
		private Function scriptThreadIteratorReset;
		private Function scriptThreadIteratorGetNextThreadId;
		private Function getIdOfThisThread;
		private Function terminateThisThread;
		private Function getNumberOfReferencesOfScriptWithNameHash;
		private Function getThisScriptName;
		private Function getHashOfThisScriptName;
		private Function getNumberOfEvents;
		private Function getEventExists;
		private Function getEventAtIndex;
		private Function getEventData;
		private Function triggerScriptEvent;
		private Function shutdownLoadingScreen;
		private Function setNoLoadingScreen;
		private Function getNoLoadingScreen;
		private Function __0xB1577667C3708F9B;
		private Function __0x836B62713E0534CA;
		private Function __0x760910B49D2B98EA;
		private Function bgStartContextHash;
		private Function bgEndContextHash;
		private Function bgStartContext;
		private Function bgEndContext;
		private Function __0x0F6F1EBBC4E1D5E6;
		private Function __0x22E21FBCFC88C149;
		private Function __0x829CD22E043A2577;
		private Function startShapeTestLosProbe;
		private Function startShapeTestRay;
		private Function startShapeTestBoundingBox;
		private Function startShapeTestBox;
		private Function startShapeTestBound;
		private Function startShapeTestCapsule;
		private Function startShapeTestSweptSphere;
		private Function startShapeTestSurroundingCoords;
		private Function getShapeTestResult;
		private Function getShapeTestResultIncludingMaterial;
		private Function shapeTestResultEntity;
		private Function getTotalScInboxIds;
		private Function scInboxMessageInit;
		private Function isScInboxValid;
		private Function scInboxMessagePop;
		private Function scInboxMessageGetDataInt;
		private Function scInboxMessageGetDataBool;
		private Function scInboxMessageGetDataString;
		private Function scInboxMessageDoApply;
		private Function scInboxMessageGetString;
		private Function scInboxMessagePushGamerToEventRecipList;
		private Function scInboxMessageSendUgcStatUpdateEvent;
		private Function scInboxMessageGetUgcdata;
		private Function scInboxMessageSendBountyPresenceEvent;
		private Function scInboxMessageGetBountyData;
		private Function scInboxGetEmails;
		private Function __0x16DA8172459434AA;
		private Function __0x7DB18CA8CAD5B098;
		private Function __0x4737980E8A283806;
		private Function __0x44ACA259D67651DB;
		private Function scEmailMessagePushGamerToRecipList;
		private Function scEmailMessageClearRecipList;
		private Function __0x116FB94DC4B79F17;
		private Function __0x07DBD622D9533857;
		private Function setHandleRockstarMessageViaScript;
		private Function isRockstarMessageReadyForScript;
		private Function rockstarMessageGetString;
		private Function __0x1F1E9682483697C7;
		private Function __0xC4C4575F62534A24;
		private Function __0x287F1F75D2803595;
		private Function __0x487912FD248EFDDF;
		private Function __0xC85A7127E7AD02AA;
		private Function __0xA770C8EEC6FB2AC5;
		private Function scGetIsProfileAttributeSet;
		private Function __0x7FFCBFEE44ECFABF;
		private Function __0x2D874D4AE612A65F;
		private Function scProfanityCheckString;
		private Function scProfanityCheckUgcString;
		private Function scProfanityGetCheckIsValid;
		private Function scProfanityGetCheckIsPending;
		private Function scProfanityGetStringPassed;
		private Function scProfanityGetStringStatus;
		private Function __0xF6BAAAF762E1BF40;
		private Function __0xF22CA0FD74B80E7A;
		private Function __0x9237E334F6E43156;
		private Function __0x700569DBA175A77C;
		private Function __0x1D4446A62D35B0D0;
		private Function __0x2E89990DDFF670C3;
		private Function __0xD0EE05FE193646EA;
		private Function __0x1989C6E6F67E76A8;
		private Function __0x07C61676E5BB52CD;
		private Function __0x8147FFF6A718E1AD;
		private Function __0x0F73393BAC7E6730;
		private Function __0xD302E99EDF0449CF;
		private Function __0x5C4EBFFA98BDB41C;
		private Function __0xFF8F3A92B75ED67A;
		private Function __0x4ED9C8D6DA297639;
		private Function __0x710BCDA8071EDED1;
		private Function __0x50A8A36201DBF83E;
		private Function __0x9DE5D2F723575ED0;
		private Function __0xC2C97EA97711D1AE;
		private Function __0x450819D8CF90C416;
		private Function __0x4A7D6E727F941747;
		private Function __0xE75A4A2E5E316D86;
		private Function __0x2570E26BE63964E3;
		private Function __0x1D12A56FC95BE92E;
		private Function __0x33DF47CC0642061B;
		private Function __0xA468E0BE12B12C70;
		private Function __0x8CC469AB4D349B7C;
		private Function __0xC5A35C73B68F3C49;
		private Function __0x699E4A5C8C893A18;
		private Function __0x19853B5B17D77BCA;
		private Function __0x6BFB12CE158E3DD4;
		private Function __0xFE4C1D0D3B9CC17E;
		private Function __0xD8122C407663B995;
		private Function __0x3001BEF2FECA3680;
		private Function __0x92DA6E70EF249BD1;
		private Function __0x675721C9F644D161;
		private Function __0xE4F6E8D07A2F0F51;
		private Function __0x8A4416C0DB05FA66;
		private Function __0xEA95C0853A27888E;
		private Function scGetNickname;
		private Function __0x225798743970412B;
		private Function scGetHasAchievementBeenPassed;
		private Function statClearSlotForReload;
		private Function statLoad;
		private Function statSave;
		private Function __0x5688585E6D563CD8;
		private Function statLoadPending;
		private Function statSavePending;
		private Function statSavePendingOrRequested;
		private Function statDeleteSlot;
		private Function statSlotIsLoaded;
		private Function __0x7F2C4CDF2E82DF4C;
		private Function __0xE496A53BA5F50A56;
		private Function __0xF434A10BA01C37D0;
		private Function __0x7E6946F68A38B74F;
		private Function __0xA8733668D1047B51;
		private Function __0xECB41AC6AB754401;
		private Function __0x9B4BD21D69B1E609;
		private Function __0xC0E0D686DDFC6EAE;
		private Function statSetInt;
		private Function statSetFloat;
		private Function statSetBool;
		private Function statSetGxtLabel;
		private Function statSetDate;
		private Function statSetString;
		private Function statSetPos;
		private Function statSetMaskedInt;
		private Function statSetUserId;
		private Function statSetCurrentPosixTime;
		private Function statGetInt;
		private Function statGetFloat;
		private Function statGetBool;
		private Function statGetDate;
		private Function statGetString;
		private Function statGetPos;
		private Function statGetMaskedInt;
		private Function statGetUserId;
		private Function statGetLicensePlate;
		private Function statSetLicensePlate;
		private Function statIncrement;
		private Function __0x5A556B229A169402;
		private Function __0xB1D2BB1E1631F5B1;
		private Function __0xBED9F5693F34ED17;
		private Function __0x26D7399B9587FE89;
		private Function __0xA78B8FA58200DA56;
		private Function statGetNumberOfDays;
		private Function statGetNumberOfHours;
		private Function statGetNumberOfMinutes;
		private Function statGetNumberOfSeconds;
		private Function statSetProfileSettingValue;
		private Function __0xF4D8E7AC2A27758C;
		private Function __0x94F12ABF9C79E339;
		private Function getPackedBoolStatKey;
		private Function getPackedIntStatKey;
		private Function getPackedTitleUpdateBoolStatKey;
		private Function getPackedTitleUpdateIntStatKey;
		private Function getNgstatBoolHash;
		private Function getNgstatIntHash;
		private Function statGetBoolMasked;
		private Function statSetBoolMasked;
		private Function playstatsBackgroundScriptAction;
		private Function playstatsNpcInvite;
		private Function playstatsAwardXp;
		private Function playstatsRankUp;
		private Function playstatsStartOfflineMode;
		private Function __0xA071E0ED98F91286;
		private Function __0xC5BE134EC7BA96A0;
		private Function playstatsMissionStarted;
		private Function playstatsMissionOver;
		private Function playstatsMissionCheckpoint;
		private Function playstatsRandomMissionDone;
		private Function playstatsRosBet;
		private Function playstatsRaceCheckpoint;
		private Function __0x6DEE77AFF8C21BD1;
		private Function playstatsMatchStarted;
		private Function playstatsShopItem;
		private Function playstatsCrateDrop;
		private Function playstatsCrateCreated;
		private Function playstatsHoldUp;
		private Function playstatsImpExp;
		private Function playstatsRaceToPoint;
		private Function playstatsAcquiredHiddenPackage;
		private Function playstatsWebsiteVisited;
		private Function playstatsFriendActivity;
		private Function playstatsOddjobDone;
		private Function playstatsPropChange;
		private Function playstatsClothChange;
		private Function playstatsWeaponModeChange;
		private Function playstatsCheatApplied;
		private Function __0xF8C54A461C3E11DC;
		private Function __0xF5BB8DAC426A52C0;
		private Function __0xA736CF7FB7C5BFF4;
		private Function __0x14E0B2D1AD1044E0;
		private Function playstatsQuickfixTool;
		private Function playstatsIdleKick;
		private Function __0xD1032E482629049E;
		private Function playstatsHeistSaveCheat;
		private Function playstatsDirectorMode;
		private Function playstatsAwardBadsport;
		private Function playstatsPegasaircraft;
		private Function __0x6A60E43998228229;
		private Function __0xBFAFDB5FAAA5C5AB;
		private Function __0x8C9D11605E59D955;
		private Function __0x3DE3AA516FB126A4;
		private Function __0xBAA2F0490E146BE8;
		private Function __0x1A7CE7CD3E653485;
		private Function __0x419615486BBF1956;
		private Function __0x84DFC579C2FC214C;
		private Function __0x0A9C7F36E5D7B683;
		private Function __0x164C5FF663790845;
		private Function __0xEDBF6C9B0D2C65C8;
		private Function __0x6551B1F7F6CD46EA;
		private Function __0x2CD90358F67D0AA8;
		private Function playstatsPiMenuHideSettings;
		private Function leaderboardsGetNumberOfColumns;
		private Function leaderboardsGetColumnId;
		private Function leaderboardsGetColumnType;
		private Function leaderboardsReadClearAll;
		private Function leaderboardsReadClear;
		private Function leaderboardsReadPending;
		private Function leaderboardsReadAnyPending;
		private Function leaderboardsReadSuccessful;
		private Function leaderboards2ReadFriendsByRow;
		private Function leaderboards2ReadByHandle;
		private Function leaderboards2ReadByRow;
		private Function leaderboards2ReadByRank;
		private Function leaderboards2ReadByRadius;
		private Function leaderboards2ReadByScoreInt;
		private Function leaderboards2ReadByScoreFloat;
		private Function leaderboards2ReadRankPrediction;
		private Function leaderboards2ReadByPlatform;
		private Function __0xA0F93D5465B3094D;
		private Function __0x71B008056E5692D6;
		private Function __0x34770B9CE0E03B91;
		private Function __0x88578F6EC36B4A3A;
		private Function __0x38491439B6BA7F7D;
		private Function leaderboards2WriteData;
		private Function leaderboardsWriteAddColumn;
		private Function leaderboardsWriteAddColumnLong;
		private Function leaderboardsCacheDataRow;
		private Function leaderboardsClearCacheData;
		private Function __0x8EC74CEB042E7CFF;
		private Function leaderboardsGetCacheExists;
		private Function leaderboardsGetCacheTime;
		private Function leaderboardsGetCacheNumberOfRows;
		private Function leaderboardsGetCacheDataRow;
		private Function updateStatInt;
		private Function updateStatFloat;
		private Function __0x6483C25849031C4F;
		private Function __0x5EAD2BF6484852E4;
		private Function __0xC141B8917E0017EC;
		private Function __0xB475F27C6A994D65;
		private Function __0xC67E2DA1CBE759E2;
		private Function __0xF1A1803D3476F215;
		private Function __0x38BAAA5DD4C9D19F;
		private Function __0x55384438FC55AD8E;
		private Function __0x723C1CE13FBFDB67;
		private Function __0x0D01D20616FC73FB;
		private Function __0x428EAF89E24F6C36;
		private Function __0x047CBED6F6F8B63C;
		private Function leaderboards2WriteDataForEventType;
		private Function __0x6F361B8889A792A3;
		private Function __0xC847B43F369AC0B5;
		private Function statMigrateSave;
		private Function __0x9A62EC95AE10E011;
		private Function __0x4C89FE2BDEB3F169;
		private Function __0xC6E0E2616A7576BB;
		private Function __0x5BD5F255321C4AAF;
		private Function __0xDEAAF77EB3687E97;
		private Function statSaveMigrationStatusStart;
		private Function statGetSaveMigrationStatus;
		private Function statSaveMigrationCancel;
		private Function statGetCancelSaveMigrationStatus;
		private Function statSaveMigrationConsumeContentUnlock;
		private Function statGetSaveMigrationConsumeContentUnlockStatus;
		private Function __0x98E2BC1CA26287C3;
		private Function __0x629526ABA383BCAA;
		private Function __0xBE3DB208333D9844;
		private Function __0x33D72899E24C3365;
		private Function __0xA761D4AC6115623D;
		private Function __0xF11F01D98113536A;
		private Function __0x8B9CDBD6C566C38C;
		private Function __0xE8853FBCE7D8D0D6;
		private Function __0xA943FD1722E11EFD;
		private Function __0x84A810B375E69C0E;
		private Function __0x9EC8858184CD253A;
		private Function __0xBA9749CC94C1FD85;
		private Function __0x55A8BECAF28A4EB7;
		private Function __0x32CAC93C9DE73D32;
		private Function __0xAFF47709F1D5DCCE;
		private Function __0x6E0A5253375C4584;
		private Function __0x1A8EA222F9C67DBB;
		private Function __0xF9F2922717B819EC;
		private Function __0x0B8B7F74BF061C6D;
		private Function __0xB3DA2606774A8E2D;
		private Function setHasContentUnlocksFlags;
		private Function setSaveMigrationTransactionId;
		private Function __0x6BC0ACD0673ACEBE;
		private Function __0x8D8ADB562F09A245;
		private Function __0xD1A1EE3B4FA8E760;
		private Function __0x88087EE1F28024AE;
		private Function __0xFCC228E07217FCAC;
		private Function __0x678F86D8FC040BDB;
		private Function __0xA6F54BB2FFCA35EA;
		private Function __0x5FF2C33B13A02A11;
		private Function __0x282B6739644F4347;
		private Function __0xF06A6F41CB445443;
		private Function __0x7B18DA61F6BAE9D5;
		private Function __0x06EAF70AE066441E;
		private Function __0x14EDA9EE27BD1626;
		private Function __0x930F504203F561C9;
		private Function __0xE3261D791EB44ACB;
		private Function __0x73001E34F85137F8;
		private Function __0x53CAE13E9B426993;
		private Function __0x7D36291161859389;
		private Function playstatsSpentPiCustomLoadout;
		private Function __0xD6781E42755531F7;
		private Function __0xC729991A9065376E;
		private Function __0x2605663BD4F23B5D;
		private Function __0x04D90BA8207ADA2D;
		private Function __0x60EEDC12AF66E846;
		private Function __0x3EBEAC6C3F81F6BD;
		private Function __0x96E6D5150DBF1C09;
		private Function __0xA3C53804BDB68ED2;
		private Function __0x6BCCF9948492FD85;
		private Function hiredLimo;
		private Function orderedBossVehicle;
		private Function __0xD1C9B92BDD3F151D;
		private Function __0x44919CC079BB60BF;
		private Function __0x7033EEFD9B28088E;
		private Function __0xAA525DFF66BB82F5;
		private Function __0x015B03EE1C43E6EC;
		private Function playstatsStuntPerformedEventAllowTrigger;
		private Function playstatsStuntPerformedEventDisallowTrigger;
		private Function __0xBF371CD2B64212FD;
		private Function __0x7D8BA05688AD64C7;
		private Function __0x0B565B0AAE56A0E8;
		private Function __0x28ECB8AC2F607DB2;
		private Function playstatsChangeMcEmblem;
		private Function __0xCC25A4553DFBF9EA;
		private Function __0xF534D94DFA2EAD26;
		private Function __0xD558BEC0BBA7E8D2;
		private Function playstatsEarnedMcPoints;
		private Function __0x03C2EEBB04B3FB72;
		private Function __0x8989CBD7B4E82534;
		private Function __0x27AA1C973CACFE63;
		private Function playstatsCopyRankIntoNewSlot;
		private Function playstatsDupeDetection;
		private Function playstatsBanAlert;
		private Function playstatsGunrunMissionEnded;
		private Function __0xDAF80797FC534BEC;
		private Function __0x316DB59CD14C1774;
		private Function __0x2D7A9B577E72385E;
		private Function __0x830C3A44EB3F2CF9;
		private Function __0xB26F670685631727;
		private Function __0xC14BD9F5337219B2;
		private Function playstatsStoneHatchetEnd;
		private Function playstatsSmugMissionEnded;
		private Function playstatsH2FmprepEnd;
		private Function playstatsH2InstanceEnd;
		private Function playstatsDarMissionEnd;
		private Function playstatsEnterSessionPack;
		private Function playstatsDroneUsage;
		private Function playstatsSpectatorWheelSpin;
		private Function playstatsArenaWarSpectator;
		private Function playstatsArenaWarsEnded;
		private Function playstatsPassiveMode;
		private Function playstatsCollectible;
		private Function playstatsCasinoStoryMissionEnded;
		private Function playstatsCasinoChip;
		private Function playstatsCasinoRoulette;
		private Function playstatsCasinoBlackjack;
		private Function playstatsCasinoThreecardpoker;
		private Function playstatsCasinoSlotmachine;
		private Function playstatsCasinoInsidetrack;
		private Function playstatsCasinoLuckyseven;
		private Function playstatsCasinoRouletteLight;
		private Function playstatsCasinoBlackjackLight;
		private Function playstatsCasinoThreecardpokerLight;
		private Function playstatsCasinoSlotmachineLight;
		private Function playstatsCasinoInsidetrackLight;
		private Function playstatsArcadegame;
		private Function playstatsCasinoMissionEnded;
		private Function loadAllObjectsNow;
		private Function loadScene;
		private Function networkUpdateLoadScene;
		private Function isNetworkLoadingScene;
		private Function setInteriorActive;
		private Function requestModel;
		private Function requestMenuPedModel;
		private Function hasModelLoaded;
		private Function requestModelsInRoom;
		private Function setModelAsNoLongerNeeded;
		private Function isModelInCdimage;
		private Function isModelValid;
		private Function isModelAPed;
		private Function isModelAVehicle;
		private Function requestCollisionAtCoord;
		private Function requestCollisionForModel;
		private Function hasCollisionForModelLoaded;
		private Function requestAdditionalCollisionAtCoord;
		private Function doesAnimDictExist;
		private Function requestAnimDict;
		private Function hasAnimDictLoaded;
		private Function removeAnimDict;
		private Function requestAnimSet;
		private Function hasAnimSetLoaded;
		private Function removeAnimSet;
		private Function requestClipSet;
		private Function hasClipSetLoaded;
		private Function removeClipSet;
		private Function requestIpl;
		private Function removeIpl;
		private Function isIplActive;
		private Function setStreaming;
		private Function setGamePausesForStreaming;
		private Function setReducePedModelBudget;
		private Function setReduceVehicleModelBudget;
		private Function setDitchPoliceModels;
		private Function getNumberOfStreamingRequests;
		private Function requestPtfxAsset;
		private Function hasPtfxAssetLoaded;
		private Function removePtfxAsset;
		private Function requestNamedPtfxAsset;
		private Function hasNamedPtfxAssetLoaded;
		private Function removeNamedPtfxAsset;
		private Function setVehiclePopulationBudget;
		private Function setPedPopulationBudget;
		private Function clearFocus;
		private Function setFocusPosAndVel;
		private Function setFocusEntity;
		private Function isEntityFocus;
		private Function __0x0811381EF5062FEC;
		private Function setMapdatacullboxEnabled;
		private Function __0x4E52E752C76E7E7A;
		private Function formatFocusHeading;
		private Function __0x1F3F018BC3AFA77C;
		private Function __0x0AD9710CEE2F590F;
		private Function __0x1EE7D8DF4425F053;
		private Function __0x7D41E9D2D17C5B2D;
		private Function __0x07C313F94746702C;
		private Function __0xBC9823AB80A3DCAC;
		private Function newLoadSceneStart;
		private Function newLoadSceneStartSphere;
		private Function newLoadSceneStop;
		private Function isNewLoadSceneActive;
		private Function isNewLoadSceneLoaded;
		private Function __0x71E7B2E657449AAD;
		private Function startPlayerSwitch;
		private Function stopPlayerSwitch;
		private Function isPlayerSwitchInProgress;
		private Function getPlayerSwitchType;
		private Function getIdealPlayerSwitchType;
		private Function getPlayerSwitchState;
		private Function getPlayerShortSwitchState;
		private Function __0x5F2013F8BC24EE69;
		private Function getPlayerSwitchJumpCutIndex;
		private Function setPlayerSwitchOutro;
		private Function setPlayerSwitchEstablishingShot;
		private Function __0x43D1680C6D19A8E9;
		private Function __0x74DE2E8739086740;
		private Function __0x8E2A065ABDAE6994;
		private Function __0xAD5FDF34B81BFE79;
		private Function isSwitchReadyForDescent;
		private Function enableSwitchPauseBeforeDescent;
		private Function disableSwitchOutroFx;
		private Function switchOutPlayer;
		private Function switchInPlayer;
		private Function __0x933BBEEB8C61B5F4;
		private Function getPlayerSwitchInterpOutDuration;
		private Function __0x5B48A06DD0E792A5;
		private Function isSwitchSkippingDescent;
		private Function __0x1E9057A74FD73E23;
		private Function __0x0C15B0E443B2349D;
		private Function __0xA76359FC80B2438E;
		private Function __0xBED8CA5FF5E04113;
		private Function __0x472397322E92A856;
		private Function __0x40AEFD1A244741F2;
		private Function __0x03F1A106BDA7DD3E;
		private Function __0x95A7DABDDBB78AE7;
		private Function __0x63EB2B972A218CAC;
		private Function __0xFB199266061F820A;
		private Function __0xF4A0DADB70F57FA6;
		private Function __0x5068F488DDB54DD8;
		private Function prefetchSrl;
		private Function isSrlLoaded;
		private Function beginSrl;
		private Function endSrl;
		private Function setSrlTime;
		private Function __0xEF39EE20C537E98C;
		private Function __0xBEB2D9A1D9A8F55A;
		private Function __0x20C6C7E4EB082A7F;
		private Function __0xF8155A7F03DDFC8E;
		private Function setHdArea;
		private Function clearHdArea;
		private Function initCreatorBudget;
		private Function shutdownCreatorBudget;
		private Function addModelToCreatorBudget;
		private Function removeModelFromCreatorBudget;
		private Function getUsedCreatorModelMemoryPercentage;
		private Function taskPause;
		private Function taskStandStill;
		private Function taskJump;
		private Function taskCower;
		private Function taskHandsUp;
		private Function updateTaskHandsUpDuration;
		private Function taskOpenVehicleDoor;
		private Function taskEnterVehicle;
		private Function taskLeaveVehicle;
		private Function taskGetOffBoat;
		private Function taskSkyDive;
		private Function taskParachute;
		private Function taskParachuteToTarget;
		private Function setParachuteTaskTarget;
		private Function setParachuteTaskThrust;
		private Function taskRappelFromHeli;
		private Function taskVehicleDriveToCoord;
		private Function taskVehicleDriveToCoordLongrange;
		private Function taskVehicleDriveWander;
		private Function taskFollowToOffsetOfEntity;
		private Function taskGoStraightToCoord;
		private Function taskGoStraightToCoordRelativeToEntity;
		private Function taskAchieveHeading;
		private Function taskFlushRoute;
		private Function taskExtendRoute;
		private Function taskFollowPointRoute;
		private Function taskGoToEntity;
		private Function taskSmartFleeCoord;
		private Function taskSmartFleePed;
		private Function taskReactAndFleePed;
		private Function taskShockingEventReact;
		private Function taskWanderInArea;
		private Function taskWanderStandard;
		private Function taskVehiclePark;
		private Function taskStealthKill;
		private Function taskPlantBomb;
		private Function taskFollowNavMeshToCoord;
		private Function taskFollowNavMeshToCoordAdvanced;
		private Function setPedPathCanUseClimbovers;
		private Function setPedPathCanUseLadders;
		private Function setPedPathCanDropFromHeight;
		private Function __0x88E32DB8C1A4AA4B;
		private Function setPedPathMayEnterWater;
		private Function setPedPathPreferToAvoidWater;
		private Function setPedPathAvoidFire;
		private Function setGlobalMinBirdFlightHeight;
		private Function getNavmeshRouteDistanceRemaining;
		private Function getNavmeshRouteResult;
		private Function __0x3E38E28A1D80DDF6;
		private Function taskGoToCoordAnyMeans;
		private Function taskGoToCoordAnyMeansExtraParams;
		private Function taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed;
		private Function taskPlayAnim;
		private Function taskPlayAnimAdvanced;
		private Function stopAnimTask;
		private Function taskScriptedAnimation;
		private Function playEntityScriptedAnim;
		private Function stopAnimPlayback;
		private Function setAnimWeight;
		private Function setAnimRate;
		private Function setAnimLooped;
		private Function taskPlayPhoneGestureAnimation;
		private Function taskStopPhoneGestureAnimation;
		private Function isPlayingPhoneGestureAnim;
		private Function getPhoneGestureAnimCurrentTime;
		private Function getPhoneGestureAnimTotalTime;
		private Function taskVehiclePlayAnim;
		private Function taskLookAtCoord;
		private Function taskLookAtEntity;
		private Function taskClearLookAt;
		private Function openSequenceTask;
		private Function closeSequenceTask;
		private Function taskPerformSequence;
		private Function taskPerformSequenceLocally;
		private Function clearSequenceTask;
		private Function setSequenceToRepeat;
		private Function getSequenceProgress;
		private Function getIsTaskActive;
		private Function getScriptTaskStatus;
		private Function getActiveVehicleMissionType;
		private Function taskLeaveAnyVehicle;
		private Function taskAimGunScripted;
		private Function taskAimGunScriptedWithTarget;
		private Function updateTaskAimGunScriptedTarget;
		private Function getClipSetForScriptedGunTask;
		private Function taskAimGunAtEntity;
		private Function taskTurnPedToFaceEntity;
		private Function taskAimGunAtCoord;
		private Function taskShootAtCoord;
		private Function taskShuffleToNextVehicleSeat;
		private Function clearPedTasks;
		private Function clearPedSecondaryTask;
		private Function taskEveryoneLeaveVehicle;
		private Function taskGotoEntityOffset;
		private Function taskGotoEntityOffsetXy;
		private Function taskTurnPedToFaceCoord;
		private Function taskVehicleTempAction;
		private Function taskVehicleMission;
		private Function taskVehicleMissionPedTarget;
		private Function taskVehicleMissionCoorsTarget;
		private Function taskVehicleEscort;
		private Function taskVehicleFollow;
		private Function taskVehicleChase;
		private Function taskVehicleHeliProtect;
		private Function setTaskVehicleChaseBehaviorFlag;
		private Function setTaskVehicleChaseIdealPursuitDistance;
		private Function taskHeliChase;
		private Function taskPlaneChase;
		private Function taskPlaneLand;
		private Function __0xDBBC7A2432524127;
		private Function __0x53DDC75BC3AC0A90;
		private Function taskPlaneGotoPreciseVtol;
		private Function taskHeliMission;
		private Function taskHeliEscortHeli;
		private Function taskPlaneMission;
		private Function taskPlaneTaxi;
		private Function taskBoatMission;
		private Function taskDriveBy;
		private Function setDrivebyTaskTarget;
		private Function clearDrivebyTaskUnderneathDrivingTask;
		private Function isDrivebyTaskUnderneathDrivingTask;
		private Function controlMountedWeapon;
		private Function setMountedWeaponTarget;
		private Function isMountedWeaponTaskUnderneathDrivingTask;
		private Function taskUseMobilePhone;
		private Function taskUseMobilePhoneTimed;
		private Function taskChatToPed;
		private Function taskWarpPedIntoVehicle;
		private Function taskShootAtEntity;
		private Function taskClimb;
		private Function taskClimbLadder;
		private Function clearPedTasksImmediately;
		private Function taskPerformSequenceFromProgress;
		private Function setNextDesiredMoveState;
		private Function setPedDesiredMoveBlendRatio;
		private Function getPedDesiredMoveBlendRatio;
		private Function taskGotoEntityAiming;
		private Function taskSetDecisionMaker;
		private Function taskSetSphereDefensiveArea;
		private Function taskClearDefensiveArea;
		private Function taskPedSlideToCoord;
		private Function taskPedSlideToCoordHdgRate;
		private Function addCoverPoint;
		private Function removeCoverPoint;
		private Function doesScriptedCoverPointExistAtCoords;
		private Function getScriptedCoverPointCoords;
		private Function taskCombatPed;
		private Function taskCombatPedTimed;
		private Function taskSeekCoverFromPos;
		private Function taskSeekCoverFromPed;
		private Function taskSeekCoverToCoverPoint;
		private Function taskSeekCoverToCoords;
		private Function taskPutPedDirectlyIntoCover;
		private Function taskExitCover;
		private Function taskPutPedDirectlyIntoMelee;
		private Function taskToggleDuck;
		private Function taskGuardCurrentPosition;
		private Function taskGuardAssignedDefensiveArea;
		private Function taskGuardSphereDefensiveArea;
		private Function taskStandGuard;
		private Function setDriveTaskCruiseSpeed;
		private Function setDriveTaskMaxCruiseSpeed;
		private Function setDriveTaskDrivingStyle;
		private Function addCoverBlockingArea;
		private Function removeAllCoverBlockingAreas;
		private Function __0xFA83CA6776038F64;
		private Function __0x1F351CF1C6475734;
		private Function taskStartScenarioInPlace;
		private Function taskStartScenarioAtPosition;
		private Function taskUseNearestScenarioToCoord;
		private Function taskUseNearestScenarioToCoordWarp;
		private Function taskUseNearestScenarioChainToCoord;
		private Function taskUseNearestScenarioChainToCoordWarp;
		private Function doesScenarioExistInArea;
		private Function doesScenarioOfTypeExistInArea;
		private Function isScenarioOccupied;
		private Function pedHasUseScenarioTask;
		private Function playAnimOnRunningScenario;
		private Function doesScenarioGroupExist;
		private Function isScenarioGroupEnabled;
		private Function setScenarioGroupEnabled;
		private Function resetScenarioGroupsEnabled;
		private Function setExclusiveScenarioGroup;
		private Function resetExclusiveScenarioGroup;
		private Function isScenarioTypeEnabled;
		private Function setScenarioTypeEnabled;
		private Function resetScenarioTypesEnabled;
		private Function isPedActiveInScenario;
		private Function __0x621C6E4729388E41;
		private Function setPedCanPlayAmbientIdles;
		private Function taskCombatHatedTargetsInArea;
		private Function taskCombatHatedTargetsAroundPed;
		private Function taskCombatHatedTargetsAroundPedTimed;
		private Function taskThrowProjectile;
		private Function taskSwapWeapon;
		private Function taskReloadWeapon;
		private Function isPedGettingUp;
		private Function taskWrithe;
		private Function isPedInWrithe;
		private Function openPatrolRoute;
		private Function closePatrolRoute;
		private Function addPatrolRouteNode;
		private Function addPatrolRouteLink;
		private Function createPatrolRoute;
		private Function deletePatrolRoute;
		private Function taskPatrol;
		private Function taskStayInCover;
		private Function addVehicleSubtaskAttackCoord;
		private Function addVehicleSubtaskAttackPed;
		private Function taskVehicleShootAtPed;
		private Function taskVehicleAimAtPed;
		private Function taskVehicleShootAtCoord;
		private Function taskVehicleAimAtCoord;
		private Function taskVehicleGotoNavmesh;
		private Function taskGoToCoordWhileAimingAtCoord;
		private Function taskGoToCoordWhileAimingAtEntity;
		private Function taskGoToCoordAndAimAtHatedEntitiesNearCoord;
		private Function taskGoToEntityWhileAimingAtCoord;
		private Function taskGoToEntityWhileAimingAtEntity;
		private Function setHighFallTask;
		private Function requestWaypointRecording;
		private Function getIsWaypointRecordingLoaded;
		private Function removeWaypointRecording;
		private Function waypointRecordingGetNumPoints;
		private Function waypointRecordingGetCoord;
		private Function waypointRecordingGetSpeedAtPoint;
		private Function waypointRecordingGetClosestWaypoint;
		private Function taskFollowWaypointRecording;
		private Function isWaypointPlaybackGoingOnForPed;
		private Function getPedWaypointProgress;
		private Function getPedWaypointDistance;
		private Function setPedWaypointRouteOffset;
		private Function getWaypointDistanceAlongRoute;
		private Function waypointPlaybackGetIsPaused;
		private Function waypointPlaybackPause;
		private Function waypointPlaybackResume;
		private Function waypointPlaybackOverrideSpeed;
		private Function waypointPlaybackUseDefaultSpeed;
		private Function useWaypointRecordingAsAssistedMovementRoute;
		private Function waypointPlaybackStartAimingAtPed;
		private Function waypointPlaybackStartAimingAtCoord;
		private Function waypointPlaybackStartShootingAtPed;
		private Function waypointPlaybackStartShootingAtCoord;
		private Function waypointPlaybackStopAimingOrShooting;
		private Function assistedMovementRequestRoute;
		private Function assistedMovementRemoveRoute;
		private Function assistedMovementIsRouteLoaded;
		private Function assistedMovementSetRouteProperties;
		private Function assistedMovementOverrideLoadDistanceThisFrame;
		private Function taskVehicleFollowWaypointRecording;
		private Function isWaypointPlaybackGoingOnForVehicle;
		private Function getVehicleWaypointProgress;
		private Function getVehicleWaypointTargetPoint;
		private Function vehicleWaypointPlaybackPause;
		private Function vehicleWaypointPlaybackResume;
		private Function vehicleWaypointPlaybackUseDefaultSpeed;
		private Function vehicleWaypointPlaybackOverrideSpeed;
		private Function taskSetBlockingOfNonTemporaryEvents;
		private Function taskForceMotionState;
		private Function taskMoveNetworkByName;
		private Function taskMoveNetworkAdvancedByName;
		private Function taskMoveNetworkByNameWithInitParams;
		private Function isTaskMoveNetworkActive;
		private Function isTaskMoveNetworkReadyForTransition;
		private Function requestTaskMoveNetworkStateTransition;
		private Function __0xAB13A5565480B6D9;
		private Function getTaskMoveNetworkState;
		private Function __0x8423541E8B3A1589;
		private Function setTaskMoveNetworkSignalFloat;
		private Function setTaskMoveNetworkSignalFloat2;
		private Function __0x8634CEF2522D987B;
		private Function setTaskMoveNetworkSignalBool;
		private Function getTaskMoveNetworkSignalFloat;
		private Function getTaskMoveNetworkSignalBool;
		private Function getTaskMoveNetworkEvent;
		private Function isMoveBlendRatioStill;
		private Function isMoveBlendRatioWalking;
		private Function isMoveBlendRatioRunning;
		private Function isMoveBlendRatioSprinting;
		private Function isPedStill;
		private Function isPedWalking;
		private Function isPedRunning;
		private Function isPedSprinting;
		private Function isPedStrafing;
		private Function taskSynchronizedScene;
		private Function taskAgitatedAction;
		private Function taskSweepAimEntity;
		private Function updateTaskSweepAimEntity;
		private Function taskSweepAimPosition;
		private Function updateTaskSweepAimPosition;
		private Function taskArrestPed;
		private Function isPedRunningArrestTask;
		private Function isPedBeingArrested;
		private Function uncuffPed;
		private Function isPedCuffed;
		private Function createVehicle;
		private Function deleteVehicle;
		private Function __0x7D6F9A3EF26136A0;
		private Function setVehicleCanBeLockedOn;
		private Function setVehicleAllowNoPassengersLockon;
		private Function __0xE6B0E8CFC3633BF0;
		private Function __0x6EAAEFC76ACC311F;
		private Function __0x407DC5E97DB1A4D3;
		private Function isVehicleModel;
		private Function doesScriptVehicleGeneratorExist;
		private Function createScriptVehicleGenerator;
		private Function deleteScriptVehicleGenerator;
		private Function setScriptVehicleGenerator;
		private Function setAllVehicleGeneratorsActiveInArea;
		private Function setAllVehicleGeneratorsActive;
		private Function setAllLowPriorityVehicleGeneratorsActive;
		private Function __0x9A75585FB2E54FAD;
		private Function __0x0A436B8643716D14;
		private Function setVehicleOnGroundProperly;
		private Function setVehicleUseCutsceneWheelCompression;
		private Function isVehicleStuckOnRoof;
		private Function addVehicleUpsidedownCheck;
		private Function removeVehicleUpsidedownCheck;
		private Function isVehicleStopped;
		private Function getVehicleNumberOfPassengers;
		private Function getVehicleMaxNumberOfPassengers;
		private Function getVehicleModelNumberOfSeats;
		private Function isSeatWarpOnly;
		private Function isTurretSeat;
		private Function doesVehicleAllowRappel;
		private Function setVehicleDensityMultiplierThisFrame;
		private Function setRandomVehicleDensityMultiplierThisFrame;
		private Function setParkedVehicleDensityMultiplierThisFrame;
		private Function setDisableRandomTrainsThisFrame;
		private Function setAmbientVehicleRangeMultiplierThisFrame;
		private Function setFarDrawVehicles;
		private Function setNumberOfParkedVehicles;
		private Function setVehicleDoorsLocked;
		private Function setVehicleDoorDestroyType;
		private Function setVehicleHasMutedSirens;
		private Function setVehicleDoorsLockedForPlayer;
		private Function getVehicleDoorsLockedForPlayer;
		private Function setVehicleDoorsLockedForAllPlayers;
		private Function setVehicleDoorsLockedForNonScriptPlayers;
		private Function setVehicleDoorsLockedForTeam;
		private Function setVehicleDoorsLockedForUnk;
		private Function __0x76D26A22750E849E;
		private Function explodeVehicle;
		private Function setVehicleOutOfControl;
		private Function setVehicleTimedExplosion;
		private Function addVehiclePhoneExplosiveDevice;
		private Function clearVehiclePhoneExplosiveDevice;
		private Function hasVehiclePhoneExplosiveDevice;
		private Function detonateVehiclePhoneExplosiveDevice;
		private Function setTaxiLights;
		private Function isTaxiLightOn;
		private Function isVehicleInGarageArea;
		private Function setVehicleColours;
		private Function setVehicleFullbeam;
		private Function setVehicleIsRacing;
		private Function setVehicleCustomPrimaryColour;
		private Function getVehicleCustomPrimaryColour;
		private Function clearVehicleCustomPrimaryColour;
		private Function getIsVehiclePrimaryColourCustom;
		private Function setVehicleCustomSecondaryColour;
		private Function getVehicleCustomSecondaryColour;
		private Function clearVehicleCustomSecondaryColour;
		private Function getIsVehicleSecondaryColourCustom;
		private Function setVehicleEnveffScale;
		private Function getVehicleEnveffScale;
		private Function setCanResprayVehicle;
		private Function __0xAB31EF4DE6800CE9;
		private Function __0x1B212B26DD3C04DF;
		private Function forceSubmarineSurfaceMode;
		private Function setSubmarineCrushDepths;
		private Function __0xED5EDE9E676643C9;
		private Function setBoatAnchor;
		private Function canAnchorBoatHere;
		private Function canAnchorBoatHere2;
		private Function setBoatFrozenWhenAnchored;
		private Function __0xB28B1FE5BFADD7F5;
		private Function setBoatMovementResistance;
		private Function isBoatAnchoredAndFrozen;
		private Function setBoatSinksWhenWrecked;
		private Function setBoatIsSinking;
		private Function setVehicleSiren;
		private Function isVehicleSirenOn;
		private Function isVehicleSirenAudioOn;
		private Function setVehicleStrong;
		private Function removeVehicleStuckCheck;
		private Function getVehicleColours;
		private Function isVehicleSeatFree;
		private Function getPedInVehicleSeat;
		private Function getLastPedInVehicleSeat;
		private Function getVehicleLightsState;
		private Function isVehicleTyreBurst;
		private Function setVehicleForwardSpeed;
		private Function __0x6501129C9E0FFA05;
		private Function bringVehicleToHalt;
		private Function __0xDCE97BDF8A0EABC8;
		private Function __0x9849DE24FCF23CCC;
		private Function __0x7C06330BFDDA182E;
		private Function __0xC69BB1D832A710EF;
		private Function setForkliftForkHeight;
		private Function isEntityAttachedToHandlerFrame;
		private Function __0x62CA17B74C435651;
		private Function findVehicleCarryingThisEntity;
		private Function isHandlerFrameAboveContainer;
		private Function __0x6A98C2ECF57FA5D4;
		private Function detachContainerFromHandlerFrame;
		private Function __0x8AA9180DE2FEDD45;
		private Function setBoatDisableAvoidance;
		private Function isHeliLandingAreaBlocked;
		private Function __0x107A473D7A6647A9;
		private Function setHeliTurbulenceScalar;
		private Function setCarBootOpen;
		private Function setVehicleTyreBurst;
		private Function setVehicleDoorsShut;
		private Function setVehicleTyresCanBurst;
		private Function getVehicleTyresCanBurst;
		private Function setVehicleWheelsCanBreak;
		private Function setVehicleDoorOpen;
		private Function __0x3B458DDB57038F08;
		private Function __0xA247F9EF01D8082E;
		private Function removeVehicleWindow;
		private Function rollDownWindows;
		private Function rollDownWindow;
		private Function rollUpWindow;
		private Function smashVehicleWindow;
		private Function fixVehicleWindow;
		private Function detachVehicleWindscreen;
		private Function ejectJb700Roof;
		private Function setVehicleLights;
		private Function setVehicleUsePlayerLightSettings;
		private Function setVehicleLightsMode;
		private Function setVehicleAlarm;
		private Function startVehicleAlarm;
		private Function isVehicleAlarmActivated;
		private Function setVehicleInteriorlight;
		private Function __0x8821196D91FA2DE5;
		private Function setVehicleLightMultiplier;
		private Function attachVehicleToTrailer;
		private Function attachVehicleOnToTrailer;
		private Function stabiliseEntityAttachedToHeli;
		private Function detachVehicleFromTrailer;
		private Function isVehicleAttachedToTrailer;
		private Function setTrailerInverseMassScale;
		private Function setTrailerLegsRaised;
		private Function setTrailerLegsLowered;
		private Function setVehicleTyreFixed;
		private Function setVehicleNumberPlateText;
		private Function getVehicleNumberPlateText;
		private Function getNumberOfVehicleNumberPlates;
		private Function setVehicleNumberPlateTextIndex;
		private Function getVehicleNumberPlateTextIndex;
		private Function setRandomTrains;
		private Function createMissionTrain;
		private Function switchTrainTrack;
		private Function setTrainTrackSpawnFrequency;
		private Function deleteAllTrains;
		private Function setTrainSpeed;
		private Function setTrainCruiseSpeed;
		private Function setRandomBoats;
		private Function setGarbageTrucks;
		private Function doesVehicleHaveStuckVehicleCheck;
		private Function getVehicleRecordingId;
		private Function requestVehicleRecording;
		private Function hasVehicleRecordingBeenLoaded;
		private Function removeVehicleRecording;
		private Function getPositionOfVehicleRecordingIdAtTime;
		private Function getPositionOfVehicleRecordingAtTime;
		private Function getRotationOfVehicleRecordingIdAtTime;
		private Function getRotationOfVehicleRecordingAtTime;
		private Function getTotalDurationOfVehicleRecordingId;
		private Function getTotalDurationOfVehicleRecording;
		private Function getPositionInRecording;
		private Function getTimePositionInRecording;
		private Function startPlaybackRecordedVehicle;
		private Function startPlaybackRecordedVehicleWithFlags;
		private Function __0x1F2E4E06DEA8992B;
		private Function stopPlaybackRecordedVehicle;
		private Function pausePlaybackRecordedVehicle;
		private Function unpausePlaybackRecordedVehicle;
		private Function isPlaybackGoingOnForVehicle;
		private Function isPlaybackUsingAiGoingOnForVehicle;
		private Function getCurrentPlaybackForVehicle;
		private Function skipToEndAndStopPlaybackRecordedVehicle;
		private Function setPlaybackSpeed;
		private Function startPlaybackRecordedVehicleUsingAi;
		private Function skipTimeInPlaybackRecordedVehicle;
		private Function setPlaybackToUseAi;
		private Function setPlaybackToUseAiTryToRevertBackLater;
		private Function __0x5845066D8A1EA7F7;
		private Function __0x796A877E459B99EA;
		private Function __0xFAF2A78061FD9EF4;
		private Function __0x063AE2B2CC273588;
		private Function explodeVehicleInCutscene;
		private Function addVehicleStuckCheckWithWarp;
		private Function setVehicleModelIsSuppressed;
		private Function getRandomVehicleInSphere;
		private Function getRandomVehicleFrontBumperInSphere;
		private Function getRandomVehicleBackBumperInSphere;
		private Function getClosestVehicle;
		private Function getTrainCarriage;
		private Function deleteMissionTrain;
		private Function setMissionTrainAsNoLongerNeeded;
		private Function setMissionTrainCoords;
		private Function isThisModelABoat;
		private Function isThisModelAJetski;
		private Function isThisModelAPlane;
		private Function isThisModelAHeli;
		private Function isThisModelACar;
		private Function isThisModelATrain;
		private Function isThisModelABike;
		private Function isThisModelABicycle;
		private Function isThisModelAQuadbike;
		private Function isThisModelAnAmphibiousCar;
		private Function isThisModelAnAmphibiousQuadbike;
		private Function setHeliBladesFullSpeed;
		private Function setHeliBladesSpeed;
		private Function __0x99CAD8E7AFDB60FA;
		private Function setVehicleCanBeTargetted;
		private Function __0xDBC631F109350B8C;
		private Function setVehicleCanBeVisiblyDamaged;
		private Function setVehicleLightsCanBeVisiblyDamaged;
		private Function __0x2311DD7159F00582;
		private Function __0x065D03A9D6B2C6B5;
		private Function getVehicleDirtLevel;
		private Function setVehicleDirtLevel;
		private Function isVehicleDamaged;
		private Function isVehicleDoorFullyOpen;
		private Function setVehicleEngineOn;
		private Function setVehicleUndriveable;
		private Function setVehicleProvidesCover;
		private Function setVehicleDoorControl;
		private Function setVehicleDoorLatched;
		private Function getVehicleDoorAngleRatio;
		private Function getPedUsingVehicleDoor;
		private Function setVehicleDoorShut;
		private Function setVehicleDoorBroken;
		private Function setVehicleCanBreak;
		private Function doesVehicleHaveRoof;
		private Function __0xC4B3347BD68BD609;
		private Function __0xD3301660A57C9272;
		private Function __0xB9562064627FF9DB;
		private Function isBigVehicle;
		private Function getNumberOfVehicleColours;
		private Function setVehicleColourCombination;
		private Function getVehicleColourCombination;
		private Function setVehicleXenonLightsColor;
		private Function getVehicleXenonLightsColor;
		private Function setVehicleIsConsideredByPlayer;
		private Function __0xBE5C1255A1830FF5;
		private Function __0x9BECD4B9FEF3F8A6;
		private Function __0x88BC673CA9E0AE99;
		private Function __0xE851E480B814D4BA;
		private Function getRandomVehicleModelInMemory;
		private Function getVehicleDoorLockStatus;
		private Function __0xCA4AC3EAAE46EC7B;
		private Function isVehicleDoorDamaged;
		private Function setVehicleDoorCanBreak;
		private Function isVehicleBumperBouncing;
		private Function isVehicleBumperBrokenOff;
		private Function isCopVehicleInArea3d;
		private Function isVehicleOnAllWheels;
		private Function __0x5873C14A52D74236;
		private Function getVehicleLayoutHash;
		private Function __0xA01BC64DD4BFBBAC;
		private Function setRenderTrainAsDerailed;
		private Function setVehicleExtraColours;
		private Function getVehicleExtraColours;
		private Function setVehicleInteriorColor;
		private Function getVehicleInteriorColor;
		private Function setVehicleDashboardColor;
		private Function getVehicleDashboardColor;
		private Function stopAllGarageActivity;
		private Function setVehicleFixed;
		private Function setVehicleDeformationFixed;
		private Function setVehicleCanEngineOperateOnFire;
		private Function setVehicleCanLeakOil;
		private Function setVehicleCanLeakPetrol;
		private Function setDisableVehiclePetrolTankFires;
		private Function setDisableVehiclePetrolTankDamage;
		private Function setDisableVehicleEngineFires;
		private Function __0xC50CE861B55EAB8B;
		private Function __0x6EBFB22D646FFC18;
		private Function setDisablePretendOccupants;
		private Function removeVehiclesFromGeneratorsInArea;
		private Function setVehicleSteerBias;
		private Function isVehicleExtraTurnedOn;
		private Function setVehicleExtra;
		private Function doesExtraExist;
		private Function __0x534E36D4DB9ECC5D;
		private Function setConvertibleRoof;
		private Function lowerConvertibleRoof;
		private Function raiseConvertibleRoof;
		private Function getConvertibleRoofState;
		private Function isVehicleAConvertible;
		private Function transformVehicleToSubmarine;
		private Function transformSubmarineToVehicle;
		private Function getIsSubmarineVehicleTransformed;
		private Function isVehicleStoppedAtTrafficLights;
		private Function setVehicleDamage;
		private Function __0x35BB21DE06784373;
		private Function getVehicleEngineHealth;
		private Function setVehicleEngineHealth;
		private Function __0x2A86A0475B6A1434;
		private Function getVehiclePetrolTankHealth;
		private Function setVehiclePetrolTankHealth;
		private Function isVehicleStuckTimerUp;
		private Function resetVehicleStuckTimer;
		private Function isVehicleDriveable;
		private Function setVehicleHasBeenOwnedByPlayer;
		private Function setVehicleNeedsToBeHotwired;
		private Function __0x9F3F689B814F2599;
		private Function __0x4E74E62E0A97E901;
		private Function startVehicleHorn;
		private Function setVehicleSilent;
		private Function setVehicleHasStrongAxles;
		private Function getDisplayNameFromVehicleModel;
		private Function getVehicleDeformationAtPos;
		private Function setVehicleLivery;
		private Function getVehicleLivery;
		private Function getVehicleLiveryCount;
		private Function setVehicleRoofLivery;
		private Function getVehicleRoofLivery;
		private Function getVehicleRoofLiveryCount;
		private Function isVehicleWindowIntact;
		private Function areAllVehicleWindowsIntact;
		private Function areAnyVehicleSeatsFree;
		private Function resetVehicleWheels;
		private Function isHeliPartBroken;
		private Function getHeliMainRotorHealth;
		private Function getHeliTailRotorHealth;
		private Function getHeliTailBoomHealth;
		private Function __0x4056EA1105F5ABD7;
		private Function setHeliTailRotorHealth;
		private Function setHeliTailExplodeThrowDashboard;
		private Function setVehicleNameDebug;
		private Function setVehicleExplodesOnHighExplosionDamage;
		private Function __0xD565F438137F0E10;
		private Function __0x3441CAD2F2231923;
		private Function setVehicleDisableTowing;
		private Function doesVehicleHaveLandingGear;
		private Function controlLandingGear;
		private Function getLandingGearState;
		private Function isAnyVehicleNearPoint;
		private Function requestVehicleHighDetailModel;
		private Function removeVehicleHighDetailModel;
		private Function isVehicleHighDetail;
		private Function requestVehicleAsset;
		private Function hasVehicleAssetLoaded;
		private Function removeVehicleAsset;
		private Function setVehicleTowTruckArmPosition;
		private Function attachVehicleToTowTruck;
		private Function detachVehicleFromTowTruck;
		private Function detachVehicleFromAnyTowTruck;
		private Function isVehicleAttachedToTowTruck;
		private Function getEntityAttachedToTowTruck;
		private Function setVehicleAutomaticallyAttaches;
		private Function setVehicleBulldozerArmPosition;
		private Function setVehicleTankTurretPosition;
		private Function __0x0581730AB9380412;
		private Function __0x737E398138550FFF;
		private Function __0x1093408B4B9D1146;
		private Function disableVehicleTurretMovementThisFrame;
		private Function setVehicleFlightNozzlePosition;
		private Function setVehicleFlightNozzlePositionImmediate;
		private Function getVehicleFlightNozzlePosition;
		private Function setDisableVehicleFlightNozzlePosition;
		private Function __0xA4822F1CF23F4810;
		private Function setVehicleBurnout;
		private Function isVehicleInBurnout;
		private Function setVehicleReduceGrip;
		private Function __0x6DEE944E1EE90CFB;
		private Function setVehicleIndicatorLights;
		private Function setVehicleBrakeLights;
		private Function setVehicleHandbrake;
		private Function setVehicleBrake;
		private Function __0x48ADC8A773564670;
		private Function __0x91D6DD290888CBAB;
		private Function __0x51DB102F4A3BA5E0;
		private Function __0xA4A9A4C40E615885;
		private Function getVehicleTrailerVehicle;
		private Function __0xCAC66558B944DA67;
		private Function setVehicleRudderBroken;
		private Function setConvertibleRoofLatchState;
		private Function getVehicleEstimatedMaxSpeed;
		private Function getVehicleMaxBraking;
		private Function getVehicleMaxTraction;
		private Function getVehicleAcceleration;
		private Function getVehicleModelEstimatedMaxSpeed;
		private Function getVehicleModelMaxBraking;
		private Function getVehicleModelMaxBrakingMaxMods;
		private Function getVehicleModelMaxTraction;
		private Function getVehicleModelAcceleration;
		private Function getVehicleModelEstimatedAgility;
		private Function getVehicleModelMaxKnots;
		private Function getVehicleModelMoveResistance;
		private Function getVehicleClassEstimatedMaxSpeed;
		private Function getVehicleClassMaxTraction;
		private Function getVehicleClassMaxAgility;
		private Function getVehicleClassMaxAcceleration;
		private Function getVehicleClassMaxBraking;
		private Function addSpeedZoneForCoord;
		private Function removeSpeedZone;
		private Function openBombBayDoors;
		private Function closeBombBayDoors;
		private Function areBombBayDoorsOpen;
		private Function isVehicleSearchlightOn;
		private Function setVehicleSearchlight;
		private Function __0x639431E895B9AA57;
		private Function getEntryPositionOfDoor;
		private Function canShuffleSeat;
		private Function getNumModKits;
		private Function setVehicleModKit;
		private Function getVehicleModKit;
		private Function getVehicleModKitType;
		private Function getVehicleWheelType;
		private Function setVehicleWheelType;
		private Function getNumModColors;
		private Function setVehicleModColor1;
		private Function setVehicleModColor2;
		private Function getVehicleModColor1;
		private Function getVehicleModColor2;
		private Function getVehicleModColor1Name;
		private Function getVehicleModColor2Name;
		private Function isVehicleModLoadDone;
		private Function setVehicleMod;
		private Function getVehicleMod;
		private Function getVehicleModVariation;
		private Function getNumVehicleMods;
		private Function removeVehicleMod;
		private Function toggleVehicleMod;
		private Function isToggleModOn;
		private Function getModTextLabel;
		private Function getModSlotName;
		private Function getLiveryName;
		private Function getVehicleModModifierValue;
		private Function getVehicleModIdentifierHash;
		private Function preloadVehicleMod;
		private Function hasPreloadModsFinished;
		private Function releasePreloadMods;
		private Function setVehicleTyreSmokeColor;
		private Function getVehicleTyreSmokeColor;
		private Function setVehicleWindowTint;
		private Function getVehicleWindowTint;
		private Function getNumVehicleWindowTints;
		private Function getVehicleColor;
		private Function __0xEEBFC7A7EFDC35B4;
		private Function getVehicleCauseOfDestruction;
		private Function __0x5EE5632F47AE9695;
		private Function getIsLeftVehicleHeadlightDamaged;
		private Function getIsRightVehicleHeadlightDamaged;
		private Function isVehicleEngineOnFire;
		private Function modifyVehicleTopSpeed;
		private Function setVehicleMaxSpeed;
		private Function __0x1CF38D529D7441D9;
		private Function __0x1F9FB66F3A3842D2;
		private Function __0x59C3757B3B7408E8;
		private Function addVehicleCombatAngledAvoidanceArea;
		private Function removeVehicleCombatAvoidanceArea;
		private Function isAnyPassengerRappelingFromVehicle;
		private Function setVehicleCheatPowerIncrease;
		private Function __0x0AD9E8F87FF7C16F;
		private Function setVehicleIsWanted;
		private Function __0xF488C566413B4232;
		private Function __0xC1F981A6F74F0C23;
		private Function __0x0F3B4D4E43177236;
		private Function getBoatBoomPositionRatio;
		private Function disablePlaneAileron;
		private Function getIsVehicleEngineRunning;
		private Function setVehicleUseAlternateHandling;
		private Function setBikeOnStand;
		private Function __0xAB04325045427AAE;
		private Function __0xCFD778E7904C255E;
		private Function setLastDrivenVehicle;
		private Function getLastDrivenVehicle;
		private Function clearLastDrivenVehicle;
		private Function setVehicleHasBeenDrivenFlag;
		private Function setTaskVehicleGotoPlaneMinHeightAboveTerrain;
		private Function setVehicleLodMultiplier;
		private Function setVehicleCanSaveInGarage;
		private Function getVehicleNumberOfBrokenOffBones;
		private Function getVehicleNumberOfBrokenBones;
		private Function __0x4D9D109F63FEE1D4;
		private Function __0x279D50DE5652D935;
		private Function copyVehicleDamages;
		private Function __0xF25E02CB9C5818F8;
		private Function setLightsCutoffDistanceTweak;
		private Function setVehicleShootAtTarget;
		private Function getVehicleLockOnTarget;
		private Function setForceHdVehicle;
		private Function __0x182F266C2D9E2BEB;
		private Function getVehiclePlateType;
		private Function trackVehicleVisibility;
		private Function isVehicleVisible;
		private Function setVehicleGravity;
		private Function __0xE6C0C80B8C867537;
		private Function __0xF051D9BFB6BA39C0;
		private Function __0x36492C2F0D134C56;
		private Function __0x48C633E94A8142A7;
		private Function setVehicleInactiveDuringPlayback;
		private Function setVehicleActiveDuringPlayback;
		private Function isVehicleSprayable;
		private Function setVehicleEngineCanDegrade;
		private Function __0xF0E4BA16D1DB546C;
		private Function __0xF87D9F2301F7D206;
		private Function isPlaneLandingGearIntact;
		private Function arePlanePropellersIntact;
		private Function __0x4C815EB175086F84;
		private Function setVehicleCanDeformWheels;
		private Function isVehicleStolen;
		private Function setVehicleIsStolen;
		private Function setPlaneTurbulenceMultiplier;
		private Function arePlaneWingsIntact;
		private Function __0xB264C4D2F2B0A78B;
		private Function detachVehicleFromCargobob;
		private Function detachVehicleFromAnyCargobob;
		private Function detachEntityFromCargobob;
		private Function isVehicleAttachedToCargobob;
		private Function getVehicleAttachedToCargobob;
		private Function getEntityAttachedToCargobob;
		private Function attachVehicleToCargobob;
		private Function attachEntityToCargobob;
		private Function __0x571FEB383F629926;
		private Function __0x1F34B0626C594380;
		private Function __0x2C1D8B3B19E517CC;
		private Function getCargobobHookPosition;
		private Function doesCargobobHavePickUpRope;
		private Function createPickUpRopeForCargobob;
		private Function removePickUpRopeForCargobob;
		private Function setCargobobHookPosition;
		private Function __0xC0ED6438E6D39BA8;
		private Function setCargobobPickupRopeDampingMultiplier;
		private Function setCargobobPickupRopeType;
		private Function doesCargobobHavePickupMagnet;
		private Function setCargobobPickupMagnetActive;
		private Function setCargobobPickupMagnetStrength;
		private Function setCargobobPickupMagnetEffectRadius;
		private Function setCargobobPickupMagnetReducedFalloff;
		private Function setCargobobPickupMagnetPullRopeLength;
		private Function setCargobobPickupMagnetPullStrength;
		private Function setCargobobPickupMagnetFalloff;
		private Function setCargobobPickupMagnetReducedStrength;
		private Function __0x9BDDC73CC6A115D4;
		private Function __0x56EB5E94318D3FB6;
		private Function doesVehicleHaveWeapons;
		private Function __0x2C4A1590ABF43E8B;
		private Function disableVehicleWeapon;
		private Function isVehicleWeaponDisabled;
		private Function __0xE05DD0E9707003A3;
		private Function setVehicleCloseDoorDeferedAction;
		private Function getVehicleClass;
		private Function getVehicleClassFromName;
		private Function setPlayersLastVehicle;
		private Function setVehicleCanBeUsedByFleeingPeds;
		private Function __0xE5810AC70602F2F5;
		private Function setVehicleDropsMoneyWhenBlownUp;
		private Function setVehicleJetEngineOn;
		private Function __0x6A973569BA094650;
		private Function setVehicleHandlingHashForAi;
		private Function setVehicleExtendedRemovalRange;
		private Function setVehicleSteeringBiasScalar;
		private Function setHelicopterRollPitchYawMult;
		private Function setVehicleFrictionOverride;
		private Function setVehicleWheelsCanBreakOffWhenBlowUp;
		private Function __0xF78F94D60248C737;
		private Function setVehicleCeilingHeight;
		private Function __0x5E569EC46EC21CAE;
		private Function clearVehicleRouteHistory;
		private Function doesVehicleExistWithDecorator;
		private Function setVehicleExclusiveDriver;
		private Function setVehicleExclusiveDriver2;
		private Function __0xB09D25E77C33EB3F;
		private Function disablePlanePropeller;
		private Function setVehicleForceAfterburner;
		private Function setDisableVehicleWindowCollisions;
		private Function __0xB68CFAF83A02768D;
		private Function __0x0205F5365292D2EB;
		private Function __0xCF9159024555488C;
		private Function setDistantCarsEnabled;
		private Function setVehicleNeonLightsColour;
		private Function __0xB93B2867F7B479D1;
		private Function getVehicleNeonLightsColour;
		private Function setVehicleNeonLightEnabled;
		private Function isVehicleNeonLightEnabled;
		private Function __0x35E0654F4BAD7971;
		private Function disableVehicleNeonLights;
		private Function __0xB088E9A47AE6EDD5;
		private Function requestVehicleDashboardScaleformMovie;
		private Function getVehicleBodyHealth;
		private Function setVehicleBodyHealth;
		private Function getVehicleSuspensionBounds;
		private Function getVehicleSuspensionHeight;
		private Function setCarHighSpeedBumpSeverityMultiplier;
		private Function getNumberOfVehicleDoors;
		private Function setHydraulicRaised;
		private Function __0xA7DCDF4DED40A8F4;
		private Function getVehicleBodyHealth2;
		private Function __0xD4C4642CB7F50B5D;
		private Function __0xC361AA040D6637A8;
		private Function setVehicleKersAllowed;
		private Function getVehicleHasKers;
		private Function __0xE16142B94664DEFD;
		private Function __0x26D99D5A82FD18E8;
		private Function setHydraulicState;
		private Function setCamberedWheelsDisabled;
		private Function setHydraulicWheelState;
		private Function setHydraulicWheelStateTransition;
		private Function __0x5BA68A0840D546AC;
		private Function __0x4419966C9936071A;
		private Function __0x870B8B7A766615C8;
		private Function __0x8533CAFDE1F0F336;
		private Function setVehicleDamageModifier;
		private Function setVehicleUnkDamageMultiplier;
		private Function __0xD4196117AF7BB974;
		private Function __0xBB2333BB87DDD87F;
		private Function __0x73561D4425A021A2;
		private Function __0x5B91B229243351A8;
		private Function __0x7BBE7FF626A591FE;
		private Function __0x65B080555EA48149;
		private Function __0x428AD3E26C8D9EB0;
		private Function __0xE2F53F172B45EDE1;
		private Function __0xBA91D045575699AD;
		private Function __0x80E3357FDEF45C21;
		private Function setVehicleRampLaunchModifier;
		private Function getIsDoorValid;
		private Function setVehicleRocketBoostRefillTime;
		private Function getHasRocketBoost;
		private Function isVehicleRocketBoostActive;
		private Function setVehicleRocketBoostActive;
		private Function getHasRetractableWheels;
		private Function getIsWheelsLoweredStateActive;
		private Function raiseRetractableWheels;
		private Function lowerRetractableWheels;
		private Function getCanVehicleJump;
		private Function setUseHigherVehicleJumpForce;
		private Function __0xB2E0C0D6922D31F2;
		private Function setVehicleWeaponCapacity;
		private Function getVehicleWeaponCapacity;
		private Function getVehicleHasParachute;
		private Function getVehicleCanActivateParachute;
		private Function setVehicleParachuteActive;
		private Function __0x3DE51E9C80B116CF;
		private Function setVehicleReceivesRampDamage;
		private Function setVehicleRampSidewaysLaunchMotion;
		private Function setVehicleRampUpwardsLaunchMotion;
		private Function __0x9D30687C57BAA0BB;
		private Function setVehicleWeaponsDisabled;
		private Function __0x41290B40FA63E6DA;
		private Function setVehicleParachuteModel;
		private Function setVehicleParachuteTextureVariatiion;
		private Function __0x0419B167EE128F33;
		private Function __0xF3B0E0AED097A3F5;
		private Function __0xD3E51C0AB8C26EEE;
		private Function getAllVehicles;
		private Function __0x72BECCF4B829522E;
		private Function __0x66E3AAFACE2D1EB8;
		private Function __0x1312DDD8385AEE4E;
		private Function __0xEDBC8405B3895CC9;
		private Function __0x26E13D440E7F6064;
		private Function __0x2FA2494B47FDD009;
		private Function setVehicleRocketBoostPercentage;
		private Function __0x544996C0081ABDEB;
		private Function __0x78CEEE41F49F421F;
		private Function __0xAF60E6A2936F982A;
		private Function __0x430A7631A84C9BE7;
		private Function __0x75627043C6AA90AD;
		private Function __0x8235F1BEAD557629;
		private Function __0x9640E30A7F395E4B;
		private Function __0x0BBB9A7A8FFE931B;
		private Function __0x94A68DA412C4007D;
		private Function setVehicleBombCount;
		private Function getVehicleBombCount;
		private Function setVehicleCountermeasureCount;
		private Function getVehicleCountermeasureCount;
		private Function __0x0A3F820A9A9A9AC5;
		private Function __0x51F30DB60626A20E;
		private Function __0x97841634EF7DF1D6;
		private Function setVehicleHoverTransformRatio;
		private Function setVehicleHoverTransformPercentage;
		private Function setVehicleHoverTransformEnabled;
		private Function setVehicleHoverTransformActive;
		private Function __0x3A9128352EAC9E85;
		private Function __0x8DC9675797123522;
		private Function __0xB251E0B33E58B424;
		private Function __0xAEF12960FA943792;
		private Function __0xAA653AE61924B0A0;
		private Function __0xC60060EB0D8AC7B1;
		private Function setSpecialflightWingRatio;
		private Function __0xE615BB7A7752C76A;
		private Function __0x887FA38787DE8C72;
		private Function setUnkFloat0x104ForSubmarineVehicleTask;
		private Function setUnkBool0x102ForSubmarineVehicleTask;
		private Function __0x36DE109527A2C0C4;
		private Function __0x82E0AC411E41A5B4;
		private Function __0x99A05839C46CE316;
		private Function getIsVehicleShuntBoostActive;
		private Function __0xE8718FAF591FD224;
		private Function getLastRammedVehicle;
		private Function setDisableVehicleUnk;
		private Function setVehicleNitroEnabled;
		private Function setVehicleWheelsDealDamage;
		private Function setDisableVehicleUnk2;
		private Function __0x5BBCF35BF6E456F7;
		private Function getDoesVehicleHaveTombstone;
		private Function hideVehicleTombstone;
		private Function getIsVehicleEmpDisabled;
		private Function __0x8F0D5BA1C2CC91D7;
		private Function getWaterHeight;
		private Function getWaterHeightNoWaves;
		private Function testProbeAgainstWater;
		private Function testProbeAgainstAllWater;
		private Function testVerticalProbeAgainstAllWater;
		private Function modifyWater;
		private Function addCurrentRise;
		private Function removeCurrentRise;
		private Function setDeepOceanScaler;
		private Function getDeepOceanScaler;
		private Function __0x547237AA71AB44DE;
		private Function resetDeepOceanScaler;
		private Function enableLaserSightRendering;
		private Function getWeaponComponentTypeModel;
		private Function getWeapontypeModel;
		private Function getWeapontypeSlot;
		private Function getWeapontypeGroup;
		private Function getWeaponComponentVariantExtraComponentCount;
		private Function getWeaponComponentVariantExtraComponentModel;
		private Function setCurrentPedWeapon;
		private Function getCurrentPedWeapon;
		private Function getCurrentPedWeaponEntityIndex;
		private Function getBestPedWeapon;
		private Function setCurrentPedVehicleWeapon;
		private Function getCurrentPedVehicleWeapon;
		private Function __0x50276EF8172F5F12;
		private Function isPedArmed;
		private Function isWeaponValid;
		private Function hasPedGotWeapon;
		private Function isPedWeaponReadyToShoot;
		private Function getPedWeapontypeInSlot;
		private Function getAmmoInPedWeapon;
		private Function addAmmoToPed;
		private Function setPedAmmo;
		private Function setPedInfiniteAmmo;
		private Function setPedInfiniteAmmoClip;
		private Function giveWeaponToPed;
		private Function giveDelayedWeaponToPed;
		private Function removeAllPedWeapons;
		private Function removeWeaponFromPed;
		private Function hidePedWeaponForScriptedCutscene;
		private Function setPedCurrentWeaponVisible;
		private Function setPedDropsWeaponsWhenDead;
		private Function hasPedBeenDamagedByWeapon;
		private Function clearPedLastWeaponDamage;
		private Function hasEntityBeenDamagedByWeapon;
		private Function clearEntityLastWeaponDamage;
		private Function setPedDropsWeapon;
		private Function setPedDropsInventoryWeapon;
		private Function getMaxAmmoInClip;
		private Function getAmmoInClip;
		private Function setAmmoInClip;
		private Function getMaxAmmo;
		private Function getMaxAmmo2;
		private Function addPedAmmo;
		private Function setPedAmmoByType;
		private Function getPedAmmoByType;
		private Function setPedAmmoToDrop;
		private Function __0xE620FD3512A04F18;
		private Function getPedAmmoTypeFromWeapon;
		private Function getPedAmmoTypeFromWeapon2;
		private Function getPedLastWeaponImpactCoord;
		private Function setPedGadget;
		private Function getIsPedGadgetEquipped;
		private Function getSelectedPedWeapon;
		private Function explodeProjectiles;
		private Function removeAllProjectilesOfType;
		private Function getLockonDistanceOfCurrentPedWeapon;
		private Function getMaxRangeOfCurrentPedWeapon;
		private Function hasVehicleGotProjectileAttached;
		private Function giveWeaponComponentToPed;
		private Function removeWeaponComponentFromPed;
		private Function hasPedGotWeaponComponent;
		private Function isPedWeaponComponentActive;
		private Function pedSkipNextReloading;
		private Function makePedReload;
		private Function requestWeaponAsset;
		private Function hasWeaponAssetLoaded;
		private Function removeWeaponAsset;
		private Function createWeaponObject;
		private Function giveWeaponComponentToWeaponObject;
		private Function removeWeaponComponentFromWeaponObject;
		private Function hasWeaponGotWeaponComponent;
		private Function giveWeaponObjectToPed;
		private Function doesWeaponTakeWeaponComponent;
		private Function getWeaponObjectFromPed;
		private Function giveLoadoutToPed;
		private Function setPedWeaponTintIndex;
		private Function getPedWeaponTintIndex;
		private Function setWeaponObjectTintIndex;
		private Function getWeaponObjectTintIndex;
		private Function getWeaponTintCount;
		private Function setPedWeaponLiveryColor;
		private Function getPedWeaponLiveryColor;
		private Function setWeaponObjectLiveryColor;
		private Function getWeaponObjectLiveryColor;
		private Function __0xA2C9AC24B4061285;
		private Function __0x977CA98939E82E4B;
		private Function getWeaponHudStats;
		private Function getWeaponComponentHudStats;
		private Function getWeaponDamage;
		private Function getWeaponClipSize;
		private Function getWeaponTimeBetweenShots;
		private Function setPedChanceOfFiringBlanks;
		private Function setPedShootOrdnanceWeapon;
		private Function requestWeaponHighDetailModel;
		private Function setWeaponDamageModifier;
		private Function isPedCurrentWeaponSilenced;
		private Function isFlashLightOn;
		private Function setFlashLightFadeDistance;
		private Function setWeaponAnimationOverride;
		private Function getWeaponDamageType;
		private Function __0xE4DCEC7FD5B739A5;
		private Function canUseWeaponOnParachute;
		private Function createAirDefenseSphere;
		private Function createAirDefenseArea;
		private Function removeAirDefenseZone;
		private Function removeAllAirDefenseZones;
		private Function setPlayerAirDefenseZoneFlag;
		private Function isAirDefenseZoneInsideSphere;
		private Function fireAirDefenseWeapon;
		private Function doesAirDefenseZoneExist;
		private Function setCanPedEquipWeapon;
		private Function setCanPedEquipAllWeapons;
		private Function getZoneAtCoords;
		private Function getZoneFromNameId;
		private Function getZonePopschedule;
		private Function getNameOfZone;
		private Function setZoneEnabled;
		private Function getZoneScumminess;
		private Function overridePopscheduleVehicleModel;
		private Function clearPopscheduleOverrideVehicleModel;
		private Function getHashOfMapAreaAtCoords;

		public NativeNatives(JSObject native)
		{
			this.native = native;
		}

		private static Vector3 JSObjectToVector3(object obj) {
			var jsObject = (JSObject) obj;
			return new Vector3((float) jsObject.GetObjectProperty("x"), (float) jsObject.GetObjectProperty("y"),(float) jsObject.GetObjectProperty("z"));
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// </summary>
		public void SetDebugLinesAndSpheresDrawingActive(bool enabled)
		{
			if (setDebugLinesAndSpheresDrawingActive == null) setDebugLinesAndSpheresDrawingActive = (Function) native.GetObjectProperty("setDebugLinesAndSpheresDrawingActive");
			setDebugLinesAndSpheresDrawingActive.Call(native, enabled);
		}

		public void DrawDebugLine(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (drawDebugLine == null) drawDebugLine = (Function) native.GetObjectProperty("drawDebugLine");
			drawDebugLine.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// </summary>
		public void DrawDebugLineWithTwoColours(double x1, double y1, double z1, double x2, double y2, double z2, int r1, int g1, int b1, int r2, int g2, int b2, int alpha1, int alpha2)
		{
			if (drawDebugLineWithTwoColours == null) drawDebugLineWithTwoColours = (Function) native.GetObjectProperty("drawDebugLineWithTwoColours");
			drawDebugLineWithTwoColours.Call(native, x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// </summary>
		public void DrawDebugSphere(double x, double y, double z, double radius, int red, int green, int blue, int alpha)
		{
			if (drawDebugSphere == null) drawDebugSphere = (Function) native.GetObjectProperty("drawDebugSphere");
			drawDebugSphere.Call(native, x, y, z, radius, red, green, blue, alpha);
		}

		public void DrawDebugBox(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (drawDebugBox == null) drawDebugBox = (Function) native.GetObjectProperty("drawDebugBox");
			drawDebugBox.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// </summary>
		public void DrawDebugCross(double x, double y, double z, double size, int red, int green, int blue, int alpha)
		{
			if (drawDebugCross == null) drawDebugCross = (Function) native.GetObjectProperty("drawDebugCross");
			drawDebugCross.Call(native, x, y, z, size, red, green, blue, alpha);
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// </summary>
		public void DrawDebugText(string text, double x, double y, double z, int red, int green, int blue, int alpha)
		{
			if (drawDebugText == null) drawDebugText = (Function) native.GetObjectProperty("drawDebugText");
			drawDebugText.Call(native, text, x, y, z, red, green, blue, alpha);
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// </summary>
		public void DrawDebugText2d(string text, double x, double y, double z, int red, int green, int blue, int alpha)
		{
			if (drawDebugText2d == null) drawDebugText2d = (Function) native.GetObjectProperty("drawDebugText2d");
			drawDebugText2d.Call(native, text, x, y, z, red, green, blue, alpha);
		}

		/// <summary>
		/// Draws a depth-tested line from one point to another.
		/// ----------------
		/// x1, y1, z1 : Coordinates for the first point
		/// x2, y2, z2 : Coordinates for the second point
		/// r, g, b, alpha : Color with RGBA-Values
		/// I recommend using a predefined function to call this.
		/// [VB.NET]
		/// Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
		/// [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
		/// See NativeDB for reference: http://natives.altv.mp/#/0x6B7256074AE34680
		/// </summary>
		public void DrawLine(double x1, double y1, double z1, double x2, double y2, double z2, int red, int green, int blue, int alpha)
		{
			if (drawLine == null) drawLine = (Function) native.GetObjectProperty("drawLine");
			drawLine.Call(native, x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
		}

		/// <summary>
		/// x/y/z - Location of a vertex (in world coords), presumably.
		/// ----------------
		/// x1, y1, z1     : Coordinates for the first point
		/// x2, y2, z2     : Coordinates for the second point
		/// x3, y3, z3     : Coordinates for the third point
		/// r, g, b, alpha : Color with RGBA-Values
		/// Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
		/// But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
		/// I recommend using a predefined function to call this.
		/// See NativeDB for reference: http://natives.altv.mp/#/0xAC26716048436851
		/// </summary>
		public void DrawPoly(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, int red, int green, int blue, int alpha)
		{
			if (drawPoly == null) drawPoly = (Function) native.GetObjectProperty("drawPoly");
			drawPoly.Call(native, x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
		}

		/// <summary>
		/// DRAW_*
		/// </summary>
		public void _0x29280002282F1928(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12, object p13, object p14, object p15, object p16, object p17, object p18, object p19, object p20, object p21, object p22, object p23)
		{
			if (__0x29280002282F1928 == null) __0x29280002282F1928 = (Function) native.GetObjectProperty("_0x29280002282F1928");
			__0x29280002282F1928.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23);
		}

		public void _0x736D7AA1B750856B(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12, object p13, object p14, object p15, object p16, object p17, object p18, object p19, object p20, object p21, object p22, object p23, object p24, object p25, object p26, object p27, object p28, object p29, object p30, object p31)
		{
			if (__0x736D7AA1B750856B == null) __0x736D7AA1B750856B = (Function) native.GetObjectProperty("_0x736D7AA1B750856B");
			__0x736D7AA1B750856B.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31);
		}

		/// <summary>
		/// x,y,z = start pos
		/// x2,y2,z2 = end pos
		/// Draw's a 3D Box between the two x,y,z coords.
		/// --------------
		/// Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
		/// I recommend using a predefined function to call this.
		/// [VB.NET]
		/// Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
		/// [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
		/// See NativeDB for reference: http://natives.altv.mp/#/0xD3A9971CADAC7252
		/// </summary>
		/// <param name="z2">x2,y2,end pos</param>
		public void DrawBox(double x1, double y1, double z1, double x2, double y2, double z2, int red, int green, int blue, int alpha)
		{
			if (drawBox == null) drawBox = (Function) native.GetObjectProperty("drawBox");
			drawBox.Call(native, x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
		}

		public void SetBackfaceculling(bool toggle)
		{
			if (setBackfaceculling == null) setBackfaceculling = (Function) native.GetObjectProperty("setBackfaceculling");
			setBackfaceculling.Call(native, toggle);
		}

		public void _0xC5C8F970D4EDFF71(object p0)
		{
			if (__0xC5C8F970D4EDFF71 == null) __0xC5C8F970D4EDFF71 = (Function) native.GetObjectProperty("_0xC5C8F970D4EDFF71");
			__0xC5C8F970D4EDFF71.Call(native, p0);
		}

		public object _0x1DD2139A9A20DCE8()
		{
			if (__0x1DD2139A9A20DCE8 == null) __0x1DD2139A9A20DCE8 = (Function) native.GetObjectProperty("_0x1DD2139A9A20DCE8");
			return __0x1DD2139A9A20DCE8.Call(native);
		}

		public object _0x90A78ECAA4E78453()
		{
			if (__0x90A78ECAA4E78453 == null) __0x90A78ECAA4E78453 = (Function) native.GetObjectProperty("_0x90A78ECAA4E78453");
			return __0x90A78ECAA4E78453.Call(native);
		}

		public void _0x0A46AF8A78DC5E0A()
		{
			if (__0x0A46AF8A78DC5E0A == null) __0x0A46AF8A78DC5E0A = (Function) native.GetObjectProperty("_0x0A46AF8A78DC5E0A");
			__0x0A46AF8A78DC5E0A.Call(native);
		}

		/// <summary>
		/// LOAD_*
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x4862437A486F91B0(object p0, object p1, object p2, object p3)
		{
			if (__0x4862437A486F91B0 == null) __0x4862437A486F91B0 = (Function) native.GetObjectProperty("_0x4862437A486F91B0");
			var results = (Array) __0x4862437A486F91B0.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) _0x1670F8D05056F257(object p0)
		{
			if (__0x1670F8D05056F257 == null) __0x1670F8D05056F257 = (Function) native.GetObjectProperty("_0x1670F8D05056F257");
			var results = (Array) __0x1670F8D05056F257.Call(native, p0);
			return ((int) results[0], results[1]);
		}

		public object _0x7FA5D82B8F58EC06()
		{
			if (__0x7FA5D82B8F58EC06 == null) __0x7FA5D82B8F58EC06 = (Function) native.GetObjectProperty("_0x7FA5D82B8F58EC06");
			return __0x7FA5D82B8F58EC06.Call(native);
		}

		public object _0x5B0316762AFD4A64()
		{
			if (__0x5B0316762AFD4A64 == null) __0x5B0316762AFD4A64 = (Function) native.GetObjectProperty("_0x5B0316762AFD4A64");
			return __0x5B0316762AFD4A64.Call(native);
		}

		public void _0x346EF3ECAAAB149E()
		{
			if (__0x346EF3ECAAAB149E == null) __0x346EF3ECAAAB149E = (Function) native.GetObjectProperty("_0x346EF3ECAAAB149E");
			__0x346EF3ECAAAB149E.Call(native);
		}

		public bool BeginTakeHighQualityPhoto()
		{
			if (beginTakeHighQualityPhoto == null) beginTakeHighQualityPhoto = (Function) native.GetObjectProperty("beginTakeHighQualityPhoto");
			return (bool) beginTakeHighQualityPhoto.Call(native);
		}

		public int GetStatusOfTakeHighQualityPhoto()
		{
			if (getStatusOfTakeHighQualityPhoto == null) getStatusOfTakeHighQualityPhoto = (Function) native.GetObjectProperty("getStatusOfTakeHighQualityPhoto");
			return (int) getStatusOfTakeHighQualityPhoto.Call(native);
		}

		/// <summary>
		/// 4 matches across 2 scripts.
		/// appcamera:
		/// called after UI::HIDE_HUD_AND_RADAR_THIS_FRAME() and before GRAPHICS::0x108F36CC();
		/// cellphone_controller:
		/// called after GRAPHICS::0xE9F2B68F(0, 0) and before GRAPHICS::0x108F36CC();
		/// </summary>
		public void _0xD801CC02177FA3F1()
		{
			if (__0xD801CC02177FA3F1 == null) __0xD801CC02177FA3F1 = (Function) native.GetObjectProperty("_0xD801CC02177FA3F1");
			__0xD801CC02177FA3F1.Call(native);
		}

		public void _0x1BBC135A4D25EDDE(bool p0)
		{
			if (__0x1BBC135A4D25EDDE == null) __0x1BBC135A4D25EDDE = (Function) native.GetObjectProperty("_0x1BBC135A4D25EDDE");
			__0x1BBC135A4D25EDDE.Call(native, p0);
		}

		public void _0xF3F776ADA161E47D(object p0, object p1)
		{
			if (__0xF3F776ADA161E47D == null) __0xF3F776ADA161E47D = (Function) native.GetObjectProperty("_0xF3F776ADA161E47D");
			__0xF3F776ADA161E47D.Call(native, p0, p1);
		}

		/// <summary>
		/// 1 match in 1 script. cellphone_controller.
		/// p0 is -1 in scripts.
		/// </summary>
		public bool SaveHighQualityPhoto(int unused)
		{
			if (saveHighQualityPhoto == null) saveHighQualityPhoto = (Function) native.GetObjectProperty("saveHighQualityPhoto");
			return (bool) saveHighQualityPhoto.Call(native, unused);
		}

		public int GetStatusOfSaveHighQualityPhoto()
		{
			if (getStatusOfSaveHighQualityPhoto == null) getStatusOfSaveHighQualityPhoto = (Function) native.GetObjectProperty("getStatusOfSaveHighQualityPhoto");
			return (int) getStatusOfSaveHighQualityPhoto.Call(native);
		}

		public bool _0x759650634F07B6B4(object p0)
		{
			if (__0x759650634F07B6B4 == null) __0x759650634F07B6B4 = (Function) native.GetObjectProperty("_0x759650634F07B6B4");
			return (bool) __0x759650634F07B6B4.Call(native, p0);
		}

		public object _0xCB82A0BF0E3E3265(object p0)
		{
			if (__0xCB82A0BF0E3E3265 == null) __0xCB82A0BF0E3E3265 = (Function) native.GetObjectProperty("_0xCB82A0BF0E3E3265");
			return __0xCB82A0BF0E3E3265.Call(native, p0);
		}

		public void _0x6A12D88881435DCA()
		{
			if (__0x6A12D88881435DCA == null) __0x6A12D88881435DCA = (Function) native.GetObjectProperty("_0x6A12D88881435DCA");
			__0x6A12D88881435DCA.Call(native);
		}

		public void _0x1072F115DAB0717E(bool p0, bool p1)
		{
			if (__0x1072F115DAB0717E == null) __0x1072F115DAB0717E = (Function) native.GetObjectProperty("_0x1072F115DAB0717E");
			__0x1072F115DAB0717E.Call(native, p0, p1);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public int GetMaximumNumberOfPhotos()
		{
			if (getMaximumNumberOfPhotos == null) getMaximumNumberOfPhotos = (Function) native.GetObjectProperty("getMaximumNumberOfPhotos");
			return (int) getMaximumNumberOfPhotos.Call(native);
		}

		/// <summary>
		/// This function is hard-coded to always return 96.
		/// </summary>
		public int GetMaximumNumberOfCloudPhotos()
		{
			if (getMaximumNumberOfCloudPhotos == null) getMaximumNumberOfCloudPhotos = (Function) native.GetObjectProperty("getMaximumNumberOfCloudPhotos");
			return (int) getMaximumNumberOfCloudPhotos.Call(native);
		}

		/// <summary>
		/// GET_CURRENT_*
		/// </summary>
		public int GetCurrentNumberOfPhotos()
		{
			if (getCurrentNumberOfPhotos == null) getCurrentNumberOfPhotos = (Function) native.GetObjectProperty("getCurrentNumberOfPhotos");
			return (int) getCurrentNumberOfPhotos.Call(native);
		}

		/// <summary>
		/// 2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.
		/// </summary>
		public object _0x2A893980E96B659A(object p0)
		{
			if (__0x2A893980E96B659A == null) __0x2A893980E96B659A = (Function) native.GetObjectProperty("_0x2A893980E96B659A");
			return __0x2A893980E96B659A.Call(native, p0);
		}

		/// <summary>
		/// 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
		/// appcamera, appmedia, and cellphone_controller.
		/// </summary>
		public object _0xF5BED327CEA362B1(object p0)
		{
			if (__0xF5BED327CEA362B1 == null) __0xF5BED327CEA362B1 = (Function) native.GetObjectProperty("_0xF5BED327CEA362B1");
			return __0xF5BED327CEA362B1.Call(native, p0);
		}

		public void _0x4AF92ACD3141D96C()
		{
			if (__0x4AF92ACD3141D96C == null) __0x4AF92ACD3141D96C = (Function) native.GetObjectProperty("_0x4AF92ACD3141D96C");
			__0x4AF92ACD3141D96C.Call(native);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public object _0xE791DF1F73ED2C8B(object p0)
		{
			if (__0xE791DF1F73ED2C8B == null) __0xE791DF1F73ED2C8B = (Function) native.GetObjectProperty("_0xE791DF1F73ED2C8B");
			return __0xE791DF1F73ED2C8B.Call(native, p0);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public object _0xEC72C258667BE5EA(object p0)
		{
			if (__0xEC72C258667BE5EA == null) __0xEC72C258667BE5EA = (Function) native.GetObjectProperty("_0xEC72C258667BE5EA");
			return __0xEC72C258667BE5EA.Call(native, p0);
		}

		/// <summary>
		/// GET_L*
		/// Hardcoded to always return 2.
		/// </summary>
		public int ReturnTwo(int p0)
		{
			if (returnTwo == null) returnTwo = (Function) native.GetObjectProperty("returnTwo");
			return (int) returnTwo.Call(native, p0);
		}

		public void DrawLightWithRangeAndShadow(double x, double y, double z, int r, int g, int b, double range, double intensity, double shadow)
		{
			if (drawLightWithRangeAndShadow == null) drawLightWithRangeAndShadow = (Function) native.GetObjectProperty("drawLightWithRangeAndShadow");
			drawLightWithRangeAndShadow.Call(native, x, y, z, r, g, b, range, intensity, shadow);
		}

		public void DrawLightWithRange(double posX, double posY, double posZ, int colorR, int colorG, int colorB, double range, double intensity)
		{
			if (drawLightWithRange == null) drawLightWithRange = (Function) native.GetObjectProperty("drawLightWithRange");
			drawLightWithRange.Call(native, posX, posY, posZ, colorR, colorG, colorB, range, intensity);
		}

		/// <summary>
		/// Parameters:
		/// pos - coordinate where the spotlight is located
		/// dir - the direction vector the spotlight should aim at from its current position
		/// r,g,b - color of the spotlight
		/// distance - the maximum distance the light can reach
		/// brightness - the brightness of the light
		/// roundness - "smoothness" of the circle edge
		/// radius - the radius size of the spotlight
		/// falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
		/// See NativeDB for reference: http://natives.altv.mp/#/0xD0F64B265C8C8B33
		/// </summary>
		/// <param name="distance">the maximum distance the light can reach</param>
		/// <param name="brightness">the brightness of the light</param>
		/// <param name="radius">the radius size of the spotlight</param>
		/// <param name="falloff">the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)</param>
		public void DrawSpotLight(double posX, double posY, double posZ, double dirX, double dirY, double dirZ, int colorR, int colorG, int colorB, double distance, double brightness, double hardness, double radius, double falloff)
		{
			if (drawSpotLight == null) drawSpotLight = (Function) native.GetObjectProperty("drawSpotLight");
			drawSpotLight.Call(native, posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
		}

		public void DrawSpotLightWithShadow(double posX, double posY, double posZ, double dirX, double dirY, double dirZ, int colorR, int colorG, int colorB, double distance, double brightness, double roundness, double radius, double falloff, int shadowId)
		{
			if (drawSpotLightWithShadow == null) drawSpotLightWithShadow = (Function) native.GetObjectProperty("drawSpotLightWithShadow");
			drawSpotLightWithShadow.Call(native, posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
		}

		public void FadeUpPedLight(double p0)
		{
			if (fadeUpPedLight == null) fadeUpPedLight = (Function) native.GetObjectProperty("fadeUpPedLight");
			fadeUpPedLight.Call(native, p0);
		}

		public void UpdateLightsOnEntity(int entity)
		{
			if (updateLightsOnEntity == null) updateLightsOnEntity = (Function) native.GetObjectProperty("updateLightsOnEntity");
			updateLightsOnEntity.Call(native, entity);
		}

		public void _0x9641588DAB93B4B5(object p0)
		{
			if (__0x9641588DAB93B4B5 == null) __0x9641588DAB93B4B5 = (Function) native.GetObjectProperty("_0x9641588DAB93B4B5");
			__0x9641588DAB93B4B5.Call(native, p0);
		}

		public object _0x393BD2275CEB7793()
		{
			if (__0x393BD2275CEB7793 == null) __0x393BD2275CEB7793 = (Function) native.GetObjectProperty("_0x393BD2275CEB7793");
			return __0x393BD2275CEB7793.Call(native);
		}

		/// <summary>
		/// enum MarkerTypes
		/// {
		/// MarkerTypeUpsideDownCone = 0,
		/// MarkerTypeVerticalCylinder = 1,
		/// MarkerTypeThickChevronUp = 2,
		/// MarkerTypeThinChevronUp = 3,
		/// MarkerTypeCheckeredFlagRect = 4,
		/// MarkerTypeCheckeredFlagCircle = 5,
		/// MarkerTypeVerticleCircle = 6,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x28477EC23D892089
		/// </summary>
		public void DrawMarker(int type, double posX, double posY, double posZ, double dirX, double dirY, double dirZ, double rotX, double rotY, double rotZ, double scaleX, double scaleY, double scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, int p19, bool rotate, string textureDict, string textureName, bool drawOnEnts)
		{
			if (drawMarker == null) drawMarker = (Function) native.GetObjectProperty("drawMarker");
			drawMarker.Call(native, type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts);
		}

		public void DrawMarker2(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12, object p13, object p14, object p15, object p16, object p17, object p18, object p19, object p20, object p21, object p22, object p23, object p24, object p25)
		{
			if (drawMarker2 == null) drawMarker2 = (Function) native.GetObjectProperty("drawMarker2");
			drawMarker2.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25);
		}

		public void _0x799017F9E3B10112(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7)
		{
			if (__0x799017F9E3B10112 == null) __0x799017F9E3B10112 = (Function) native.GetObjectProperty("_0x799017F9E3B10112");
			__0x799017F9E3B10112.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
		/// Parameters:
		/// type - The type of checkpoint to create. See below for a list of checkpoint types.
		/// pos1 - The position of the checkpoint.
		/// pos2 - The position of the next checkpoint to point to.
		/// radius - The radius of the checkpoint.
		/// color - The color of the checkpoint.
		/// reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
		/// Checkpoint types:
		/// See NativeDB for reference: http://natives.altv.mp/#/0x0134F0835AB6BFCB
		/// </summary>
		/// <param name="type">The type of checkpoint to create. See below for a list of checkpoint types.</param>
		/// <param name="radius">The radius of the checkpoint.</param>
		/// <param name="reserved">Special parameter, see below for details. Usually set to 0 in the scripts.</param>
		/// <returns>Creates a checkpoint. Returns the handle of the checkpoint.</returns>
		public int CreateCheckpoint(int type, double posX1, double posY1, double posZ1, double posX2, double posY2, double posZ2, double radius, int red, int green, int blue, int alpha, int reserved)
		{
			if (createCheckpoint == null) createCheckpoint = (Function) native.GetObjectProperty("createCheckpoint");
			return (int) createCheckpoint.Call(native, type, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
		}

		/// <summary>
		/// p0 - Scale? Looks to be a normalized value (0.0 - 1.0)
		/// offroad_races.c4, line ~67407:
		/// a_3._f7 = GRAPHICS::CREATE_CHECKPOINT(v_D, v_A, a_4, a_7, v_E, v_F, v_10, sub_62b2(v_A, 220, 255), 0);
		/// UI::GET_HUD_COLOUR(134, &v_E, &v_F, &v_10, &v_11);
		/// GRAPHICS::_SET_CHECKPOINT_ICON_RGBA(a_3._f7, v_E, v_F, v_10, sub_62b2(v_A, 70, 210));
		/// GRAPHICS::_4B5B4DA5D79F1943(a_3._f7, 0.95);
		/// GRAPHICS::SET_CHECKPOINT_CYLINDER_HEIGHT(a_3._f7, 4.0, 4.0, 100.0);
		/// </summary>
		/// <param name="p0">Scale? Looks to be a normalized value (0.0 - 1.0)</param>
		public void SetCheckpointScale(int checkpoint, double p0)
		{
			if (setCheckpointScale == null) setCheckpointScale = (Function) native.GetObjectProperty("setCheckpointScale");
			setCheckpointScale.Call(native, checkpoint, p0);
		}

		public void _0x44621483FF966526(object p0, object p1)
		{
			if (__0x44621483FF966526 == null) __0x44621483FF966526 = (Function) native.GetObjectProperty("_0x44621483FF966526");
			__0x44621483FF966526.Call(native, p0, p1);
		}

		/// <summary>
		/// Sets the cylinder height of the checkpoint.
		/// Parameters:
		/// nearHeight - The height of the checkpoint when inside of the radius.
		/// farHeight - The height of the checkpoint when outside of the radius.
		/// radius - The radius of the checkpoint.
		/// </summary>
		/// <param name="nearHeight">The height of the checkpoint when inside of the radius.</param>
		/// <param name="farHeight">The height of the checkpoint when outside of the radius.</param>
		/// <param name="radius">The radius of the checkpoint.</param>
		public void SetCheckpointCylinderHeight(int checkpoint, double nearHeight, double farHeight, double radius)
		{
			if (setCheckpointCylinderHeight == null) setCheckpointCylinderHeight = (Function) native.GetObjectProperty("setCheckpointCylinderHeight");
			setCheckpointCylinderHeight.Call(native, checkpoint, nearHeight, farHeight, radius);
		}

		/// <summary>
		/// Sets the checkpoint color.
		/// </summary>
		public void SetCheckpointRgba(int checkpoint, int red, int green, int blue, int alpha)
		{
			if (setCheckpointRgba == null) setCheckpointRgba = (Function) native.GetObjectProperty("setCheckpointRgba");
			setCheckpointRgba.Call(native, checkpoint, red, green, blue, alpha);
		}

		/// <summary>
		/// Sets the checkpoint icon color.
		/// </summary>
		public void SetCheckpointIconRgba(int checkpoint, int red, int green, int blue, int alpha)
		{
			if (setCheckpointIconRgba == null) setCheckpointIconRgba = (Function) native.GetObjectProperty("setCheckpointIconRgba");
			setCheckpointIconRgba.Call(native, checkpoint, red, green, blue, alpha);
		}

		/// <summary>
		/// This does not move an existing checkpoint... so wtf.
		/// </summary>
		public void _0xF51D36185993515D(int checkpoint, double posX, double posY, double posZ, double unkX, double unkY, double unkZ)
		{
			if (__0xF51D36185993515D == null) __0xF51D36185993515D = (Function) native.GetObjectProperty("_0xF51D36185993515D");
			__0xF51D36185993515D.Call(native, checkpoint, posX, posY, posZ, unkX, unkY, unkZ);
		}

		/// <summary>
		/// SET_CHECKPOINT_*
		/// </summary>
		public void _0xFCF6788FC4860CD4(int checkpoint)
		{
			if (__0xFCF6788FC4860CD4 == null) __0xFCF6788FC4860CD4 = (Function) native.GetObjectProperty("_0xFCF6788FC4860CD4");
			__0xFCF6788FC4860CD4.Call(native, checkpoint);
		}

		/// <summary>
		/// Unknown. Called after creating a checkpoint (type: 51) in the creators.
		/// </summary>
		public void _0x615D3925E87A3B26(int checkpoint)
		{
			if (__0x615D3925E87A3B26 == null) __0x615D3925E87A3B26 = (Function) native.GetObjectProperty("_0x615D3925E87A3B26");
			__0x615D3925E87A3B26.Call(native, checkpoint);
		}

		public void _0xDB1EA9411C8911EC(object p0)
		{
			if (__0xDB1EA9411C8911EC == null) __0xDB1EA9411C8911EC = (Function) native.GetObjectProperty("_0xDB1EA9411C8911EC");
			__0xDB1EA9411C8911EC.Call(native, p0);
		}

		public void _0x3C788E7F6438754D(object p0, object p1, object p2, object p3)
		{
			if (__0x3C788E7F6438754D == null) __0x3C788E7F6438754D = (Function) native.GetObjectProperty("_0x3C788E7F6438754D");
			__0x3C788E7F6438754D.Call(native, p0, p1, p2, p3);
		}

		public void DeleteCheckpoint(int checkpoint)
		{
			if (deleteCheckpoint == null) deleteCheckpoint = (Function) native.GetObjectProperty("deleteCheckpoint");
			deleteCheckpoint.Call(native, checkpoint);
		}

		public void _0x22A249A53034450A(bool p0)
		{
			if (__0x22A249A53034450A == null) __0x22A249A53034450A = (Function) native.GetObjectProperty("_0x22A249A53034450A");
			__0x22A249A53034450A.Call(native, p0);
		}

		/// <summary>
		/// FORCE_*
		/// </summary>
		public void _0xDC459CFA0CCE245B(bool toggle)
		{
			if (__0xDC459CFA0CCE245B == null) __0xDC459CFA0CCE245B = (Function) native.GetObjectProperty("_0xDC459CFA0CCE245B");
			__0xDC459CFA0CCE245B.Call(native, toggle);
		}

		/// <summary>
		/// last param isnt a toggle
		/// </summary>
		public void RequestStreamedTextureDict(string textureDict, bool p1)
		{
			if (requestStreamedTextureDict == null) requestStreamedTextureDict = (Function) native.GetObjectProperty("requestStreamedTextureDict");
			requestStreamedTextureDict.Call(native, textureDict, p1);
		}

		public bool HasStreamedTextureDictLoaded(string textureDict)
		{
			if (hasStreamedTextureDictLoaded == null) hasStreamedTextureDictLoaded = (Function) native.GetObjectProperty("hasStreamedTextureDictLoaded");
			return (bool) hasStreamedTextureDictLoaded.Call(native, textureDict);
		}

		public void SetStreamedTextureDictAsNoLongerNeeded(string textureDict)
		{
			if (setStreamedTextureDictAsNoLongerNeeded == null) setStreamedTextureDictAsNoLongerNeeded = (Function) native.GetObjectProperty("setStreamedTextureDictAsNoLongerNeeded");
			setStreamedTextureDictAsNoLongerNeeded.Call(native, textureDict);
		}

		/// <summary>
		/// Draws a rectangle on the screen.
		/// -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
		/// -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
		/// -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
		/// -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
		/// -R: Red part of the color. (0-255)
		/// -G: Green part of the color. (0-255)
		/// -B: Blue part of the color. (0-255)
		/// -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
		/// The total number of rectangles to be drawn in one frame is apparently limited to 399.
		/// </summary>
		/// <param name="x">-The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)</param>
		/// <param name="y">-The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)</param>
		/// <param name="width">-The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)</param>
		/// <param name="height">-The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)</param>
		/// <param name="r">-R: Red part of the color. (0-255)</param>
		/// <param name="g">-G: Green part of the color. (0-255)</param>
		/// <param name="b">-B: Blue part of the color. (0-255)</param>
		/// <param name="a">-A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)</param>
		public void DrawRect(double x, double y, double width, double height, int r, int g, int b, int a, bool p8)
		{
			if (drawRect == null) drawRect = (Function) native.GetObjectProperty("drawRect");
			drawRect.Call(native, x, y, width, height, r, g, b, a, p8);
		}

		public void SetScriptGfxDrawBehindPausemenu(bool toggle)
		{
			if (setScriptGfxDrawBehindPausemenu == null) setScriptGfxDrawBehindPausemenu = (Function) native.GetObjectProperty("setScriptGfxDrawBehindPausemenu");
			setScriptGfxDrawBehindPausemenu.Call(native, toggle);
		}

		/// <summary>
		/// Called before drawing stuff.
		/// Examples:
		/// GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
		/// GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);
		/// GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
		/// GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
		/// </summary>
		public void SetScriptGfxDrawOrder(int drawOrder)
		{
			if (setScriptGfxDrawOrder == null) setScriptGfxDrawOrder = (Function) native.GetObjectProperty("setScriptGfxDrawOrder");
			setScriptGfxDrawOrder.Call(native, drawOrder);
		}

		/// <summary>
		/// Seems to move all the drawn text on the screen to given coordinates.
		/// It also removed all the drawn sprites of my screen so not to sure what the exact function is.
		/// </summary>
		public void SetScriptGfxAlign(int x, int y)
		{
			if (setScriptGfxAlign == null) setScriptGfxAlign = (Function) native.GetObjectProperty("setScriptGfxAlign");
			setScriptGfxAlign.Call(native, x, y);
		}

		public void ResetScriptGfxAlign()
		{
			if (resetScriptGfxAlign == null) resetScriptGfxAlign = (Function) native.GetObjectProperty("resetScriptGfxAlign");
			resetScriptGfxAlign.Call(native);
		}

		public void SetScriptGfxAlignParams(double x, double y, double p2, double p3)
		{
			if (setScriptGfxAlignParams == null) setScriptGfxAlignParams = (Function) native.GetObjectProperty("setScriptGfxAlignParams");
			setScriptGfxAlignParams.Call(native, x, y, p2, p3);
		}

		/// <summary>
		/// GET_*
		/// </summary>
		/// <returns>Array<void, double, double></returns>
		public (object, double, double) GetScriptGfxPosition(double p0, double p1, double p2, double p3)
		{
			if (getScriptGfxPosition == null) getScriptGfxPosition = (Function) native.GetObjectProperty("getScriptGfxPosition");
			var results = (Array) getScriptGfxPosition.Call(native, p0, p1, p2, p3);
			return (results[0], (double) results[1], (double) results[2]);
		}

		/// <summary>
		/// Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
		/// </summary>
		public double GetSafeZoneSize()
		{
			if (getSafeZoneSize == null) getSafeZoneSize = (Function) native.GetObjectProperty("getSafeZoneSize");
			return (double) getSafeZoneSize.Call(native);
		}

		/// <summary>
		/// Draws a 2D sprite on the screen.
		/// Parameters:
		/// textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
		/// textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
		/// screenX/Y - Screen offset (0.5 = center)
		/// scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
		/// heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
		/// red,green,blue - Sprite color (default = 255/255/255)
		/// alpha - opacity level
		/// </summary>
		/// <param name="textureDict">Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)</param>
		/// <param name="textureName">Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)</param>
		/// <param name="heading">Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees</param>
		/// <param name="blue">red,green,Sprite color (default = 255/255/255)</param>
		/// <param name="alpha">opacity level</param>
		public void DrawSprite(string textureDict, string textureName, double screenX, double screenY, double width, double height, double heading, int red, int green, int blue, int alpha, bool p11)
		{
			if (drawSprite == null) drawSprite = (Function) native.GetObjectProperty("drawSprite");
			drawSprite.Call(native, textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11);
		}

		public void _0x2D3B147AFAD49DE0(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11)
		{
			if (__0x2D3B147AFAD49DE0 == null) __0x2D3B147AFAD49DE0 = (Function) native.GetObjectProperty("_0x2D3B147AFAD49DE0");
			__0x2D3B147AFAD49DE0.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		}

		public void DrawInteractiveSprite(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10)
		{
			if (drawInteractiveSprite == null) drawInteractiveSprite = (Function) native.GetObjectProperty("drawInteractiveSprite");
			drawInteractiveSprite.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		}

		/// <summary>
		/// Example:
		/// GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");
		/// I tried this and nothing happened...
		/// </summary>
		public object AddEntityIcon(int entity, string icon)
		{
			if (addEntityIcon == null) addEntityIcon = (Function) native.GetObjectProperty("addEntityIcon");
			return addEntityIcon.Call(native, entity, icon);
		}

		public void SetEntityIconVisibility(int entity, bool toggle)
		{
			if (setEntityIconVisibility == null) setEntityIconVisibility = (Function) native.GetObjectProperty("setEntityIconVisibility");
			setEntityIconVisibility.Call(native, entity, toggle);
		}

		public void SetEntityIconColor(int entity, int red, int green, int blue, int alpha)
		{
			if (setEntityIconColor == null) setEntityIconColor = (Function) native.GetObjectProperty("setEntityIconColor");
			setEntityIconColor.Call(native, entity, red, green, blue, alpha);
		}

		/// <summary>
		/// Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
		/// From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.
		/// Example in C#:
		/// Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
		/// Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
		/// Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
		/// Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
		/// Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
		/// Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
		/// See NativeDB for reference: http://natives.altv.mp/#/0xAA0008F3BBB8F416
		/// </summary>
		public void SetDrawOrigin(double x, double y, double z, object p3)
		{
			if (setDrawOrigin == null) setDrawOrigin = (Function) native.GetObjectProperty("setDrawOrigin");
			setDrawOrigin.Call(native, x, y, z, p3);
		}

		/// <summary>
		/// Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.
		/// See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.
		/// </summary>
		public void ClearDrawOrigin()
		{
			if (clearDrawOrigin == null) clearDrawOrigin = (Function) native.GetObjectProperty("clearDrawOrigin");
			clearDrawOrigin.Call(native);
		}

		public int SetBinkMovieRequested(string name)
		{
			if (setBinkMovieRequested == null) setBinkMovieRequested = (Function) native.GetObjectProperty("setBinkMovieRequested");
			return (int) setBinkMovieRequested.Call(native, name);
		}

		public void PlayBinkMovie(int binkMovie)
		{
			if (playBinkMovie == null) playBinkMovie = (Function) native.GetObjectProperty("playBinkMovie");
			playBinkMovie.Call(native, binkMovie);
		}

		public void StopBinkMovie(int binkMovie)
		{
			if (stopBinkMovie == null) stopBinkMovie = (Function) native.GetObjectProperty("stopBinkMovie");
			stopBinkMovie.Call(native, binkMovie);
		}

		public void ReleaseBinkMovie(int binkMovie)
		{
			if (releaseBinkMovie == null) releaseBinkMovie = (Function) native.GetObjectProperty("releaseBinkMovie");
			releaseBinkMovie.Call(native, binkMovie);
		}

		public void DrawBinkMovie(int binkMovie, double p1, double p2, double p3, double p4, double p5, int r, int g, int b, int a)
		{
			if (drawBinkMovie == null) drawBinkMovie = (Function) native.GetObjectProperty("drawBinkMovie");
			drawBinkMovie.Call(native, binkMovie, p1, p2, p3, p4, p5, r, g, b, a);
		}

		/// <summary>
		/// In percentage: 0.0 - 100.0
		/// </summary>
		public void SetBinkMovieProgress(int binkMovie, double progress)
		{
			if (setBinkMovieProgress == null) setBinkMovieProgress = (Function) native.GetObjectProperty("setBinkMovieProgress");
			setBinkMovieProgress.Call(native, binkMovie, progress);
		}

		/// <summary>
		/// In percentage: 0.0 - 100.0
		/// </summary>
		public double GetBinkMovieProgress(int binkMovie)
		{
			if (getBinkMovieProgress == null) getBinkMovieProgress = (Function) native.GetObjectProperty("getBinkMovieProgress");
			return (double) getBinkMovieProgress.Call(native, binkMovie);
		}

		public void SetBinkMovieUnk(int binkMovie, double value)
		{
			if (setBinkMovieUnk == null) setBinkMovieUnk = (Function) native.GetObjectProperty("setBinkMovieUnk");
			setBinkMovieUnk.Call(native, binkMovie, value);
		}

		/// <summary>
		/// Might be more appropriate in AUDIO?
		/// </summary>
		public void AttachTvAudioToEntity(int entity)
		{
			if (attachTvAudioToEntity == null) attachTvAudioToEntity = (Function) native.GetObjectProperty("attachTvAudioToEntity");
			attachTvAudioToEntity.Call(native, entity);
		}

		/// <summary>
		/// Might be more appropriate in AUDIO?
		/// Rockstar made it like this.
		/// Probably changes tvs from being a 3d audio to being "global" audio
		/// </summary>
		public void SetTvAudioFrontend(bool toggle)
		{
			if (setTvAudioFrontend == null) setTvAudioFrontend = (Function) native.GetObjectProperty("setTvAudioFrontend");
			setTvAudioFrontend.Call(native, toggle);
		}

		public void _0x6805D58CAA427B72(object p0, object p1)
		{
			if (__0x6805D58CAA427B72 == null) __0x6805D58CAA427B72 = (Function) native.GetObjectProperty("_0x6805D58CAA427B72");
			__0x6805D58CAA427B72.Call(native, p0, p1);
		}

		public int LoadMovieMeshSet(string movieMeshSetName)
		{
			if (loadMovieMeshSet == null) loadMovieMeshSet = (Function) native.GetObjectProperty("loadMovieMeshSet");
			return (int) loadMovieMeshSet.Call(native, movieMeshSetName);
		}

		public void ReleaseMovieMeshSet(int movieMeshSet)
		{
			if (releaseMovieMeshSet == null) releaseMovieMeshSet = (Function) native.GetObjectProperty("releaseMovieMeshSet");
			releaseMovieMeshSet.Call(native, movieMeshSet);
		}

		public object _0x9B6E70C5CEEF4EEB(object p0)
		{
			if (__0x9B6E70C5CEEF4EEB == null) __0x9B6E70C5CEEF4EEB = (Function) native.GetObjectProperty("_0x9B6E70C5CEEF4EEB");
			return __0x9B6E70C5CEEF4EEB.Call(native, p0);
		}

		/// <summary>
		/// int screenresx,screenresy;
		/// GET_SCREEN_RESOLUTION(&screenresx,&screenresy);
		/// </summary>
		/// <returns>Array<void, int, int></returns>
		public (object, int, int) GetScreenResolution(int x, int y)
		{
			if (getScreenResolution == null) getScreenResolution = (Function) native.GetObjectProperty("getScreenResolution");
			var results = (Array) getScreenResolution.Call(native, x, y);
			return (results[0], (int) results[1], (int) results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int> Returns current screen resolution.</returns>
		public (object, int, int) GetActiveScreenResolution(int x, int y)
		{
			if (getActiveScreenResolution == null) getActiveScreenResolution = (Function) native.GetObjectProperty("getActiveScreenResolution");
			var results = (Array) getActiveScreenResolution.Call(native, x, y);
			return (results[0], (int) results[1], (int) results[2]);
		}

		public double GetAspectRatio(bool b)
		{
			if (getAspectRatio == null) getAspectRatio = (Function) native.GetObjectProperty("getAspectRatio");
			return (double) getAspectRatio.Call(native, b);
		}

		public object _0xB2EBE8CBC58B90E9()
		{
			if (__0xB2EBE8CBC58B90E9 == null) __0xB2EBE8CBC58B90E9 = (Function) native.GetObjectProperty("_0xB2EBE8CBC58B90E9");
			return __0xB2EBE8CBC58B90E9.Call(native);
		}

		/// <summary>
		/// Setting Aspect Ratio Manually in game will return:
		/// false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
		/// true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
		/// Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
		/// </summary>
		public bool GetIsWidescreen()
		{
			if (getIsWidescreen == null) getIsWidescreen = (Function) native.GetObjectProperty("getIsWidescreen");
			return (bool) getIsWidescreen.Call(native);
		}

		/// <summary>
		/// false = Any resolution < 1280x720
		/// true = Any resolution >= 1280x720
		/// </summary>
		public bool GetIsHidef()
		{
			if (getIsHidef == null) getIsHidef = (Function) native.GetObjectProperty("getIsHidef");
			return (bool) getIsHidef.Call(native);
		}

		/// <summary>
		/// AD*
		/// </summary>
		public void _0xEFABC7722293DA7C()
		{
			if (__0xEFABC7722293DA7C == null) __0xEFABC7722293DA7C = (Function) native.GetObjectProperty("_0xEFABC7722293DA7C");
			__0xEFABC7722293DA7C.Call(native);
		}

		/// <summary>
		/// Enables Night Vision.
		/// Example:
		/// C#: Function.Call(Hash.SET_NIGHTVISION, true);
		/// C++: GRAPHICS::SET_NIGHTVISION(true);
		/// BOOL toggle:
		/// true = turns night vision on for your player.
		/// false = turns night vision off for your player.
		/// </summary>
		public void SetNightvision(bool toggle)
		{
			if (setNightvision == null) setNightvision = (Function) native.GetObjectProperty("setNightvision");
			setNightvision.Call(native, toggle);
		}

		public bool GetRequestingnightvision()
		{
			if (getRequestingnightvision == null) getRequestingnightvision = (Function) native.GetObjectProperty("getRequestingnightvision");
			return (bool) getRequestingnightvision.Call(native);
		}

		public bool GetUsingnightvision()
		{
			if (getUsingnightvision == null) getUsingnightvision = (Function) native.GetObjectProperty("getUsingnightvision");
			return (bool) getUsingnightvision.Call(native);
		}

		public void _0xEF398BEEE4EF45F9(bool p0)
		{
			if (__0xEF398BEEE4EF45F9 == null) __0xEF398BEEE4EF45F9 = (Function) native.GetObjectProperty("_0xEF398BEEE4EF45F9");
			__0xEF398BEEE4EF45F9.Call(native, p0);
		}

		public void _0x814AF7DCAACC597B(object p0)
		{
			if (__0x814AF7DCAACC597B == null) __0x814AF7DCAACC597B = (Function) native.GetObjectProperty("_0x814AF7DCAACC597B");
			__0x814AF7DCAACC597B.Call(native, p0);
		}

		public void _0x43FA7CBE20DAB219(object p0)
		{
			if (__0x43FA7CBE20DAB219 == null) __0x43FA7CBE20DAB219 = (Function) native.GetObjectProperty("_0x43FA7CBE20DAB219");
			__0x43FA7CBE20DAB219.Call(native, p0);
		}

		public void SetNoiseoveride(bool toggle)
		{
			if (setNoiseoveride == null) setNoiseoveride = (Function) native.GetObjectProperty("setNoiseoveride");
			setNoiseoveride.Call(native, toggle);
		}

		public void SetNoisinessoveride(double value)
		{
			if (setNoisinessoveride == null) setNoisinessoveride = (Function) native.GetObjectProperty("setNoisinessoveride");
			setNoisinessoveride.Call(native, value);
		}

		/// <summary>
		/// Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
		/// For .NET users...
		/// VB:
		/// Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
		/// Dim x2dp, y2dp As New Native.OutputArgument
		/// Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
		/// Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
		/// End Function
		/// C#:
		/// See NativeDB for reference: http://natives.altv.mp/#/0x34E82F05DF2974F5
		/// </summary>
		/// <returns>Array<bool, double, double> Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.</returns>
		public (bool, double, double) GetScreenCoordFromWorldCoord(double worldX, double worldY, double worldZ, double screenX, double screenY)
		{
			if (getScreenCoordFromWorldCoord == null) getScreenCoordFromWorldCoord = (Function) native.GetObjectProperty("getScreenCoordFromWorldCoord");
			var results = (Array) getScreenCoordFromWorldCoord.Call(native, worldX, worldY, worldZ, screenX, screenY);
			return ((bool) results[0], (double) results[1], (double) results[2]);
		}

		/// <summary>
		/// Note: Most texture resolutions are doubled compared to the console version of the game.
		/// </summary>
		/// <returns>Returns the texture resolution of the passed texture dict+name.</returns>
		public Vector3 GetTextureResolution(string textureDict, string textureName)
		{
			if (getTextureResolution == null) getTextureResolution = (Function) native.GetObjectProperty("getTextureResolution");
			return JSObjectToVector3(getTextureResolution.Call(native, textureDict, textureName));
		}

		public object _0x95EB5E34F821BABE(object p0, object p1, object p2)
		{
			if (__0x95EB5E34F821BABE == null) __0x95EB5E34F821BABE = (Function) native.GetObjectProperty("_0x95EB5E34F821BABE");
			return __0x95EB5E34F821BABE.Call(native, p0, p1, p2);
		}

		public void _0xE2892E7E55D7073A(double p0)
		{
			if (__0xE2892E7E55D7073A == null) __0xE2892E7E55D7073A = (Function) native.GetObjectProperty("_0xE2892E7E55D7073A");
			__0xE2892E7E55D7073A.Call(native, p0);
		}

		/// <summary>
		/// Purpose of p0 and p1 unknown.
		/// </summary>
		public void SetFlash(double p0, double p1, double fadeIn, double duration, double fadeOut)
		{
			if (setFlash == null) setFlash = (Function) native.GetObjectProperty("setFlash");
			setFlash.Call(native, p0, p1, fadeIn, duration, fadeOut);
		}

		public void DisableOcclusionThisFrame()
		{
			if (disableOcclusionThisFrame == null) disableOcclusionThisFrame = (Function) native.GetObjectProperty("disableOcclusionThisFrame");
			disableOcclusionThisFrame.Call(native);
		}

		/// <summary>
		/// Does not affect weapons, particles, fire/explosions, flashlights or the sun.
		/// When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
		/// Used in Humane Labs Heist for EMP.
		/// state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
		/// </summary>
		/// <param name="state">True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.</param>
		public void SetArtificialLightsState(bool state)
		{
			if (setArtificialLightsState == null) setArtificialLightsState = (Function) native.GetObjectProperty("setArtificialLightsState");
			setArtificialLightsState.Call(native, state);
		}

		public void _0xC35A6D07C93802B2()
		{
			if (__0xC35A6D07C93802B2 == null) __0xC35A6D07C93802B2 = (Function) native.GetObjectProperty("_0xC35A6D07C93802B2");
			__0xC35A6D07C93802B2.Call(native);
		}

		/// <summary>
		/// Creates a tracked point, useful for checking the visibility of a 3D point on screen.
		/// </summary>
		public int CreateTrackedPoint()
		{
			if (createTrackedPoint == null) createTrackedPoint = (Function) native.GetObjectProperty("createTrackedPoint");
			return (int) createTrackedPoint.Call(native);
		}

		public void SetTrackedPointInfo(int point, double x, double y, double z, double radius)
		{
			if (setTrackedPointInfo == null) setTrackedPointInfo = (Function) native.GetObjectProperty("setTrackedPointInfo");
			setTrackedPointInfo.Call(native, point, x, y, z, radius);
		}

		public bool IsTrackedPointVisible(int point)
		{
			if (isTrackedPointVisible == null) isTrackedPointVisible = (Function) native.GetObjectProperty("isTrackedPointVisible");
			return (bool) isTrackedPointVisible.Call(native, point);
		}

		public void DestroyTrackedPoint(int point)
		{
			if (destroyTrackedPoint == null) destroyTrackedPoint = (Function) native.GetObjectProperty("destroyTrackedPoint");
			destroyTrackedPoint.Call(native, point);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public object _0xBE197EAA669238F4(object p0, object p1, object p2, object p3)
		{
			if (__0xBE197EAA669238F4 == null) __0xBE197EAA669238F4 = (Function) native.GetObjectProperty("_0xBE197EAA669238F4");
			return __0xBE197EAA669238F4.Call(native, p0, p1, p2, p3);
		}

		public void _0x61F95E5BB3E0A8C6(object p0)
		{
			if (__0x61F95E5BB3E0A8C6 == null) __0x61F95E5BB3E0A8C6 = (Function) native.GetObjectProperty("_0x61F95E5BB3E0A8C6");
			__0x61F95E5BB3E0A8C6.Call(native, p0);
		}

		public void _0xAE51BC858F32BA66(object p0, double p1, double p2, double p3, double p4)
		{
			if (__0xAE51BC858F32BA66 == null) __0xAE51BC858F32BA66 = (Function) native.GetObjectProperty("_0xAE51BC858F32BA66");
			__0xAE51BC858F32BA66.Call(native, p0, p1, p2, p3, p4);
		}

		public void _0x649C97D52332341A(object p0)
		{
			if (__0x649C97D52332341A == null) __0x649C97D52332341A = (Function) native.GetObjectProperty("_0x649C97D52332341A");
			__0x649C97D52332341A.Call(native, p0);
		}

		public object _0x2C42340F916C5930(object p0)
		{
			if (__0x2C42340F916C5930 == null) __0x2C42340F916C5930 = (Function) native.GetObjectProperty("_0x2C42340F916C5930");
			return __0x2C42340F916C5930.Call(native, p0);
		}

		public void _0x14FC5833464340A8()
		{
			if (__0x14FC5833464340A8 == null) __0x14FC5833464340A8 = (Function) native.GetObjectProperty("_0x14FC5833464340A8");
			__0x14FC5833464340A8.Call(native);
		}

		public void _0x0218BA067D249DEA()
		{
			if (__0x0218BA067D249DEA == null) __0x0218BA067D249DEA = (Function) native.GetObjectProperty("_0x0218BA067D249DEA");
			__0x0218BA067D249DEA.Call(native);
		}

		public void _0x1612C45F9E3E0D44()
		{
			if (__0x1612C45F9E3E0D44 == null) __0x1612C45F9E3E0D44 = (Function) native.GetObjectProperty("_0x1612C45F9E3E0D44");
			__0x1612C45F9E3E0D44.Call(native);
		}

		public void _0x5DEBD9C4DC995692()
		{
			if (__0x5DEBD9C4DC995692 == null) __0x5DEBD9C4DC995692 = (Function) native.GetObjectProperty("_0x5DEBD9C4DC995692");
			__0x5DEBD9C4DC995692.Call(native);
		}

		public void _0xAAE9BE70EC7C69AB(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7)
		{
			if (__0xAAE9BE70EC7C69AB == null) __0xAAE9BE70EC7C69AB = (Function) native.GetObjectProperty("_0xAAE9BE70EC7C69AB");
			__0xAAE9BE70EC7C69AB.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public void GrassLodShrinkScriptAreas(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (grassLodShrinkScriptAreas == null) grassLodShrinkScriptAreas = (Function) native.GetObjectProperty("grassLodShrinkScriptAreas");
			grassLodShrinkScriptAreas.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public void GrassLodResetScriptAreas()
		{
			if (grassLodResetScriptAreas == null) grassLodResetScriptAreas = (Function) native.GetObjectProperty("grassLodResetScriptAreas");
			grassLodResetScriptAreas.Call(native);
		}

		public void _0x03FC694AE06C5A20()
		{
			if (__0x03FC694AE06C5A20 == null) __0x03FC694AE06C5A20 = (Function) native.GetObjectProperty("_0x03FC694AE06C5A20");
			__0x03FC694AE06C5A20.Call(native);
		}

		public void _0xD2936CAB8B58FCBD(object p0, bool p1, double p2, double p3, double p4, double p5, bool p6, double p7)
		{
			if (__0xD2936CAB8B58FCBD == null) __0xD2936CAB8B58FCBD = (Function) native.GetObjectProperty("_0xD2936CAB8B58FCBD");
			__0xD2936CAB8B58FCBD.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public void _0x5F0F3F56635809EF(double p0)
		{
			if (__0x5F0F3F56635809EF == null) __0x5F0F3F56635809EF = (Function) native.GetObjectProperty("_0x5F0F3F56635809EF");
			__0x5F0F3F56635809EF.Call(native, p0);
		}

		public void _0x5E9DAF5A20F15908(double p0)
		{
			if (__0x5E9DAF5A20F15908 == null) __0x5E9DAF5A20F15908 = (Function) native.GetObjectProperty("_0x5E9DAF5A20F15908");
			__0x5E9DAF5A20F15908.Call(native, p0);
		}

		public void _0x36F6626459D91457(double p0)
		{
			if (__0x36F6626459D91457 == null) __0x36F6626459D91457 = (Function) native.GetObjectProperty("_0x36F6626459D91457");
			__0x36F6626459D91457.Call(native, p0);
		}

		public void _0x259BA6D4E6F808F1(object p0)
		{
			if (__0x259BA6D4E6F808F1 == null) __0x259BA6D4E6F808F1 = (Function) native.GetObjectProperty("_0x259BA6D4E6F808F1");
			__0x259BA6D4E6F808F1.Call(native, p0);
		}

		/// <summary>
		/// When this is set to ON, shadows only draw as you get nearer.
		/// When OFF, they draw from a further distance.
		/// </summary>
		public void SetFarShadowsSuppressed(bool toggle)
		{
			if (setFarShadowsSuppressed == null) setFarShadowsSuppressed = (Function) native.GetObjectProperty("setFarShadowsSuppressed");
			setFarShadowsSuppressed.Call(native, toggle);
		}

		public void _0x25FC3E33A31AD0C9(bool p0)
		{
			if (__0x25FC3E33A31AD0C9 == null) __0x25FC3E33A31AD0C9 = (Function) native.GetObjectProperty("_0x25FC3E33A31AD0C9");
			__0x25FC3E33A31AD0C9.Call(native, p0);
		}

		/// <summary>
		/// Possible values:
		/// "CSM_ST_POINT"
		/// "CSM_ST_LINEAR"
		/// "CSM_ST_TWOTAP"
		/// "CSM_ST_BOX3x3"
		/// "CSM_ST_BOX4x4"
		/// "CSM_ST_DITHER2_LINEAR"
		/// "CSM_ST_CUBIC"
		/// "CSM_ST_DITHER4"
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB11D94BC55F41932
		/// </summary>
		public void CascadeshadowsSetType(string type)
		{
			if (cascadeshadowsSetType == null) cascadeshadowsSetType = (Function) native.GetObjectProperty("cascadeshadowsSetType");
			cascadeshadowsSetType.Call(native, type);
		}

		public void CascadeshadowsResetType()
		{
			if (cascadeshadowsResetType == null) cascadeshadowsResetType = (Function) native.GetObjectProperty("cascadeshadowsResetType");
			cascadeshadowsResetType.Call(native);
		}

		public void _0x6DDBF9DFFC4AC080(bool p0)
		{
			if (__0x6DDBF9DFFC4AC080 == null) __0x6DDBF9DFFC4AC080 = (Function) native.GetObjectProperty("_0x6DDBF9DFFC4AC080");
			__0x6DDBF9DFFC4AC080.Call(native, p0);
		}

		public void _0xD39D13C9FEBF0511(bool p0)
		{
			if (__0xD39D13C9FEBF0511 == null) __0xD39D13C9FEBF0511 = (Function) native.GetObjectProperty("_0xD39D13C9FEBF0511");
			__0xD39D13C9FEBF0511.Call(native, p0);
		}

		public void _0x02AC28F3A01FA04A(double p0)
		{
			if (__0x02AC28F3A01FA04A == null) __0x02AC28F3A01FA04A = (Function) native.GetObjectProperty("_0x02AC28F3A01FA04A");
			__0x02AC28F3A01FA04A.Call(native, p0);
		}

		public void _0x0AE73D8DF3A762B2(bool p0)
		{
			if (__0x0AE73D8DF3A762B2 == null) __0x0AE73D8DF3A762B2 = (Function) native.GetObjectProperty("_0x0AE73D8DF3A762B2");
			__0x0AE73D8DF3A762B2.Call(native, p0);
		}

		public void _0xCA465D9CC0D231BA(object p0)
		{
			if (__0xCA465D9CC0D231BA == null) __0xCA465D9CC0D231BA = (Function) native.GetObjectProperty("_0xCA465D9CC0D231BA");
			__0xCA465D9CC0D231BA.Call(native, p0);
		}

		public void GolfTrailSetEnabled(bool toggle)
		{
			if (golfTrailSetEnabled == null) golfTrailSetEnabled = (Function) native.GetObjectProperty("golfTrailSetEnabled");
			golfTrailSetEnabled.Call(native, toggle);
		}

		/// <summary>
		/// p8 seems to always be false.
		/// </summary>
		/// <param name="p8">seems to always be false.</param>
		public void GolfTrailSetPath(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, bool p8)
		{
			if (golfTrailSetPath == null) golfTrailSetPath = (Function) native.GetObjectProperty("golfTrailSetPath");
			golfTrailSetPath.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		public void GolfTrailSetRadius(double p0, double p1, double p2)
		{
			if (golfTrailSetRadius == null) golfTrailSetRadius = (Function) native.GetObjectProperty("golfTrailSetRadius");
			golfTrailSetRadius.Call(native, p0, p1, p2);
		}

		public void GolfTrailSetColour(int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11)
		{
			if (golfTrailSetColour == null) golfTrailSetColour = (Function) native.GetObjectProperty("golfTrailSetColour");
			golfTrailSetColour.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		}

		public void GolfTrailSetTessellation(int p0, int p1)
		{
			if (golfTrailSetTessellation == null) golfTrailSetTessellation = (Function) native.GetObjectProperty("golfTrailSetTessellation");
			golfTrailSetTessellation.Call(native, p0, p1);
		}

		/// <summary>
		/// GOLF_TRAIL_SET_*
		/// </summary>
		public void _0xC0416B061F2B7E5E(bool p0)
		{
			if (__0xC0416B061F2B7E5E == null) __0xC0416B061F2B7E5E = (Function) native.GetObjectProperty("_0xC0416B061F2B7E5E");
			__0xC0416B061F2B7E5E.Call(native, p0);
		}

		/// <summary>
		/// 12 matches across 4 scripts. All 4 scripts were job creators.
		/// type ranged from 0 - 2.
		/// p4 was always 0.2f. Likely scale.
		/// assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
		/// Tested but noticed nothing.
		/// </summary>
		/// <param name="type">ranged from 0 - 2.</param>
		/// <param name="p4">was always 0.2f. Likely scale.</param>
		public void GolfTrailSetFixedControlPoint(int type, double xPos, double yPos, double zPos, double p4, int red, int green, int blue, int alpha)
		{
			if (golfTrailSetFixedControlPoint == null) golfTrailSetFixedControlPoint = (Function) native.GetObjectProperty("golfTrailSetFixedControlPoint");
			golfTrailSetFixedControlPoint.Call(native, type, xPos, yPos, zPos, p4, red, green, blue, alpha);
		}

		public void GolfTrailSetShaderParams(double p0, double p1, double p2, double p3, double p4)
		{
			if (golfTrailSetShaderParams == null) golfTrailSetShaderParams = (Function) native.GetObjectProperty("golfTrailSetShaderParams");
			golfTrailSetShaderParams.Call(native, p0, p1, p2, p3, p4);
		}

		public void GolfTrailSetFacing(bool p0)
		{
			if (golfTrailSetFacing == null) golfTrailSetFacing = (Function) native.GetObjectProperty("golfTrailSetFacing");
			golfTrailSetFacing.Call(native, p0);
		}

		public object _0xA4819F5E23E2FFAD()
		{
			if (__0xA4819F5E23E2FFAD == null) __0xA4819F5E23E2FFAD = (Function) native.GetObjectProperty("_0xA4819F5E23E2FFAD");
			return __0xA4819F5E23E2FFAD.Call(native);
		}

		public Vector3 _0xA4664972A9B8F8BA(object p0)
		{
			if (__0xA4664972A9B8F8BA == null) __0xA4664972A9B8F8BA = (Function) native.GetObjectProperty("_0xA4664972A9B8F8BA");
			return JSObjectToVector3(__0xA4664972A9B8F8BA.Call(native, p0));
		}

		/// <summary>
		/// Toggles Heatvision on/off.
		/// </summary>
		public void SetSeethrough(bool toggle)
		{
			if (setSeethrough == null) setSeethrough = (Function) native.GetObjectProperty("setSeethrough");
			setSeethrough.Call(native, toggle);
		}

		public bool GetUsingseethrough()
		{
			if (getUsingseethrough == null) getUsingseethrough = (Function) native.GetObjectProperty("getUsingseethrough");
			return (bool) getUsingseethrough.Call(native);
		}

		public void SeethroughReset()
		{
			if (seethroughReset == null) seethroughReset = (Function) native.GetObjectProperty("seethroughReset");
			seethroughReset.Call(native);
		}

		public void SeethroughSetFadeStartDistance(double distance)
		{
			if (seethroughSetFadeStartDistance == null) seethroughSetFadeStartDistance = (Function) native.GetObjectProperty("seethroughSetFadeStartDistance");
			seethroughSetFadeStartDistance.Call(native, distance);
		}

		public void SeethroughSetFadeEndDistance(double distance)
		{
			if (seethroughSetFadeEndDistance == null) seethroughSetFadeEndDistance = (Function) native.GetObjectProperty("seethroughSetFadeEndDistance");
			seethroughSetFadeEndDistance.Call(native, distance);
		}

		public double SeethroughGetMaxThickness()
		{
			if (seethroughGetMaxThickness == null) seethroughGetMaxThickness = (Function) native.GetObjectProperty("seethroughGetMaxThickness");
			return (double) seethroughGetMaxThickness.Call(native);
		}

		/// <summary>
		/// min: 1.0
		/// max: 10000.0
		/// </summary>
		public void SeethroughSetMaxThickness(double thickness)
		{
			if (seethroughSetMaxThickness == null) seethroughSetMaxThickness = (Function) native.GetObjectProperty("seethroughSetMaxThickness");
			seethroughSetMaxThickness.Call(native, thickness);
		}

		public void SeethroughSetNoiseAmountMin(double amount)
		{
			if (seethroughSetNoiseAmountMin == null) seethroughSetNoiseAmountMin = (Function) native.GetObjectProperty("seethroughSetNoiseAmountMin");
			seethroughSetNoiseAmountMin.Call(native, amount);
		}

		public void SeethroughSetNoiseAmountMax(double amount)
		{
			if (seethroughSetNoiseAmountMax == null) seethroughSetNoiseAmountMax = (Function) native.GetObjectProperty("seethroughSetNoiseAmountMax");
			seethroughSetNoiseAmountMax.Call(native, amount);
		}

		public void SeethroughSetHiLightIntensity(double intensity)
		{
			if (seethroughSetHiLightIntensity == null) seethroughSetHiLightIntensity = (Function) native.GetObjectProperty("seethroughSetHiLightIntensity");
			seethroughSetHiLightIntensity.Call(native, intensity);
		}

		public void SeethroughSetHiLightNoise(double noise)
		{
			if (seethroughSetHiLightNoise == null) seethroughSetHiLightNoise = (Function) native.GetObjectProperty("seethroughSetHiLightNoise");
			seethroughSetHiLightNoise.Call(native, noise);
		}

		/// <summary>
		/// min: 0.0
		/// max: 0.75
		/// </summary>
		public void SeethroughSetHeatscale(int index, double heatScale)
		{
			if (seethroughSetHeatscale == null) seethroughSetHeatscale = (Function) native.GetObjectProperty("seethroughSetHeatscale");
			seethroughSetHeatscale.Call(native, index, heatScale);
		}

		public void SeethroughSetColorNear(int red, int green, int blue)
		{
			if (seethroughSetColorNear == null) seethroughSetColorNear = (Function) native.GetObjectProperty("seethroughSetColorNear");
			seethroughSetColorNear.Call(native, red, green, blue);
		}

		/// <summary>
		/// Setter for 0xE59343E9E96529E7
		/// SET_M*
		/// </summary>
		public void _0xB3C641F3630BF6DA(double p0)
		{
			if (__0xB3C641F3630BF6DA == null) __0xB3C641F3630BF6DA = (Function) native.GetObjectProperty("_0xB3C641F3630BF6DA");
			__0xB3C641F3630BF6DA.Call(native, p0);
		}

		/// <summary>
		/// Getter for 0xB3C641F3630BF6DA
		/// GET_M*
		/// </summary>
		public double _0xE59343E9E96529E7()
		{
			if (__0xE59343E9E96529E7 == null) __0xE59343E9E96529E7 = (Function) native.GetObjectProperty("_0xE59343E9E96529E7");
			return (double) __0xE59343E9E96529E7.Call(native);
		}

		/// <summary>
		/// SET_F*
		/// </summary>
		public void _0x6A51F78772175A51(bool toggle)
		{
			if (__0x6A51F78772175A51 == null) __0x6A51F78772175A51 = (Function) native.GetObjectProperty("_0x6A51F78772175A51");
			__0x6A51F78772175A51.Call(native, toggle);
		}

		/// <summary>
		/// TOGGLE_*
		/// </summary>
		public void _0xE63D7C6EECECB66B(bool toggle)
		{
			if (__0xE63D7C6EECECB66B == null) __0xE63D7C6EECECB66B = (Function) native.GetObjectProperty("_0xE63D7C6EECECB66B");
			__0xE63D7C6EECECB66B.Call(native, toggle);
		}

		/// <summary>
		/// Sets an unknown value related to timecycles.
		/// </summary>
		public void _0xE3E2C1B4C59DBC77(int unk)
		{
			if (__0xE3E2C1B4C59DBC77 == null) __0xE3E2C1B4C59DBC77 = (Function) native.GetObjectProperty("_0xE3E2C1B4C59DBC77");
			__0xE3E2C1B4C59DBC77.Call(native, unk);
		}

		/// <summary>
		/// time in ms to transition to fully blurred screen
		/// </summary>
		public bool TriggerScreenblurFadeIn(double transitionTime)
		{
			if (triggerScreenblurFadeIn == null) triggerScreenblurFadeIn = (Function) native.GetObjectProperty("triggerScreenblurFadeIn");
			return (bool) triggerScreenblurFadeIn.Call(native, transitionTime);
		}

		/// <summary>
		/// time in ms to transition from fully blurred to normal
		/// </summary>
		public bool TriggerScreenblurFadeOut(double transitionTime)
		{
			if (triggerScreenblurFadeOut == null) triggerScreenblurFadeOut = (Function) native.GetObjectProperty("triggerScreenblurFadeOut");
			return (bool) triggerScreenblurFadeOut.Call(native, transitionTime);
		}

		public void _0xDE81239437E8C5A8()
		{
			if (__0xDE81239437E8C5A8 == null) __0xDE81239437E8C5A8 = (Function) native.GetObjectProperty("_0xDE81239437E8C5A8");
			__0xDE81239437E8C5A8.Call(native);
		}

		public double GetScreenblurFadeCurrentTime()
		{
			if (getScreenblurFadeCurrentTime == null) getScreenblurFadeCurrentTime = (Function) native.GetObjectProperty("getScreenblurFadeCurrentTime");
			return (double) getScreenblurFadeCurrentTime.Call(native);
		}

		public bool IsScreenblurFadeRunning()
		{
			if (isScreenblurFadeRunning == null) isScreenblurFadeRunning = (Function) native.GetObjectProperty("isScreenblurFadeRunning");
			return (bool) isScreenblurFadeRunning.Call(native);
		}

		public void TogglePausedRenderphases(bool toggle)
		{
			if (togglePausedRenderphases == null) togglePausedRenderphases = (Function) native.GetObjectProperty("togglePausedRenderphases");
			togglePausedRenderphases.Call(native, toggle);
		}

		public bool GetTogglePausedRenderphasesStatus()
		{
			if (getTogglePausedRenderphasesStatus == null) getTogglePausedRenderphasesStatus = (Function) native.GetObjectProperty("getTogglePausedRenderphasesStatus");
			return (bool) getTogglePausedRenderphasesStatus.Call(native);
		}

		public void ResetPausedRenderphases()
		{
			if (resetPausedRenderphases == null) resetPausedRenderphases = (Function) native.GetObjectProperty("resetPausedRenderphases");
			resetPausedRenderphases.Call(native);
		}

		public void _0x851CD923176EBA7C()
		{
			if (__0x851CD923176EBA7C == null) __0x851CD923176EBA7C = (Function) native.GetObjectProperty("_0x851CD923176EBA7C");
			__0x851CD923176EBA7C.Call(native);
		}

		/// <summary>
		/// Every p2 - p5 occurrence was 0f.
		/// </summary>
		/// <param name="p2">Every p5 occurrence was 0f.</param>
		public void SetHidofEnvBlurParams(bool p0, bool p1, double p2, double p3, double p4, double p5)
		{
			if (setHidofEnvBlurParams == null) setHidofEnvBlurParams = (Function) native.GetObjectProperty("setHidofEnvBlurParams");
			setHidofEnvBlurParams.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void _0xB569F41F3E7E83A4(object p0)
		{
			if (__0xB569F41F3E7E83A4 == null) __0xB569F41F3E7E83A4 = (Function) native.GetObjectProperty("_0xB569F41F3E7E83A4");
			__0xB569F41F3E7E83A4.Call(native, p0);
		}

		public bool _0x7AC24EAB6D74118D(bool p0)
		{
			if (__0x7AC24EAB6D74118D == null) __0x7AC24EAB6D74118D = (Function) native.GetObjectProperty("_0x7AC24EAB6D74118D");
			return (bool) __0x7AC24EAB6D74118D.Call(native, p0);
		}

		public object _0xBCEDB009461DA156()
		{
			if (__0xBCEDB009461DA156 == null) __0xBCEDB009461DA156 = (Function) native.GetObjectProperty("_0xBCEDB009461DA156");
			return __0xBCEDB009461DA156.Call(native);
		}

		public bool _0x27FEB5254759CDE3(string textureDict, bool p1)
		{
			if (__0x27FEB5254759CDE3 == null) __0x27FEB5254759CDE3 = (Function) native.GetObjectProperty("_0x27FEB5254759CDE3");
			return (bool) __0x27FEB5254759CDE3.Call(native, textureDict, p1);
		}

		/// <summary>
		/// GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);
		/// Axis - Invert Axis Flags
		/// list: pastebin.com/N9unUFWY
		/// -------------------------------------------------------------------
		/// C#
		/// Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
		/// char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
		/// float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
		/// float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
		/// See NativeDB for reference: http://natives.altv.mp/#/0x25129531F77B9ED3
		/// </summary>
		/// <param name="effectName">char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc</param>
		/// <param name="zRot">float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.</param>
		public int StartParticleFxNonLoopedAtCoord(string effectName, double xPos, double yPos, double zPos, double xRot, double yRot, double zRot, double scale, bool xAxis, bool yAxis, bool zAxis)
		{
			if (startParticleFxNonLoopedAtCoord == null) startParticleFxNonLoopedAtCoord = (Function) native.GetObjectProperty("startParticleFxNonLoopedAtCoord");
			return (int) startParticleFxNonLoopedAtCoord.Call(native, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		}

		public bool StartNetworkedParticleFxNonLoopedAtCoord(string effectName, double xPos, double yPos, double zPos, double xRot, double yRot, double zRot, double scale, bool xAxis, bool yAxis, bool zAxis, bool p11)
		{
			if (startNetworkedParticleFxNonLoopedAtCoord == null) startNetworkedParticleFxNonLoopedAtCoord = (Function) native.GetObjectProperty("startNetworkedParticleFxNonLoopedAtCoord");
			return (bool) startNetworkedParticleFxNonLoopedAtCoord.Call(native, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
		}

		/// <summary>
		/// GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);
		/// Axis - Invert Axis Flags
		/// list: pastebin.com/N9unUFWY
		/// </summary>
		public bool StartParticleFxNonLoopedOnPedBone(string effectName, int ped, double offsetX, double offsetY, double offsetZ, double rotX, double rotY, double rotZ, int boneIndex, double scale, bool axisX, bool axisY, bool axisZ)
		{
			if (startParticleFxNonLoopedOnPedBone == null) startParticleFxNonLoopedOnPedBone = (Function) native.GetObjectProperty("startParticleFxNonLoopedOnPedBone");
			return (bool) startParticleFxNonLoopedOnPedBone.Call(native, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		}

		public bool StartNetworkedParticleFxNonLoopedOnPedBone(string effectName, int ped, double offsetX, double offsetY, double offsetZ, double rotX, double rotY, double rotZ, int boneIndex, double scale, bool axisX, bool axisY, bool axisZ)
		{
			if (startNetworkedParticleFxNonLoopedOnPedBone == null) startNetworkedParticleFxNonLoopedOnPedBone = (Function) native.GetObjectProperty("startNetworkedParticleFxNonLoopedOnPedBone");
			return (bool) startNetworkedParticleFxNonLoopedOnPedBone.Call(native, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		}

		/// <summary>
		/// Starts a particle effect on an entity for example your player.
		/// List: pastebin.com/N9unUFWY
		/// Example:
		/// C#:
		/// Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
		/// Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
		/// however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
		/// -can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
		/// </summary>
		public bool StartParticleFxNonLoopedOnEntity(string effectName, int entity, double offsetX, double offsetY, double offsetZ, double rotX, double rotY, double rotZ, double scale, bool axisX, bool axisY, bool axisZ)
		{
			if (startParticleFxNonLoopedOnEntity == null) startParticleFxNonLoopedOnEntity = (Function) native.GetObjectProperty("startParticleFxNonLoopedOnEntity");
			return (bool) startParticleFxNonLoopedOnEntity.Call(native, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
		}

		public bool StartNetworkedParticleFxNonLoopedOnEntity(string effectName, int entity, double offsetX, double offsetY, double offsetZ, double rotX, double rotY, double rotZ, double scale, bool axisX, bool axisY, bool axisZ)
		{
			if (startNetworkedParticleFxNonLoopedOnEntity == null) startNetworkedParticleFxNonLoopedOnEntity = (Function) native.GetObjectProperty("startNetworkedParticleFxNonLoopedOnEntity");
			return (bool) startNetworkedParticleFxNonLoopedOnEntity.Call(native, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
		}

		/// <summary>
		/// only works on some fx's
		/// </summary>
		public void SetParticleFxNonLoopedColour(double r, double g, double b)
		{
			if (setParticleFxNonLoopedColour == null) setParticleFxNonLoopedColour = (Function) native.GetObjectProperty("setParticleFxNonLoopedColour");
			setParticleFxNonLoopedColour.Call(native, r, g, b);
		}

		/// <summary>
		/// Usage example for C#:
		/// Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
		/// Note: the argument alpha ranges from 0.0f-1.0f !
		/// </summary>
		public void SetParticleFxNonLoopedAlpha(double alpha)
		{
			if (setParticleFxNonLoopedAlpha == null) setParticleFxNonLoopedAlpha = (Function) native.GetObjectProperty("setParticleFxNonLoopedAlpha");
			setParticleFxNonLoopedAlpha.Call(native, alpha);
		}

		/// <summary>
		/// Used only once in the scripts (taxi_clowncar)
		/// SET_PARTICLE_FX_*
		/// </summary>
		public void _0x8CDE909A0370BB3A(bool toggle)
		{
			if (__0x8CDE909A0370BB3A == null) __0x8CDE909A0370BB3A = (Function) native.GetObjectProperty("_0x8CDE909A0370BB3A");
			__0x8CDE909A0370BB3A.Call(native, toggle);
		}

		/// <summary>
		/// GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)
		/// p11 seems to be always 0
		/// </summary>
		/// <param name="p11">seems to be always 0</param>
		public int StartParticleFxLoopedAtCoord(string effectName, double x, double y, double z, double xRot, double yRot, double zRot, double scale, bool xAxis, bool yAxis, bool zAxis, bool p11)
		{
			if (startParticleFxLoopedAtCoord == null) startParticleFxLoopedAtCoord = (Function) native.GetObjectProperty("startParticleFxLoopedAtCoord");
			return (int) startParticleFxLoopedAtCoord.Call(native, effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
		}

		public int StartParticleFxLoopedOnPedBone(string effectName, int ped, double xOffset, double yOffset, double zOffset, double xRot, double yRot, double zRot, int boneIndex, double scale, bool xAxis, bool yAxis, bool zAxis)
		{
			if (startParticleFxLoopedOnPedBone == null) startParticleFxLoopedOnPedBone = (Function) native.GetObjectProperty("startParticleFxLoopedOnPedBone");
			return (int) startParticleFxLoopedOnPedBone.Call(native, effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		}

		/// <summary>
		/// list: pastebin.com/N9unUFWY
		/// </summary>
		public int StartParticleFxLoopedOnEntity(string effectName, int entity, double xOffset, double yOffset, double zOffset, double xRot, double yRot, double zRot, double scale, bool xAxis, bool yAxis, bool zAxis)
		{
			if (startParticleFxLoopedOnEntity == null) startParticleFxLoopedOnEntity = (Function) native.GetObjectProperty("startParticleFxLoopedOnEntity");
			return (int) startParticleFxLoopedOnEntity.Call(native, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		}

		public int StartParticleFxLoopedOnEntityBone(string effectName, int entity, double xOffset, double yOffset, double zOffset, double xRot, double yRot, double zRot, int boneIndex, double scale, bool xAxis, bool yAxis, bool zAxis)
		{
			if (startParticleFxLoopedOnEntityBone == null) startParticleFxLoopedOnEntityBone = (Function) native.GetObjectProperty("startParticleFxLoopedOnEntityBone");
			return (int) startParticleFxLoopedOnEntityBone.Call(native, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		}

		public int StartNetworkedParticleFxLoopedOnEntity(string effectName, int entity, double xOffset, double yOffset, double zOffset, double xRot, double yRot, double zRot, double scale, bool xAxis, bool yAxis, bool zAxis, object p12, object p13, object p14, object p15)
		{
			if (startNetworkedParticleFxLoopedOnEntity == null) startNetworkedParticleFxLoopedOnEntity = (Function) native.GetObjectProperty("startNetworkedParticleFxLoopedOnEntity");
			return (int) startNetworkedParticleFxLoopedOnEntity.Call(native, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p12, p13, p14, p15);
		}

		public int StartNetworkedParticleFxLoopedOnEntityBone(string effectName, int entity, double xOffset, double yOffset, double zOffset, double xRot, double yRot, double zRot, int boneIndex, double scale, bool xAxis, bool yAxis, bool zAxis, object p13, object p14, object p15, object p16)
		{
			if (startNetworkedParticleFxLoopedOnEntityBone == null) startNetworkedParticleFxLoopedOnEntityBone = (Function) native.GetObjectProperty("startNetworkedParticleFxLoopedOnEntityBone");
			return (int) startNetworkedParticleFxLoopedOnEntityBone.Call(native, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, p13, p14, p15, p16);
		}

		/// <summary>
		/// p1 is always 0 in the native scripts
		/// </summary>
		/// <param name="p1">is always 0 in the native scripts</param>
		public void StopParticleFxLooped(int ptfxHandle, bool p1)
		{
			if (stopParticleFxLooped == null) stopParticleFxLooped = (Function) native.GetObjectProperty("stopParticleFxLooped");
			stopParticleFxLooped.Call(native, ptfxHandle, p1);
		}

		public void RemoveParticleFx(int ptfxHandle, bool p1)
		{
			if (removeParticleFx == null) removeParticleFx = (Function) native.GetObjectProperty("removeParticleFx");
			removeParticleFx.Call(native, ptfxHandle, p1);
		}

		public void RemoveParticleFxFromEntity(int entity)
		{
			if (removeParticleFxFromEntity == null) removeParticleFxFromEntity = (Function) native.GetObjectProperty("removeParticleFxFromEntity");
			removeParticleFxFromEntity.Call(native, entity);
		}

		public void RemoveParticleFxInRange(double X, double Y, double Z, double radius)
		{
			if (removeParticleFxInRange == null) removeParticleFxInRange = (Function) native.GetObjectProperty("removeParticleFxInRange");
			removeParticleFxInRange.Call(native, X, Y, Z, radius);
		}

		public void _0xBA0127DA25FD54C9(object p0, object p1)
		{
			if (__0xBA0127DA25FD54C9 == null) __0xBA0127DA25FD54C9 = (Function) native.GetObjectProperty("_0xBA0127DA25FD54C9");
			__0xBA0127DA25FD54C9.Call(native, p0, p1);
		}

		public bool DoesParticleFxLoopedExist(int ptfxHandle)
		{
			if (doesParticleFxLoopedExist == null) doesParticleFxLoopedExist = (Function) native.GetObjectProperty("doesParticleFxLoopedExist");
			return (bool) doesParticleFxLoopedExist.Call(native, ptfxHandle);
		}

		public void SetParticleFxLoopedOffsets(int ptfxHandle, double x, double y, double z, double rotX, double rotY, double rotZ)
		{
			if (setParticleFxLoopedOffsets == null) setParticleFxLoopedOffsets = (Function) native.GetObjectProperty("setParticleFxLoopedOffsets");
			setParticleFxLoopedOffsets.Call(native, ptfxHandle, x, y, z, rotX, rotY, rotZ);
		}

		public void SetParticleFxLoopedEvolution(int ptfxHandle, string propertyName, double amount, bool noNetwork)
		{
			if (setParticleFxLoopedEvolution == null) setParticleFxLoopedEvolution = (Function) native.GetObjectProperty("setParticleFxLoopedEvolution");
			setParticleFxLoopedEvolution.Call(native, ptfxHandle, propertyName, amount, noNetwork);
		}

		/// <summary>
		/// only works on some fx's
		/// p4 = 0
		/// </summary>
		/// <param name="p4">0</param>
		public void SetParticleFxLoopedColour(int ptfxHandle, double r, double g, double b, bool p4)
		{
			if (setParticleFxLoopedColour == null) setParticleFxLoopedColour = (Function) native.GetObjectProperty("setParticleFxLoopedColour");
			setParticleFxLoopedColour.Call(native, ptfxHandle, r, g, b, p4);
		}

		public void SetParticleFxLoopedAlpha(int ptfxHandle, double alpha)
		{
			if (setParticleFxLoopedAlpha == null) setParticleFxLoopedAlpha = (Function) native.GetObjectProperty("setParticleFxLoopedAlpha");
			setParticleFxLoopedAlpha.Call(native, ptfxHandle, alpha);
		}

		public void SetParticleFxLoopedScale(int ptfxHandle, double scale)
		{
			if (setParticleFxLoopedScale == null) setParticleFxLoopedScale = (Function) native.GetObjectProperty("setParticleFxLoopedScale");
			setParticleFxLoopedScale.Call(native, ptfxHandle, scale);
		}

		public void SetParticleFxLoopedFarClipDist(int ptfxHandle, double range)
		{
			if (setParticleFxLoopedFarClipDist == null) setParticleFxLoopedFarClipDist = (Function) native.GetObjectProperty("setParticleFxLoopedFarClipDist");
			setParticleFxLoopedFarClipDist.Call(native, ptfxHandle, range);
		}

		public void SetParticleFxCamInsideVehicle(bool p0)
		{
			if (setParticleFxCamInsideVehicle == null) setParticleFxCamInsideVehicle = (Function) native.GetObjectProperty("setParticleFxCamInsideVehicle");
			setParticleFxCamInsideVehicle.Call(native, p0);
		}

		public void SetParticleFxCamInsideNonplayerVehicle(int vehicle, bool p1)
		{
			if (setParticleFxCamInsideNonplayerVehicle == null) setParticleFxCamInsideNonplayerVehicle = (Function) native.GetObjectProperty("setParticleFxCamInsideNonplayerVehicle");
			setParticleFxCamInsideNonplayerVehicle.Call(native, vehicle, p1);
		}

		public void SetParticleFxShootoutBoat(object p0)
		{
			if (setParticleFxShootoutBoat == null) setParticleFxShootoutBoat = (Function) native.GetObjectProperty("setParticleFxShootoutBoat");
			setParticleFxShootoutBoat.Call(native, p0);
		}

		public void _0x2A251AA48B2B46DB()
		{
			if (__0x2A251AA48B2B46DB == null) __0x2A251AA48B2B46DB = (Function) native.GetObjectProperty("_0x2A251AA48B2B46DB");
			__0x2A251AA48B2B46DB.Call(native);
		}

		public void _0x908311265D42A820(object p0)
		{
			if (__0x908311265D42A820 == null) __0x908311265D42A820 = (Function) native.GetObjectProperty("_0x908311265D42A820");
			__0x908311265D42A820.Call(native, p0);
		}

		/// <summary>
		/// DISABLE_*
		/// </summary>
		public void _0x5F6DF3D92271E8A1(bool toggle)
		{
			if (__0x5F6DF3D92271E8A1 == null) __0x5F6DF3D92271E8A1 = (Function) native.GetObjectProperty("_0x5F6DF3D92271E8A1");
			__0x5F6DF3D92271E8A1.Call(native, toggle);
		}

		public void _0x2B40A97646381508(object p0)
		{
			if (__0x2B40A97646381508 == null) __0x2B40A97646381508 = (Function) native.GetObjectProperty("_0x2B40A97646381508");
			__0x2B40A97646381508.Call(native, p0);
		}

		/// <summary>
		/// Creates cartoon effect when Michel smokes the weed
		/// </summary>
		public void EnableClownBloodVfx(bool toggle)
		{
			if (enableClownBloodVfx == null) enableClownBloodVfx = (Function) native.GetObjectProperty("enableClownBloodVfx");
			enableClownBloodVfx.Call(native, toggle);
		}

		public void EnableAlienBloodVfx(bool toggle)
		{
			if (enableAlienBloodVfx == null) enableAlienBloodVfx = (Function) native.GetObjectProperty("enableAlienBloodVfx");
			enableAlienBloodVfx.Call(native, toggle);
		}

		public void _0x27E32866E9A5C416(double p0)
		{
			if (__0x27E32866E9A5C416 == null) __0x27E32866E9A5C416 = (Function) native.GetObjectProperty("_0x27E32866E9A5C416");
			__0x27E32866E9A5C416.Call(native, p0);
		}

		public void _0xBB90E12CAC1DAB25(double p0)
		{
			if (__0xBB90E12CAC1DAB25 == null) __0xBB90E12CAC1DAB25 = (Function) native.GetObjectProperty("_0xBB90E12CAC1DAB25");
			__0xBB90E12CAC1DAB25.Call(native, p0);
		}

		public void _0xCA4AE345A153D573(bool p0)
		{
			if (__0xCA4AE345A153D573 == null) __0xCA4AE345A153D573 = (Function) native.GetObjectProperty("_0xCA4AE345A153D573");
			__0xCA4AE345A153D573.Call(native, p0);
		}

		public void _0x54E22EA2C1956A8D(double p0)
		{
			if (__0x54E22EA2C1956A8D == null) __0x54E22EA2C1956A8D = (Function) native.GetObjectProperty("_0x54E22EA2C1956A8D");
			__0x54E22EA2C1956A8D.Call(native, p0);
		}

		public void _0x949F397A288B28B3(double p0)
		{
			if (__0x949F397A288B28B3 == null) __0x949F397A288B28B3 = (Function) native.GetObjectProperty("_0x949F397A288B28B3");
			__0x949F397A288B28B3.Call(native, p0);
		}

		/// <summary>
		/// SET_PARTICLE_FX_*
		/// </summary>
		public void _0xBA3D194057C79A7B(string p0)
		{
			if (__0xBA3D194057C79A7B == null) __0xBA3D194057C79A7B = (Function) native.GetObjectProperty("_0xBA3D194057C79A7B");
			__0xBA3D194057C79A7B.Call(native, p0);
		}

		public void _0x5DBF05DB5926D089(object p0)
		{
			if (__0x5DBF05DB5926D089 == null) __0x5DBF05DB5926D089 = (Function) native.GetObjectProperty("_0x5DBF05DB5926D089");
			__0x5DBF05DB5926D089.Call(native, p0);
		}

		/// <summary>
		/// FORCE_*
		/// </summary>
		public void _0x9B079E5221D984D3(bool p0)
		{
			if (__0x9B079E5221D984D3 == null) __0x9B079E5221D984D3 = (Function) native.GetObjectProperty("_0x9B079E5221D984D3");
			__0x9B079E5221D984D3.Call(native, p0);
		}

		/// <summary>
		/// From the b678d decompiled scripts:
		/// GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("FM_Mission_Controler");
		/// GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_apartment_mp");
		/// GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_indep_fireworks");
		/// GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_cig_plane");
		/// GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_creator");
		/// GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_ornate_heist");
		/// GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_prison_break_heist_station");
		/// </summary>
		public void UseParticleFxAsset(string name)
		{
			if (useParticleFxAsset == null) useParticleFxAsset = (Function) native.GetObjectProperty("useParticleFxAsset");
			useParticleFxAsset.Call(native, name);
		}

		public void SetParticleFxOverride(string oldAsset, string newAsset)
		{
			if (setParticleFxOverride == null) setParticleFxOverride = (Function) native.GetObjectProperty("setParticleFxOverride");
			setParticleFxOverride.Call(native, oldAsset, newAsset);
		}

		/// <summary>
		/// Resets the effect of SET_PARTICLE_FX_OVERRIDE
		/// </summary>
		public void ResetParticleFxOverride(string name)
		{
			if (resetParticleFxOverride == null) resetParticleFxOverride = (Function) native.GetObjectProperty("resetParticleFxOverride");
			resetParticleFxOverride.Call(native, name);
		}

		public void _0xA46B73FAA3460AE1(bool p0)
		{
			if (__0xA46B73FAA3460AE1 == null) __0xA46B73FAA3460AE1 = (Function) native.GetObjectProperty("_0xA46B73FAA3460AE1");
			__0xA46B73FAA3460AE1.Call(native, p0);
		}

		public void _0xF78B803082D4386F(double p0)
		{
			if (__0xF78B803082D4386F == null) __0xF78B803082D4386F = (Function) native.GetObjectProperty("_0xF78B803082D4386F");
			__0xF78B803082D4386F.Call(native, p0);
		}

		public void WashDecalsInRange(object p0, object p1, object p2, object p3, object p4)
		{
			if (washDecalsInRange == null) washDecalsInRange = (Function) native.GetObjectProperty("washDecalsInRange");
			washDecalsInRange.Call(native, p0, p1, p2, p3, p4);
		}

		public void WashDecalsFromVehicle(int vehicle, double p1)
		{
			if (washDecalsFromVehicle == null) washDecalsFromVehicle = (Function) native.GetObjectProperty("washDecalsFromVehicle");
			washDecalsFromVehicle.Call(native, vehicle, p1);
		}

		/// <summary>
		/// Fades nearby decals within the range specified
		/// </summary>
		public void FadeDecalsInRange(object p0, object p1, object p2, object p3, object p4)
		{
			if (fadeDecalsInRange == null) fadeDecalsInRange = (Function) native.GetObjectProperty("fadeDecalsInRange");
			fadeDecalsInRange.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
		/// </summary>
		public void RemoveDecalsInRange(double x, double y, double z, double range)
		{
			if (removeDecalsInRange == null) removeDecalsInRange = (Function) native.GetObjectProperty("removeDecalsInRange");
			removeDecalsInRange.Call(native, x, y, z, range);
		}

		public void RemoveDecalsFromObject(int obj)
		{
			if (removeDecalsFromObject == null) removeDecalsFromObject = (Function) native.GetObjectProperty("removeDecalsFromObject");
			removeDecalsFromObject.Call(native, obj);
		}

		public void RemoveDecalsFromObjectFacing(int obj, double x, double y, double z)
		{
			if (removeDecalsFromObjectFacing == null) removeDecalsFromObjectFacing = (Function) native.GetObjectProperty("removeDecalsFromObjectFacing");
			removeDecalsFromObjectFacing.Call(native, obj, x, y, z);
		}

		public void RemoveDecalsFromVehicle(int vehicle)
		{
			if (removeDecalsFromVehicle == null) removeDecalsFromVehicle = (Function) native.GetObjectProperty("removeDecalsFromVehicle");
			removeDecalsFromVehicle.Call(native, vehicle);
		}

		/// <summary>
		/// decal types:
		/// public enum DecalTypes
		/// {
		/// splatters_blood = 1010,
		/// splatters_blood_dir = 1015,
		/// splatters_blood_mist = 1017,
		/// splatters_mud = 1020,
		/// splatters_paint = 1030,
		/// splatters_water = 1040,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB302244A1839BDAD
		/// </summary>
		public int AddDecal(int decalType, double posX, double posY, double posZ, double p4, double p5, double p6, double p7, double p8, double p9, double width, double height, double rCoef, double gCoef, double bCoef, double opacity, double timeout, bool p17, bool p18, bool p19)
		{
			if (addDecal == null) addDecal = (Function) native.GetObjectProperty("addDecal");
			return (int) addDecal.Call(native, decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19);
		}

		public object AddPetrolDecal(double x, double y, double z, double groundLvl, double width, double transparency)
		{
			if (addPetrolDecal == null) addPetrolDecal = (Function) native.GetObjectProperty("addPetrolDecal");
			return addPetrolDecal.Call(native, x, y, z, groundLvl, width, transparency);
		}

		public void StartPetrolTrailDecals(double p0)
		{
			if (startPetrolTrailDecals == null) startPetrolTrailDecals = (Function) native.GetObjectProperty("startPetrolTrailDecals");
			startPetrolTrailDecals.Call(native, p0);
		}

		public void AddPetrolTrailDecalInfo(double x, double y, double z, double p3)
		{
			if (addPetrolTrailDecalInfo == null) addPetrolTrailDecalInfo = (Function) native.GetObjectProperty("addPetrolTrailDecalInfo");
			addPetrolTrailDecalInfo.Call(native, x, y, z, p3);
		}

		public void EndPetrolTrailDecals()
		{
			if (endPetrolTrailDecals == null) endPetrolTrailDecals = (Function) native.GetObjectProperty("endPetrolTrailDecals");
			endPetrolTrailDecals.Call(native);
		}

		public void RemoveDecal(int decal)
		{
			if (removeDecal == null) removeDecal = (Function) native.GetObjectProperty("removeDecal");
			removeDecal.Call(native, decal);
		}

		public bool IsDecalAlive(int decal)
		{
			if (isDecalAlive == null) isDecalAlive = (Function) native.GetObjectProperty("isDecalAlive");
			return (bool) isDecalAlive.Call(native, decal);
		}

		public double GetDecalWashLevel(int decal)
		{
			if (getDecalWashLevel == null) getDecalWashLevel = (Function) native.GetObjectProperty("getDecalWashLevel");
			return (double) getDecalWashLevel.Call(native, decal);
		}

		public void _0xD9454B5752C857DC()
		{
			if (__0xD9454B5752C857DC == null) __0xD9454B5752C857DC = (Function) native.GetObjectProperty("_0xD9454B5752C857DC");
			__0xD9454B5752C857DC.Call(native);
		}

		public void _0x27CFB1B1E078CB2D()
		{
			if (__0x27CFB1B1E078CB2D == null) __0x27CFB1B1E078CB2D = (Function) native.GetObjectProperty("_0x27CFB1B1E078CB2D");
			__0x27CFB1B1E078CB2D.Call(native);
		}

		public void _0x4B5CFC83122DF602()
		{
			if (__0x4B5CFC83122DF602 == null) __0x4B5CFC83122DF602 = (Function) native.GetObjectProperty("_0x4B5CFC83122DF602");
			__0x4B5CFC83122DF602.Call(native);
		}

		public bool GetIsPetrolDecalInRange(double xCoord, double yCoord, double zCoord, double radius)
		{
			if (getIsPetrolDecalInRange == null) getIsPetrolDecalInRange = (Function) native.GetObjectProperty("getIsPetrolDecalInRange");
			return (bool) getIsPetrolDecalInRange.Call(native, xCoord, yCoord, zCoord, radius);
		}

		public void OverrideDecalTexture(int decalType, string textureDict, string textureName)
		{
			if (overrideDecalTexture == null) overrideDecalTexture = (Function) native.GetObjectProperty("overrideDecalTexture");
			overrideDecalTexture.Call(native, decalType, textureDict, textureName);
		}

		/// <summary>
		/// UN*
		/// </summary>
		public void UndoDecalTextureOverride(int decalType)
		{
			if (undoDecalTextureOverride == null) undoDecalTextureOverride = (Function) native.GetObjectProperty("undoDecalTextureOverride");
			undoDecalTextureOverride.Call(native, decalType);
		}

		public void MoveVehicleDecals(object p0, object p1)
		{
			if (moveVehicleDecals == null) moveVehicleDecals = (Function) native.GetObjectProperty("moveVehicleDecals");
			moveVehicleDecals.Call(native, p0, p1);
		}

		/// <summary>
		/// boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
		/// </summary>
		/// <param name="boneIndex">is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.</param>
		public bool AddVehicleCrewEmblem(int vehicle, int ped, int boneIndex, double x1, double x2, double x3, double y1, double y2, double y3, double z1, double z2, double z3, double scale, object p13, int alpha)
		{
			if (addVehicleCrewEmblem == null) addVehicleCrewEmblem = (Function) native.GetObjectProperty("addVehicleCrewEmblem");
			return (bool) addVehicleCrewEmblem.Call(native, vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha);
		}

		public object _0x82ACC484FFA3B05F(object p0)
		{
			if (__0x82ACC484FFA3B05F == null) __0x82ACC484FFA3B05F = (Function) native.GetObjectProperty("_0x82ACC484FFA3B05F");
			return __0x82ACC484FFA3B05F.Call(native, p0);
		}

		public void RemoveVehicleCrewEmblem(int vehicle, int p1)
		{
			if (removeVehicleCrewEmblem == null) removeVehicleCrewEmblem = (Function) native.GetObjectProperty("removeVehicleCrewEmblem");
			removeVehicleCrewEmblem.Call(native, vehicle, p1);
		}

		public int GetVehicleCrewEmblemRequestState(int vehicle, int p1)
		{
			if (getVehicleCrewEmblemRequestState == null) getVehicleCrewEmblemRequestState = (Function) native.GetObjectProperty("getVehicleCrewEmblemRequestState");
			return (int) getVehicleCrewEmblemRequestState.Call(native, vehicle, p1);
		}

		public bool DoesVehicleHaveCrewEmblem(int vehicle, int p1)
		{
			if (doesVehicleHaveCrewEmblem == null) doesVehicleHaveCrewEmblem = (Function) native.GetObjectProperty("doesVehicleHaveCrewEmblem");
			return (bool) doesVehicleHaveCrewEmblem.Call(native, vehicle, p1);
		}

		public void _0x0E4299C549F0D1F1(bool toggle)
		{
			if (__0x0E4299C549F0D1F1 == null) __0x0E4299C549F0D1F1 = (Function) native.GetObjectProperty("_0x0E4299C549F0D1F1");
			__0x0E4299C549F0D1F1.Call(native, toggle);
		}

		/// <summary>
		/// DISABLE_S*
		/// </summary>
		public void _0x02369D5C8A51FDCF(bool toggle)
		{
			if (__0x02369D5C8A51FDCF == null) __0x02369D5C8A51FDCF = (Function) native.GetObjectProperty("_0x02369D5C8A51FDCF");
			__0x02369D5C8A51FDCF.Call(native, toggle);
		}

		public void _0x46D1A61A21F566FC(double p0)
		{
			if (__0x46D1A61A21F566FC == null) __0x46D1A61A21F566FC = (Function) native.GetObjectProperty("_0x46D1A61A21F566FC");
			__0x46D1A61A21F566FC.Call(native, p0);
		}

		public void OverrideInteriorSmokeName(string name)
		{
			if (overrideInteriorSmokeName == null) overrideInteriorSmokeName = (Function) native.GetObjectProperty("overrideInteriorSmokeName");
			overrideInteriorSmokeName.Call(native, name);
		}

		public void OverrideInteriorSmokeLevel(double level)
		{
			if (overrideInteriorSmokeLevel == null) overrideInteriorSmokeLevel = (Function) native.GetObjectProperty("overrideInteriorSmokeLevel");
			overrideInteriorSmokeLevel.Call(native, level);
		}

		public void OverrideInteriorSmokeEnd()
		{
			if (overrideInteriorSmokeEnd == null) overrideInteriorSmokeEnd = (Function) native.GetObjectProperty("overrideInteriorSmokeEnd");
			overrideInteriorSmokeEnd.Call(native);
		}

		/// <summary>
		/// REGISTER_*
		/// </summary>
		public void _0xA44FF770DFBC5DAE()
		{
			if (__0xA44FF770DFBC5DAE == null) __0xA44FF770DFBC5DAE = (Function) native.GetObjectProperty("_0xA44FF770DFBC5DAE");
			__0xA44FF770DFBC5DAE.Call(native);
		}

		public void DisableVehicleDistantlights(bool toggle)
		{
			if (disableVehicleDistantlights == null) disableVehicleDistantlights = (Function) native.GetObjectProperty("disableVehicleDistantlights");
			disableVehicleDistantlights.Call(native, toggle);
		}

		public void _0x03300B57FCAC6DDB(bool p0)
		{
			if (__0x03300B57FCAC6DDB == null) __0x03300B57FCAC6DDB = (Function) native.GetObjectProperty("_0x03300B57FCAC6DDB");
			__0x03300B57FCAC6DDB.Call(native, p0);
		}

		/// <summary>
		/// REQUEST_*
		/// </summary>
		public void _0x98EDF76A7271E4F2()
		{
			if (__0x98EDF76A7271E4F2 == null) __0x98EDF76A7271E4F2 = (Function) native.GetObjectProperty("_0x98EDF76A7271E4F2");
			__0x98EDF76A7271E4F2.Call(native);
		}

		/// <summary>
		/// Forces footstep tracks on all surfaces.
		/// USE_/USING_*
		/// </summary>
		public void SetForcePedFootstepsTracks(bool toggle)
		{
			if (setForcePedFootstepsTracks == null) setForcePedFootstepsTracks = (Function) native.GetObjectProperty("setForcePedFootstepsTracks");
			setForcePedFootstepsTracks.Call(native, toggle);
		}

		/// <summary>
		/// Forces vehicle trails on all surfaces.
		/// USE_/USING_*
		/// </summary>
		public void SetForceVehicleTrails(bool toggle)
		{
			if (setForceVehicleTrails == null) setForceVehicleTrails = (Function) native.GetObjectProperty("setForceVehicleTrails");
			setForceVehicleTrails.Call(native, toggle);
		}

		public void DisableScriptAmbientEffects(object p0)
		{
			if (disableScriptAmbientEffects == null) disableScriptAmbientEffects = (Function) native.GetObjectProperty("disableScriptAmbientEffects");
			disableScriptAmbientEffects.Call(native, p0);
		}

		/// <summary>
		/// Only one match in the scripts:
		/// GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");
		/// </summary>
		public void PresetInteriorAmbientCache(string timecycleModifierName)
		{
			if (presetInteriorAmbientCache == null) presetInteriorAmbientCache = (Function) native.GetObjectProperty("presetInteriorAmbientCache");
			presetInteriorAmbientCache.Call(native, timecycleModifierName);
		}

		/// <summary>
		/// Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
		/// Parameters:
		/// modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
		/// For a full list, see here: pastebin.com/kVPwMemE
		/// </summary>
		/// <param name="modifierName">The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)</param>
		public void SetTimecycleModifier(string modifierName)
		{
			if (setTimecycleModifier == null) setTimecycleModifier = (Function) native.GetObjectProperty("setTimecycleModifier");
			setTimecycleModifier.Call(native, modifierName);
		}

		public void SetTimecycleModifierStrength(double strength)
		{
			if (setTimecycleModifierStrength == null) setTimecycleModifierStrength = (Function) native.GetObjectProperty("setTimecycleModifierStrength");
			setTimecycleModifierStrength.Call(native, strength);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/kVPwMemE
		/// </summary>
		public void SetTransitionTimecycleModifier(string modifierName, double transition)
		{
			if (setTransitionTimecycleModifier == null) setTransitionTimecycleModifier = (Function) native.GetObjectProperty("setTransitionTimecycleModifier");
			setTransitionTimecycleModifier.Call(native, modifierName, transition);
		}

		/// <summary>
		/// SET_TRA*
		/// </summary>
		public void _0x1CBA05AE7BD7EE05(double p0)
		{
			if (__0x1CBA05AE7BD7EE05 == null) __0x1CBA05AE7BD7EE05 = (Function) native.GetObjectProperty("_0x1CBA05AE7BD7EE05");
			__0x1CBA05AE7BD7EE05.Call(native, p0);
		}

		public void ClearTimecycleModifier()
		{
			if (clearTimecycleModifier == null) clearTimecycleModifier = (Function) native.GetObjectProperty("clearTimecycleModifier");
			clearTimecycleModifier.Call(native);
		}

		/// <summary>
		/// Only use for this in the PC scripts is:
		/// if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)
		/// For a full list, see here: pastebin.com/cnk7FTF2
		/// </summary>
		public int GetTimecycleModifierIndex()
		{
			if (getTimecycleModifierIndex == null) getTimecycleModifierIndex = (Function) native.GetObjectProperty("getTimecycleModifierIndex");
			return (int) getTimecycleModifierIndex.Call(native);
		}

		public int GetTimecycleTransitionModifierIndex()
		{
			if (getTimecycleTransitionModifierIndex == null) getTimecycleTransitionModifierIndex = (Function) native.GetObjectProperty("getTimecycleTransitionModifierIndex");
			return (int) getTimecycleTransitionModifierIndex.Call(native);
		}

		public object _0x98D18905BF723B99()
		{
			if (__0x98D18905BF723B99 == null) __0x98D18905BF723B99 = (Function) native.GetObjectProperty("_0x98D18905BF723B99");
			return __0x98D18905BF723B99.Call(native);
		}

		public void PushTimecycleModifier()
		{
			if (pushTimecycleModifier == null) pushTimecycleModifier = (Function) native.GetObjectProperty("pushTimecycleModifier");
			pushTimecycleModifier.Call(native);
		}

		public void PopTimecycleModifier()
		{
			if (popTimecycleModifier == null) popTimecycleModifier = (Function) native.GetObjectProperty("popTimecycleModifier");
			popTimecycleModifier.Call(native);
		}

		public void SetCurrentPlayerTcmodifier(string modifierName)
		{
			if (setCurrentPlayerTcmodifier == null) setCurrentPlayerTcmodifier = (Function) native.GetObjectProperty("setCurrentPlayerTcmodifier");
			setCurrentPlayerTcmodifier.Call(native, modifierName);
		}

		public void SetPlayerTcmodifierTransition(double value)
		{
			if (setPlayerTcmodifierTransition == null) setPlayerTcmodifierTransition = (Function) native.GetObjectProperty("setPlayerTcmodifierTransition");
			setPlayerTcmodifierTransition.Call(native, value);
		}

		public void SetNextPlayerTcmodifier(string modifierName)
		{
			if (setNextPlayerTcmodifier == null) setNextPlayerTcmodifier = (Function) native.GetObjectProperty("setNextPlayerTcmodifier");
			setNextPlayerTcmodifier.Call(native, modifierName);
		}

		public void AddTcmodifierOverride(string modifierName1, string modifierName2)
		{
			if (addTcmodifierOverride == null) addTcmodifierOverride = (Function) native.GetObjectProperty("addTcmodifierOverride");
			addTcmodifierOverride.Call(native, modifierName1, modifierName2);
		}

		/// <summary>
		/// CLEAR_A*
		/// </summary>
		public void _0x15E33297C3E8DC60(string p0)
		{
			if (__0x15E33297C3E8DC60 == null) __0x15E33297C3E8DC60 = (Function) native.GetObjectProperty("_0x15E33297C3E8DC60");
			__0x15E33297C3E8DC60.Call(native, p0);
		}

		public void SetExtraTimecycleModifier(string modifierName)
		{
			if (setExtraTimecycleModifier == null) setExtraTimecycleModifier = (Function) native.GetObjectProperty("setExtraTimecycleModifier");
			setExtraTimecycleModifier.Call(native, modifierName);
		}

		public void ClearExtraTimecycleModifier()
		{
			if (clearExtraTimecycleModifier == null) clearExtraTimecycleModifier = (Function) native.GetObjectProperty("clearExtraTimecycleModifier");
			clearExtraTimecycleModifier.Call(native);
		}

		public int GetExtraTimecycleModifierIndex()
		{
			if (getExtraTimecycleModifierIndex == null) getExtraTimecycleModifierIndex = (Function) native.GetObjectProperty("getExtraTimecycleModifierIndex");
			return (int) getExtraTimecycleModifierIndex.Call(native);
		}

		/// <summary>
		/// ENABLE_*
		/// </summary>
		public void SetExtraTimecycleModifierStrength(double strength)
		{
			if (setExtraTimecycleModifierStrength == null) setExtraTimecycleModifierStrength = (Function) native.GetObjectProperty("setExtraTimecycleModifierStrength");
			setExtraTimecycleModifierStrength.Call(native, strength);
		}

		public void ResetExtraTimecycleModifierStrength()
		{
			if (resetExtraTimecycleModifierStrength == null) resetExtraTimecycleModifierStrength = (Function) native.GetObjectProperty("resetExtraTimecycleModifierStrength");
			resetExtraTimecycleModifierStrength.Call(native);
		}

		public int RequestScaleformMovie(string scaleformName)
		{
			if (requestScaleformMovie == null) requestScaleformMovie = (Function) native.GetObjectProperty("requestScaleformMovie");
			return (int) requestScaleformMovie.Call(native, scaleformName);
		}

		public int RequestScaleformMovieInstance(string scaleformName)
		{
			if (requestScaleformMovieInstance == null) requestScaleformMovieInstance = (Function) native.GetObjectProperty("requestScaleformMovieInstance");
			return (int) requestScaleformMovieInstance.Call(native, scaleformName);
		}

		/// <summary>
		/// Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
		/// These seem to be the only scaleforms ever requested by this native:
		/// "breaking_news"
		/// "desktop_pc"
		/// "ECG_MONITOR"
		/// "Hacking_PC"
		/// "TEETH_PULLING"
		/// Note: Unless this hash is out-of-order, this native is next-gen only.
		/// </summary>
		public int RequestScaleformMovieInteractive(string scaleformName)
		{
			if (requestScaleformMovieInteractive == null) requestScaleformMovieInteractive = (Function) native.GetObjectProperty("requestScaleformMovieInteractive");
			return (int) requestScaleformMovieInteractive.Call(native, scaleformName);
		}

		public bool HasScaleformMovieLoaded(int scaleformHandle)
		{
			if (hasScaleformMovieLoaded == null) hasScaleformMovieLoaded = (Function) native.GetObjectProperty("hasScaleformMovieLoaded");
			return (bool) hasScaleformMovieLoaded.Call(native, scaleformHandle);
		}

		public object _0x2FCB133CA50A49EB(object p0)
		{
			if (__0x2FCB133CA50A49EB == null) __0x2FCB133CA50A49EB = (Function) native.GetObjectProperty("_0x2FCB133CA50A49EB");
			return __0x2FCB133CA50A49EB.Call(native, p0);
		}

		public object _0x86255B1FC929E33E(object p0)
		{
			if (__0x86255B1FC929E33E == null) __0x86255B1FC929E33E = (Function) native.GetObjectProperty("_0x86255B1FC929E33E");
			return __0x86255B1FC929E33E.Call(native, p0);
		}

		/// <summary>
		/// Only values used in the scripts are:
		/// "heist_mp"
		/// "heistmap_mp"
		/// "instructional_buttons"
		/// "heist_pre"
		/// </summary>
		public bool HasScaleformMovieFilenameLoaded(string scaleformName)
		{
			if (hasScaleformMovieFilenameLoaded == null) hasScaleformMovieFilenameLoaded = (Function) native.GetObjectProperty("hasScaleformMovieFilenameLoaded");
			return (bool) hasScaleformMovieFilenameLoaded.Call(native, scaleformName);
		}

		public bool HasScaleformContainerMovieLoadedIntoParent(int scaleformHandle)
		{
			if (hasScaleformContainerMovieLoadedIntoParent == null) hasScaleformContainerMovieLoadedIntoParent = (Function) native.GetObjectProperty("hasScaleformContainerMovieLoadedIntoParent");
			return (bool) hasScaleformContainerMovieLoadedIntoParent.Call(native, scaleformHandle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) SetScaleformMovieAsNoLongerNeeded(int scaleformHandle)
		{
			if (setScaleformMovieAsNoLongerNeeded == null) setScaleformMovieAsNoLongerNeeded = (Function) native.GetObjectProperty("setScaleformMovieAsNoLongerNeeded");
			var results = (Array) setScaleformMovieAsNoLongerNeeded.Call(native, scaleformHandle);
			return (results[0], (int) results[1]);
		}

		public void SetScaleformMovieToUseSystemTime(int scaleform, bool toggle)
		{
			if (setScaleformMovieToUseSystemTime == null) setScaleformMovieToUseSystemTime = (Function) native.GetObjectProperty("setScaleformMovieToUseSystemTime");
			setScaleformMovieToUseSystemTime.Call(native, scaleform, toggle);
		}

		public void _0x32F34FF7F617643B(object p0, object p1)
		{
			if (__0x32F34FF7F617643B == null) __0x32F34FF7F617643B = (Function) native.GetObjectProperty("_0x32F34FF7F617643B");
			__0x32F34FF7F617643B.Call(native, p0, p1);
		}

		public void _0xE6A9F00D4240B519(object p0, object p1)
		{
			if (__0xE6A9F00D4240B519 == null) __0xE6A9F00D4240B519 = (Function) native.GetObjectProperty("_0xE6A9F00D4240B519");
			__0xE6A9F00D4240B519.Call(native, p0, p1);
		}

		public void DrawScaleformMovie(int scaleformHandle, double x, double y, double width, double height, int red, int green, int blue, int alpha, int unk)
		{
			if (drawScaleformMovie == null) drawScaleformMovie = (Function) native.GetObjectProperty("drawScaleformMovie");
			drawScaleformMovie.Call(native, scaleformHandle, x, y, width, height, red, green, blue, alpha, unk);
		}

		/// <summary>
		/// unk is not used so no need
		/// </summary>
		/// <param name="unk">is not used so no need</param>
		public void DrawScaleformMovieFullscreen(int scaleform, int red, int green, int blue, int alpha, int unk)
		{
			if (drawScaleformMovieFullscreen == null) drawScaleformMovieFullscreen = (Function) native.GetObjectProperty("drawScaleformMovieFullscreen");
			drawScaleformMovieFullscreen.Call(native, scaleform, red, green, blue, alpha, unk);
		}

		public void DrawScaleformMovieFullscreenMasked(int scaleform1, int scaleform2, int red, int green, int blue, int alpha)
		{
			if (drawScaleformMovieFullscreenMasked == null) drawScaleformMovieFullscreenMasked = (Function) native.GetObjectProperty("drawScaleformMovieFullscreenMasked");
			drawScaleformMovieFullscreenMasked.Call(native, scaleform1, scaleform2, red, green, blue, alpha);
		}

		public void DrawScaleformMovie3d(int scaleform, double posX, double posY, double posZ, double rotX, double rotY, double rotZ, double p7, double p8, double p9, double scaleX, double scaleY, double scaleZ, object p13)
		{
			if (drawScaleformMovie3d == null) drawScaleformMovie3d = (Function) native.GetObjectProperty("drawScaleformMovie3d");
			drawScaleformMovie3d.Call(native, scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13);
		}

		public void DrawScaleformMovie3dSolid(int scaleform, double posX, double posY, double posZ, double rotX, double rotY, double rotZ, double p7, double p8, double p9, double scaleX, double scaleY, double scaleZ, object p13)
		{
			if (drawScaleformMovie3dSolid == null) drawScaleformMovie3dSolid = (Function) native.GetObjectProperty("drawScaleformMovie3dSolid");
			drawScaleformMovie3dSolid.Call(native, scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13);
		}

		/// <summary>
		/// Calls the Scaleform function.
		/// </summary>
		public void CallScaleformMovieMethod(int scaleform, string method)
		{
			if (callScaleformMovieMethod == null) callScaleformMovieMethod = (Function) native.GetObjectProperty("callScaleformMovieMethod");
			callScaleformMovieMethod.Call(native, scaleform, method);
		}

		/// <summary>
		/// Calls the Scaleform function and passes the parameters as floats.
		/// The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
		/// </summary>
		public void CallScaleformMovieMethodWithNumber(int scaleform, string methodName, double param1, double param2, double param3, double param4, double param5)
		{
			if (callScaleformMovieMethodWithNumber == null) callScaleformMovieMethodWithNumber = (Function) native.GetObjectProperty("callScaleformMovieMethodWithNumber");
			callScaleformMovieMethodWithNumber.Call(native, scaleform, methodName, param1, param2, param3, param4, param5);
		}

		/// <summary>
		/// Calls the Scaleform function and passes the parameters as strings.
		/// The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
		/// </summary>
		public void CallScaleformMovieMethodWithString(int scaleform, string methodName, string param1, string param2, string param3, string param4, string param5)
		{
			if (callScaleformMovieMethodWithString == null) callScaleformMovieMethodWithString = (Function) native.GetObjectProperty("callScaleformMovieMethodWithString");
			callScaleformMovieMethodWithString.Call(native, scaleform, methodName, param1, param2, param3, param4, param5);
		}

		/// <summary>
		/// Calls the Scaleform function and passes both float and string parameters (in their respective order).
		/// The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
		/// NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
		/// Examples:
		/// // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
		/// GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);
		/// // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
		/// GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);
		/// </summary>
		public void CallScaleformMovieMethodWithNumberAndString(int scaleform, string methodName, double floatParam1, double floatParam2, double floatParam3, double floatParam4, double floatParam5, string stringParam1, string stringParam2, string stringParam3, string stringParam4, string stringParam5)
		{
			if (callScaleformMovieMethodWithNumberAndString == null) callScaleformMovieMethodWithNumberAndString = (Function) native.GetObjectProperty("callScaleformMovieMethodWithNumberAndString");
			callScaleformMovieMethodWithNumberAndString.Call(native, scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
		}

		/// <summary>
		/// Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.
		/// Known components:
		/// 19 - MP_RANK_BAR
		/// 20 - HUD_DIRECTOR_MODE
		/// This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
		/// </summary>
		public bool BeginScaleformScriptHudMovieMethod(int hudComponent, string methodName)
		{
			if (beginScaleformScriptHudMovieMethod == null) beginScaleformScriptHudMovieMethod = (Function) native.GetObjectProperty("beginScaleformScriptHudMovieMethod");
			return (bool) beginScaleformScriptHudMovieMethod.Call(native, hudComponent, methodName);
		}

		/// <summary>
		/// Push a function from the Scaleform onto the stack
		/// </summary>
		public bool BeginScaleformMovieMethod(int scaleform, string methodName)
		{
			if (beginScaleformMovieMethod == null) beginScaleformMovieMethod = (Function) native.GetObjectProperty("beginScaleformMovieMethod");
			return (bool) beginScaleformMovieMethod.Call(native, scaleform, methodName);
		}

		public bool BeginScaleformMovieMethodOnFrontend(string methodName)
		{
			if (beginScaleformMovieMethodOnFrontend == null) beginScaleformMovieMethodOnFrontend = (Function) native.GetObjectProperty("beginScaleformMovieMethodOnFrontend");
			return (bool) beginScaleformMovieMethodOnFrontend.Call(native, methodName);
		}

		public bool BeginScaleformMovieMethodOnFrontendHeader(string methodName)
		{
			if (beginScaleformMovieMethodOnFrontendHeader == null) beginScaleformMovieMethodOnFrontendHeader = (Function) native.GetObjectProperty("beginScaleformMovieMethodOnFrontendHeader");
			return (bool) beginScaleformMovieMethodOnFrontendHeader.Call(native, methodName);
		}

		/// <summary>
		/// Pops and calls the Scaleform function on the stack
		/// </summary>
		public void EndScaleformMovieMethod()
		{
			if (endScaleformMovieMethod == null) endScaleformMovieMethod = (Function) native.GetObjectProperty("endScaleformMovieMethod");
			endScaleformMovieMethod.Call(native);
		}

		public object EndScaleformMovieMethodReturnValue()
		{
			if (endScaleformMovieMethodReturnValue == null) endScaleformMovieMethodReturnValue = (Function) native.GetObjectProperty("endScaleformMovieMethodReturnValue");
			return endScaleformMovieMethodReturnValue.Call(native);
		}

		public bool IsScaleformMovieMethodReturnValueReady(object returnValueData)
		{
			if (isScaleformMovieMethodReturnValueReady == null) isScaleformMovieMethodReturnValueReady = (Function) native.GetObjectProperty("isScaleformMovieMethodReturnValueReady");
			return (bool) isScaleformMovieMethodReturnValueReady.Call(native, returnValueData);
		}

		public int GetScaleformMovieMethodReturnValueInt(object returnValueData)
		{
			if (getScaleformMovieMethodReturnValueInt == null) getScaleformMovieMethodReturnValueInt = (Function) native.GetObjectProperty("getScaleformMovieMethodReturnValueInt");
			return (int) getScaleformMovieMethodReturnValueInt.Call(native, returnValueData);
		}

		public bool GetScaleformMovieMethodReturnValueBool(object returnValueData)
		{
			if (getScaleformMovieMethodReturnValueBool == null) getScaleformMovieMethodReturnValueBool = (Function) native.GetObjectProperty("getScaleformMovieMethodReturnValueBool");
			return (bool) getScaleformMovieMethodReturnValueBool.Call(native, returnValueData);
		}

		public string GetScaleformMovieMethodReturnValueString(object returnValueData)
		{
			if (getScaleformMovieMethodReturnValueString == null) getScaleformMovieMethodReturnValueString = (Function) native.GetObjectProperty("getScaleformMovieMethodReturnValueString");
			return (string) getScaleformMovieMethodReturnValueString.Call(native, returnValueData);
		}

		/// <summary>
		/// Pushes an integer for the Scaleform function onto the stack.
		/// </summary>
		public void ScaleformMovieMethodAddParamInt(int value)
		{
			if (scaleformMovieMethodAddParamInt == null) scaleformMovieMethodAddParamInt = (Function) native.GetObjectProperty("scaleformMovieMethodAddParamInt");
			scaleformMovieMethodAddParamInt.Call(native, value);
		}

		/// <summary>
		/// Pushes a float for the Scaleform function onto the stack.
		/// </summary>
		public void ScaleformMovieMethodAddParamFloat(double value)
		{
			if (scaleformMovieMethodAddParamFloat == null) scaleformMovieMethodAddParamFloat = (Function) native.GetObjectProperty("scaleformMovieMethodAddParamFloat");
			scaleformMovieMethodAddParamFloat.Call(native, value);
		}

		/// <summary>
		/// Pushes a boolean for the Scaleform function onto the stack.
		/// </summary>
		public void ScaleformMovieMethodAddParamBool(bool value)
		{
			if (scaleformMovieMethodAddParamBool == null) scaleformMovieMethodAddParamBool = (Function) native.GetObjectProperty("scaleformMovieMethodAddParamBool");
			scaleformMovieMethodAddParamBool.Call(native, value);
		}

		/// <summary>
		/// Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
		/// Examples:
		/// GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
		/// UI::ADD_TEXT_COMPONENT_INTEGER(GAMEPLAY::ABSI(a_1));
		/// GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
		/// GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
		/// UI::_ADD_TEXT_COMPONENT_STRING(a_2);
		/// GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
		/// GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
		/// See NativeDB for reference: http://natives.altv.mp/#/0x80338406F3475E55
		/// </summary>
		public void BeginTextCommandScaleformString(string componentType)
		{
			if (beginTextCommandScaleformString == null) beginTextCommandScaleformString = (Function) native.GetObjectProperty("beginTextCommandScaleformString");
			beginTextCommandScaleformString.Call(native, componentType);
		}

		public void EndTextCommandScaleformString()
		{
			if (endTextCommandScaleformString == null) endTextCommandScaleformString = (Function) native.GetObjectProperty("endTextCommandScaleformString");
			endTextCommandScaleformString.Call(native);
		}

		/// <summary>
		/// Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
		/// </summary>
		public void EndTextCommandScaleformString2()
		{
			if (endTextCommandScaleformString2 == null) endTextCommandScaleformString2 = (Function) native.GetObjectProperty("endTextCommandScaleformString2");
			endTextCommandScaleformString2.Call(native);
		}

		/// <summary>
		/// Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
		/// </summary>
		public void ScaleformMovieMethodAddParamTextureNameString2(string @string)
		{
			if (scaleformMovieMethodAddParamTextureNameString2 == null) scaleformMovieMethodAddParamTextureNameString2 = (Function) native.GetObjectProperty("scaleformMovieMethodAddParamTextureNameString2");
			scaleformMovieMethodAddParamTextureNameString2.Call(native, @string);
		}

		public void ScaleformMovieMethodAddParamTextureNameString(string @string)
		{
			if (scaleformMovieMethodAddParamTextureNameString == null) scaleformMovieMethodAddParamTextureNameString = (Function) native.GetObjectProperty("scaleformMovieMethodAddParamTextureNameString");
			scaleformMovieMethodAddParamTextureNameString.Call(native, @string);
		}

		public void ScaleformMovieMethodAddParamPlayerNameString(string @string)
		{
			if (scaleformMovieMethodAddParamPlayerNameString == null) scaleformMovieMethodAddParamPlayerNameString = (Function) native.GetObjectProperty("scaleformMovieMethodAddParamPlayerNameString");
			scaleformMovieMethodAddParamPlayerNameString.Call(native, @string);
		}

		/// <summary>
		/// DOES_*
		/// </summary>
		public bool _0x5E657EF1099EDD65(object p0)
		{
			if (__0x5E657EF1099EDD65 == null) __0x5E657EF1099EDD65 = (Function) native.GetObjectProperty("_0x5E657EF1099EDD65");
			return (bool) __0x5E657EF1099EDD65.Call(native, p0);
		}

		public void ScaleformMovieMethodAddParamLatestBriefString(int value)
		{
			if (scaleformMovieMethodAddParamLatestBriefString == null) scaleformMovieMethodAddParamLatestBriefString = (Function) native.GetObjectProperty("scaleformMovieMethodAddParamLatestBriefString");
			scaleformMovieMethodAddParamLatestBriefString.Call(native, value);
		}

		public void RequestScaleformScriptHudMovie(int hudComponent)
		{
			if (requestScaleformScriptHudMovie == null) requestScaleformScriptHudMovie = (Function) native.GetObjectProperty("requestScaleformScriptHudMovie");
			requestScaleformScriptHudMovie.Call(native, hudComponent);
		}

		public bool HasScaleformScriptHudMovieLoaded(int hudComponent)
		{
			if (hasScaleformScriptHudMovieLoaded == null) hasScaleformScriptHudMovieLoaded = (Function) native.GetObjectProperty("hasScaleformScriptHudMovieLoaded");
			return (bool) hasScaleformScriptHudMovieLoaded.Call(native, hudComponent);
		}

		public void RemoveScaleformScriptHudMovie(int hudComponent)
		{
			if (removeScaleformScriptHudMovie == null) removeScaleformScriptHudMovie = (Function) native.GetObjectProperty("removeScaleformScriptHudMovie");
			removeScaleformScriptHudMovie.Call(native, hudComponent);
		}

		public bool _0xD1C7CB175E012964(int scaleformHandle)
		{
			if (__0xD1C7CB175E012964 == null) __0xD1C7CB175E012964 = (Function) native.GetObjectProperty("_0xD1C7CB175E012964");
			return (bool) __0xD1C7CB175E012964.Call(native, scaleformHandle);
		}

		public void SetTvChannel(int channel)
		{
			if (setTvChannel == null) setTvChannel = (Function) native.GetObjectProperty("setTvChannel");
			setTvChannel.Call(native, channel);
		}

		public int GetTvChannel()
		{
			if (getTvChannel == null) getTvChannel = (Function) native.GetObjectProperty("getTvChannel");
			return (int) getTvChannel.Call(native);
		}

		public void SetTvVolume(double volume)
		{
			if (setTvVolume == null) setTvVolume = (Function) native.GetObjectProperty("setTvVolume");
			setTvVolume.Call(native, volume);
		}

		public double GetTvVolume()
		{
			if (getTvVolume == null) getTvVolume = (Function) native.GetObjectProperty("getTvVolume");
			return (double) getTvVolume.Call(native);
		}

		/// <summary>
		/// All calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively.
		/// "act_cinema.ysc", line 1483:
		/// UI::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
		/// UI::SET_TEXT_RENDER_ID(l_AE);
		/// GRAPHICS::_0x61BB1D9B3A95D802(4);
		/// GRAPHICS::_0xC6372ECD45D73BCD(1);
		/// if (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) {
		/// GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
		/// } else {
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFDDC2B4ED3C69DF0
		/// </summary>
		public void DrawTvChannel(double xPos, double yPos, double xScale, double yScale, double rotation, int red, int green, int blue, int alpha)
		{
			if (drawTvChannel == null) drawTvChannel = (Function) native.GetObjectProperty("drawTvChannel");
			drawTvChannel.Call(native, xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
		}

		public void SetTvChannelPlaylist(int tvChannel, string playlistName, bool restart)
		{
			if (setTvChannelPlaylist == null) setTvChannelPlaylist = (Function) native.GetObjectProperty("setTvChannelPlaylist");
			setTvChannelPlaylist.Call(native, tvChannel, playlistName, restart);
		}

		public void SetTvChannelPlaylistAtHour(int tvChannel, string playlistName, int hour)
		{
			if (setTvChannelPlaylistAtHour == null) setTvChannelPlaylistAtHour = (Function) native.GetObjectProperty("setTvChannelPlaylistAtHour");
			setTvChannelPlaylistAtHour.Call(native, tvChannel, playlistName, hour);
		}

		public void ClearTvChannelPlaylist(int tvChannel)
		{
			if (clearTvChannelPlaylist == null) clearTvChannelPlaylist = (Function) native.GetObjectProperty("clearTvChannelPlaylist");
			clearTvChannelPlaylist.Call(native, tvChannel);
		}

		public bool IsPlaylistUnk(int tvChannel, object p1)
		{
			if (isPlaylistUnk == null) isPlaylistUnk = (Function) native.GetObjectProperty("isPlaylistUnk");
			return (bool) isPlaylistUnk.Call(native, tvChannel, p1);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool IsTvPlaylistItemPlaying(int videoCliphash)
		{
			if (isTvPlaylistItemPlaying == null) isTvPlaylistItemPlaying = (Function) native.GetObjectProperty("isTvPlaylistItemPlaying");
			return (bool) isTvPlaylistItemPlaying.Call(native, videoCliphash);
		}

		public void EnableMovieKeyframeWait(bool toggle)
		{
			if (enableMovieKeyframeWait == null) enableMovieKeyframeWait = (Function) native.GetObjectProperty("enableMovieKeyframeWait");
			enableMovieKeyframeWait.Call(native, toggle);
		}

		/// <summary>
		/// SET_TV_???
		/// </summary>
		public void _0xD1C55B110E4DF534(object p0)
		{
			if (__0xD1C55B110E4DF534 == null) __0xD1C55B110E4DF534 = (Function) native.GetObjectProperty("_0xD1C55B110E4DF534");
			__0xD1C55B110E4DF534.Call(native, p0);
		}

		/// <summary>
		/// GET_CURRENT_*
		/// </summary>
		public int _0x30432A0118736E00()
		{
			if (__0x30432A0118736E00 == null) __0x30432A0118736E00 = (Function) native.GetObjectProperty("_0x30432A0118736E00");
			return (int) __0x30432A0118736E00.Call(native);
		}

		public void EnableMovieSubtitles(bool toggle)
		{
			if (enableMovieSubtitles == null) enableMovieSubtitles = (Function) native.GetObjectProperty("enableMovieSubtitles");
			enableMovieSubtitles.Call(native, toggle);
		}

		public bool Ui3dsceneIsAvailable()
		{
			if (ui3dsceneIsAvailable == null) ui3dsceneIsAvailable = (Function) native.GetObjectProperty("ui3dsceneIsAvailable");
			return (bool) ui3dsceneIsAvailable.Call(native);
		}

		/// <summary>
		/// All presets can be found in common\data\ui\uiscenes.meta
		/// </summary>
		public bool Ui3dscenePushPreset(string presetName)
		{
			if (ui3dscenePushPreset == null) ui3dscenePushPreset = (Function) native.GetObjectProperty("ui3dscenePushPreset");
			return (bool) ui3dscenePushPreset.Call(native, presetName);
		}

		/// <summary>
		/// It's called after 0xD3A10FC7FD8D98CD and 0xF1CEA8A4198D8E9A
		/// presetName was always "CELEBRATION_WINNER"
		/// All presets can be found in common\data\ui\uiscenes.meta
		/// UI3DSCENE_*
		/// </summary>
		/// <param name="presetName">was always "CELEBRATION_WINNER"</param>
		public bool _0x98C4FE6EC34154CA(string presetName, int ped, int p2, double posX, double posY, double posZ)
		{
			if (__0x98C4FE6EC34154CA == null) __0x98C4FE6EC34154CA = (Function) native.GetObjectProperty("_0x98C4FE6EC34154CA");
			return (bool) __0x98C4FE6EC34154CA.Call(native, presetName, ped, p2, posX, posY, posZ);
		}

		/// <summary>
		/// UI3DSCENE_*
		/// </summary>
		public void _0x7A42B2E236E71415()
		{
			if (__0x7A42B2E236E71415 == null) __0x7A42B2E236E71415 = (Function) native.GetObjectProperty("_0x7A42B2E236E71415");
			__0x7A42B2E236E71415.Call(native);
		}

		/// <summary>
		/// UI3DSCENE_*
		/// </summary>
		public void _0x108BE26959A9D9BB(bool toggle)
		{
			if (__0x108BE26959A9D9BB == null) __0x108BE26959A9D9BB = (Function) native.GetObjectProperty("_0x108BE26959A9D9BB");
			__0x108BE26959A9D9BB.Call(native, toggle);
		}

		public void TerraingridActivate(bool toggle)
		{
			if (terraingridActivate == null) terraingridActivate = (Function) native.GetObjectProperty("terraingridActivate");
			terraingridActivate.Call(native, toggle);
		}

		public void TerraingridSetParams(double x, double y, double z, double p3, double rotation, double p5, double width, double height, double p8, double scale, double glowIntensity, double normalHeight, double heightDiff)
		{
			if (terraingridSetParams == null) terraingridSetParams = (Function) native.GetObjectProperty("terraingridSetParams");
			terraingridSetParams.Call(native, x, y, z, p3, rotation, p5, width, height, p8, scale, glowIntensity, normalHeight, heightDiff);
		}

		public void TerraingridSetColours(int lowR, int lowG, int lowB, int lowAlpha, int r, int g, int b, int alpha, int highR, int highG, int highB, int highAlpha)
		{
			if (terraingridSetColours == null) terraingridSetColours = (Function) native.GetObjectProperty("terraingridSetColours");
			terraingridSetColours.Call(native, lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
		}

		/// <summary>
		/// playLength - is how long to play the effect for in milliseconds. If 0, it plays the default length
		/// if loop is true, the effect wont stop until you call _STOP_SCREEN_EFFECT on it. (only loopable effects)
		/// Example and list of screen FX: www.pastebin.com/dafBAjs0
		/// </summary>
		public void AnimpostfxPlay(string effectName, int duration, bool looped)
		{
			if (animpostfxPlay == null) animpostfxPlay = (Function) native.GetObjectProperty("animpostfxPlay");
			animpostfxPlay.Call(native, effectName, duration, looped);
		}

		/// <summary>
		/// Example and list of screen FX: www.pastebin.com/dafBAjs0
		/// </summary>
		public void AnimpostfxStop(string effectName)
		{
			if (animpostfxStop == null) animpostfxStop = (Function) native.GetObjectProperty("animpostfxStop");
			animpostfxStop.Call(native, effectName);
		}

		public double AnimpostfxGetUnk(string effectName)
		{
			if (animpostfxGetUnk == null) animpostfxGetUnk = (Function) native.GetObjectProperty("animpostfxGetUnk");
			return (double) animpostfxGetUnk.Call(native, effectName);
		}

		/// <summary>
		/// See the effects list in _START_SCREEN_EFFECT
		/// Example and list of screen FX: www.pastebin.com/dafBAjs0
		/// </summary>
		/// <returns>Returns whether the specified screen effect is active.</returns>
		public bool AnimpostfxIsRunning(string effectName)
		{
			if (animpostfxIsRunning == null) animpostfxIsRunning = (Function) native.GetObjectProperty("animpostfxIsRunning");
			return (bool) animpostfxIsRunning.Call(native, effectName);
		}

		public void AnimpostfxStopAll()
		{
			if (animpostfxStopAll == null) animpostfxStopAll = (Function) native.GetObjectProperty("animpostfxStopAll");
			animpostfxStopAll.Call(native);
		}

		/// <summary>
		/// "SwitchHUDFranklinOut",
		/// "SwitchHUDMichaelOut",
		/// "SwitchHUDOut",
		/// "SwitchHUDTrevorOut",
		/// "SwitchOpenFranklinOut",
		/// "SwitchOpenMichaelIn",
		/// "SwitchOpenNeutral"
		/// Stops the effect and sets a value (bool) in its data (+0x199) to false.
		/// </summary>
		public void AnimpostfxStopAndDoUnk(string effectName)
		{
			if (animpostfxStopAndDoUnk == null) animpostfxStopAndDoUnk = (Function) native.GetObjectProperty("animpostfxStopAndDoUnk");
			animpostfxStopAndDoUnk.Call(native, effectName);
		}

		/// <summary>
		/// Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
		/// </summary>
		public void Wait(int ms)
		{
			if (wait == null) wait = (Function) native.GetObjectProperty("wait");
			wait.Call(native, ms);
		}

		/// <summary>
		/// Examples:
		/// g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
		/// l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
		/// SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
		/// SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
		/// SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
		/// SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
		/// SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
		/// SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
		/// See NativeDB for reference: http://natives.altv.mp/#/0xE81651AD79516E48
		/// </summary>
		public int StartNewScript(string scriptName, int stackSize)
		{
			if (startNewScript == null) startNewScript = (Function) native.GetObjectProperty("startNewScript");
			return (int) startNewScript.Call(native, scriptName, stackSize);
		}

		/// <summary>
		/// return : script thread id, 0 if failed
		/// Pass pointer to struct of args in p1, size of struct goes into p2
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) StartNewScriptWithArgs(string scriptName, object args, int argCount, int stackSize)
		{
			if (startNewScriptWithArgs == null) startNewScriptWithArgs = (Function) native.GetObjectProperty("startNewScriptWithArgs");
			var results = (Array) startNewScriptWithArgs.Call(native, scriptName, args, argCount, stackSize);
			return ((int) results[0], results[1]);
		}

		public int StartNewScriptWithNameHash(int scriptHash, int stackSize)
		{
			if (startNewScriptWithNameHash == null) startNewScriptWithNameHash = (Function) native.GetObjectProperty("startNewScriptWithNameHash");
			return (int) startNewScriptWithNameHash.Call(native, scriptHash, stackSize);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) StartNewScriptWithNameHashAndArgs(int scriptHash, object args, int argCount, int stackSize)
		{
			if (startNewScriptWithNameHashAndArgs == null) startNewScriptWithNameHashAndArgs = (Function) native.GetObjectProperty("startNewScriptWithNameHashAndArgs");
			var results = (Array) startNewScriptWithNameHashAndArgs.Call(native, scriptHash, args, argCount, stackSize);
			return ((int) results[0], results[1]);
		}

		/// <summary>
		/// Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
		/// </summary>
		public int Timera()
		{
			if (timera == null) timera = (Function) native.GetObjectProperty("timera");
			return (int) timera.Call(native);
		}

		public int Timerb()
		{
			if (timerb == null) timerb = (Function) native.GetObjectProperty("timerb");
			return (int) timerb.Call(native);
		}

		public void Settimera(int value)
		{
			if (settimera == null) settimera = (Function) native.GetObjectProperty("settimera");
			settimera.Call(native, value);
		}

		public void Settimerb(int value)
		{
			if (settimerb == null) settimerb = (Function) native.GetObjectProperty("settimerb");
			settimerb.Call(native, value);
		}

		/// <summary>
		/// Gets the current frame time.
		/// </summary>
		public double Timestep()
		{
			if (timestep == null) timestep = (Function) native.GetObjectProperty("timestep");
			return (double) timestep.Call(native);
		}

		public double Sin(double value)
		{
			if (sin == null) sin = (Function) native.GetObjectProperty("sin");
			return (double) sin.Call(native, value);
		}

		public double Cos(double value)
		{
			if (cos == null) cos = (Function) native.GetObjectProperty("cos");
			return (double) cos.Call(native, value);
		}

		public double Sqrt(double value)
		{
			if (sqrt == null) sqrt = (Function) native.GetObjectProperty("sqrt");
			return (double) sqrt.Call(native, value);
		}

		public double Pow(double @base, double exponent)
		{
			if (pow == null) pow = (Function) native.GetObjectProperty("pow");
			return (double) pow.Call(native, @base, exponent);
		}

		public double Log10(double value)
		{
			if (log10 == null) log10 = (Function) native.GetObjectProperty("log10");
			return (double) log10.Call(native, value);
		}

		/// <summary>
		/// Calculates the magnitude of a vector.
		/// </summary>
		public double Vmag(double x, double y, double z)
		{
			if (vmag == null) vmag = (Function) native.GetObjectProperty("vmag");
			return (double) vmag.Call(native, x, y, z);
		}

		/// <summary>
		/// Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
		/// </summary>
		public double Vmag2(double x, double y, double z)
		{
			if (vmag2 == null) vmag2 = (Function) native.GetObjectProperty("vmag2");
			return (double) vmag2.Call(native, x, y, z);
		}

		/// <summary>
		/// Calculates distance between vectors.
		/// </summary>
		public double Vdist(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (vdist == null) vdist = (Function) native.GetObjectProperty("vdist");
			return (double) vdist.Call(native, x1, y1, z1, x2, y2, z2);
		}

		/// <summary>
		/// Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
		/// </summary>
		public double Vdist2(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (vdist2 == null) vdist2 = (Function) native.GetObjectProperty("vdist2");
			return (double) vdist2.Call(native, x1, y1, z1, x2, y2, z2);
		}

		public int ShiftLeft(int value, int bitShift)
		{
			if (shiftLeft == null) shiftLeft = (Function) native.GetObjectProperty("shiftLeft");
			return (int) shiftLeft.Call(native, value, bitShift);
		}

		public int ShiftRight(int value, int bitShift)
		{
			if (shiftRight == null) shiftRight = (Function) native.GetObjectProperty("shiftRight");
			return (int) shiftRight.Call(native, value, bitShift);
		}

		public int Floor(double value)
		{
			if (floor == null) floor = (Function) native.GetObjectProperty("floor");
			return (int) floor.Call(native, value);
		}

		/// <summary>
		/// I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
		/// </summary>
		public int Ceil(double value)
		{
			if (ceil == null) ceil = (Function) native.GetObjectProperty("ceil");
			return (int) ceil.Call(native, value);
		}

		public int Round(double value)
		{
			if (round == null) round = (Function) native.GetObjectProperty("round");
			return (int) round.Call(native, value);
		}

		public double ToFloat(int value)
		{
			if (toFloat == null) toFloat = (Function) native.GetObjectProperty("toFloat");
			return (double) toFloat.Call(native, value);
		}

		/// <summary>
		/// 0 = high
		/// 1 = normal
		/// 2 = low
		/// </summary>
		public void SetThreadPriority(int priority)
		{
			if (setThreadPriority == null) setThreadPriority = (Function) native.GetObjectProperty("setThreadPriority");
			setThreadPriority.Call(native, priority);
		}

		public bool AppDataValid()
		{
			if (appDataValid == null) appDataValid = (Function) native.GetObjectProperty("appDataValid");
			return (bool) appDataValid.Call(native);
		}

		public int AppGetInt(string property)
		{
			if (appGetInt == null) appGetInt = (Function) native.GetObjectProperty("appGetInt");
			return (int) appGetInt.Call(native, property);
		}

		public double AppGetFloat(string property)
		{
			if (appGetFloat == null) appGetFloat = (Function) native.GetObjectProperty("appGetFloat");
			return (double) appGetFloat.Call(native, property);
		}

		public string AppGetString(string property)
		{
			if (appGetString == null) appGetString = (Function) native.GetObjectProperty("appGetString");
			return (string) appGetString.Call(native, property);
		}

		public void AppSetInt(string property, int value)
		{
			if (appSetInt == null) appSetInt = (Function) native.GetObjectProperty("appSetInt");
			appSetInt.Call(native, property, value);
		}

		public void AppSetFloat(string property, double value)
		{
			if (appSetFloat == null) appSetFloat = (Function) native.GetObjectProperty("appSetFloat");
			appSetFloat.Call(native, property, value);
		}

		public void AppSetString(string property, string value)
		{
			if (appSetString == null) appSetString = (Function) native.GetObjectProperty("appSetString");
			appSetString.Call(native, property, value);
		}

		/// <summary>
		/// Called in the gamescripts like:
		/// APP::APP_SET_APP("car");
		/// APP::APP_SET_APP("dog");
		/// </summary>
		public void AppSetApp(string appName)
		{
			if (appSetApp == null) appSetApp = (Function) native.GetObjectProperty("appSetApp");
			appSetApp.Call(native, appName);
		}

		public void AppSetBlock(string blockName)
		{
			if (appSetBlock == null) appSetBlock = (Function) native.GetObjectProperty("appSetBlock");
			appSetBlock.Call(native, blockName);
		}

		public void AppClearBlock()
		{
			if (appClearBlock == null) appClearBlock = (Function) native.GetObjectProperty("appClearBlock");
			appClearBlock.Call(native);
		}

		public void AppCloseApp()
		{
			if (appCloseApp == null) appCloseApp = (Function) native.GetObjectProperty("appCloseApp");
			appCloseApp.Call(native);
		}

		public void AppCloseBlock()
		{
			if (appCloseBlock == null) appCloseBlock = (Function) native.GetObjectProperty("appCloseBlock");
			appCloseBlock.Call(native);
		}

		public bool AppHasLinkedSocialClubAccount()
		{
			if (appHasLinkedSocialClubAccount == null) appHasLinkedSocialClubAccount = (Function) native.GetObjectProperty("appHasLinkedSocialClubAccount");
			return (bool) appHasLinkedSocialClubAccount.Call(native);
		}

		public bool AppHasSyncedData(string appName)
		{
			if (appHasSyncedData == null) appHasSyncedData = (Function) native.GetObjectProperty("appHasSyncedData");
			return (bool) appHasSyncedData.Call(native, appName);
		}

		public void AppSaveData()
		{
			if (appSaveData == null) appSaveData = (Function) native.GetObjectProperty("appSaveData");
			appSaveData.Call(native);
		}

		public int AppGetDeletedFileStatus()
		{
			if (appGetDeletedFileStatus == null) appGetDeletedFileStatus = (Function) native.GetObjectProperty("appGetDeletedFileStatus");
			return (int) appGetDeletedFileStatus.Call(native);
		}

		public bool AppDeleteAppData(string appName)
		{
			if (appDeleteAppData == null) appDeleteAppData = (Function) native.GetObjectProperty("appDeleteAppData");
			return (bool) appDeleteAppData.Call(native, appName);
		}

		/// <summary>
		/// All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny
		/// AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
		/// AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
		/// </summary>
		public void PlayPedRingtone(string ringtoneName, int ped, bool p2)
		{
			if (playPedRingtone == null) playPedRingtone = (Function) native.GetObjectProperty("playPedRingtone");
			playPedRingtone.Call(native, ringtoneName, ped, p2);
		}

		public bool IsPedRingtonePlaying(int ped)
		{
			if (isPedRingtonePlaying == null) isPedRingtonePlaying = (Function) native.GetObjectProperty("isPedRingtonePlaying");
			return (bool) isPedRingtonePlaying.Call(native, ped);
		}

		public void StopPedRingtone(int ped)
		{
			if (stopPedRingtone == null) stopPedRingtone = (Function) native.GetObjectProperty("stopPedRingtone");
			stopPedRingtone.Call(native, ped);
		}

		public bool IsMobilePhoneCallOngoing()
		{
			if (isMobilePhoneCallOngoing == null) isMobilePhoneCallOngoing = (Function) native.GetObjectProperty("isMobilePhoneCallOngoing");
			return (bool) isMobilePhoneCallOngoing.Call(native);
		}

		/// <summary>
		/// IS_MOBILE_PHONE_*
		/// </summary>
		public bool _0xC8B1B2425604CDD0()
		{
			if (__0xC8B1B2425604CDD0 == null) __0xC8B1B2425604CDD0 = (Function) native.GetObjectProperty("_0xC8B1B2425604CDD0");
			return (bool) __0xC8B1B2425604CDD0.Call(native);
		}

		public void CreateNewScriptedConversation()
		{
			if (createNewScriptedConversation == null) createNewScriptedConversation = (Function) native.GetObjectProperty("createNewScriptedConversation");
			createNewScriptedConversation.Call(native);
		}

		/// <summary>
		/// NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
		/// _GET_TEXT_SUBSTRING and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
		/// p0 is -1, 0 - 35
		/// p1 is a char or string (whatever you wanna call it)
		/// p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
		/// p3 is again -1, 0 - 35
		/// p4 is again -1, 0 - 35
		/// p5 is either 0 or 1 (bool ?)
		/// p6 is either 0 or 1 (The func to determine this is bool)
		/// See NativeDB for reference: http://natives.altv.mp/#/0xC5EF963405593646
		/// </summary>
		/// <param name="p1">is a char or string (whatever you wanna call it)</param>
		/// <param name="p2">is Global 10597 + i * 6. 'i' is a while(i < 70) loop</param>
		/// <param name="p3">is again -1, 0 - 35 </param>
		/// <param name="p4">is again -1, 0 - 35 </param>
		/// <param name="p5">is either 0 or 1 (bool ?)</param>
		/// <param name="p6">is either 0 or 1 (The func to determine this is bool)</param>
		public void AddLineToConversation(int index, string p1, string p2, int p3, int p4, bool p5, bool p6, bool p7, bool p8, int p9, bool p10, bool p11, bool p12)
		{
			if (addLineToConversation == null) addLineToConversation = (Function) native.GetObjectProperty("addLineToConversation");
			addLineToConversation.Call(native, index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		}

		/// <summary>
		/// 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
		/// AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");
		/// =================================================
		/// One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
		/// </summary>
		public void AddPedToConversation(int index, int ped, string p2)
		{
			if (addPedToConversation == null) addPedToConversation = (Function) native.GetObjectProperty("addPedToConversation");
			addPedToConversation.Call(native, index, ped, p2);
		}

		public void _0x33E3C6C6F2F0B506(object p0, double p1, double p2, double p3)
		{
			if (__0x33E3C6C6F2F0B506 == null) __0x33E3C6C6F2F0B506 = (Function) native.GetObjectProperty("_0x33E3C6C6F2F0B506");
			__0x33E3C6C6F2F0B506.Call(native, p0, p1, p2, p3);
		}

		public void _0x892B6AB8F33606F5(int p0, int entity)
		{
			if (__0x892B6AB8F33606F5 == null) __0x892B6AB8F33606F5 = (Function) native.GetObjectProperty("_0x892B6AB8F33606F5");
			__0x892B6AB8F33606F5.Call(native, p0, entity);
		}

		/// <summary>
		/// If this is the correct name, what microphone? I know your TV isn't going to reach out and adjust your headset so..
		/// </summary>
		public void SetMicrophonePosition(bool p0, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3)
		{
			if (setMicrophonePosition == null) setMicrophonePosition = (Function) native.GetObjectProperty("setMicrophonePosition");
			setMicrophonePosition.Call(native, p0, x1, y1, z1, x2, y2, z2, x3, y3, z3);
		}

		public void _0x0B568201DD99F0EB(bool p0)
		{
			if (__0x0B568201DD99F0EB == null) __0x0B568201DD99F0EB = (Function) native.GetObjectProperty("_0x0B568201DD99F0EB");
			__0x0B568201DD99F0EB.Call(native, p0);
		}

		public void _0x61631F5DF50D1C34(bool p0)
		{
			if (__0x61631F5DF50D1C34 == null) __0x61631F5DF50D1C34 = (Function) native.GetObjectProperty("_0x61631F5DF50D1C34");
			__0x61631F5DF50D1C34.Call(native, p0);
		}

		public void StartScriptPhoneConversation(bool p0, bool p1)
		{
			if (startScriptPhoneConversation == null) startScriptPhoneConversation = (Function) native.GetObjectProperty("startScriptPhoneConversation");
			startScriptPhoneConversation.Call(native, p0, p1);
		}

		public void PreloadScriptPhoneConversation(bool p0, bool p1)
		{
			if (preloadScriptPhoneConversation == null) preloadScriptPhoneConversation = (Function) native.GetObjectProperty("preloadScriptPhoneConversation");
			preloadScriptPhoneConversation.Call(native, p0, p1);
		}

		public void StartScriptConversation(bool p0, bool p1, bool p2, bool p3)
		{
			if (startScriptConversation == null) startScriptConversation = (Function) native.GetObjectProperty("startScriptConversation");
			startScriptConversation.Call(native, p0, p1, p2, p3);
		}

		public void PreloadScriptConversation(bool p0, bool p1, bool p2, bool p3)
		{
			if (preloadScriptConversation == null) preloadScriptConversation = (Function) native.GetObjectProperty("preloadScriptConversation");
			preloadScriptConversation.Call(native, p0, p1, p2, p3);
		}

		public void StartPreloadedConversation()
		{
			if (startPreloadedConversation == null) startPreloadedConversation = (Function) native.GetObjectProperty("startPreloadedConversation");
			startPreloadedConversation.Call(native);
		}

		public bool GetIsPreloadedConversationReady()
		{
			if (getIsPreloadedConversationReady == null) getIsPreloadedConversationReady = (Function) native.GetObjectProperty("getIsPreloadedConversationReady");
			return (bool) getIsPreloadedConversationReady.Call(native);
		}

		public bool IsScriptedConversationOngoing()
		{
			if (isScriptedConversationOngoing == null) isScriptedConversationOngoing = (Function) native.GetObjectProperty("isScriptedConversationOngoing");
			return (bool) isScriptedConversationOngoing.Call(native);
		}

		public bool IsScriptedConversationLoaded()
		{
			if (isScriptedConversationLoaded == null) isScriptedConversationLoaded = (Function) native.GetObjectProperty("isScriptedConversationLoaded");
			return (bool) isScriptedConversationLoaded.Call(native);
		}

		public int GetCurrentScriptedConversationLine()
		{
			if (getCurrentScriptedConversationLine == null) getCurrentScriptedConversationLine = (Function) native.GetObjectProperty("getCurrentScriptedConversationLine");
			return (int) getCurrentScriptedConversationLine.Call(native);
		}

		public void PauseScriptedConversation(bool p0)
		{
			if (pauseScriptedConversation == null) pauseScriptedConversation = (Function) native.GetObjectProperty("pauseScriptedConversation");
			pauseScriptedConversation.Call(native, p0);
		}

		public void RestartScriptedConversation()
		{
			if (restartScriptedConversation == null) restartScriptedConversation = (Function) native.GetObjectProperty("restartScriptedConversation");
			restartScriptedConversation.Call(native);
		}

		public int StopScriptedConversation(bool p0)
		{
			if (stopScriptedConversation == null) stopScriptedConversation = (Function) native.GetObjectProperty("stopScriptedConversation");
			return (int) stopScriptedConversation.Call(native, p0);
		}

		public void SkipToNextScriptedConversationLine()
		{
			if (skipToNextScriptedConversationLine == null) skipToNextScriptedConversationLine = (Function) native.GetObjectProperty("skipToNextScriptedConversationLine");
			skipToNextScriptedConversationLine.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) InterruptConversation(object p0, object p1, object p2)
		{
			if (interruptConversation == null) interruptConversation = (Function) native.GetObjectProperty("interruptConversation");
			var results = (Array) interruptConversation.Call(native, p0, p1, p2);
			return (results[0], results[1], results[2]);
		}

		/// <summary>
		/// One call found in the b617d scripts:
		/// AUDIO::_8A694D7A68F8DC38(NETWORK::NET_TO_PED(l_3989._f26F[01]), "CONV_INTERRUPT_QUIT_IT", "LESTER");
		/// </summary>
		public void InterruptConversationAndPause(int p0, string p1, string p2)
		{
			if (interruptConversationAndPause == null) interruptConversationAndPause = (Function) native.GetObjectProperty("interruptConversationAndPause");
			interruptConversationAndPause.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) _0xAA19F5572C38B564(object p0)
		{
			if (__0xAA19F5572C38B564 == null) __0xAA19F5572C38B564 = (Function) native.GetObjectProperty("_0xAA19F5572C38B564");
			var results = (Array) __0xAA19F5572C38B564.Call(native, p0);
			return (results[0], results[1]);
		}

		public void _0xB542DE8C3D1CB210(bool p0)
		{
			if (__0xB542DE8C3D1CB210 == null) __0xB542DE8C3D1CB210 = (Function) native.GetObjectProperty("_0xB542DE8C3D1CB210");
			__0xB542DE8C3D1CB210.Call(native, p0);
		}

		public void RegisterScriptWithAudio(int p0)
		{
			if (registerScriptWithAudio == null) registerScriptWithAudio = (Function) native.GetObjectProperty("registerScriptWithAudio");
			registerScriptWithAudio.Call(native, p0);
		}

		public void UnregisterScriptWithAudio()
		{
			if (unregisterScriptWithAudio == null) unregisterScriptWithAudio = (Function) native.GetObjectProperty("unregisterScriptWithAudio");
			unregisterScriptWithAudio.Call(native);
		}

		/// <summary>
		/// All occurrences and usages found in b617d: pastebin.com/NzZZ2Tmm
		/// </summary>
		public bool RequestMissionAudioBank(string p0, bool p1, object p2)
		{
			if (requestMissionAudioBank == null) requestMissionAudioBank = (Function) native.GetObjectProperty("requestMissionAudioBank");
			return (bool) requestMissionAudioBank.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/XZ1tmGEz
		/// </summary>
		public bool RequestAmbientAudioBank(string p0, bool p1, object p2)
		{
			if (requestAmbientAudioBank == null) requestAmbientAudioBank = (Function) native.GetObjectProperty("requestAmbientAudioBank");
			return (bool) requestAmbientAudioBank.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/AkmDAVn6
		/// </summary>
		public bool RequestScriptAudioBank(string p0, bool p1, object p2)
		{
			if (requestScriptAudioBank == null) requestScriptAudioBank = (Function) native.GetObjectProperty("requestScriptAudioBank");
			return (bool) requestScriptAudioBank.Call(native, p0, p1, p2);
		}

		public object _0x40763EA7B9B783E7(object p0, object p1, object p2)
		{
			if (__0x40763EA7B9B783E7 == null) __0x40763EA7B9B783E7 = (Function) native.GetObjectProperty("_0x40763EA7B9B783E7");
			return __0x40763EA7B9B783E7.Call(native, p0, p1, p2);
		}

		public object HintAmbientAudioBank(object p0, object p1, object p2)
		{
			if (hintAmbientAudioBank == null) hintAmbientAudioBank = (Function) native.GetObjectProperty("hintAmbientAudioBank");
			return hintAmbientAudioBank.Call(native, p0, p1, p2);
		}

		public object HintScriptAudioBank(object p0, object p1, object p2)
		{
			if (hintScriptAudioBank == null) hintScriptAudioBank = (Function) native.GetObjectProperty("hintScriptAudioBank");
			return hintScriptAudioBank.Call(native, p0, p1, p2);
		}

		public void ReleaseMissionAudioBank()
		{
			if (releaseMissionAudioBank == null) releaseMissionAudioBank = (Function) native.GetObjectProperty("releaseMissionAudioBank");
			releaseMissionAudioBank.Call(native);
		}

		public void ReleaseAmbientAudioBank()
		{
			if (releaseAmbientAudioBank == null) releaseAmbientAudioBank = (Function) native.GetObjectProperty("releaseAmbientAudioBank");
			releaseAmbientAudioBank.Call(native);
		}

		public void ReleaseNamedScriptAudioBank(string audioBank)
		{
			if (releaseNamedScriptAudioBank == null) releaseNamedScriptAudioBank = (Function) native.GetObjectProperty("releaseNamedScriptAudioBank");
			releaseNamedScriptAudioBank.Call(native, audioBank);
		}

		public void ReleaseScriptAudioBank()
		{
			if (releaseScriptAudioBank == null) releaseScriptAudioBank = (Function) native.GetObjectProperty("releaseScriptAudioBank");
			releaseScriptAudioBank.Call(native);
		}

		public void _0x19AF7ED9B9D23058()
		{
			if (__0x19AF7ED9B9D23058 == null) __0x19AF7ED9B9D23058 = (Function) native.GetObjectProperty("_0x19AF7ED9B9D23058");
			__0x19AF7ED9B9D23058.Call(native);
		}

		public void _0x9AC92EED5E4793AB()
		{
			if (__0x9AC92EED5E4793AB == null) __0x9AC92EED5E4793AB = (Function) native.GetObjectProperty("_0x9AC92EED5E4793AB");
			__0x9AC92EED5E4793AB.Call(native);
		}

		public void _0x11579D940949C49E(object p0)
		{
			if (__0x11579D940949C49E == null) __0x11579D940949C49E = (Function) native.GetObjectProperty("_0x11579D940949C49E");
			__0x11579D940949C49E.Call(native, p0);
		}

		public int GetSoundId()
		{
			if (getSoundId == null) getSoundId = (Function) native.GetObjectProperty("getSoundId");
			return (int) getSoundId.Call(native);
		}

		public void ReleaseSoundId(int soundId)
		{
			if (releaseSoundId == null) releaseSoundId = (Function) native.GetObjectProperty("releaseSoundId");
			releaseSoundId.Call(native, soundId);
		}

		/// <summary>
		/// All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ
		/// </summary>
		public void PlaySound(int soundId, string audioName, string audioRef, bool p3, object p4, bool p5)
		{
			if (playSound == null) playSound = (Function) native.GetObjectProperty("playSound");
			playSound.Call(native, soundId, audioName, audioRef, p3, p4, p5);
		}

		/// <summary>
		/// list: pastebin.com/DCeRiaLJ
		/// All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/0neZdsZ5
		/// </summary>
		public void PlaySoundFrontend(int soundId, string audioName, string audioRef, bool p3)
		{
			if (playSoundFrontend == null) playSoundFrontend = (Function) native.GetObjectProperty("playSoundFrontend");
			playSoundFrontend.Call(native, soundId, audioName, audioRef, p3);
		}

		/// <summary>
		/// Only call found in the b617d scripts:
		/// AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");
		/// </summary>
		public void PlayDeferredSoundFrontend(string soundName, string soundsetName)
		{
			if (playDeferredSoundFrontend == null) playDeferredSoundFrontend = (Function) native.GetObjectProperty("playDeferredSoundFrontend");
			playDeferredSoundFrontend.Call(native, soundName, soundsetName);
		}

		/// <summary>
		/// All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0
		/// No changes made in b678d.
		/// gtaforums.com/topic/795622-audio-for-mods
		/// </summary>
		public void PlaySoundFromEntity(int soundId, string audioName, int entity, string audioRef, bool isNetwork, object p5)
		{
			if (playSoundFromEntity == null) playSoundFromEntity = (Function) native.GetObjectProperty("playSoundFromEntity");
			playSoundFromEntity.Call(native, soundId, audioName, entity, audioRef, isNetwork, p5);
		}

		public void _0x5B9853296731E88D(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (__0x5B9853296731E88D == null) __0x5B9853296731E88D = (Function) native.GetObjectProperty("_0x5B9853296731E88D");
			__0x5B9853296731E88D.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW
		/// gtaforums.com/topic/795622-audio-for-mods
		/// </summary>
		public void PlaySoundFromCoord(int soundId, string audioName, double x, double y, double z, string audioRef, bool isNetwork, int range, bool p8)
		{
			if (playSoundFromCoord == null) playSoundFromCoord = (Function) native.GetObjectProperty("playSoundFromCoord");
			playSoundFromCoord.Call(native, soundId, audioName, x, y, z, audioRef, isNetwork, range, p8);
		}

		public void _0x7EC3C679D0E7E46B(object p0, object p1, object p2, object p3)
		{
			if (__0x7EC3C679D0E7E46B == null) __0x7EC3C679D0E7E46B = (Function) native.GetObjectProperty("_0x7EC3C679D0E7E46B");
			__0x7EC3C679D0E7E46B.Call(native, p0, p1, p2, p3);
		}

		public void StopSound(int soundId)
		{
			if (stopSound == null) stopSound = (Function) native.GetObjectProperty("stopSound");
			stopSound.Call(native, soundId);
		}

		/// <summary>
		/// Could this be used alongside either,
		/// SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
		/// </summary>
		public int GetNetworkIdFromSoundId(int soundId)
		{
			if (getNetworkIdFromSoundId == null) getNetworkIdFromSoundId = (Function) native.GetObjectProperty("getNetworkIdFromSoundId");
			return (int) getNetworkIdFromSoundId.Call(native, soundId);
		}

		public int GetSoundIdFromNetworkId(int netId)
		{
			if (getSoundIdFromNetworkId == null) getSoundIdFromNetworkId = (Function) native.GetObjectProperty("getSoundIdFromNetworkId");
			return (int) getSoundIdFromNetworkId.Call(native, netId);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) SetVariableOnSound(int soundId, object p1, double p2)
		{
			if (setVariableOnSound == null) setVariableOnSound = (Function) native.GetObjectProperty("setVariableOnSound");
			var results = (Array) setVariableOnSound.Call(native, soundId, p1, p2);
			return (results[0], results[1]);
		}

		/// <summary>
		/// From the scripts, p0:
		/// "ArmWrestlingIntensity",
		/// "INOUT",
		/// "Monkey_Stream",
		/// "ZoomLevel"
		/// </summary>
		public void SetVariableOnStream(string p0, double p1)
		{
			if (setVariableOnStream == null) setVariableOnStream = (Function) native.GetObjectProperty("setVariableOnStream");
			setVariableOnStream.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) OverrideUnderwaterStream(object p0, bool p1)
		{
			if (overrideUnderwaterStream == null) overrideUnderwaterStream = (Function) native.GetObjectProperty("overrideUnderwaterStream");
			var results = (Array) overrideUnderwaterStream.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		/// <summary>
		/// AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
		/// AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);
		/// </summary>
		public void SetVariableOnUnderWaterStream(string variableName, double value)
		{
			if (setVariableOnUnderWaterStream == null) setVariableOnUnderWaterStream = (Function) native.GetObjectProperty("setVariableOnUnderWaterStream");
			setVariableOnUnderWaterStream.Call(native, variableName, value);
		}

		public bool HasSoundFinished(int soundId)
		{
			if (hasSoundFinished == null) hasSoundFinished = (Function) native.GetObjectProperty("hasSoundFinished");
			return (bool) hasSoundFinished.Call(native, soundId);
		}

		/// <summary>
		/// Plays ambient speech. See also _0x444180DB.
		/// ped: The ped to play the ambient speech.
		/// speechName: Name of the speech to play, eg. "GENERIC_HI".
		/// speechParam: Can be one of the following:
		/// SPEECH_PARAMS_STANDARD
		/// SPEECH_PARAMS_ALLOW_REPEAT
		/// SPEECH_PARAMS_BEAT
		/// SPEECH_PARAMS_FORCE
		/// SPEECH_PARAMS_FORCE_FRONTEND
		/// See NativeDB for reference: http://natives.altv.mp/#/0x8E04FEDD28D42462
		/// </summary>
		/// <param name="ped">The ped to play the ambient speech.</param>
		/// <param name="speechName">Name of the speech to play, eg. "GENERIC_HI".</param>
		/// <param name="speechParam">Can be one of the following:</param>
		public void PlayAmbientSpeech1(int ped, string speechName, string speechParam, object p3)
		{
			if (playAmbientSpeech1 == null) playAmbientSpeech1 = (Function) native.GetObjectProperty("playAmbientSpeech1");
			playAmbientSpeech1.Call(native, ped, speechName, speechParam, p3);
		}

		/// <summary>
		/// Plays ambient speech. See also _0x5C57B85D.
		/// See _PLAY_AMBIENT_SPEECH1 for parameter specifications.
		/// Full list of speeches and voices names by alexguirre: gist.github.com/alexguirre/0af600eb3d4c91ad4f900120a63b8992
		/// </summary>
		public void PlayAmbientSpeech2(int ped, string speechName, string speechParam, object p3)
		{
			if (playAmbientSpeech2 == null) playAmbientSpeech2 = (Function) native.GetObjectProperty("playAmbientSpeech2");
			playAmbientSpeech2.Call(native, ped, speechName, speechParam, p3);
		}

		/// <summary>
		/// This is the same as _PLAY_AMBIENT_SPEECH1 and _PLAY_AMBIENT_SPEECH2 but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
		/// EX (C#):
		/// GTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
		/// The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
		/// Full list of speeches and voices names by alexguirre: gist.github.com/alexguirre/0af600eb3d4c91ad4f900120a63b8992
		/// </summary>
		public void PlayAmbientSpeechWithVoice(int p0, string speechName, string voiceName, string speechParam, bool p4)
		{
			if (playAmbientSpeechWithVoice == null) playAmbientSpeechWithVoice = (Function) native.GetObjectProperty("playAmbientSpeechWithVoice");
			playAmbientSpeechWithVoice.Call(native, p0, speechName, voiceName, speechParam, p4);
		}

		public void PlayAmbientSpeechAtCoords(string p0, string p1, double p2, double p3, double p4, string p5)
		{
			if (playAmbientSpeechAtCoords == null) playAmbientSpeechAtCoords = (Function) native.GetObjectProperty("playAmbientSpeechAtCoords");
			playAmbientSpeechAtCoords.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// Sets audio flag "TrevorRageIsOverriden"
		/// </summary>
		public void OverrideTrevorRage(string p0)
		{
			if (overrideTrevorRage == null) overrideTrevorRage = (Function) native.GetObjectProperty("overrideTrevorRage");
			overrideTrevorRage.Call(native, p0);
		}

		public void ResetTrevorRage()
		{
			if (resetTrevorRage == null) resetTrevorRage = (Function) native.GetObjectProperty("resetTrevorRage");
			resetTrevorRage.Call(native);
		}

		public void SetPlayerAngry(int ped, bool toggle)
		{
			if (setPlayerAngry == null) setPlayerAngry = (Function) native.GetObjectProperty("setPlayerAngry");
			setPlayerAngry.Call(native, ped, toggle);
		}

		/// <summary>
		/// Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);
		/// Last 2 parameters always seem to be 0.
		/// EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
		/// Known Pain IDs
		/// ________________________
		/// 1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
		/// 6 - Scream (Short)
		/// 7 - Scared Scream (Kinda Long)
		/// 8 - On Fire
		/// </summary>
		public void PlayPain(int ped, int painID, int p1, object p3)
		{
			if (playPain == null) playPain = (Function) native.GetObjectProperty("playPain");
			playPain.Call(native, ped, painID, p1, p3);
		}

		public void ReleaseWeaponAudio()
		{
			if (releaseWeaponAudio == null) releaseWeaponAudio = (Function) native.GetObjectProperty("releaseWeaponAudio");
			releaseWeaponAudio.Call(native);
		}

		public void ActivateAudioSlowmoMode(string p0)
		{
			if (activateAudioSlowmoMode == null) activateAudioSlowmoMode = (Function) native.GetObjectProperty("activateAudioSlowmoMode");
			activateAudioSlowmoMode.Call(native, p0);
		}

		public void DeactivateAudioSlowmoMode(string p0)
		{
			if (deactivateAudioSlowmoMode == null) deactivateAudioSlowmoMode = (Function) native.GetObjectProperty("deactivateAudioSlowmoMode");
			deactivateAudioSlowmoMode.Call(native, p0);
		}

		/// <summary>
		/// Audio List
		/// gtaforums.com/topic/795622-audio-for-mods/
		/// All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/FTeAj4yZ
		/// Yes
		/// </summary>
		public void SetAmbientVoiceName(int ped, string name)
		{
			if (setAmbientVoiceName == null) setAmbientVoiceName = (Function) native.GetObjectProperty("setAmbientVoiceName");
			setAmbientVoiceName.Call(native, ped, name);
		}

		public void SetAmbientVoiceNameHash(int ped, int hash)
		{
			if (setAmbientVoiceNameHash == null) setAmbientVoiceNameHash = (Function) native.GetObjectProperty("setAmbientVoiceNameHash");
			setAmbientVoiceNameHash.Call(native, ped, hash);
		}

		public int GetAmbientVoiceNameHash(int ped)
		{
			if (getAmbientVoiceNameHash == null) getAmbientVoiceNameHash = (Function) native.GetObjectProperty("getAmbientVoiceNameHash");
			return (int) getAmbientVoiceNameHash.Call(native, ped);
		}

		/// <summary>
		/// Assigns some ambient voice to the ped.
		/// </summary>
		public void SetPedScream(int ped)
		{
			if (setPedScream == null) setPedScream = (Function) native.GetObjectProperty("setPedScream");
			setPedScream.Call(native, ped);
		}

		public void _0x1B7ABE26CBCBF8C7(int ped, object p1, object p2)
		{
			if (__0x1B7ABE26CBCBF8C7 == null) __0x1B7ABE26CBCBF8C7 = (Function) native.GetObjectProperty("_0x1B7ABE26CBCBF8C7");
			__0x1B7ABE26CBCBF8C7.Call(native, ped, p1, p2);
		}

		/// <summary>
		/// From the scripts:
		/// AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("PAIGE_PVG"));
		/// AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("TALINA_PVG"));
		/// AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
		/// AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
		/// </summary>
		public void SetPedVoiceGroup(int ped, int voiceGroupHash)
		{
			if (setPedVoiceGroup == null) setPedVoiceGroup = (Function) native.GetObjectProperty("setPedVoiceGroup");
			setPedVoiceGroup.Call(native, ped, voiceGroupHash);
		}

		public void _0xA5342D390CDA41D6(int ped, bool p1)
		{
			if (__0xA5342D390CDA41D6 == null) __0xA5342D390CDA41D6 = (Function) native.GetObjectProperty("_0xA5342D390CDA41D6");
			__0xA5342D390CDA41D6.Call(native, ped, p1);
		}

		public void StopCurrentPlayingSpeech(int ped)
		{
			if (stopCurrentPlayingSpeech == null) stopCurrentPlayingSpeech = (Function) native.GetObjectProperty("stopCurrentPlayingSpeech");
			stopCurrentPlayingSpeech.Call(native, ped);
		}

		public void StopCurrentPlayingAmbientSpeech(int ped)
		{
			if (stopCurrentPlayingAmbientSpeech == null) stopCurrentPlayingAmbientSpeech = (Function) native.GetObjectProperty("stopCurrentPlayingAmbientSpeech");
			stopCurrentPlayingAmbientSpeech.Call(native, ped);
		}

		public bool IsAmbientSpeechPlaying(int ped)
		{
			if (isAmbientSpeechPlaying == null) isAmbientSpeechPlaying = (Function) native.GetObjectProperty("isAmbientSpeechPlaying");
			return (bool) isAmbientSpeechPlaying.Call(native, ped);
		}

		public bool IsScriptedSpeechPlaying(object p0)
		{
			if (isScriptedSpeechPlaying == null) isScriptedSpeechPlaying = (Function) native.GetObjectProperty("isScriptedSpeechPlaying");
			return (bool) isScriptedSpeechPlaying.Call(native, p0);
		}

		public bool IsAnySpeechPlaying(int ped)
		{
			if (isAnySpeechPlaying == null) isAnySpeechPlaying = (Function) native.GetObjectProperty("isAnySpeechPlaying");
			return (bool) isAnySpeechPlaying.Call(native, ped);
		}

		/// <summary>
		/// Checks if the ped can play the speech or has the speech file, last parameter is usually 0
		/// DOES_C*
		/// </summary>
		public bool CanPedSpeak(int ped, string speechName, bool unk)
		{
			if (canPedSpeak == null) canPedSpeak = (Function) native.GetObjectProperty("canPedSpeak");
			return (bool) canPedSpeak.Call(native, ped, speechName, unk);
		}

		public bool IsPedInCurrentConversation(int ped)
		{
			if (isPedInCurrentConversation == null) isPedInCurrentConversation = (Function) native.GetObjectProperty("isPedInCurrentConversation");
			return (bool) isPedInCurrentConversation.Call(native, ped);
		}

		/// <summary>
		/// Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
		/// ====================================================
		/// As mentioned above, this only sets the drunk sound to ped/player.
		/// To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
		/// Below is an example
		/// if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
		/// {
		/// Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0x95D2D383D5396B8A
		/// </summary>
		public void SetPedIsDrunk(int ped, bool toggle)
		{
			if (setPedIsDrunk == null) setPedIsDrunk = (Function) native.GetObjectProperty("setPedIsDrunk");
			setPedIsDrunk.Call(native, ped, toggle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlayAnimalVocalization(int pedHandle, object p1, object p2)
		{
			if (playAnimalVocalization == null) playAnimalVocalization = (Function) native.GetObjectProperty("playAnimalVocalization");
			var results = (Array) playAnimalVocalization.Call(native, pedHandle, p1, p2);
			return (results[0], results[1]);
		}

		public bool IsAnimalVocalizationPlaying(int pedHandle)
		{
			if (isAnimalVocalizationPlaying == null) isAnimalVocalizationPlaying = (Function) native.GetObjectProperty("isAnimalVocalizationPlaying");
			return (bool) isAnimalVocalizationPlaying.Call(native, pedHandle);
		}

		/// <summary>
		/// mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
		/// </summary>
		/// <param name="mood">can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.</param>
		public void SetAnimalMood(int animal, int mood)
		{
			if (setAnimalMood == null) setAnimalMood = (Function) native.GetObjectProperty("setAnimalMood");
			setAnimalMood.Call(native, animal, mood);
		}

		public bool IsMobilePhoneRadioActive()
		{
			if (isMobilePhoneRadioActive == null) isMobilePhoneRadioActive = (Function) native.GetObjectProperty("isMobilePhoneRadioActive");
			return (bool) isMobilePhoneRadioActive.Call(native);
		}

		public void SetMobilePhoneRadioState(bool state)
		{
			if (setMobilePhoneRadioState == null) setMobilePhoneRadioState = (Function) native.GetObjectProperty("setMobilePhoneRadioState");
			setMobilePhoneRadioState.Call(native, state);
		}

		public int GetPlayerRadioStationIndex()
		{
			if (getPlayerRadioStationIndex == null) getPlayerRadioStationIndex = (Function) native.GetObjectProperty("getPlayerRadioStationIndex");
			return (int) getPlayerRadioStationIndex.Call(native);
		}

		public string GetPlayerRadioStationName()
		{
			if (getPlayerRadioStationName == null) getPlayerRadioStationName = (Function) native.GetObjectProperty("getPlayerRadioStationName");
			return (string) getPlayerRadioStationName.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns String with radio station name.</returns>
		public string GetRadioStationName(int radioStation)
		{
			if (getRadioStationName == null) getRadioStationName = (Function) native.GetObjectProperty("getRadioStationName");
			return (string) getRadioStationName.Call(native, radioStation);
		}

		public int GetPlayerRadioStationGenre()
		{
			if (getPlayerRadioStationGenre == null) getPlayerRadioStationGenre = (Function) native.GetObjectProperty("getPlayerRadioStationGenre");
			return (int) getPlayerRadioStationGenre.Call(native);
		}

		public bool IsRadioRetuning()
		{
			if (isRadioRetuning == null) isRadioRetuning = (Function) native.GetObjectProperty("isRadioRetuning");
			return (bool) isRadioRetuning.Call(native);
		}

		public bool IsRadioFadedOut()
		{
			if (isRadioFadedOut == null) isRadioFadedOut = (Function) native.GetObjectProperty("isRadioFadedOut");
			return (bool) isRadioFadedOut.Call(native);
		}

		/// <summary>
		/// Tune Forward... ?
		/// SET_RADIO_*
		/// </summary>
		public void _0xFF266D1D0EB1195D()
		{
			if (__0xFF266D1D0EB1195D == null) __0xFF266D1D0EB1195D = (Function) native.GetObjectProperty("_0xFF266D1D0EB1195D");
			__0xFF266D1D0EB1195D.Call(native);
		}

		/// <summary>
		/// Tune Backwards... ?
		/// SET_RADIO_*
		/// </summary>
		public void _0xDD6BCF9E94425DF9()
		{
			if (__0xDD6BCF9E94425DF9 == null) __0xDD6BCF9E94425DF9 = (Function) native.GetObjectProperty("_0xDD6BCF9E94425DF9");
			__0xDD6BCF9E94425DF9.Call(native);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/Kj9t38KF
		/// </summary>
		public void SetRadioToStationName(string stationName)
		{
			if (setRadioToStationName == null) setRadioToStationName = (Function) native.GetObjectProperty("setRadioToStationName");
			setRadioToStationName.Call(native, stationName);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/Kj9t38KF
		/// </summary>
		public void SetVehRadioStation(int vehicle, string radioStation)
		{
			if (setVehRadioStation == null) setVehRadioStation = (Function) native.GetObjectProperty("setVehRadioStation");
			setVehRadioStation.Call(native, vehicle, radioStation);
		}

		/// <summary>
		/// IS_VEHICLE_*
		/// </summary>
		public bool _0x0BE4BE946463F917(int vehicle)
		{
			if (__0x0BE4BE946463F917 == null) __0x0BE4BE946463F917 = (Function) native.GetObjectProperty("_0x0BE4BE946463F917");
			return (bool) __0x0BE4BE946463F917.Call(native, vehicle);
		}

		/// <summary>
		/// SET_VEH*
		/// </summary>
		public void _0xC1805D05E6D4FE10(int vehicle)
		{
			if (__0xC1805D05E6D4FE10 == null) __0xC1805D05E6D4FE10 = (Function) native.GetObjectProperty("_0xC1805D05E6D4FE10");
			__0xC1805D05E6D4FE10.Call(native, vehicle);
		}

		public void SetEmitterRadioStation(string emitterName, string radioStation)
		{
			if (setEmitterRadioStation == null) setEmitterRadioStation = (Function) native.GetObjectProperty("setEmitterRadioStation");
			setEmitterRadioStation.Call(native, emitterName, radioStation);
		}

		/// <summary>
		/// Example:
		/// AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);
		/// This turns off surrounding sounds not connected directly to peds.
		/// </summary>
		public void SetStaticEmitterEnabled(string emitterName, bool toggle)
		{
			if (setStaticEmitterEnabled == null) setStaticEmitterEnabled = (Function) native.GetObjectProperty("setStaticEmitterEnabled");
			setStaticEmitterEnabled.Call(native, emitterName, toggle);
		}

		/// <summary>
		/// L* (LINK_*?)
		/// </summary>
		public void LinkStaticEmitterToEntity(string emitterName, int entity)
		{
			if (linkStaticEmitterToEntity == null) linkStaticEmitterToEntity = (Function) native.GetObjectProperty("linkStaticEmitterToEntity");
			linkStaticEmitterToEntity.Call(native, emitterName, entity);
		}

		/// <summary>
		/// Sets radio station by index.
		/// </summary>
		public void SetRadioToStationIndex(int radioStation)
		{
			if (setRadioToStationIndex == null) setRadioToStationIndex = (Function) native.GetObjectProperty("setRadioToStationIndex");
			setRadioToStationIndex.Call(native, radioStation);
		}

		public void SetFrontendRadioActive(bool active)
		{
			if (setFrontendRadioActive == null) setFrontendRadioActive = (Function) native.GetObjectProperty("setFrontendRadioActive");
			setFrontendRadioActive.Call(native, active);
		}

		/// <summary>
		/// I see this as a native that would of been used back in GTA III when you finally unlocked the bridge to the next island and such.
		/// </summary>
		public void UnlockMissionNewsStory(int newsStory)
		{
			if (unlockMissionNewsStory == null) unlockMissionNewsStory = (Function) native.GetObjectProperty("unlockMissionNewsStory");
			unlockMissionNewsStory.Call(native, newsStory);
		}

		public bool IsMissionNewsStoryUnlocked(int newsStory)
		{
			if (isMissionNewsStoryUnlocked == null) isMissionNewsStoryUnlocked = (Function) native.GetObjectProperty("isMissionNewsStoryUnlocked");
			return (bool) isMissionNewsStoryUnlocked.Call(native, newsStory);
		}

		public int GetAudibleMusicTrackTextId()
		{
			if (getAudibleMusicTrackTextId == null) getAudibleMusicTrackTextId = (Function) native.GetObjectProperty("getAudibleMusicTrackTextId");
			return (int) getAudibleMusicTrackTextId.Call(native);
		}

		public void PlayEndCreditsMusic(bool play)
		{
			if (playEndCreditsMusic == null) playEndCreditsMusic = (Function) native.GetObjectProperty("playEndCreditsMusic");
			playEndCreditsMusic.Call(native, play);
		}

		public void SkipRadioForward()
		{
			if (skipRadioForward == null) skipRadioForward = (Function) native.GetObjectProperty("skipRadioForward");
			skipRadioForward.Call(native);
		}

		public void FreezeRadioStation(string radioStation)
		{
			if (freezeRadioStation == null) freezeRadioStation = (Function) native.GetObjectProperty("freezeRadioStation");
			freezeRadioStation.Call(native, radioStation);
		}

		public void UnfreezeRadioStation(string radioStation)
		{
			if (unfreezeRadioStation == null) unfreezeRadioStation = (Function) native.GetObjectProperty("unfreezeRadioStation");
			unfreezeRadioStation.Call(native, radioStation);
		}

		public void SetRadioAutoUnfreeze(bool toggle)
		{
			if (setRadioAutoUnfreeze == null) setRadioAutoUnfreeze = (Function) native.GetObjectProperty("setRadioAutoUnfreeze");
			setRadioAutoUnfreeze.Call(native, toggle);
		}

		public void SetInitialPlayerStation(string radioStation)
		{
			if (setInitialPlayerStation == null) setInitialPlayerStation = (Function) native.GetObjectProperty("setInitialPlayerStation");
			setInitialPlayerStation.Call(native, radioStation);
		}

		public void SetUserRadioControlEnabled(bool toggle)
		{
			if (setUserRadioControlEnabled == null) setUserRadioControlEnabled = (Function) native.GetObjectProperty("setUserRadioControlEnabled");
			setUserRadioControlEnabled.Call(native, toggle);
		}

		/// <summary>
		/// Only found this one in the decompiled scripts:
		/// AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
		/// </summary>
		public void SetRadioTrack(string radioStation, string radioTrack)
		{
			if (setRadioTrack == null) setRadioTrack = (Function) native.GetObjectProperty("setRadioTrack");
			setRadioTrack.Call(native, radioStation, radioTrack);
		}

		public void SetRadioTrackMix(string radioStationName, string mixName, int p2)
		{
			if (setRadioTrackMix == null) setRadioTrackMix = (Function) native.GetObjectProperty("setRadioTrackMix");
			setRadioTrackMix.Call(native, radioStationName, mixName, p2);
		}

		public void SetVehicleRadioLoud(int vehicle, bool toggle)
		{
			if (setVehicleRadioLoud == null) setVehicleRadioLoud = (Function) native.GetObjectProperty("setVehicleRadioLoud");
			setVehicleRadioLoud.Call(native, vehicle, toggle);
		}

		public bool IsVehicleRadioLoud(int vehicle)
		{
			if (isVehicleRadioLoud == null) isVehicleRadioLoud = (Function) native.GetObjectProperty("isVehicleRadioLoud");
			return (bool) isVehicleRadioLoud.Call(native, vehicle);
		}

		public void SetMobileRadioEnabledDuringGameplay(bool toggle)
		{
			if (setMobileRadioEnabledDuringGameplay == null) setMobileRadioEnabledDuringGameplay = (Function) native.GetObjectProperty("setMobileRadioEnabledDuringGameplay");
			setMobileRadioEnabledDuringGameplay.Call(native, toggle);
		}

		public bool DoesPlayerVehHaveRadio()
		{
			if (doesPlayerVehHaveRadio == null) doesPlayerVehHaveRadio = (Function) native.GetObjectProperty("doesPlayerVehHaveRadio");
			return (bool) doesPlayerVehHaveRadio.Call(native);
		}

		public bool IsPlayerVehRadioEnable()
		{
			if (isPlayerVehRadioEnable == null) isPlayerVehRadioEnable = (Function) native.GetObjectProperty("isPlayerVehRadioEnable");
			return (bool) isPlayerVehRadioEnable.Call(native);
		}

		/// <summary>
		/// can't seem to enable radio on cop cars etc
		/// </summary>
		public void SetVehicleRadioEnabled(int vehicle, bool toggle)
		{
			if (setVehicleRadioEnabled == null) setVehicleRadioEnabled = (Function) native.GetObjectProperty("setVehicleRadioEnabled");
			setVehicleRadioEnabled.Call(native, vehicle, toggle);
		}

		public void _0xDA07819E452FFE8F(object p0)
		{
			if (__0xDA07819E452FFE8F == null) __0xDA07819E452FFE8F = (Function) native.GetObjectProperty("_0xDA07819E452FFE8F");
			__0xDA07819E452FFE8F.Call(native, p0);
		}

		/// <summary>
		/// Examples:
		/// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
		/// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
		/// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
		/// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
		/// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
		/// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
		/// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
		/// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
		/// </summary>
		public void SetCustomRadioTrackList(string radioStation, string trackListName, bool p2)
		{
			if (setCustomRadioTrackList == null) setCustomRadioTrackList = (Function) native.GetObjectProperty("setCustomRadioTrackList");
			setCustomRadioTrackList.Call(native, radioStation, trackListName, p2);
		}

		/// <summary>
		/// 3 calls in the b617d scripts, removed duplicate.
		/// AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
		/// AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");
		/// </summary>
		public void ClearCustomRadioTrackList(string radioStation)
		{
			if (clearCustomRadioTrackList == null) clearCustomRadioTrackList = (Function) native.GetObjectProperty("clearCustomRadioTrackList");
			clearCustomRadioTrackList.Call(native, radioStation);
		}

		public int GetNumUnlockedRadioStations()
		{
			if (getNumUnlockedRadioStations == null) getNumUnlockedRadioStations = (Function) native.GetObjectProperty("getNumUnlockedRadioStations");
			return (int) getNumUnlockedRadioStations.Call(native);
		}

		public int FindRadioStationIndex(int station)
		{
			if (findRadioStationIndex == null) findRadioStationIndex = (Function) native.GetObjectProperty("findRadioStationIndex");
			return (int) findRadioStationIndex.Call(native, station);
		}

		/// <summary>
		/// 6 calls in the b617d scripts, removed identical lines:
		/// AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
		/// AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
		/// AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
		/// </summary>
		public void SetRadioStationMusicOnly(string radioStation, bool toggle)
		{
			if (setRadioStationMusicOnly == null) setRadioStationMusicOnly = (Function) native.GetObjectProperty("setRadioStationMusicOnly");
			setRadioStationMusicOnly.Call(native, radioStation, toggle);
		}

		public void SetRadioFrontendFadeTime(double p0)
		{
			if (setRadioFrontendFadeTime == null) setRadioFrontendFadeTime = (Function) native.GetObjectProperty("setRadioFrontendFadeTime");
			setRadioFrontendFadeTime.Call(native, p0);
		}

		/// <summary>
		/// AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
		/// </summary>
		public void UnlockRadioStationTrackList(string radioStation, string trackListName)
		{
			if (unlockRadioStationTrackList == null) unlockRadioStationTrackList = (Function) native.GetObjectProperty("unlockRadioStationTrackList");
			unlockRadioStationTrackList.Call(native, radioStation, trackListName);
		}

		public void UpdateLsur(bool enableMixes)
		{
			if (updateLsur == null) updateLsur = (Function) native.GetObjectProperty("updateLsur");
			updateLsur.Call(native, enableMixes);
		}

		/// <summary>
		/// Disables the radio station (hides it from the radio wheel).
		/// </summary>
		public void LockRadioStation(string radioStationName, bool toggle)
		{
			if (lockRadioStation == null) lockRadioStation = (Function) native.GetObjectProperty("lockRadioStation");
			lockRadioStation.Call(native, radioStationName, toggle);
		}

		/// <summary>
		/// GET_NE*
		/// </summary>
		/// <returns>Array<bool, double, object, int></returns>
		public (bool, double, object, int) _0xC64A06D939F826F5(double p0, object p1, int p2)
		{
			if (__0xC64A06D939F826F5 == null) __0xC64A06D939F826F5 = (Function) native.GetObjectProperty("_0xC64A06D939F826F5");
			var results = (Array) __0xC64A06D939F826F5.Call(native, p0, p1, p2);
			return ((bool) results[0], (double) results[1], results[2], (int) results[3]);
		}

		/// <summary>
		/// GET_CURRENT_*
		/// </summary>
		public int _0x3E65CDE5215832C1(string radioStationName)
		{
			if (__0x3E65CDE5215832C1 == null) __0x3E65CDE5215832C1 = (Function) native.GetObjectProperty("_0x3E65CDE5215832C1");
			return (int) __0x3E65CDE5215832C1.Call(native, radioStationName);
		}

		/// <summary>
		/// GET_CURRENT_*
		/// </summary>
		public int _0x34D66BC058019CE0(string radioStationName)
		{
			if (__0x34D66BC058019CE0 == null) __0x34D66BC058019CE0 = (Function) native.GetObjectProperty("_0x34D66BC058019CE0");
			return (int) __0x34D66BC058019CE0.Call(native, radioStationName);
		}

		/// <summary>
		/// SET_VEHICLE_*
		/// </summary>
		public void _0xF3365489E0DD50F9(int vehicle, bool toggle)
		{
			if (__0xF3365489E0DD50F9 == null) __0xF3365489E0DD50F9 = (Function) native.GetObjectProperty("_0xF3365489E0DD50F9");
			__0xF3365489E0DD50F9.Call(native, vehicle, toggle);
		}

		public void SetAmbientZoneState(string zoneName, bool p1, bool p2)
		{
			if (setAmbientZoneState == null) setAmbientZoneState = (Function) native.GetObjectProperty("setAmbientZoneState");
			setAmbientZoneState.Call(native, zoneName, p1, p2);
		}

		/// <summary>
		/// This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);
		/// Still needs more research.
		/// Here are the names I've found: pastebin.com/AfA0Qjyv
		/// </summary>
		public void ClearAmbientZoneState(string zoneName, bool p1)
		{
			if (clearAmbientZoneState == null) clearAmbientZoneState = (Function) native.GetObjectProperty("clearAmbientZoneState");
			clearAmbientZoneState.Call(native, zoneName, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) SetAmbientZoneListState(object p0, bool p1, bool p2)
		{
			if (setAmbientZoneListState == null) setAmbientZoneListState = (Function) native.GetObjectProperty("setAmbientZoneListState");
			var results = (Array) setAmbientZoneListState.Call(native, p0, p1, p2);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ClearAmbientZoneListState(object p0, bool p1)
		{
			if (clearAmbientZoneListState == null) clearAmbientZoneListState = (Function) native.GetObjectProperty("clearAmbientZoneListState");
			var results = (Array) clearAmbientZoneListState.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		/// <summary>
		/// All occurrences found in b617d, sorted alphabetically and identical lines removed: pastebin.com/jYvw7N1S
		/// </summary>
		public void SetAmbientZoneStatePersistent(string ambientZone, bool p1, bool p2)
		{
			if (setAmbientZoneStatePersistent == null) setAmbientZoneStatePersistent = (Function) native.GetObjectProperty("setAmbientZoneStatePersistent");
			setAmbientZoneStatePersistent.Call(native, ambientZone, p1, p2);
		}

		/// <summary>
		/// All occurrences found in b617d, sorted alphabetically and identical lines removed: pastebin.com/WkXDGgQL
		/// </summary>
		public void SetAmbientZoneListStatePersistent(string ambientZone, bool p1, bool p2)
		{
			if (setAmbientZoneListStatePersistent == null) setAmbientZoneListStatePersistent = (Function) native.GetObjectProperty("setAmbientZoneListStatePersistent");
			setAmbientZoneListStatePersistent.Call(native, ambientZone, p1, p2);
		}

		public bool IsAmbientZoneEnabled(string ambientZone)
		{
			if (isAmbientZoneEnabled == null) isAmbientZoneEnabled = (Function) native.GetObjectProperty("isAmbientZoneEnabled");
			return (bool) isAmbientZoneEnabled.Call(native, ambientZone);
		}

		public void _0x5D2BFAAB8D956E0E()
		{
			if (__0x5D2BFAAB8D956E0E == null) __0x5D2BFAAB8D956E0E = (Function) native.GetObjectProperty("_0x5D2BFAAB8D956E0E");
			__0x5D2BFAAB8D956E0E.Call(native);
		}

		/// <summary>
		/// All occurrences found in b617d, sorted alphabetically and identical lines removed:
		/// AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
		/// AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
		/// AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
		/// </summary>
		public void SetCutsceneAudioOverride(string name)
		{
			if (setCutsceneAudioOverride == null) setCutsceneAudioOverride = (Function) native.GetObjectProperty("setCutsceneAudioOverride");
			setCutsceneAudioOverride.Call(native, name);
		}

		/// <summary>
		/// SET_VARIABLE_ON_*
		/// </summary>
		public void SetVariableOnCutsceneAudio(string variableName, double value)
		{
			if (setVariableOnCutsceneAudio == null) setVariableOnCutsceneAudio = (Function) native.GetObjectProperty("setVariableOnCutsceneAudio");
			setVariableOnCutsceneAudio.Call(native, variableName, value);
		}

		/// <summary>
		/// Plays the given police radio message.
		/// All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr
		/// </summary>
		public int PlayPoliceReport(string name, double p1)
		{
			if (playPoliceReport == null) playPoliceReport = (Function) native.GetObjectProperty("playPoliceReport");
			return (int) playPoliceReport.Call(native, name, p1);
		}

		public void CancelCurrentPoliceReport()
		{
			if (cancelCurrentPoliceReport == null) cancelCurrentPoliceReport = (Function) native.GetObjectProperty("cancelCurrentPoliceReport");
			cancelCurrentPoliceReport.Call(native);
		}

		/// <summary>
		/// Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
		/// Only works on vehicles with a police siren.
		/// </summary>
		public void BlipSiren(int vehicle)
		{
			if (blipSiren == null) blipSiren = (Function) native.GetObjectProperty("blipSiren");
			blipSiren.Call(native, vehicle);
		}

		/// <summary>
		/// vehicle - the vehicle whose horn should be overwritten
		/// mute - p1 seems to be an option for muting the horn
		/// p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?
		/// </summary>
		/// <param name="vehicle">the vehicle whose horn should be overwritten</param>
		/// <param name="mute">p1 seems to be an option for muting the horn</param>
		/// <param name="p2">maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?</param>
		public void OverrideVehHorn(int vehicle, bool mute, int p2)
		{
			if (overrideVehHorn == null) overrideVehHorn = (Function) native.GetObjectProperty("overrideVehHorn");
			overrideVehHorn.Call(native, vehicle, mute, p2);
		}

		/// <summary>
		/// Checks whether the horn of a vehicle is currently played.
		/// </summary>
		public bool IsHornActive(int vehicle)
		{
			if (isHornActive == null) isHornActive = (Function) native.GetObjectProperty("isHornActive");
			return (bool) isHornActive.Call(native, vehicle);
		}

		/// <summary>
		/// Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
		/// </summary>
		public void SetAggressiveHorns(bool toggle)
		{
			if (setAggressiveHorns == null) setAggressiveHorns = (Function) native.GetObjectProperty("setAggressiveHorns");
			setAggressiveHorns.Call(native, toggle);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0x02E93C796ABD3A97(bool p0)
		{
			if (__0x02E93C796ABD3A97 == null) __0x02E93C796ABD3A97 = (Function) native.GetObjectProperty("_0x02E93C796ABD3A97");
			__0x02E93C796ABD3A97.Call(native, p0);
		}

		public void _0x58BB377BEC7CD5F4(bool p0, bool p1)
		{
			if (__0x58BB377BEC7CD5F4 == null) __0x58BB377BEC7CD5F4 = (Function) native.GetObjectProperty("_0x58BB377BEC7CD5F4");
			__0x58BB377BEC7CD5F4.Call(native, p0, p1);
		}

		public void _0x9BD7BD55E4533183(object p0, object p1, object p2)
		{
			if (__0x9BD7BD55E4533183 == null) __0x9BD7BD55E4533183 = (Function) native.GetObjectProperty("_0x9BD7BD55E4533183");
			__0x9BD7BD55E4533183.Call(native, p0, p1, p2);
		}

		public bool IsStreamPlaying()
		{
			if (isStreamPlaying == null) isStreamPlaying = (Function) native.GetObjectProperty("isStreamPlaying");
			return (bool) isStreamPlaying.Call(native);
		}

		public int GetStreamPlayTime()
		{
			if (getStreamPlayTime == null) getStreamPlayTime = (Function) native.GetObjectProperty("getStreamPlayTime");
			return (int) getStreamPlayTime.Call(native);
		}

		/// <summary>
		/// Example:
		/// AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");
		/// All found occurrences in the b678d decompiled scripts: pastebin.com/3rma6w5w
		/// Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.
		/// soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
		/// </summary>
		/// <param name="soundSet">is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers. </param>
		public bool LoadStream(string streamName, string soundSet)
		{
			if (loadStream == null) loadStream = (Function) native.GetObjectProperty("loadStream");
			return (bool) loadStream.Call(native, streamName, soundSet);
		}

		/// <summary>
		/// Example:
		/// AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");
		/// Only called a few times in the scripts.
		/// </summary>
		public bool LoadStreamWithStartOffset(string streamName, int startOffset, string soundSet)
		{
			if (loadStreamWithStartOffset == null) loadStreamWithStartOffset = (Function) native.GetObjectProperty("loadStreamWithStartOffset");
			return (bool) loadStreamWithStartOffset.Call(native, streamName, startOffset, soundSet);
		}

		public void PlayStreamFromPed(int ped)
		{
			if (playStreamFromPed == null) playStreamFromPed = (Function) native.GetObjectProperty("playStreamFromPed");
			playStreamFromPed.Call(native, ped);
		}

		public void PlayStreamFromVehicle(int vehicle)
		{
			if (playStreamFromVehicle == null) playStreamFromVehicle = (Function) native.GetObjectProperty("playStreamFromVehicle");
			playStreamFromVehicle.Call(native, vehicle);
		}

		/// <summary>
		/// Used with AUDIO::LOAD_STREAM
		/// Example from finale_heist2b.c4:
		/// AI::TASK_SYNCHRONIZED_SCENE(l_4C8[214], l_4C8[214]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
		/// PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[214]._f7, 0.0);
		/// PED::_2208438012482A1A(l_4C8[214], 0, 0);
		/// PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[214], 38, 1);
		/// PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[214], 1);
		/// if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
		/// AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[01]);
		/// }
		/// </summary>
		public void PlayStreamFromObject(int @object)
		{
			if (playStreamFromObject == null) playStreamFromObject = (Function) native.GetObjectProperty("playStreamFromObject");
			playStreamFromObject.Call(native, @object);
		}

		public void PlayStreamFrontend()
		{
			if (playStreamFrontend == null) playStreamFrontend = (Function) native.GetObjectProperty("playStreamFrontend");
			playStreamFrontend.Call(native);
		}

		public void PlayStreamFromPosition(double x, double y, double z)
		{
			if (playStreamFromPosition == null) playStreamFromPosition = (Function) native.GetObjectProperty("playStreamFromPosition");
			playStreamFromPosition.Call(native, x, y, z);
		}

		public void StopStream()
		{
			if (stopStream == null) stopStream = (Function) native.GetObjectProperty("stopStream");
			stopStream.Call(native);
		}

		public void StopPedSpeaking(int ped, bool shaking)
		{
			if (stopPedSpeaking == null) stopPedSpeaking = (Function) native.GetObjectProperty("stopPedSpeaking");
			stopPedSpeaking.Call(native, ped, shaking);
		}

		/// <summary>
		/// BL*
		/// </summary>
		public void _0xF8AD2EED7C47E8FE(int ped, bool p1, bool p2)
		{
			if (__0xF8AD2EED7C47E8FE == null) __0xF8AD2EED7C47E8FE = (Function) native.GetObjectProperty("_0xF8AD2EED7C47E8FE");
			__0xF8AD2EED7C47E8FE.Call(native, ped, p1, p2);
		}

		public void DisablePedPainAudio(int ped, bool toggle)
		{
			if (disablePedPainAudio == null) disablePedPainAudio = (Function) native.GetObjectProperty("disablePedPainAudio");
			disablePedPainAudio.Call(native, ped, toggle);
		}

		/// <summary>
		/// Common in the scripts:
		/// AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
		/// </summary>
		public bool IsAmbientSpeechDisabled(int ped)
		{
			if (isAmbientSpeechDisabled == null) isAmbientSpeechDisabled = (Function) native.GetObjectProperty("isAmbientSpeechDisabled");
			return (bool) isAmbientSpeechDisabled.Call(native, ped);
		}

		public void _0xA8A7D434AFB4B97B(string p0, int p1)
		{
			if (__0xA8A7D434AFB4B97B == null) __0xA8A7D434AFB4B97B = (Function) native.GetObjectProperty("_0xA8A7D434AFB4B97B");
			__0xA8A7D434AFB4B97B.Call(native, p0, p1);
		}

		public void _0x2ACABED337622DF2(string p0)
		{
			if (__0x2ACABED337622DF2 == null) __0x2ACABED337622DF2 = (Function) native.GetObjectProperty("_0x2ACABED337622DF2");
			__0x2ACABED337622DF2.Call(native, p0);
		}

		public void SetSirenWithNoDriver(int vehicle, bool toggle)
		{
			if (setSirenWithNoDriver == null) setSirenWithNoDriver = (Function) native.GetObjectProperty("setSirenWithNoDriver");
			setSirenWithNoDriver.Call(native, vehicle, toggle);
		}

		public void _0x66C3FB05206041BA(object p0)
		{
			if (__0x66C3FB05206041BA == null) __0x66C3FB05206041BA = (Function) native.GetObjectProperty("_0x66C3FB05206041BA");
			__0x66C3FB05206041BA.Call(native, p0);
		}

		/// <summary>
		/// SET_*
		/// </summary>
		public void SoundVehicleHornThisFrame(int vehicle)
		{
			if (soundVehicleHornThisFrame == null) soundVehicleHornThisFrame = (Function) native.GetObjectProperty("soundVehicleHornThisFrame");
			soundVehicleHornThisFrame.Call(native, vehicle);
		}

		public void SetHornEnabled(int vehicle, bool toggle)
		{
			if (setHornEnabled == null) setHornEnabled = (Function) native.GetObjectProperty("setHornEnabled");
			setHornEnabled.Call(native, vehicle, toggle);
		}

		public void SetAudioVehiclePriority(int vehicle, object p1)
		{
			if (setAudioVehiclePriority == null) setAudioVehiclePriority = (Function) native.GetObjectProperty("setAudioVehiclePriority");
			setAudioVehiclePriority.Call(native, vehicle, p1);
		}

		/// <summary>
		/// SET_H*
		/// </summary>
		public void _0x9D3AF56E94C9AE98(int vehicle, double p1)
		{
			if (__0x9D3AF56E94C9AE98 == null) __0x9D3AF56E94C9AE98 = (Function) native.GetObjectProperty("_0x9D3AF56E94C9AE98");
			__0x9D3AF56E94C9AE98.Call(native, vehicle, p1);
		}

		public void UseSirenAsHorn(int vehicle, bool toggle)
		{
			if (useSirenAsHorn == null) useSirenAsHorn = (Function) native.GetObjectProperty("useSirenAsHorn");
			useSirenAsHorn.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// This native sets the audio of the specified vehicle to the audioName (p1).
		/// Use the audioNameHash found in vehicles.meta
		/// Example:
		/// _SET_VEHICLE_AUDIO(veh, "ADDER");
		/// The selected vehicle will now have the audio of the Adder.
		/// FORCE_VEHICLE_???
		/// </summary>
		public void ForceVehicleEngineAudio(int vehicle, string audioName)
		{
			if (forceVehicleEngineAudio == null) forceVehicleEngineAudio = (Function) native.GetObjectProperty("forceVehicleEngineAudio");
			forceVehicleEngineAudio.Call(native, vehicle, audioName);
		}

		public void _0xCA4CEA6AE0000A7E(object p0)
		{
			if (__0xCA4CEA6AE0000A7E == null) __0xCA4CEA6AE0000A7E = (Function) native.GetObjectProperty("_0xCA4CEA6AE0000A7E");
			__0xCA4CEA6AE0000A7E.Call(native, p0);
		}

		/// <summary>
		/// 2 calls found in the b617d scripts:
		/// AUDIO::_F1F8157B8C3F171C(l_A42, "Franklin_Bike_Rev", "BIG_SCORE_3A_SOUNDS");
		/// AUDIO::_F1F8157B8C3F171C(l_166, "Trevor_Revs_Off", "PALETO_SCORE_SETUP_SOUNDS");
		/// </summary>
		public void _0xF1F8157B8C3F171C(int vehicle, string p1, string p2)
		{
			if (__0xF1F8157B8C3F171C == null) __0xF1F8157B8C3F171C = (Function) native.GetObjectProperty("_0xF1F8157B8C3F171C");
			__0xF1F8157B8C3F171C.Call(native, vehicle, p1, p2);
		}

		public void _0xD2DCCD8E16E20997(object p0)
		{
			if (__0xD2DCCD8E16E20997 == null) __0xD2DCCD8E16E20997 = (Function) native.GetObjectProperty("_0xD2DCCD8E16E20997");
			__0xD2DCCD8E16E20997.Call(native, p0);
		}

		public bool _0x5DB8010EE71FDEF2(int vehicle)
		{
			if (__0x5DB8010EE71FDEF2 == null) __0x5DB8010EE71FDEF2 = (Function) native.GetObjectProperty("_0x5DB8010EE71FDEF2");
			return (bool) __0x5DB8010EE71FDEF2.Call(native, vehicle);
		}

		public void SetVehicleAudioEngineDamageFactor(int vehicle, double damageFactor)
		{
			if (setVehicleAudioEngineDamageFactor == null) setVehicleAudioEngineDamageFactor = (Function) native.GetObjectProperty("setVehicleAudioEngineDamageFactor");
			setVehicleAudioEngineDamageFactor.Call(native, vehicle, damageFactor);
		}

		/// <summary>
		/// SET_VEHICLE_*
		/// </summary>
		public void _0x01BB4D577D38BD9E(int vehicle, double p1)
		{
			if (__0x01BB4D577D38BD9E == null) __0x01BB4D577D38BD9E = (Function) native.GetObjectProperty("_0x01BB4D577D38BD9E");
			__0x01BB4D577D38BD9E.Call(native, vehicle, p1);
		}

		/// <summary>
		/// ENABLE_VEHICLE_*
		/// </summary>
		public void _0x1C073274E065C6D2(int vehicle, bool toggle)
		{
			if (__0x1C073274E065C6D2 == null) __0x1C073274E065C6D2 = (Function) native.GetObjectProperty("_0x1C073274E065C6D2");
			__0x1C073274E065C6D2.Call(native, vehicle, toggle);
		}

		public void EnableVehicleExhaustPops(int vehicle, bool toggle)
		{
			if (enableVehicleExhaustPops == null) enableVehicleExhaustPops = (Function) native.GetObjectProperty("enableVehicleExhaustPops");
			enableVehicleExhaustPops.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
		/// SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
		/// Will give a boost-soundeffect.
		/// </summary>
		public void SetVehicleBoostActive(int vehicle, bool toggle)
		{
			if (setVehicleBoostActive == null) setVehicleBoostActive = (Function) native.GetObjectProperty("setVehicleBoostActive");
			setVehicleBoostActive.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// SET_P*
		/// </summary>
		public void _0x6FDDAD856E36988A(int vehicle, bool toggle)
		{
			if (__0x6FDDAD856E36988A == null) __0x6FDDAD856E36988A = (Function) native.GetObjectProperty("_0x6FDDAD856E36988A");
			__0x6FDDAD856E36988A.Call(native, vehicle, toggle);
		}

		public void SetScriptUpdateDoorAudio(int doorHash, bool toggle)
		{
			if (setScriptUpdateDoorAudio == null) setScriptUpdateDoorAudio = (Function) native.GetObjectProperty("setScriptUpdateDoorAudio");
			setScriptUpdateDoorAudio.Call(native, doorHash, toggle);
		}

		public void PlayVehicleDoorOpenSound(int vehicle, int doorIndex)
		{
			if (playVehicleDoorOpenSound == null) playVehicleDoorOpenSound = (Function) native.GetObjectProperty("playVehicleDoorOpenSound");
			playVehicleDoorOpenSound.Call(native, vehicle, doorIndex);
		}

		public void PlayVehicleDoorCloseSound(int vehicle, int doorIndex)
		{
			if (playVehicleDoorCloseSound == null) playVehicleDoorCloseSound = (Function) native.GetObjectProperty("playVehicleDoorCloseSound");
			playVehicleDoorCloseSound.Call(native, vehicle, doorIndex);
		}

		/// <summary>
		/// Works for planes only.
		/// </summary>
		public void EnableStallWarningSounds(int vehicle, bool toggle)
		{
			if (enableStallWarningSounds == null) enableStallWarningSounds = (Function) native.GetObjectProperty("enableStallWarningSounds");
			enableStallWarningSounds.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// Hardcoded to return 1
		/// </summary>
		public bool IsGameInControlOfMusic()
		{
			if (isGameInControlOfMusic == null) isGameInControlOfMusic = (Function) native.GetObjectProperty("isGameInControlOfMusic");
			return (bool) isGameInControlOfMusic.Call(native);
		}

		public void SetGpsActive(bool active)
		{
			if (setGpsActive == null) setGpsActive = (Function) native.GetObjectProperty("setGpsActive");
			setGpsActive.Call(native, active);
		}

		/// <summary>
		/// Called 38 times in the scripts. There are 5 different audioNames used.
		/// One unknown removed below.
		/// AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
		/// AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
		/// AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
		/// AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
		/// </summary>
		public void PlayMissionCompleteAudio(string audioName)
		{
			if (playMissionCompleteAudio == null) playMissionCompleteAudio = (Function) native.GetObjectProperty("playMissionCompleteAudio");
			playMissionCompleteAudio.Call(native, audioName);
		}

		public bool IsMissionCompletePlaying()
		{
			if (isMissionCompletePlaying == null) isMissionCompletePlaying = (Function) native.GetObjectProperty("isMissionCompletePlaying");
			return (bool) isMissionCompletePlaying.Call(native);
		}

		public bool IsMissionCompleteReadyForUi()
		{
			if (isMissionCompleteReadyForUi == null) isMissionCompleteReadyForUi = (Function) native.GetObjectProperty("isMissionCompleteReadyForUi");
			return (bool) isMissionCompleteReadyForUi.Call(native);
		}

		public void BlockDeathJingle(bool toggle)
		{
			if (blockDeathJingle == null) blockDeathJingle = (Function) native.GetObjectProperty("blockDeathJingle");
			blockDeathJingle.Call(native, toggle);
		}

		/// <summary>
		/// Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
		/// List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC
		/// </summary>
		public bool StartAudioScene(string scene)
		{
			if (startAudioScene == null) startAudioScene = (Function) native.GetObjectProperty("startAudioScene");
			return (bool) startAudioScene.Call(native, scene);
		}

		public void StopAudioScene(string scene)
		{
			if (stopAudioScene == null) stopAudioScene = (Function) native.GetObjectProperty("stopAudioScene");
			stopAudioScene.Call(native, scene);
		}

		/// <summary>
		/// ??
		/// </summary>
		public void StopAudioScenes()
		{
			if (stopAudioScenes == null) stopAudioScenes = (Function) native.GetObjectProperty("stopAudioScenes");
			stopAudioScenes.Call(native);
		}

		public bool IsAudioSceneActive(string scene)
		{
			if (isAudioSceneActive == null) isAudioSceneActive = (Function) native.GetObjectProperty("isAudioSceneActive");
			return (bool) isAudioSceneActive.Call(native, scene);
		}

		public void SetAudioSceneVariable(string scene, string variable, double value)
		{
			if (setAudioSceneVariable == null) setAudioSceneVariable = (Function) native.GetObjectProperty("setAudioSceneVariable");
			setAudioSceneVariable.Call(native, scene, variable, value);
		}

		/// <summary>
		/// SET_AUDIO_S*
		/// </summary>
		public void _0xA5F377B175A699C5(int p0)
		{
			if (__0xA5F377B175A699C5 == null) __0xA5F377B175A699C5 = (Function) native.GetObjectProperty("_0xA5F377B175A699C5");
			__0xA5F377B175A699C5.Call(native, p0);
		}

		/// <summary>
		/// All found occurrences in b678d:
		/// pastebin.com/ceu67jz8
		/// </summary>
		public void AddEntityToAudioMixGroup(int entity, string groupName, double p2)
		{
			if (addEntityToAudioMixGroup == null) addEntityToAudioMixGroup = (Function) native.GetObjectProperty("addEntityToAudioMixGroup");
			addEntityToAudioMixGroup.Call(native, entity, groupName, p2);
		}

		public void RemoveEntityFromAudioMixGroup(int entity, double p1)
		{
			if (removeEntityFromAudioMixGroup == null) removeEntityFromAudioMixGroup = (Function) native.GetObjectProperty("removeEntityFromAudioMixGroup");
			removeEntityFromAudioMixGroup.Call(native, entity, p1);
		}

		public bool AudioIsScriptedMusicPlaying()
		{
			if (audioIsScriptedMusicPlaying == null) audioIsScriptedMusicPlaying = (Function) native.GetObjectProperty("audioIsScriptedMusicPlaying");
			return (bool) audioIsScriptedMusicPlaying.Call(native);
		}

		public object _0x2DD39BF3E2F9C47F()
		{
			if (__0x2DD39BF3E2F9C47F == null) __0x2DD39BF3E2F9C47F = (Function) native.GetObjectProperty("_0x2DD39BF3E2F9C47F");
			return __0x2DD39BF3E2F9C47F.Call(native);
		}

		/// <summary>
		/// All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
		/// </summary>
		public bool PrepareMusicEvent(string eventName)
		{
			if (prepareMusicEvent == null) prepareMusicEvent = (Function) native.GetObjectProperty("prepareMusicEvent");
			return (bool) prepareMusicEvent.Call(native, eventName);
		}

		/// <summary>
		/// All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
		/// </summary>
		public bool CancelMusicEvent(string eventName)
		{
			if (cancelMusicEvent == null) cancelMusicEvent = (Function) native.GetObjectProperty("cancelMusicEvent");
			return (bool) cancelMusicEvent.Call(native, eventName);
		}

		/// <summary>
		/// List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W
		/// All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
		/// </summary>
		public bool TriggerMusicEvent(string eventName)
		{
			if (triggerMusicEvent == null) triggerMusicEvent = (Function) native.GetObjectProperty("triggerMusicEvent");
			return (bool) triggerMusicEvent.Call(native, eventName);
		}

		public bool IsMusicOneshotPlaying()
		{
			if (isMusicOneshotPlaying == null) isMusicOneshotPlaying = (Function) native.GetObjectProperty("isMusicOneshotPlaying");
			return (bool) isMusicOneshotPlaying.Call(native);
		}

		public int GetMusicPlaytime()
		{
			if (getMusicPlaytime == null) getMusicPlaytime = (Function) native.GetObjectProperty("getMusicPlaytime");
			return (int) getMusicPlaytime.Call(native);
		}

		public void _0x159B7318403A1CD8(object p0)
		{
			if (__0x159B7318403A1CD8 == null) __0x159B7318403A1CD8 = (Function) native.GetObjectProperty("_0x159B7318403A1CD8");
			__0x159B7318403A1CD8.Call(native, p0);
		}

		public void RecordBrokenGlass(double x, double y, double z, double radius)
		{
			if (recordBrokenGlass == null) recordBrokenGlass = (Function) native.GetObjectProperty("recordBrokenGlass");
			recordBrokenGlass.Call(native, x, y, z, radius);
		}

		public void ClearAllBrokenGlass()
		{
			if (clearAllBrokenGlass == null) clearAllBrokenGlass = (Function) native.GetObjectProperty("clearAllBrokenGlass");
			clearAllBrokenGlass.Call(native);
		}

		public void _0x70B8EC8FC108A634(bool p0, object p1)
		{
			if (__0x70B8EC8FC108A634 == null) __0x70B8EC8FC108A634 = (Function) native.GetObjectProperty("_0x70B8EC8FC108A634");
			__0x70B8EC8FC108A634.Call(native, p0, p1);
		}

		public void _0x149AEE66F0CB3A99(double p0, double p1)
		{
			if (__0x149AEE66F0CB3A99 == null) __0x149AEE66F0CB3A99 = (Function) native.GetObjectProperty("_0x149AEE66F0CB3A99");
			__0x149AEE66F0CB3A99.Call(native, p0, p1);
		}

		public void _0x8BF907833BE275DE(double p0, double p1)
		{
			if (__0x8BF907833BE275DE == null) __0x8BF907833BE275DE = (Function) native.GetObjectProperty("_0x8BF907833BE275DE");
			__0x8BF907833BE275DE.Call(native, p0, p1);
		}

		/// <summary>
		/// FORCE_*
		/// </summary>
		public void _0x062D5EAD4DA2FA6A()
		{
			if (__0x062D5EAD4DA2FA6A == null) __0x062D5EAD4DA2FA6A = (Function) native.GetObjectProperty("_0x062D5EAD4DA2FA6A");
			__0x062D5EAD4DA2FA6A.Call(native);
		}

		/// <summary>
		/// Example:
		/// bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
		/// </summary>
		public bool PrepareAlarm(string alarmName)
		{
			if (prepareAlarm == null) prepareAlarm = (Function) native.GetObjectProperty("prepareAlarm");
			return (bool) prepareAlarm.Call(native, alarmName);
		}

		/// <summary>
		/// Example:
		/// This will start the alarm at Fort Zancudo.
		/// AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
		/// First parameter (char) is the name of the alarm.
		/// Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
		/// ----------
		/// It DOES make a difference but it has to do with the duration or something I dunno yet
		/// ----------
		/// Found in the b617d scripts:
		/// See NativeDB for reference: http://natives.altv.mp/#/0x0355EF116C4C97B2
		/// </summary>
		public void StartAlarm(string alarmName, bool p2)
		{
			if (startAlarm == null) startAlarm = (Function) native.GetObjectProperty("startAlarm");
			startAlarm.Call(native, alarmName, p2);
		}

		/// <summary>
		/// Example:
		/// This will stop the alarm at Fort Zancudo.
		/// AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
		/// First parameter (char) is the name of the alarm.
		/// Second parameter (bool) has to be true (1) to have any effect.
		/// </summary>
		public void StopAlarm(string alarmName, bool toggle)
		{
			if (stopAlarm == null) stopAlarm = (Function) native.GetObjectProperty("stopAlarm");
			stopAlarm.Call(native, alarmName, toggle);
		}

		public void StopAllAlarms(bool stop)
		{
			if (stopAllAlarms == null) stopAllAlarms = (Function) native.GetObjectProperty("stopAllAlarms");
			stopAllAlarms.Call(native, stop);
		}

		/// <summary>
		/// Example:
		/// bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
		/// </summary>
		public bool IsAlarmPlaying(string alarmName)
		{
			if (isAlarmPlaying == null) isAlarmPlaying = (Function) native.GetObjectProperty("isAlarmPlaying");
			return (bool) isAlarmPlaying.Call(native, alarmName);
		}

		/// <summary>
		/// Hash is stored in audVehicleAudioEntity
		/// </summary>
		/// <returns>Returns hash of default vehicle horn</returns>
		public int GetVehicleDefaultHorn(int vehicle)
		{
			if (getVehicleDefaultHorn == null) getVehicleDefaultHorn = (Function) native.GetObjectProperty("getVehicleDefaultHorn");
			return (int) getVehicleDefaultHorn.Call(native, vehicle);
		}

		public int GetVehicleDefaultHornIgnoreMods(int vehicle)
		{
			if (getVehicleDefaultHornIgnoreMods == null) getVehicleDefaultHornIgnoreMods = (Function) native.GetObjectProperty("getVehicleDefaultHornIgnoreMods");
			return (int) getVehicleDefaultHornIgnoreMods.Call(native, vehicle);
		}

		public void ResetPedAudioFlags(int ped)
		{
			if (resetPedAudioFlags == null) resetPedAudioFlags = (Function) native.GetObjectProperty("resetPedAudioFlags");
			resetPedAudioFlags.Call(native, ped);
		}

		public void _0x0653B735BFBDFE87(int ped, bool toggle)
		{
			if (__0x0653B735BFBDFE87 == null) __0x0653B735BFBDFE87 = (Function) native.GetObjectProperty("_0x0653B735BFBDFE87");
			__0x0653B735BFBDFE87.Call(native, ped, toggle);
		}

		public void _0x29DA3CA8D8B2692D(int ped, bool toggle)
		{
			if (__0x29DA3CA8D8B2692D == null) __0x29DA3CA8D8B2692D = (Function) native.GetObjectProperty("_0x29DA3CA8D8B2692D");
			__0x29DA3CA8D8B2692D.Call(native, ped, toggle);
		}

		/// <summary>
		/// Sets audio flag "OverridePlayerGroundMaterial"
		/// </summary>
		public void OverridePlayerGroundMaterial(int hash, bool toggle)
		{
			if (overridePlayerGroundMaterial == null) overridePlayerGroundMaterial = (Function) native.GetObjectProperty("overridePlayerGroundMaterial");
			overridePlayerGroundMaterial.Call(native, hash, toggle);
		}

		/// <summary>
		/// Something like UPDATE_PED_*
		/// </summary>
		public void _0xBF4DC1784BE94DFA(int ped, bool p1, int hash)
		{
			if (__0xBF4DC1784BE94DFA == null) __0xBF4DC1784BE94DFA = (Function) native.GetObjectProperty("_0xBF4DC1784BE94DFA");
			__0xBF4DC1784BE94DFA.Call(native, ped, p1, hash);
		}

		/// <summary>
		/// Sets audio flag "OverrideMicrophoneSettings"
		/// </summary>
		public void OverrideMicrophoneSettings(int hash, bool toggle)
		{
			if (overrideMicrophoneSettings == null) overrideMicrophoneSettings = (Function) native.GetObjectProperty("overrideMicrophoneSettings");
			overrideMicrophoneSettings.Call(native, hash, toggle);
		}

		public void FreezeMicrophone()
		{
			if (freezeMicrophone == null) freezeMicrophone = (Function) native.GetObjectProperty("freezeMicrophone");
			freezeMicrophone.Call(native);
		}

		/// <summary>
		/// if value is set to true, and ambient siren sound will be played.
		/// -------------------------------------------------------------------------
		/// Appears to enable/disable an audio flag.
		/// </summary>
		public void DistantCopCarSirens(bool value)
		{
			if (distantCopCarSirens == null) distantCopCarSirens = (Function) native.GetObjectProperty("distantCopCarSirens");
			distantCopCarSirens.Call(native, value);
		}

		public void _0x43FA0DFC5DF87815(int vehicle, bool p1)
		{
			if (__0x43FA0DFC5DF87815 == null) __0x43FA0DFC5DF87815 = (Function) native.GetObjectProperty("_0x43FA0DFC5DF87815");
			__0x43FA0DFC5DF87815.Call(native, vehicle, p1);
		}

		public void _0xB81CF134AEB56FFB()
		{
			if (__0xB81CF134AEB56FFB == null) __0xB81CF134AEB56FFB = (Function) native.GetObjectProperty("_0xB81CF134AEB56FFB");
			__0xB81CF134AEB56FFB.Call(native);
		}

		/// <summary>
		/// Possible flag names:
		/// "ActivateSwitchWheelAudio"
		/// "AllowAmbientSpeechInSlowMo"
		/// "AllowCutsceneOverScreenFade"
		/// "AllowForceRadioAfterRetune"
		/// "AllowPainAndAmbientSpeechToPlayDuringCutscene"
		/// "AllowPlayerAIOnMission"
		/// "AllowPoliceScannerWhenPlayerHasNoControl"
		/// "AllowRadioDuringSwitch"
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB9EFD5C25018725A
		/// </summary>
		public void SetAudioFlag(string flagName, bool toggle)
		{
			if (setAudioFlag == null) setAudioFlag = (Function) native.GetObjectProperty("setAudioFlag");
			setAudioFlag.Call(native, flagName, toggle);
		}

		public object PrepareSynchronizedAudioEvent(string p0, object p1)
		{
			if (prepareSynchronizedAudioEvent == null) prepareSynchronizedAudioEvent = (Function) native.GetObjectProperty("prepareSynchronizedAudioEvent");
			return prepareSynchronizedAudioEvent.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) PrepareSynchronizedAudioEventForScene(object p0, object p1)
		{
			if (prepareSynchronizedAudioEventForScene == null) prepareSynchronizedAudioEventForScene = (Function) native.GetObjectProperty("prepareSynchronizedAudioEventForScene");
			var results = (Array) prepareSynchronizedAudioEventForScene.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public bool PlaySynchronizedAudioEvent(object p0)
		{
			if (playSynchronizedAudioEvent == null) playSynchronizedAudioEvent = (Function) native.GetObjectProperty("playSynchronizedAudioEvent");
			return (bool) playSynchronizedAudioEvent.Call(native, p0);
		}

		public bool StopSynchronizedAudioEvent(object p0)
		{
			if (stopSynchronizedAudioEvent == null) stopSynchronizedAudioEvent = (Function) native.GetObjectProperty("stopSynchronizedAudioEvent");
			return (bool) stopSynchronizedAudioEvent.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) _0xC8EDE9BDBCCBA6D4(object p0, double p1, double p2, double p3)
		{
			if (__0xC8EDE9BDBCCBA6D4 == null) __0xC8EDE9BDBCCBA6D4 = (Function) native.GetObjectProperty("_0xC8EDE9BDBCCBA6D4");
			var results = (Array) __0xC8EDE9BDBCCBA6D4.Call(native, p0, p1, p2, p3);
			return (results[0], results[1]);
		}

		/// <summary>
		/// Sets the position of the audio event to the entity's position for one frame(?)
		/// if (l_8C3 == 0) {
		/// sub_27fd1(0, -1, 1);
		/// if (PED::IS_SYNCHRONIZED_SCENE_RUNNING(l_87D)) {
		/// AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(l_87D);
		/// }
		/// if (sub_7dd(l_A00)) {
		/// AUDIO::_950A154B8DAB6185("PAP2_IG1_POPPYSEX", l_A00);
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0x950A154B8DAB6185
		/// </summary>
		public void SetSynchronizedAudioEventPositionThisFrame(string p0, int p1)
		{
			if (setSynchronizedAudioEventPositionThisFrame == null) setSynchronizedAudioEventPositionThisFrame = (Function) native.GetObjectProperty("setSynchronizedAudioEventPositionThisFrame");
			setSynchronizedAudioEventPositionThisFrame.Call(native, p0, p1);
		}

		/// <summary>
		/// enum audSpecialEffectMode
		/// {
		/// kSpecialEffectModeNormal,
		/// kSpecialEffectModeUnderwater,
		/// kSpecialEffectModeStoned,
		/// kSpecialEffectModePauseMenu,
		/// kSpecialEffectModeSlowMotion,
		/// kSpecialEffectModeDrunkStage01,
		/// kSpecialEffectModeDrunkStage02,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x12561FCBB62D5B9C
		/// </summary>
		public void SetAudioSpecialEffectMode(int mode)
		{
			if (setAudioSpecialEffectMode == null) setAudioSpecialEffectMode = (Function) native.GetObjectProperty("setAudioSpecialEffectMode");
			setAudioSpecialEffectMode.Call(native, mode);
		}

		/// <summary>
		/// Found in the b617d scripts, duplicates removed:
		/// AUDIO::_044DBAD7A7FA2BE5("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");
		/// AUDIO::_044DBAD7A7FA2BE5("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");
		/// AUDIO::_044DBAD7A7FA2BE5("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");
		/// AUDIO::_044DBAD7A7FA2BE5("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");
		/// AUDIO::_044DBAD7A7FA2BE5("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");
		/// </summary>
		public void SetPortalSettingsOverride(string p0, string p1)
		{
			if (setPortalSettingsOverride == null) setPortalSettingsOverride = (Function) native.GetObjectProperty("setPortalSettingsOverride");
			setPortalSettingsOverride.Call(native, p0, p1);
		}

		/// <summary>
		/// Found in the b617d scripts, duplicates removed:
		/// AUDIO::_B4BBFD9CD8B3922B("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
		/// AUDIO::_B4BBFD9CD8B3922B("V_CIA_PS_WINDOW_UNBROKEN");
		/// AUDIO::_B4BBFD9CD8B3922B("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
		/// AUDIO::_B4BBFD9CD8B3922B("V_FINALEBANK_PS_VAULT_INTACT");
		/// AUDIO::_B4BBFD9CD8B3922B("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");
		/// </summary>
		public void RemovePortalSettingsOverride(string p0)
		{
			if (removePortalSettingsOverride == null) removePortalSettingsOverride = (Function) native.GetObjectProperty("removePortalSettingsOverride");
			removePortalSettingsOverride.Call(native, p0);
		}

		/// <summary>
		/// STOP_S*
		/// </summary>
		public void _0xE4E6DD5566D28C82()
		{
			if (__0xE4E6DD5566D28C82 == null) __0xE4E6DD5566D28C82 = (Function) native.GetObjectProperty("_0xE4E6DD5566D28C82");
			__0xE4E6DD5566D28C82.Call(native);
		}

		public object _0x3A48AB4445D499BE()
		{
			if (__0x3A48AB4445D499BE == null) __0x3A48AB4445D499BE = (Function) native.GetObjectProperty("_0x3A48AB4445D499BE");
			return __0x3A48AB4445D499BE.Call(native);
		}

		/// <summary>
		/// Speech related.
		/// </summary>
		public void SetPedTalk(int ped)
		{
			if (setPedTalk == null) setPedTalk = (Function) native.GetObjectProperty("setPedTalk");
			setPedTalk.Call(native, ped);
		}

		public void _0x0150B6FF25A9E2E5()
		{
			if (__0x0150B6FF25A9E2E5 == null) __0x0150B6FF25A9E2E5 = (Function) native.GetObjectProperty("_0x0150B6FF25A9E2E5");
			__0x0150B6FF25A9E2E5.Call(native);
		}

		public void _0xBEF34B1D9624D5DD(bool p0)
		{
			if (__0xBEF34B1D9624D5DD == null) __0xBEF34B1D9624D5DD = (Function) native.GetObjectProperty("_0xBEF34B1D9624D5DD");
			__0xBEF34B1D9624D5DD.Call(native, p0);
		}

		public void StopCutsceneAudio()
		{
			if (stopCutsceneAudio == null) stopCutsceneAudio = (Function) native.GetObjectProperty("stopCutsceneAudio");
			stopCutsceneAudio.Call(native);
		}

		/// <summary>
		/// HAS_*
		/// </summary>
		public bool HasMultiplayerAudioDataLoaded()
		{
			if (hasMultiplayerAudioDataLoaded == null) hasMultiplayerAudioDataLoaded = (Function) native.GetObjectProperty("hasMultiplayerAudioDataLoaded");
			return (bool) hasMultiplayerAudioDataLoaded.Call(native);
		}

		/// <summary>
		/// HAS_*
		/// </summary>
		public bool HasMultiplayerAudioDataUnloaded()
		{
			if (hasMultiplayerAudioDataUnloaded == null) hasMultiplayerAudioDataUnloaded = (Function) native.GetObjectProperty("hasMultiplayerAudioDataUnloaded");
			return (bool) hasMultiplayerAudioDataUnloaded.Call(native);
		}

		public int GetVehicleDefaultHornVariation(int vehicle)
		{
			if (getVehicleDefaultHornVariation == null) getVehicleDefaultHornVariation = (Function) native.GetObjectProperty("getVehicleDefaultHornVariation");
			return (int) getVehicleDefaultHornVariation.Call(native, vehicle);
		}

		public void SetVehicleHornVariation(int vehicle, int value)
		{
			if (setVehicleHornVariation == null) setVehicleHornVariation = (Function) native.GetObjectProperty("setVehicleHornVariation");
			setVehicleHornVariation.Call(native, vehicle, value);
		}

		/// <summary>
		/// BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);
		/// - Nacorpio
		/// -----
		/// Hardcoded to not work in Multiplayer.
		/// </summary>
		public void AddScriptToRandomPed(string name, int model, double p2, double p3)
		{
			if (addScriptToRandomPed == null) addScriptToRandomPed = (Function) native.GetObjectProperty("addScriptToRandomPed");
			addScriptToRandomPed.Call(native, name, model, p2, p3);
		}

		/// <summary>
		/// Registers a script for any object with a specific model hash.
		/// BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
		/// - Nacorpio
		/// </summary>
		public void RegisterObjectScriptBrain(string scriptName, int modelHash, int p2, double activationRange, int p4, int p5)
		{
			if (registerObjectScriptBrain == null) registerObjectScriptBrain = (Function) native.GetObjectProperty("registerObjectScriptBrain");
			registerObjectScriptBrain.Call(native, scriptName, modelHash, p2, activationRange, p4, p5);
		}

		public bool IsObjectWithinBrainActivationRange(int @object)
		{
			if (isObjectWithinBrainActivationRange == null) isObjectWithinBrainActivationRange = (Function) native.GetObjectProperty("isObjectWithinBrainActivationRange");
			return (bool) isObjectWithinBrainActivationRange.Call(native, @object);
		}

		public void RegisterWorldPointScriptBrain(string scriptName, double activationRange, int p2)
		{
			if (registerWorldPointScriptBrain == null) registerWorldPointScriptBrain = (Function) native.GetObjectProperty("registerWorldPointScriptBrain");
			registerWorldPointScriptBrain.Call(native, scriptName, activationRange, p2);
		}

		/// <summary>
		/// Gets whether the world point the calling script is registered to is within desired range of the player.
		/// </summary>
		public bool IsWorldPointWithinBrainActivationRange()
		{
			if (isWorldPointWithinBrainActivationRange == null) isWorldPointWithinBrainActivationRange = (Function) native.GetObjectProperty("isWorldPointWithinBrainActivationRange");
			return (bool) isWorldPointWithinBrainActivationRange.Call(native);
		}

		public void EnableScriptBrainSet(int brainSet)
		{
			if (enableScriptBrainSet == null) enableScriptBrainSet = (Function) native.GetObjectProperty("enableScriptBrainSet");
			enableScriptBrainSet.Call(native, brainSet);
		}

		public void DisableScriptBrainSet(int brainSet)
		{
			if (disableScriptBrainSet == null) disableScriptBrainSet = (Function) native.GetObjectProperty("disableScriptBrainSet");
			disableScriptBrainSet.Call(native, brainSet);
		}

		public void _0x0B40ED49D7D6FF84()
		{
			if (__0x0B40ED49D7D6FF84 == null) __0x0B40ED49D7D6FF84 = (Function) native.GetObjectProperty("_0x0B40ED49D7D6FF84");
			__0x0B40ED49D7D6FF84.Call(native);
		}

		/// <summary>
		/// Something like flush_all_scripts
		/// Most of time comes after NETWORK_END_TUTORIAL_SESSION() or before TERMINATE_THIS_THREAD()
		/// </summary>
		public void _0x4D953DF78EBF8158()
		{
			if (__0x4D953DF78EBF8158 == null) __0x4D953DF78EBF8158 = (Function) native.GetObjectProperty("_0x4D953DF78EBF8158");
			__0x4D953DF78EBF8158.Call(native);
		}

		/// <summary>
		/// Possible values:
		/// act_cinema
		/// am_mp_carwash_launch
		/// am_mp_carwash_control
		/// am_mp_property_ext
		/// chop
		/// fairgroundHub
		/// launcher_BasejumpHeli
		/// launcher_BasejumpPack
		/// See NativeDB for reference: http://natives.altv.mp/#/0x6D6840CEE8845831
		/// </summary>
		public void _0x6D6840CEE8845831(string action)
		{
			if (__0x6D6840CEE8845831 == null) __0x6D6840CEE8845831 = (Function) native.GetObjectProperty("_0x6D6840CEE8845831");
			__0x6D6840CEE8845831.Call(native, action);
		}

		/// <summary>
		/// Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
		/// Here are possible values of argument -
		/// "ob_tv"
		/// "launcher_Darts"
		/// </summary>
		public void _0x6E91B04E08773030(string action)
		{
			if (__0x6E91B04E08773030 == null) __0x6E91B04E08773030 = (Function) native.GetObjectProperty("_0x6E91B04E08773030");
			__0x6E91B04E08773030.Call(native, action);
		}

		/// <summary>
		/// ease - smooth transition between the camera's positions
		/// easeTime - Time in milliseconds for the transition to happen
		/// If you have created a script (rendering) camera, and want to go back to the
		/// character (gameplay) camera, call this native with render set to 0.
		/// Setting ease to 1 will smooth the transition.
		/// </summary>
		/// <param name="ease">smooth transition between the camera's positions</param>
		/// <param name="easeTime">Time in milliseconds for the transition to happen</param>
		public void RenderScriptCams(bool render, bool ease, int easeTime, bool p3, bool p4, object p5)
		{
			if (renderScriptCams == null) renderScriptCams = (Function) native.GetObjectProperty("renderScriptCams");
			renderScriptCams.Call(native, render, ease, easeTime, p3, p4, p5);
		}

		/// <summary>
		/// This native makes the gameplay camera zoom into first person/third person with a special effect.
		/// For example, if you were first person in a mission and after the cutscene ends, the camera would then zoom into the first person camera view.
		/// if (CAM::GET_FOLLOW_PED_CAM_VIEW_MODE() != 4)
		/// CAM::_C819F3CBB62BF692(1, 0, 3, 0)
		/// This makes the camera zoom in to first person.
		/// --------------------------------------------
		/// 1st Param Options: 0 or 1 (Changes quit often, toggle?)
		/// 2nd Param Options: 0, 0f, 1f, 3.8f, 10f, 20f (Mostly 0)
		/// 3rd Param Options: 3, 2, 1 (Mostly 3);
		/// See NativeDB for reference: http://natives.altv.mp/#/0xC819F3CBB62BF692
		/// </summary>
		public void RenderFirstPersonCam(bool render, double p1, int p2, object p3)
		{
			if (renderFirstPersonCam == null) renderFirstPersonCam = (Function) native.GetObjectProperty("renderFirstPersonCam");
			renderFirstPersonCam.Call(native, render, p1, p2, p3);
		}

		/// <summary>
		/// "DEFAULT_SCRIPTED_CAMERA"
		/// "DEFAULT_ANIMATED_CAMERA"
		/// "DEFAULT_SPLINE_CAMERA"
		/// "DEFAULT_SCRIPTED_FLY_CAMERA"
		/// "TIMED_SPLINE_CAMERA"
		/// </summary>
		public int CreateCam(string camName, bool p1)
		{
			if (createCam == null) createCam = (Function) native.GetObjectProperty("createCam");
			return (int) createCam.Call(native, camName, p1);
		}

		/// <summary>
		/// camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
		/// ------------
		/// Camera names found in the b617d scripts:
		/// "DEFAULT_ANIMATED_CAMERA"
		/// "DEFAULT_SCRIPTED_CAMERA"
		/// "DEFAULT_SCRIPTED_FLY_CAMERA"
		/// "DEFAULT_SPLINE_CAMERA"
		/// ------------
		/// Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
		/// </summary>
		/// <param name="camName">is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.</param>
		public int CreateCamWithParams(string camName, double posX, double posY, double posZ, double rotX, double rotY, double rotZ, double fov, bool p8, int p9)
		{
			if (createCamWithParams == null) createCamWithParams = (Function) native.GetObjectProperty("createCamWithParams");
			return (int) createCamWithParams.Call(native, camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
		}

		public int CreateCamera(int camHash, bool p1)
		{
			if (createCamera == null) createCamera = (Function) native.GetObjectProperty("createCamera");
			return (int) createCamera.Call(native, camHash, p1);
		}

		/// <summary>
		/// CAM::_GET_GAMEPLAY_CAM_COORDS can be used instead of posX,Y,Z
		/// CAM::_GET_GAMEPLAY_CAM_ROT can be used instead of rotX,Y,Z
		/// CAM::_80EC114669DAEFF4() can be used instead of p7 (Possible p7 is FOV parameter. )
		/// p8 ???
		/// p9 uses 2 by default
		/// </summary>
		/// <param name="p8">???</param>
		/// <param name="p9">uses 2 by default</param>
		public int CreateCameraWithParams(int camHash, double posX, double posY, double posZ, double rotX, double rotY, double rotZ, double fov, bool p8, object p9)
		{
			if (createCameraWithParams == null) createCameraWithParams = (Function) native.GetObjectProperty("createCameraWithParams");
			return (int) createCameraWithParams.Call(native, camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
		}

		/// <summary>
		/// BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
		/// </summary>
		public void DestroyCam(int cam, bool thisScriptCheck)
		{
			if (destroyCam == null) destroyCam = (Function) native.GetObjectProperty("destroyCam");
			destroyCam.Call(native, cam, thisScriptCheck);
		}

		/// <summary>
		/// BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
		/// </summary>
		public void DestroyAllCams(bool thisScriptCheck)
		{
			if (destroyAllCams == null) destroyAllCams = (Function) native.GetObjectProperty("destroyAllCams");
			destroyAllCams.Call(native, thisScriptCheck);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether or not the passed camera handle exists.</returns>
		public bool DoesCamExist(int cam)
		{
			if (doesCamExist == null) doesCamExist = (Function) native.GetObjectProperty("doesCamExist");
			return (bool) doesCamExist.Call(native, cam);
		}

		/// <summary>
		/// Set camera as active/inactive.
		/// </summary>
		public void SetCamActive(int cam, bool active)
		{
			if (setCamActive == null) setCamActive = (Function) native.GetObjectProperty("setCamActive");
			setCamActive.Call(native, cam, active);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether or not the passed camera handle is active.</returns>
		public bool IsCamActive(int cam)
		{
			if (isCamActive == null) isCamActive = (Function) native.GetObjectProperty("isCamActive");
			return (bool) isCamActive.Call(native, cam);
		}

		public bool IsCamRendering(int cam)
		{
			if (isCamRendering == null) isCamRendering = (Function) native.GetObjectProperty("isCamRendering");
			return (bool) isCamRendering.Call(native, cam);
		}

		public int GetRenderingCam()
		{
			if (getRenderingCam == null) getRenderingCam = (Function) native.GetObjectProperty("getRenderingCam");
			return (int) getRenderingCam.Call(native);
		}

		public Vector3 GetCamCoord(int cam)
		{
			if (getCamCoord == null) getCamCoord = (Function) native.GetObjectProperty("getCamCoord");
			return JSObjectToVector3(getCamCoord.Call(native, cam));
		}

		/// <summary>
		/// The last parameter, as in other "ROT" methods, is usually 2.
		/// </summary>
		public Vector3 GetCamRot(int cam, int rotationOrder)
		{
			if (getCamRot == null) getCamRot = (Function) native.GetObjectProperty("getCamRot");
			return JSObjectToVector3(getCamRot.Call(native, cam, rotationOrder));
		}

		public double GetCamFov(int cam)
		{
			if (getCamFov == null) getCamFov = (Function) native.GetObjectProperty("getCamFov");
			return (double) getCamFov.Call(native, cam);
		}

		public double GetCamNearClip(int cam)
		{
			if (getCamNearClip == null) getCamNearClip = (Function) native.GetObjectProperty("getCamNearClip");
			return (double) getCamNearClip.Call(native, cam);
		}

		public double GetCamFarClip(int cam)
		{
			if (getCamFarClip == null) getCamFarClip = (Function) native.GetObjectProperty("getCamFarClip");
			return (double) getCamFarClip.Call(native, cam);
		}

		public double GetCamFarDof(int cam)
		{
			if (getCamFarDof == null) getCamFarDof = (Function) native.GetObjectProperty("getCamFarDof");
			return (double) getCamFarDof.Call(native, cam);
		}

		public void SetCamParams(int cam, double posX, double posY, double posZ, double rotX, double rotY, double rotZ, double fieldOfView, object p8, int p9, int p10, int p11)
		{
			if (setCamParams == null) setCamParams = (Function) native.GetObjectProperty("setCamParams");
			setCamParams.Call(native, cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11);
		}

		/// <summary>
		/// Sets the position of the cam.
		/// </summary>
		public void SetCamCoord(int cam, double posX, double posY, double posZ)
		{
			if (setCamCoord == null) setCamCoord = (Function) native.GetObjectProperty("setCamCoord");
			setCamCoord.Call(native, cam, posX, posY, posZ);
		}

		/// <summary>
		/// Sets the rotation of the cam.
		/// Last parameter unknown.
		/// Last parameter seems to always be set to 2.
		/// </summary>
		public void SetCamRot(int cam, double rotX, double rotY, double rotZ, int rotationOrder)
		{
			if (setCamRot == null) setCamRot = (Function) native.GetObjectProperty("setCamRot");
			setCamRot.Call(native, cam, rotX, rotY, rotZ, rotationOrder);
		}

		/// <summary>
		/// Sets the field of view of the cam.
		/// ---------------------------------------------
		/// Min: 1.0f
		/// Max: 130.0f
		/// </summary>
		public void SetCamFov(int cam, double fieldOfView)
		{
			if (setCamFov == null) setCamFov = (Function) native.GetObjectProperty("setCamFov");
			setCamFov.Call(native, cam, fieldOfView);
		}

		public void SetCamNearClip(int cam, double nearClip)
		{
			if (setCamNearClip == null) setCamNearClip = (Function) native.GetObjectProperty("setCamNearClip");
			setCamNearClip.Call(native, cam, nearClip);
		}

		public void SetCamFarClip(int cam, double farClip)
		{
			if (setCamFarClip == null) setCamFarClip = (Function) native.GetObjectProperty("setCamFarClip");
			setCamFarClip.Call(native, cam, farClip);
		}

		public void SetCamMotionBlurStrength(int cam, double strength)
		{
			if (setCamMotionBlurStrength == null) setCamMotionBlurStrength = (Function) native.GetObjectProperty("setCamMotionBlurStrength");
			setCamMotionBlurStrength.Call(native, cam, strength);
		}

		public void SetCamNearDof(int cam, double nearDOF)
		{
			if (setCamNearDof == null) setCamNearDof = (Function) native.GetObjectProperty("setCamNearDof");
			setCamNearDof.Call(native, cam, nearDOF);
		}

		public void SetCamFarDof(int cam, double farDOF)
		{
			if (setCamFarDof == null) setCamFarDof = (Function) native.GetObjectProperty("setCamFarDof");
			setCamFarDof.Call(native, cam, farDOF);
		}

		public void SetCamDofStrength(int cam, double dofStrength)
		{
			if (setCamDofStrength == null) setCamDofStrength = (Function) native.GetObjectProperty("setCamDofStrength");
			setCamDofStrength.Call(native, cam, dofStrength);
		}

		public void SetCamDofPlanes(int cam, double p1, double p2, double p3, double p4)
		{
			if (setCamDofPlanes == null) setCamDofPlanes = (Function) native.GetObjectProperty("setCamDofPlanes");
			setCamDofPlanes.Call(native, cam, p1, p2, p3, p4);
		}

		public void SetCamUseShallowDofMode(int cam, bool toggle)
		{
			if (setCamUseShallowDofMode == null) setCamUseShallowDofMode = (Function) native.GetObjectProperty("setCamUseShallowDofMode");
			setCamUseShallowDofMode.Call(native, cam, toggle);
		}

		public void SetUseHiDof()
		{
			if (setUseHiDof == null) setUseHiDof = (Function) native.GetObjectProperty("setUseHiDof");
			setUseHiDof.Call(native);
		}

		public void _0xF55E4046F6F831DC(object p0, double p1)
		{
			if (__0xF55E4046F6F831DC == null) __0xF55E4046F6F831DC = (Function) native.GetObjectProperty("_0xF55E4046F6F831DC");
			__0xF55E4046F6F831DC.Call(native, p0, p1);
		}

		public void _0xE111A7C0D200CBC5(object p0, double p1)
		{
			if (__0xE111A7C0D200CBC5 == null) __0xE111A7C0D200CBC5 = (Function) native.GetObjectProperty("_0xE111A7C0D200CBC5");
			__0xE111A7C0D200CBC5.Call(native, p0, p1);
		}

		/// <summary>
		/// This native has its name defined inside its codE
		/// </summary>
		public void SetCamDofFnumberOfLens(int camera, double p1)
		{
			if (setCamDofFnumberOfLens == null) setCamDofFnumberOfLens = (Function) native.GetObjectProperty("setCamDofFnumberOfLens");
			setCamDofFnumberOfLens.Call(native, camera, p1);
		}

		public void SetCamDofFocalLengthMultiplier(object p0, object p1)
		{
			if (setCamDofFocalLengthMultiplier == null) setCamDofFocalLengthMultiplier = (Function) native.GetObjectProperty("setCamDofFocalLengthMultiplier");
			setCamDofFocalLengthMultiplier.Call(native, p0, p1);
		}

		/// <summary>
		/// This native has a name defined inside its code
		/// </summary>
		public void SetCamDofFocusDistanceBias(int camera, double p1)
		{
			if (setCamDofFocusDistanceBias == null) setCamDofFocusDistanceBias = (Function) native.GetObjectProperty("setCamDofFocusDistanceBias");
			setCamDofFocusDistanceBias.Call(native, camera, p1);
		}

		/// <summary>
		/// This native has a name defined inside its code
		/// </summary>
		public void SetCamDofMaxNearInFocusDistance(int camera, double p1)
		{
			if (setCamDofMaxNearInFocusDistance == null) setCamDofMaxNearInFocusDistance = (Function) native.GetObjectProperty("setCamDofMaxNearInFocusDistance");
			setCamDofMaxNearInFocusDistance.Call(native, camera, p1);
		}

		/// <summary>
		/// This native has a name defined inside its code
		/// </summary>
		public void SetCamDofMaxNearInFocusDistanceBlendLevel(int camera, double p1)
		{
			if (setCamDofMaxNearInFocusDistanceBlendLevel == null) setCamDofMaxNearInFocusDistanceBlendLevel = (Function) native.GetObjectProperty("setCamDofMaxNearInFocusDistanceBlendLevel");
			setCamDofMaxNearInFocusDistanceBlendLevel.Call(native, camera, p1);
		}

		/// <summary>
		/// Last param determines if its relative to the Entity
		/// </summary>
		public void AttachCamToEntity(int cam, int entity, double xOffset, double yOffset, double zOffset, bool isRelative)
		{
			if (attachCamToEntity == null) attachCamToEntity = (Function) native.GetObjectProperty("attachCamToEntity");
			attachCamToEntity.Call(native, cam, entity, xOffset, yOffset, zOffset, isRelative);
		}

		public void AttachCamToPedBone(int cam, int ped, int boneIndex, double x, double y, double z, bool heading)
		{
			if (attachCamToPedBone == null) attachCamToPedBone = (Function) native.GetObjectProperty("attachCamToPedBone");
			attachCamToPedBone.Call(native, cam, ped, boneIndex, x, y, z, heading);
		}

		public void AttachCamToPedBone2(int cam, int ped, int boneIndex, double p3, double p4, double p5, double p6, double p7, double p8, bool p9)
		{
			if (attachCamToPedBone2 == null) attachCamToPedBone2 = (Function) native.GetObjectProperty("attachCamToPedBone2");
			attachCamToPedBone2.Call(native, cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9);
		}

		public void AttachCamToVehicleBone(int cam, int vehicle, int boneIndex, bool p3, double p4, double p5, double p6, double p7, double p8, double p9, bool p10)
		{
			if (attachCamToVehicleBone == null) attachCamToVehicleBone = (Function) native.GetObjectProperty("attachCamToVehicleBone");
			attachCamToVehicleBone.Call(native, cam, vehicle, boneIndex, p3, p4, p5, p6, p7, p8, p9, p10);
		}

		public void DetachCam(int cam)
		{
			if (detachCam == null) detachCam = (Function) native.GetObjectProperty("detachCam");
			detachCam.Call(native, cam);
		}

		/// <summary>
		/// The native seems to only be called once.
		/// The native is used as so,
		/// CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
		/// In the exile1 script.
		/// </summary>
		public void SetCamInheritRollVehicle(int cam, bool p1)
		{
			if (setCamInheritRollVehicle == null) setCamInheritRollVehicle = (Function) native.GetObjectProperty("setCamInheritRollVehicle");
			setCamInheritRollVehicle.Call(native, cam, p1);
		}

		public void PointCamAtCoord(int cam, double x, double y, double z)
		{
			if (pointCamAtCoord == null) pointCamAtCoord = (Function) native.GetObjectProperty("pointCamAtCoord");
			pointCamAtCoord.Call(native, cam, x, y, z);
		}

		/// <summary>
		/// p5 always seems to be 1 i.e TRUE
		/// </summary>
		/// <param name="p5">always seems to be 1 i.e TRUE</param>
		public void PointCamAtEntity(int cam, int entity, double p2, double p3, double p4, bool p5)
		{
			if (pointCamAtEntity == null) pointCamAtEntity = (Function) native.GetObjectProperty("pointCamAtEntity");
			pointCamAtEntity.Call(native, cam, entity, p2, p3, p4, p5);
		}

		/// <summary>
		/// Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
		/// </summary>
		public void PointCamAtPedBone(int cam, int ped, int boneIndex, double x, double y, double z, bool p6)
		{
			if (pointCamAtPedBone == null) pointCamAtPedBone = (Function) native.GetObjectProperty("pointCamAtPedBone");
			pointCamAtPedBone.Call(native, cam, ped, boneIndex, x, y, z, p6);
		}

		public void StopCamPointing(int cam)
		{
			if (stopCamPointing == null) stopCamPointing = (Function) native.GetObjectProperty("stopCamPointing");
			stopCamPointing.Call(native, cam);
		}

		/// <summary>
		/// Allows you to aim and shoot at the direction the camera is facing.
		/// </summary>
		public void SetCamAffectsAiming(int cam, bool toggle)
		{
			if (setCamAffectsAiming == null) setCamAffectsAiming = (Function) native.GetObjectProperty("setCamAffectsAiming");
			setCamAffectsAiming.Call(native, cam, toggle);
		}

		/// <summary>
		/// SET_CAM_*
		/// </summary>
		public void _0x661B5C8654ADD825(int cam, bool p1)
		{
			if (__0x661B5C8654ADD825 == null) __0x661B5C8654ADD825 = (Function) native.GetObjectProperty("_0x661B5C8654ADD825");
			__0x661B5C8654ADD825.Call(native, cam, p1);
		}

		public void _0xA2767257A320FC82(object p0, bool p1)
		{
			if (__0xA2767257A320FC82 == null) __0xA2767257A320FC82 = (Function) native.GetObjectProperty("_0xA2767257A320FC82");
			__0xA2767257A320FC82.Call(native, p0, p1);
		}

		public void _0x271017B9BA825366(object p0, bool p1)
		{
			if (__0x271017B9BA825366 == null) __0x271017B9BA825366 = (Function) native.GetObjectProperty("_0x271017B9BA825366");
			__0x271017B9BA825366.Call(native, p0, p1);
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// </summary>
		public void SetCamDebugName(int camera, string name)
		{
			if (setCamDebugName == null) setCamDebugName = (Function) native.GetObjectProperty("setCamDebugName");
			setCamDebugName.Call(native, camera, name);
		}

		/// <summary>
		/// I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
		/// p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
		/// p8 big values ~100 will slow down the camera movement before reaching this node
		/// p9 != 0 seems to override the rotation/pitch (bool?)
		/// </summary>
		/// <param name="p8">big values ~100 will slow down the camera movement before reaching this node</param>
		/// <param name="p9">!= 0 seems to override the rotation/pitch (bool?)</param>
		public void AddCamSplineNode(int camera, double x, double y, double z, double xRot, double yRot, double zRot, int length, int p8, int p9)
		{
			if (addCamSplineNode == null) addCamSplineNode = (Function) native.GetObjectProperty("addCamSplineNode");
			addCamSplineNode.Call(native, camera, x, y, z, xRot, yRot, zRot, length, p8, p9);
		}

		public void AddCamSplineNodeUsingCameraFrame(int cam, int cam2, int p2, int p3)
		{
			if (addCamSplineNodeUsingCameraFrame == null) addCamSplineNodeUsingCameraFrame = (Function) native.GetObjectProperty("addCamSplineNodeUsingCameraFrame");
			addCamSplineNodeUsingCameraFrame.Call(native, cam, cam2, p2, p3);
		}

		public void AddCamSplineNodeUsingCamera(int cam, int cam2, int p2, int p3)
		{
			if (addCamSplineNodeUsingCamera == null) addCamSplineNodeUsingCamera = (Function) native.GetObjectProperty("addCamSplineNodeUsingCamera");
			addCamSplineNodeUsingCamera.Call(native, cam, cam2, p2, p3);
		}

		public void AddCamSplineNodeUsingGameplayFrame(int cam, int p1, int p2)
		{
			if (addCamSplineNodeUsingGameplayFrame == null) addCamSplineNodeUsingGameplayFrame = (Function) native.GetObjectProperty("addCamSplineNodeUsingGameplayFrame");
			addCamSplineNodeUsingGameplayFrame.Call(native, cam, p1, p2);
		}

		public void SetCamSplinePhase(int cam, double p1)
		{
			if (setCamSplinePhase == null) setCamSplinePhase = (Function) native.GetObjectProperty("setCamSplinePhase");
			setCamSplinePhase.Call(native, cam, p1);
		}

		/// <summary>
		/// (returns 1.0f when no nodes has been added, reached end of non existing spline)
		/// </summary>
		/// <returns>Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.</returns>
		public double GetCamSplinePhase(int cam)
		{
			if (getCamSplinePhase == null) getCamSplinePhase = (Function) native.GetObjectProperty("getCamSplinePhase");
			return (double) getCamSplinePhase.Call(native, cam);
		}

		/// <summary>
		/// I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
		/// </summary>
		public double GetCamSplineNodePhase(int cam)
		{
			if (getCamSplineNodePhase == null) getCamSplineNodePhase = (Function) native.GetObjectProperty("getCamSplineNodePhase");
			return (double) getCamSplineNodePhase.Call(native, cam);
		}

		/// <summary>
		/// I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
		/// </summary>
		public void SetCamSplineDuration(int cam, int timeDuration)
		{
			if (setCamSplineDuration == null) setCamSplineDuration = (Function) native.GetObjectProperty("setCamSplineDuration");
			setCamSplineDuration.Call(native, cam, timeDuration);
		}

		public void SetCamSplineSmoothingStyle(int cam, int smoothingStyle)
		{
			if (setCamSplineSmoothingStyle == null) setCamSplineSmoothingStyle = (Function) native.GetObjectProperty("setCamSplineSmoothingStyle");
			setCamSplineSmoothingStyle.Call(native, cam, smoothingStyle);
		}

		public int GetCamSplineNodeIndex(int cam)
		{
			if (getCamSplineNodeIndex == null) getCamSplineNodeIndex = (Function) native.GetObjectProperty("getCamSplineNodeIndex");
			return (int) getCamSplineNodeIndex.Call(native, cam);
		}

		public void SetCamSplineNodeEase(int cam, int p1, int p2, double p3)
		{
			if (setCamSplineNodeEase == null) setCamSplineNodeEase = (Function) native.GetObjectProperty("setCamSplineNodeEase");
			setCamSplineNodeEase.Call(native, cam, p1, p2, p3);
		}

		public void SetCamSplineNodeVelocityScale(int cam, int p1, double scale)
		{
			if (setCamSplineNodeVelocityScale == null) setCamSplineNodeVelocityScale = (Function) native.GetObjectProperty("setCamSplineNodeVelocityScale");
			setCamSplineNodeVelocityScale.Call(native, cam, p1, scale);
		}

		public void OverrideCamSplineVelocity(int cam, int p1, double p2, double p3)
		{
			if (overrideCamSplineVelocity == null) overrideCamSplineVelocity = (Function) native.GetObjectProperty("overrideCamSplineVelocity");
			overrideCamSplineVelocity.Call(native, cam, p1, p2, p3);
		}

		/// <summary>
		/// Max value for p1 is 15.
		/// </summary>
		public void OverrideCamSplineMotionBlur(int cam, int p1, double p2, double p3)
		{
			if (overrideCamSplineMotionBlur == null) overrideCamSplineMotionBlur = (Function) native.GetObjectProperty("overrideCamSplineMotionBlur");
			overrideCamSplineMotionBlur.Call(native, cam, p1, p2, p3);
		}

		public void SetCamSplineNodeExtraFlags(int cam, int p1, int flags)
		{
			if (setCamSplineNodeExtraFlags == null) setCamSplineNodeExtraFlags = (Function) native.GetObjectProperty("setCamSplineNodeExtraFlags");
			setCamSplineNodeExtraFlags.Call(native, cam, p1, flags);
		}

		public bool IsCamSplinePaused(object p0)
		{
			if (isCamSplinePaused == null) isCamSplinePaused = (Function) native.GetObjectProperty("isCamSplinePaused");
			return (bool) isCamSplinePaused.Call(native, p0);
		}

		/// <summary>
		/// Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
		/// </summary>
		public void SetCamActiveWithInterp(int camTo, int camFrom, int duration, int easeLocation, int easeRotation)
		{
			if (setCamActiveWithInterp == null) setCamActiveWithInterp = (Function) native.GetObjectProperty("setCamActiveWithInterp");
			setCamActiveWithInterp.Call(native, camTo, camFrom, duration, easeLocation, easeRotation);
		}

		public bool IsCamInterpolating(int cam)
		{
			if (isCamInterpolating == null) isCamInterpolating = (Function) native.GetObjectProperty("isCamInterpolating");
			return (bool) isCamInterpolating.Call(native, cam);
		}

		/// <summary>
		/// Possible shake types (updated b617d):
		/// DEATH_FAIL_IN_EFFECT_SHAKE
		/// DRUNK_SHAKE
		/// FAMILY5_DRUG_TRIP_SHAKE
		/// HAND_SHAKE
		/// JOLT_SHAKE
		/// LARGE_EXPLOSION_SHAKE
		/// MEDIUM_EXPLOSION_SHAKE
		/// SMALL_EXPLOSION_SHAKE
		/// See NativeDB for reference: http://natives.altv.mp/#/0x6A25241C340D3822
		/// </summary>
		public void ShakeCam(int cam, string type, double amplitude)
		{
			if (shakeCam == null) shakeCam = (Function) native.GetObjectProperty("shakeCam");
			shakeCam.Call(native, cam, type, amplitude);
		}

		/// <summary>
		/// Example from michael2 script.
		/// CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
		/// </summary>
		public void AnimatedShakeCam(int cam, string p1, string p2, string p3, double amplitude)
		{
			if (animatedShakeCam == null) animatedShakeCam = (Function) native.GetObjectProperty("animatedShakeCam");
			animatedShakeCam.Call(native, cam, p1, p2, p3, amplitude);
		}

		public bool IsCamShaking(int cam)
		{
			if (isCamShaking == null) isCamShaking = (Function) native.GetObjectProperty("isCamShaking");
			return (bool) isCamShaking.Call(native, cam);
		}

		public void SetCamShakeAmplitude(int cam, double amplitude)
		{
			if (setCamShakeAmplitude == null) setCamShakeAmplitude = (Function) native.GetObjectProperty("setCamShakeAmplitude");
			setCamShakeAmplitude.Call(native, cam, amplitude);
		}

		public void StopCamShaking(int cam, bool p1)
		{
			if (stopCamShaking == null) stopCamShaking = (Function) native.GetObjectProperty("stopCamShaking");
			stopCamShaking.Call(native, cam, p1);
		}

		/// <summary>
		/// CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);
		/// </summary>
		public void ShakeScriptGlobal(string p0, double p1)
		{
			if (shakeScriptGlobal == null) shakeScriptGlobal = (Function) native.GetObjectProperty("shakeScriptGlobal");
			shakeScriptGlobal.Call(native, p0, p1);
		}

		/// <summary>
		/// CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);
		/// </summary>
		public void AnimatedShakeScriptGlobal(string p0, string p1, string p2, double p3)
		{
			if (animatedShakeScriptGlobal == null) animatedShakeScriptGlobal = (Function) native.GetObjectProperty("animatedShakeScriptGlobal");
			animatedShakeScriptGlobal.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// In drunk_controller.c4, sub_309
		/// if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
		/// CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
		/// }
		/// </summary>
		public bool IsScriptGlobalShaking()
		{
			if (isScriptGlobalShaking == null) isScriptGlobalShaking = (Function) native.GetObjectProperty("isScriptGlobalShaking");
			return (bool) isScriptGlobalShaking.Call(native);
		}

		/// <summary>
		/// In drunk_controller.c4, sub_309
		/// if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
		/// CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
		/// }
		/// </summary>
		public void StopScriptGlobalShaking(bool p0)
		{
			if (stopScriptGlobalShaking == null) stopScriptGlobalShaking = (Function) native.GetObjectProperty("stopScriptGlobalShaking");
			stopScriptGlobalShaking.Call(native, p0);
		}

		/// <summary>
		/// Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
		/// p9 is unknown at this time.
		/// p10 throughout all the X360 Scripts is always 2.
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <param name="p9">is unknown at this time.</param>
		/// <param name="p10">throughout all the X360 Scripts is always 2.</param>
		public bool PlayCamAnim(int cam, string animName, string animDictionary, double x, double y, double z, double xRot, double yRot, double zRot, bool p9, int p10)
		{
			if (playCamAnim == null) playCamAnim = (Function) native.GetObjectProperty("playCamAnim");
			return (bool) playCamAnim.Call(native, cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10);
		}

		public bool IsCamPlayingAnim(int cam, string animName, string animDictionary)
		{
			if (isCamPlayingAnim == null) isCamPlayingAnim = (Function) native.GetObjectProperty("isCamPlayingAnim");
			return (bool) isCamPlayingAnim.Call(native, cam, animName, animDictionary);
		}

		public void SetCamAnimCurrentPhase(int cam, double phase)
		{
			if (setCamAnimCurrentPhase == null) setCamAnimCurrentPhase = (Function) native.GetObjectProperty("setCamAnimCurrentPhase");
			setCamAnimCurrentPhase.Call(native, cam, phase);
		}

		public double GetCamAnimCurrentPhase(int cam)
		{
			if (getCamAnimCurrentPhase == null) getCamAnimCurrentPhase = (Function) native.GetObjectProperty("getCamAnimCurrentPhase");
			return (double) getCamAnimCurrentPhase.Call(native, cam);
		}

		/// <summary>
		/// Examples:
		/// CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");
		/// CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[71], l_F4D[151], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");
		/// </summary>
		public bool PlaySynchronizedCamAnim(object p0, object p1, string animName, string animDictionary)
		{
			if (playSynchronizedCamAnim == null) playSynchronizedCamAnim = (Function) native.GetObjectProperty("playSynchronizedCamAnim");
			return (bool) playSynchronizedCamAnim.Call(native, p0, p1, animName, animDictionary);
		}

		public void SetFlyCamHorizontalResponse(int cam, double p1, double p2, double p3)
		{
			if (setFlyCamHorizontalResponse == null) setFlyCamHorizontalResponse = (Function) native.GetObjectProperty("setFlyCamHorizontalResponse");
			setFlyCamHorizontalResponse.Call(native, cam, p1, p2, p3);
		}

		public void SetFlyCamVerticalSpeedMultiplier(int cam, double p1, double p2, double p3)
		{
			if (setFlyCamVerticalSpeedMultiplier == null) setFlyCamVerticalSpeedMultiplier = (Function) native.GetObjectProperty("setFlyCamVerticalSpeedMultiplier");
			setFlyCamVerticalSpeedMultiplier.Call(native, cam, p1, p2, p3);
		}

		public void SetFlyCamMaxHeight(int cam, double height)
		{
			if (setFlyCamMaxHeight == null) setFlyCamMaxHeight = (Function) native.GetObjectProperty("setFlyCamMaxHeight");
			setFlyCamMaxHeight.Call(native, cam, height);
		}

		public void SetFlyCamCoordAndConstrain(int cam, double x, double y, double z)
		{
			if (setFlyCamCoordAndConstrain == null) setFlyCamCoordAndConstrain = (Function) native.GetObjectProperty("setFlyCamCoordAndConstrain");
			setFlyCamCoordAndConstrain.Call(native, cam, x, y, z);
		}

		public void _0xC8B5C4A79CC18B94(int cam)
		{
			if (__0xC8B5C4A79CC18B94 == null) __0xC8B5C4A79CC18B94 = (Function) native.GetObjectProperty("_0xC8B5C4A79CC18B94");
			__0xC8B5C4A79CC18B94.Call(native, cam);
		}

		/// <summary>
		/// W*
		/// </summary>
		public bool _0x5C48A1D6E3B33179(int cam)
		{
			if (__0x5C48A1D6E3B33179 == null) __0x5C48A1D6E3B33179 = (Function) native.GetObjectProperty("_0x5C48A1D6E3B33179");
			return (bool) __0x5C48A1D6E3B33179.Call(native, cam);
		}

		public bool IsScreenFadedOut()
		{
			if (isScreenFadedOut == null) isScreenFadedOut = (Function) native.GetObjectProperty("isScreenFadedOut");
			return (bool) isScreenFadedOut.Call(native);
		}

		public bool IsScreenFadedIn()
		{
			if (isScreenFadedIn == null) isScreenFadedIn = (Function) native.GetObjectProperty("isScreenFadedIn");
			return (bool) isScreenFadedIn.Call(native);
		}

		public bool IsScreenFadingOut()
		{
			if (isScreenFadingOut == null) isScreenFadingOut = (Function) native.GetObjectProperty("isScreenFadingOut");
			return (bool) isScreenFadingOut.Call(native);
		}

		public bool IsScreenFadingIn()
		{
			if (isScreenFadingIn == null) isScreenFadingIn = (Function) native.GetObjectProperty("isScreenFadingIn");
			return (bool) isScreenFadingIn.Call(native);
		}

		/// <summary>
		/// Fades the screen in.
		/// duration: The time the fade should take, in milliseconds.
		/// </summary>
		/// <param name="duration">The time the fade should take, in milliseconds.</param>
		public void DoScreenFadeIn(int duration)
		{
			if (doScreenFadeIn == null) doScreenFadeIn = (Function) native.GetObjectProperty("doScreenFadeIn");
			doScreenFadeIn.Call(native, duration);
		}

		/// <summary>
		/// Fades the screen out.
		/// duration: The time the fade should take, in milliseconds.
		/// </summary>
		/// <param name="duration">The time the fade should take, in milliseconds.</param>
		public void DoScreenFadeOut(int duration)
		{
			if (doScreenFadeOut == null) doScreenFadeOut = (Function) native.GetObjectProperty("doScreenFadeOut");
			doScreenFadeOut.Call(native, duration);
		}

		public void SetWidescreenBorders(bool p0, int p1)
		{
			if (setWidescreenBorders == null) setWidescreenBorders = (Function) native.GetObjectProperty("setWidescreenBorders");
			setWidescreenBorders.Call(native, p0, p1);
		}

		/// <summary>
		/// A*
		/// </summary>
		public bool _0x4879E4FE39074CDF()
		{
			if (__0x4879E4FE39074CDF == null) __0x4879E4FE39074CDF = (Function) native.GetObjectProperty("_0x4879E4FE39074CDF");
			return (bool) __0x4879E4FE39074CDF.Call(native);
		}

		public Vector3 GetGameplayCamCoord()
		{
			if (getGameplayCamCoord == null) getGameplayCamCoord = (Function) native.GetObjectProperty("getGameplayCamCoord");
			return JSObjectToVector3(getGameplayCamCoord.Call(native));
		}

		/// <summary>
		/// p0 dosen't seem to change much, I tried it with 0, 1, 2:
		/// 0-Pitch(X): -70.000092
		/// 0-Roll(Y): -0.000001
		/// 0-Yaw(Z): -43.886459
		/// 1-Pitch(X): -70.000092
		/// 1-Roll(Y): -0.000001
		/// 1-Yaw(Z): -43.886463
		/// 2-Pitch(X): -70.000092
		/// 2-Roll(Y): -0.000002
		/// 2-Yaw(Z): -43.886467
		/// </summary>
		public Vector3 GetGameplayCamRot(int rotationOrder)
		{
			if (getGameplayCamRot == null) getGameplayCamRot = (Function) native.GetObjectProperty("getGameplayCamRot");
			return JSObjectToVector3(getGameplayCamRot.Call(native, rotationOrder));
		}

		public double GetGameplayCamFov()
		{
			if (getGameplayCamFov == null) getGameplayCamFov = (Function) native.GetObjectProperty("getGameplayCamFov");
			return (double) getGameplayCamFov.Call(native);
		}

		/// <summary>
		/// some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
		/// </summary>
		public void _0x487A82C650EB7799(double p0)
		{
			if (__0x487A82C650EB7799 == null) __0x487A82C650EB7799 = (Function) native.GetObjectProperty("_0x487A82C650EB7799");
			__0x487A82C650EB7799.Call(native, p0);
		}

		/// <summary>
		/// some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. Possibly a cinematic or script-cam version of _0x487A82C650EB7799
		/// </summary>
		public void _0x0225778816FDC28C(double p0)
		{
			if (__0x0225778816FDC28C == null) __0x0225778816FDC28C = (Function) native.GetObjectProperty("_0x0225778816FDC28C");
			__0x0225778816FDC28C.Call(native, p0);
		}

		public double GetGameplayCamRelativeHeading()
		{
			if (getGameplayCamRelativeHeading == null) getGameplayCamRelativeHeading = (Function) native.GetObjectProperty("getGameplayCamRelativeHeading");
			return (double) getGameplayCamRelativeHeading.Call(native);
		}

		/// <summary>
		/// Sets the camera position relative to heading in float from -360 to +360.
		/// Heading is alwyas 0 in aiming camera.
		/// </summary>
		/// <param name="heading">Heading is alwyas 0 in aiming camera.</param>
		public void SetGameplayCamRelativeHeading(double heading)
		{
			if (setGameplayCamRelativeHeading == null) setGameplayCamRelativeHeading = (Function) native.GetObjectProperty("setGameplayCamRelativeHeading");
			setGameplayCamRelativeHeading.Call(native, heading);
		}

		public double GetGameplayCamRelativePitch()
		{
			if (getGameplayCamRelativePitch == null) getGameplayCamRelativePitch = (Function) native.GetObjectProperty("getGameplayCamRelativePitch");
			return (double) getGameplayCamRelativePitch.Call(native);
		}

		/// <summary>
		/// Sets the camera pitch.
		/// Parameters:
		/// x = pitches the camera on the x axis.
		/// Value2 = always seems to be hex 0x3F800000 (1.000000 float).
		/// </summary>
		/// <param name="x">pitches the camera on the x axis.</param>
		/// <param name="Value2">always seems to be hex 0x3F800000 (1.000000 float).</param>
		public void SetGameplayCamRelativePitch(double x, double Value2)
		{
			if (setGameplayCamRelativePitch == null) setGameplayCamRelativePitch = (Function) native.GetObjectProperty("setGameplayCamRelativePitch");
			setGameplayCamRelativePitch.Call(native, x, Value2);
		}

		public void SetGameplayCamRelativeRotation(object p0, object p1, object p2)
		{
			if (setGameplayCamRelativeRotation == null) setGameplayCamRelativeRotation = (Function) native.GetObjectProperty("setGameplayCamRelativeRotation");
			setGameplayCamRelativeRotation.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// F*
		/// </summary>
		public void _0x28B022A17B068A3A(double p0, double p1)
		{
			if (__0x28B022A17B068A3A == null) __0x28B022A17B068A3A = (Function) native.GetObjectProperty("_0x28B022A17B068A3A");
			__0x28B022A17B068A3A.Call(native, p0, p1);
		}

		/// <summary>
		/// Does nothing
		/// </summary>
		public void SetGameplayCamRawYaw(double yaw, object p1)
		{
			if (setGameplayCamRawYaw == null) setGameplayCamRawYaw = (Function) native.GetObjectProperty("setGameplayCamRawYaw");
			setGameplayCamRawYaw.Call(native, yaw, p1);
		}

		public void SetGameplayCamRawPitch(double pitch)
		{
			if (setGameplayCamRawPitch == null) setGameplayCamRawPitch = (Function) native.GetObjectProperty("setGameplayCamRawPitch");
			setGameplayCamRawPitch.Call(native, pitch);
		}

		public void _0x469F2ECDEC046337(bool p0)
		{
			if (__0x469F2ECDEC046337 == null) __0x469F2ECDEC046337 = (Function) native.GetObjectProperty("_0x469F2ECDEC046337");
			__0x469F2ECDEC046337.Call(native, p0);
		}

		/// <summary>
		/// Possible shake types (updated b617d):
		/// DEATH_FAIL_IN_EFFECT_SHAKE
		/// DRUNK_SHAKE
		/// FAMILY5_DRUG_TRIP_SHAKE
		/// HAND_SHAKE
		/// JOLT_SHAKE
		/// LARGE_EXPLOSION_SHAKE
		/// MEDIUM_EXPLOSION_SHAKE
		/// SMALL_EXPLOSION_SHAKE
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFD55E49555E017CF
		/// </summary>
		public void ShakeGameplayCam(string shakeName, double intensity)
		{
			if (shakeGameplayCam == null) shakeGameplayCam = (Function) native.GetObjectProperty("shakeGameplayCam");
			shakeGameplayCam.Call(native, shakeName, intensity);
		}

		public bool IsGameplayCamShaking()
		{
			if (isGameplayCamShaking == null) isGameplayCamShaking = (Function) native.GetObjectProperty("isGameplayCamShaking");
			return (bool) isGameplayCamShaking.Call(native);
		}

		/// <summary>
		/// Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
		/// </summary>
		public void SetGameplayCamShakeAmplitude(double amplitude)
		{
			if (setGameplayCamShakeAmplitude == null) setGameplayCamShakeAmplitude = (Function) native.GetObjectProperty("setGameplayCamShakeAmplitude");
			setGameplayCamShakeAmplitude.Call(native, amplitude);
		}

		public void StopGameplayCamShaking(bool p0)
		{
			if (stopGameplayCamShaking == null) stopGameplayCamShaking = (Function) native.GetObjectProperty("stopGameplayCamShaking");
			stopGameplayCamShaking.Call(native, p0);
		}

		public void _0x8BBACBF51DA047A8(object p0)
		{
			if (__0x8BBACBF51DA047A8 == null) __0x8BBACBF51DA047A8 = (Function) native.GetObjectProperty("_0x8BBACBF51DA047A8");
			__0x8BBACBF51DA047A8.Call(native, p0);
		}

		/// <summary>
		/// Examples when this function will return 0 are:
		/// - During busted screen.
		/// - When player is coming out from a hospital.
		/// - When player is coming out from a police station.
		/// - When player is buying gun from AmmuNation.
		/// </summary>
		public bool IsGameplayCamRendering()
		{
			if (isGameplayCamRendering == null) isGameplayCamRendering = (Function) native.GetObjectProperty("isGameplayCamRendering");
			return (bool) isGameplayCamRendering.Call(native);
		}

		public bool _0x3044240D2E0FA842()
		{
			if (__0x3044240D2E0FA842 == null) __0x3044240D2E0FA842 = (Function) native.GetObjectProperty("_0x3044240D2E0FA842");
			return (bool) __0x3044240D2E0FA842.Call(native);
		}

		public bool _0x705A276EBFF3133D()
		{
			if (__0x705A276EBFF3133D == null) __0x705A276EBFF3133D = (Function) native.GetObjectProperty("_0x705A276EBFF3133D");
			return (bool) __0x705A276EBFF3133D.Call(native);
		}

		public void _0xDB90C6CCA48940F1(bool p0)
		{
			if (__0xDB90C6CCA48940F1 == null) __0xDB90C6CCA48940F1 = (Function) native.GetObjectProperty("_0xDB90C6CCA48940F1");
			__0xDB90C6CCA48940F1.Call(native, p0);
		}

		/// <summary>
		/// Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
		/// DISABLE_*
		/// </summary>
		public void EnableCrosshairThisFrame()
		{
			if (enableCrosshairThisFrame == null) enableCrosshairThisFrame = (Function) native.GetObjectProperty("enableCrosshairThisFrame");
			enableCrosshairThisFrame.Call(native);
		}

		public bool IsGameplayCamLookingBehind()
		{
			if (isGameplayCamLookingBehind == null) isGameplayCamLookingBehind = (Function) native.GetObjectProperty("isGameplayCamLookingBehind");
			return (bool) isGameplayCamLookingBehind.Call(native);
		}

		public void _0x2AED6301F67007D5(int entity)
		{
			if (__0x2AED6301F67007D5 == null) __0x2AED6301F67007D5 = (Function) native.GetObjectProperty("_0x2AED6301F67007D5");
			__0x2AED6301F67007D5.Call(native, entity);
		}

		public void _0x49482F9FCD825AAA(int entity)
		{
			if (__0x49482F9FCD825AAA == null) __0x49482F9FCD825AAA = (Function) native.GetObjectProperty("_0x49482F9FCD825AAA");
			__0x49482F9FCD825AAA.Call(native, entity);
		}

		public void _0xFD3151CD37EA2245(int entity)
		{
			if (__0xFD3151CD37EA2245 == null) __0xFD3151CD37EA2245 = (Function) native.GetObjectProperty("_0xFD3151CD37EA2245");
			__0xFD3151CD37EA2245.Call(native, entity);
		}

		public void _0xB1381B97F70C7B30()
		{
			if (__0xB1381B97F70C7B30 == null) __0xB1381B97F70C7B30 = (Function) native.GetObjectProperty("_0xB1381B97F70C7B30");
			__0xB1381B97F70C7B30.Call(native);
		}

		public void _0xDD79DF9F4D26E1C9()
		{
			if (__0xDD79DF9F4D26E1C9 == null) __0xDD79DF9F4D26E1C9 = (Function) native.GetObjectProperty("_0xDD79DF9F4D26E1C9");
			__0xDD79DF9F4D26E1C9.Call(native);
		}

		public bool IsSphereVisible(double x, double y, double z, double radius)
		{
			if (isSphereVisible == null) isSphereVisible = (Function) native.GetObjectProperty("isSphereVisible");
			return (bool) isSphereVisible.Call(native, x, y, z, radius);
		}

		public bool IsFollowPedCamActive()
		{
			if (isFollowPedCamActive == null) isFollowPedCamActive = (Function) native.GetObjectProperty("isFollowPedCamActive");
			return (bool) isFollowPedCamActive.Call(native);
		}

		/// <summary>
		/// From the scripts:
		/// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
		/// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
		/// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
		/// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
		/// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
		/// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
		/// </summary>
		public bool SetFollowPedCamThisUpdate(string camName, int p1)
		{
			if (setFollowPedCamThisUpdate == null) setFollowPedCamThisUpdate = (Function) native.GetObjectProperty("setFollowPedCamThisUpdate");
			return (bool) setFollowPedCamThisUpdate.Call(native, camName, p1);
		}

		public void _0x271401846BD26E92(bool p0, bool p1)
		{
			if (__0x271401846BD26E92 == null) __0x271401846BD26E92 = (Function) native.GetObjectProperty("_0x271401846BD26E92");
			__0x271401846BD26E92.Call(native, p0, p1);
		}

		public void _0xC8391C309684595A()
		{
			if (__0xC8391C309684595A == null) __0xC8391C309684595A = (Function) native.GetObjectProperty("_0xC8391C309684595A");
			__0xC8391C309684595A.Call(native);
		}

		/// <summary>
		/// minimum: Degrees between -180f and 180f.
		/// maximum: Degrees between -180f and 180f.
		/// Clamps the gameplay camera's current yaw.
		/// Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
		/// </summary>
		/// <param name="minimum">Degrees between -180f and 180f.</param>
		/// <param name="maximum">Degrees between -180f and 180f.</param>
		public void ClampGameplayCamYaw(double minimum, double maximum)
		{
			if (clampGameplayCamYaw == null) clampGameplayCamYaw = (Function) native.GetObjectProperty("clampGameplayCamYaw");
			clampGameplayCamYaw.Call(native, minimum, maximum);
		}

		/// <summary>
		/// minimum: Degrees between -90f and 90f.
		/// maximum: Degrees between -90f and 90f.
		/// Clamps the gameplay camera's current pitch.
		/// Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
		/// </summary>
		/// <param name="minimum">Degrees between -90f and 90f.</param>
		/// <param name="maximum">Degrees between -90f and 90f.</param>
		public void ClampGameplayCamPitch(double minimum, double maximum)
		{
			if (clampGameplayCamPitch == null) clampGameplayCamPitch = (Function) native.GetObjectProperty("clampGameplayCamPitch");
			clampGameplayCamPitch.Call(native, minimum, maximum);
		}

		/// <summary>
		/// Seems to animate the gameplay camera zoom.
		/// Eg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f);
		/// will animate the camera zooming in from 1000 meters away.
		/// Game scripts use it like this:
		/// // Setting this to 1 prevents V key from changing zoom
		/// PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);
		/// // These restrict how far you can move cam up/down left/right
		/// CAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f);
		/// CAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);
		/// CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);
		/// </summary>
		public void AnimateGameplayCamZoom(double p0, double distance)
		{
			if (animateGameplayCamZoom == null) animateGameplayCamZoom = (Function) native.GetObjectProperty("animateGameplayCamZoom");
			animateGameplayCamZoom.Call(native, p0, distance);
		}

		public void _0xE9EA16D6E54CDCA4(int p0, int p1)
		{
			if (__0xE9EA16D6E54CDCA4 == null) __0xE9EA16D6E54CDCA4 = (Function) native.GetObjectProperty("_0xE9EA16D6E54CDCA4");
			__0xE9EA16D6E54CDCA4.Call(native, p0, p1);
		}

		/// <summary>
		/// Disables first person camera for the current frame.
		/// Found in decompiled scripts:
		/// GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
		/// CAM::_DE2EF5DA284CC8DF();
		/// </summary>
		public void DisableFirstPersonCamThisFrame()
		{
			if (disableFirstPersonCamThisFrame == null) disableFirstPersonCamThisFrame = (Function) native.GetObjectProperty("disableFirstPersonCamThisFrame");
			disableFirstPersonCamThisFrame.Call(native);
		}

		public void _0x59424BD75174C9B1()
		{
			if (__0x59424BD75174C9B1 == null) __0x59424BD75174C9B1 = (Function) native.GetObjectProperty("_0x59424BD75174C9B1");
			__0x59424BD75174C9B1.Call(native);
		}

		/// <summary>
		/// B*
		/// </summary>
		public void _0x9F97DA93681F87EA()
		{
			if (__0x9F97DA93681F87EA == null) __0x9F97DA93681F87EA = (Function) native.GetObjectProperty("_0x9F97DA93681F87EA");
			__0x9F97DA93681F87EA.Call(native);
		}

		public int GetFollowPedCamZoomLevel()
		{
			if (getFollowPedCamZoomLevel == null) getFollowPedCamZoomLevel = (Function) native.GetObjectProperty("getFollowPedCamZoomLevel");
			return (int) getFollowPedCamZoomLevel.Call(native);
		}

		/// <summary>
		/// 0 - Third Person Close
		/// 1 - Third Person Mid
		/// 2 - Third Person Far
		/// 4 - First Person
		/// </summary>
		/// <returns>Returns</returns>
		public int GetFollowPedCamViewMode()
		{
			if (getFollowPedCamViewMode == null) getFollowPedCamViewMode = (Function) native.GetObjectProperty("getFollowPedCamViewMode");
			return (int) getFollowPedCamViewMode.Call(native);
		}

		/// <summary>
		/// Sets the type of Player camera:
		/// 0 - Third Person Close
		/// 1 - Third Person Mid
		/// 2 - Third Person Far
		/// 4 - First Person
		/// </summary>
		public void SetFollowPedCamViewMode(int viewMode)
		{
			if (setFollowPedCamViewMode == null) setFollowPedCamViewMode = (Function) native.GetObjectProperty("setFollowPedCamViewMode");
			setFollowPedCamViewMode.Call(native, viewMode);
		}

		public bool IsFollowVehicleCamActive()
		{
			if (isFollowVehicleCamActive == null) isFollowVehicleCamActive = (Function) native.GetObjectProperty("isFollowVehicleCamActive");
			return (bool) isFollowVehicleCamActive.Call(native);
		}

		public void _0x91EF6EE6419E5B97(bool p0)
		{
			if (__0x91EF6EE6419E5B97 == null) __0x91EF6EE6419E5B97 = (Function) native.GetObjectProperty("_0x91EF6EE6419E5B97");
			__0x91EF6EE6419E5B97.Call(native, p0);
		}

		/// <summary>
		/// SET_FOLLOW_*
		/// </summary>
		public void _0x9DFE13ECDC1EC196(bool p0, bool p1)
		{
			if (__0x9DFE13ECDC1EC196 == null) __0x9DFE13ECDC1EC196 = (Function) native.GetObjectProperty("_0x9DFE13ECDC1EC196");
			__0x9DFE13ECDC1EC196.Call(native, p0, p1);
		}

		public bool _0x79C0E43EB9B944E2(int hash)
		{
			if (__0x79C0E43EB9B944E2 == null) __0x79C0E43EB9B944E2 = (Function) native.GetObjectProperty("_0x79C0E43EB9B944E2");
			return (bool) __0x79C0E43EB9B944E2.Call(native, hash);
		}

		public int GetFollowVehicleCamZoomLevel()
		{
			if (getFollowVehicleCamZoomLevel == null) getFollowVehicleCamZoomLevel = (Function) native.GetObjectProperty("getFollowVehicleCamZoomLevel");
			return (int) getFollowVehicleCamZoomLevel.Call(native);
		}

		public void SetFollowVehicleCamZoomLevel(int zoomLevel)
		{
			if (setFollowVehicleCamZoomLevel == null) setFollowVehicleCamZoomLevel = (Function) native.GetObjectProperty("setFollowVehicleCamZoomLevel");
			setFollowVehicleCamZoomLevel.Call(native, zoomLevel);
		}

		/// <summary>
		/// 0 - Third Person Close
		/// 1 - Third Person Mid
		/// 2 - Third Person Far
		/// 4 - First Person
		/// </summary>
		/// <returns>Returns the type of camera:</returns>
		public int GetFollowVehicleCamViewMode()
		{
			if (getFollowVehicleCamViewMode == null) getFollowVehicleCamViewMode = (Function) native.GetObjectProperty("getFollowVehicleCamViewMode");
			return (int) getFollowVehicleCamViewMode.Call(native);
		}

		/// <summary>
		/// Sets the type of Player camera in vehicles:
		/// 0 - Third Person Close
		/// 1 - Third Person Mid
		/// 2 - Third Person Far
		/// 4 - First Person
		/// </summary>
		public void SetFollowVehicleCamViewMode(int viewMode)
		{
			if (setFollowVehicleCamViewMode == null) setFollowVehicleCamViewMode = (Function) native.GetObjectProperty("setFollowVehicleCamViewMode");
			setFollowVehicleCamViewMode.Call(native, viewMode);
		}

		/// <summary>
		/// interprets the result of CAM::_0x19CAFA3C87F7C2FF()
		/// example: // checks if you're currently in first person
		/// if ((CAM::_EE778F8C7E1142E2(CAM::_19CAFA3C87F7C2FF()) == 4) && (!__463_$28ED382849B17AFC())) {
		/// UI::_FDEC055AB549E328();
		/// UI::_SET_NOTIFICATION_TEXT_ENTRY("REC_FEED_WAR");
		/// l_CE[01] = UI::_DRAW_NOTIFICATION(0, 1);
		/// }
		/// </summary>
		public object _0xEE778F8C7E1142E2(object p0)
		{
			if (__0xEE778F8C7E1142E2 == null) __0xEE778F8C7E1142E2 = (Function) native.GetObjectProperty("_0xEE778F8C7E1142E2");
			return __0xEE778F8C7E1142E2.Call(native, p0);
		}

		public void _0x2A2173E46DAECD12(object p0, object p1)
		{
			if (__0x2A2173E46DAECD12 == null) __0x2A2173E46DAECD12 = (Function) native.GetObjectProperty("_0x2A2173E46DAECD12");
			__0x2A2173E46DAECD12.Call(native, p0, p1);
		}

		/// <summary>
		/// Seems to return the current type of view
		/// example: // checks if you're currently in first person
		/// if ((CAM::_EE778F8C7E1142E2(CAM::_19CAFA3C87F7C2FF()) == 4) && (!__463_$28ED382849B17AFC())) {
		/// UI::_FDEC055AB549E328();
		/// UI::_SET_NOTIFICATION_TEXT_ENTRY("REC_FEED_WAR");
		/// l_CE[01] = UI::_DRAW_NOTIFICATION(0, 1);
		/// }
		/// </summary>
		public object _0x19CAFA3C87F7C2FF()
		{
			if (__0x19CAFA3C87F7C2FF == null) __0x19CAFA3C87F7C2FF = (Function) native.GetObjectProperty("_0x19CAFA3C87F7C2FF");
			return __0x19CAFA3C87F7C2FF.Call(native);
		}

		public void UseStuntCameraThisFrame()
		{
			if (useStuntCameraThisFrame == null) useStuntCameraThisFrame = (Function) native.GetObjectProperty("useStuntCameraThisFrame");
			useStuntCameraThisFrame.Call(native);
		}

		public void _0x425A920FDB9A0DDA(string camName)
		{
			if (__0x425A920FDB9A0DDA == null) __0x425A920FDB9A0DDA = (Function) native.GetObjectProperty("_0x425A920FDB9A0DDA");
			__0x425A920FDB9A0DDA.Call(native, camName);
		}

		public void _0x0AA27680A0BD43FA()
		{
			if (__0x0AA27680A0BD43FA == null) __0x0AA27680A0BD43FA = (Function) native.GetObjectProperty("_0x0AA27680A0BD43FA");
			__0x0AA27680A0BD43FA.Call(native);
		}

		public void _0x5C90CAB09951A12F(object p0)
		{
			if (__0x5C90CAB09951A12F == null) __0x5C90CAB09951A12F = (Function) native.GetObjectProperty("_0x5C90CAB09951A12F");
			__0x5C90CAB09951A12F.Call(native, p0);
		}

		public bool IsAimCamActive()
		{
			if (isAimCamActive == null) isAimCamActive = (Function) native.GetObjectProperty("isAimCamActive");
			return (bool) isAimCamActive.Call(native);
		}

		/// <summary>
		/// IS_A*
		/// </summary>
		public bool IsAimCamThirdPersonActive()
		{
			if (isAimCamThirdPersonActive == null) isAimCamThirdPersonActive = (Function) native.GetObjectProperty("isAimCamThirdPersonActive");
			return (bool) isAimCamThirdPersonActive.Call(native);
		}

		public bool IsFirstPersonAimCamActive()
		{
			if (isFirstPersonAimCamActive == null) isFirstPersonAimCamActive = (Function) native.GetObjectProperty("isFirstPersonAimCamActive");
			return (bool) isFirstPersonAimCamActive.Call(native);
		}

		public void DisableAimCamThisUpdate()
		{
			if (disableAimCamThisUpdate == null) disableAimCamThisUpdate = (Function) native.GetObjectProperty("disableAimCamThisUpdate");
			disableAimCamThisUpdate.Call(native);
		}

		public double GetFirstPersonAimCamZoomFactor()
		{
			if (getFirstPersonAimCamZoomFactor == null) getFirstPersonAimCamZoomFactor = (Function) native.GetObjectProperty("getFirstPersonAimCamZoomFactor");
			return (double) getFirstPersonAimCamZoomFactor.Call(native);
		}

		public void SetFirstPersonAimCamZoomFactor(double p0)
		{
			if (setFirstPersonAimCamZoomFactor == null) setFirstPersonAimCamZoomFactor = (Function) native.GetObjectProperty("setFirstPersonAimCamZoomFactor");
			setFirstPersonAimCamZoomFactor.Call(native, p0);
		}

		public void _0xCED08CBE8EBB97C7(double p0, double p1)
		{
			if (__0xCED08CBE8EBB97C7 == null) __0xCED08CBE8EBB97C7 = (Function) native.GetObjectProperty("_0xCED08CBE8EBB97C7");
			__0xCED08CBE8EBB97C7.Call(native, p0, p1);
		}

		public void _0x2F7F2B26DD3F18EE(double p0, double p1)
		{
			if (__0x2F7F2B26DD3F18EE == null) __0x2F7F2B26DD3F18EE = (Function) native.GetObjectProperty("_0x2F7F2B26DD3F18EE");
			__0x2F7F2B26DD3F18EE.Call(native, p0, p1);
		}

		public void SetFirstPersonCamPitchRange(double p0, double p1)
		{
			if (setFirstPersonCamPitchRange == null) setFirstPersonCamPitchRange = (Function) native.GetObjectProperty("setFirstPersonCamPitchRange");
			setFirstPersonCamPitchRange.Call(native, p0, p1);
		}

		public void SetFirstPersonCamNearClip(double p0)
		{
			if (setFirstPersonCamNearClip == null) setFirstPersonCamNearClip = (Function) native.GetObjectProperty("setFirstPersonCamNearClip");
			setFirstPersonCamNearClip.Call(native, p0);
		}

		public void SetThirdPersonAimCamNearClip(double p0)
		{
			if (setThirdPersonAimCamNearClip == null) setThirdPersonAimCamNearClip = (Function) native.GetObjectProperty("setThirdPersonAimCamNearClip");
			setThirdPersonAimCamNearClip.Call(native, p0);
		}

		public void _0x4008EDF7D6E48175(bool p0)
		{
			if (__0x4008EDF7D6E48175 == null) __0x4008EDF7D6E48175 = (Function) native.GetObjectProperty("_0x4008EDF7D6E48175");
			__0x4008EDF7D6E48175.Call(native, p0);
		}

		public void _0x380B4968D1E09E55()
		{
			if (__0x380B4968D1E09E55 == null) __0x380B4968D1E09E55 = (Function) native.GetObjectProperty("_0x380B4968D1E09E55");
			__0x380B4968D1E09E55.Call(native);
		}

		public Vector3 GetFinalRenderedCamCoord()
		{
			if (getFinalRenderedCamCoord == null) getFinalRenderedCamCoord = (Function) native.GetObjectProperty("getFinalRenderedCamCoord");
			return JSObjectToVector3(getFinalRenderedCamCoord.Call(native));
		}

		/// <summary>
		/// p0 seems to consistently be 2 across scripts
		/// Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS
		/// </summary>
		public Vector3 GetFinalRenderedCamRot(int rotationOrder)
		{
			if (getFinalRenderedCamRot == null) getFinalRenderedCamRot = (Function) native.GetObjectProperty("getFinalRenderedCamRot");
			return JSObjectToVector3(getFinalRenderedCamRot.Call(native, rotationOrder));
		}

		public Vector3 GetFinalRenderedInWhenFriendlyRot(object p0, object p1)
		{
			if (getFinalRenderedInWhenFriendlyRot == null) getFinalRenderedInWhenFriendlyRot = (Function) native.GetObjectProperty("getFinalRenderedInWhenFriendlyRot");
			return JSObjectToVector3(getFinalRenderedInWhenFriendlyRot.Call(native, p0, p1));
		}

		/// <summary>
		/// gets some camera fov
		/// </summary>
		public double GetFinalRenderedCamFov()
		{
			if (getFinalRenderedCamFov == null) getFinalRenderedCamFov = (Function) native.GetObjectProperty("getFinalRenderedCamFov");
			return (double) getFinalRenderedCamFov.Call(native);
		}

		public double GetFinalRenderedInWhenFriendlyFov(object p0)
		{
			if (getFinalRenderedInWhenFriendlyFov == null) getFinalRenderedInWhenFriendlyFov = (Function) native.GetObjectProperty("getFinalRenderedInWhenFriendlyFov");
			return (double) getFinalRenderedInWhenFriendlyFov.Call(native, p0);
		}

		public double GetFinalRenderedCamNearClip()
		{
			if (getFinalRenderedCamNearClip == null) getFinalRenderedCamNearClip = (Function) native.GetObjectProperty("getFinalRenderedCamNearClip");
			return (double) getFinalRenderedCamNearClip.Call(native);
		}

		public double GetFinalRenderedCamFarClip()
		{
			if (getFinalRenderedCamFarClip == null) getFinalRenderedCamFarClip = (Function) native.GetObjectProperty("getFinalRenderedCamFarClip");
			return (double) getFinalRenderedCamFarClip.Call(native);
		}

		public double GetFinalRenderedCamNearDof()
		{
			if (getFinalRenderedCamNearDof == null) getFinalRenderedCamNearDof = (Function) native.GetObjectProperty("getFinalRenderedCamNearDof");
			return (double) getFinalRenderedCamNearDof.Call(native);
		}

		public double GetFinalRenderedCamFarDof()
		{
			if (getFinalRenderedCamFarDof == null) getFinalRenderedCamFarDof = (Function) native.GetObjectProperty("getFinalRenderedCamFarDof");
			return (double) getFinalRenderedCamFarDof.Call(native);
		}

		public double GetFinalRenderedCamMotionBlurStrength()
		{
			if (getFinalRenderedCamMotionBlurStrength == null) getFinalRenderedCamMotionBlurStrength = (Function) native.GetObjectProperty("getFinalRenderedCamMotionBlurStrength");
			return (double) getFinalRenderedCamMotionBlurStrength.Call(native);
		}

		public void SetGameplayCoordHint(double x, double y, double z, int duration, int blendOutDuration, int blendInDuration, int unk)
		{
			if (setGameplayCoordHint == null) setGameplayCoordHint = (Function) native.GetObjectProperty("setGameplayCoordHint");
			setGameplayCoordHint.Call(native, x, y, z, duration, blendOutDuration, blendInDuration, unk);
		}

		public void SetGameplayPedHint(int p0, double x1, double y1, double z1, bool p4, object p5, object p6, object p7)
		{
			if (setGameplayPedHint == null) setGameplayPedHint = (Function) native.GetObjectProperty("setGameplayPedHint");
			setGameplayPedHint.Call(native, p0, x1, y1, z1, p4, p5, p6, p7);
		}

		public void SetGameplayVehicleHint(object p0, double p1, double p2, double p3, bool p4, object p5, object p6, object p7)
		{
			if (setGameplayVehicleHint == null) setGameplayVehicleHint = (Function) native.GetObjectProperty("setGameplayVehicleHint");
			setGameplayVehicleHint.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public void SetGameplayObjectHint(object p0, double p1, double p2, double p3, bool p4, object p5, object p6, object p7)
		{
			if (setGameplayObjectHint == null) setGameplayObjectHint = (Function) native.GetObjectProperty("setGameplayObjectHint");
			setGameplayObjectHint.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// p6 & p7 - possibly length or time
		/// </summary>
		/// <param name="p6">& p7 - possibly length or time</param>
		/// <param name="p7">p6 & possibly length or time</param>
		public void SetGameplayEntityHint(int entity, double xOffset, double yOffset, double zOffset, bool p4, int p5, int p6, int p7, object p8)
		{
			if (setGameplayEntityHint == null) setGameplayEntityHint = (Function) native.GetObjectProperty("setGameplayEntityHint");
			setGameplayEntityHint.Call(native, entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8);
		}

		public bool IsGameplayHintActive()
		{
			if (isGameplayHintActive == null) isGameplayHintActive = (Function) native.GetObjectProperty("isGameplayHintActive");
			return (bool) isGameplayHintActive.Call(native);
		}

		public void StopGameplayHint(bool p0)
		{
			if (stopGameplayHint == null) stopGameplayHint = (Function) native.GetObjectProperty("stopGameplayHint");
			stopGameplayHint.Call(native, p0);
		}

		public void _0xCCD078C2665D2973(bool p0)
		{
			if (__0xCCD078C2665D2973 == null) __0xCCD078C2665D2973 = (Function) native.GetObjectProperty("_0xCCD078C2665D2973");
			__0xCCD078C2665D2973.Call(native, p0);
		}

		public void _0x247ACBC4ABBC9D1C(bool p0)
		{
			if (__0x247ACBC4ABBC9D1C == null) __0x247ACBC4ABBC9D1C = (Function) native.GetObjectProperty("_0x247ACBC4ABBC9D1C");
			__0x247ACBC4ABBC9D1C.Call(native, p0);
		}

		public object _0xBF72910D0F26F025()
		{
			if (__0xBF72910D0F26F025 == null) __0xBF72910D0F26F025 = (Function) native.GetObjectProperty("_0xBF72910D0F26F025");
			return __0xBF72910D0F26F025.Call(native);
		}

		public void SetGameplayHintFov(double FOV)
		{
			if (setGameplayHintFov == null) setGameplayHintFov = (Function) native.GetObjectProperty("setGameplayHintFov");
			setGameplayHintFov.Call(native, FOV);
		}

		public void SetGameplayHintAnimOffsetz(double p0)
		{
			if (setGameplayHintAnimOffsetz == null) setGameplayHintAnimOffsetz = (Function) native.GetObjectProperty("setGameplayHintAnimOffsetz");
			setGameplayHintAnimOffsetz.Call(native, p0);
		}

		public void SetGameplayHintAngle(double p0)
		{
			if (setGameplayHintAngle == null) setGameplayHintAngle = (Function) native.GetObjectProperty("setGameplayHintAngle");
			setGameplayHintAngle.Call(native, p0);
		}

		public void SetGameplayHintAnimOffsetx(double p0)
		{
			if (setGameplayHintAnimOffsetx == null) setGameplayHintAnimOffsetx = (Function) native.GetObjectProperty("setGameplayHintAnimOffsetx");
			setGameplayHintAnimOffsetx.Call(native, p0);
		}

		public void SetGameplayHintAnimOffsety(double p0)
		{
			if (setGameplayHintAnimOffsety == null) setGameplayHintAnimOffsety = (Function) native.GetObjectProperty("setGameplayHintAnimOffsety");
			setGameplayHintAnimOffsety.Call(native, p0);
		}

		/// <summary>
		/// SET_GAMEPLAY_*
		/// </summary>
		public void SetGameplayHintAnimCloseup(bool p0)
		{
			if (setGameplayHintAnimCloseup == null) setGameplayHintAnimCloseup = (Function) native.GetObjectProperty("setGameplayHintAnimCloseup");
			setGameplayHintAnimCloseup.Call(native, p0);
		}

		public void SetCinematicButtonActive(bool p0)
		{
			if (setCinematicButtonActive == null) setCinematicButtonActive = (Function) native.GetObjectProperty("setCinematicButtonActive");
			setCinematicButtonActive.Call(native, p0);
		}

		public bool IsCinematicCamRendering()
		{
			if (isCinematicCamRendering == null) isCinematicCamRendering = (Function) native.GetObjectProperty("isCinematicCamRendering");
			return (bool) isCinematicCamRendering.Call(native);
		}

		/// <summary>
		/// p0 argument found in the b617d scripts: "DRUNK_SHAKE"
		/// </summary>
		/// <param name="p0">argument found in the b617d scripts: "DRUNK_SHAKE" </param>
		public void ShakeCinematicCam(string p0, double p1)
		{
			if (shakeCinematicCam == null) shakeCinematicCam = (Function) native.GetObjectProperty("shakeCinematicCam");
			shakeCinematicCam.Call(native, p0, p1);
		}

		public bool IsCinematicCamShaking()
		{
			if (isCinematicCamShaking == null) isCinematicCamShaking = (Function) native.GetObjectProperty("isCinematicCamShaking");
			return (bool) isCinematicCamShaking.Call(native);
		}

		public void SetCinematicCamShakeAmplitude(double p0)
		{
			if (setCinematicCamShakeAmplitude == null) setCinematicCamShakeAmplitude = (Function) native.GetObjectProperty("setCinematicCamShakeAmplitude");
			setCinematicCamShakeAmplitude.Call(native, p0);
		}

		public void StopCinematicCamShaking(bool p0)
		{
			if (stopCinematicCamShaking == null) stopCinematicCamShaking = (Function) native.GetObjectProperty("stopCinematicCamShaking");
			stopCinematicCamShaking.Call(native, p0);
		}

		public void DisableVehicleFirstPersonCamThisFrame()
		{
			if (disableVehicleFirstPersonCamThisFrame == null) disableVehicleFirstPersonCamThisFrame = (Function) native.GetObjectProperty("disableVehicleFirstPersonCamThisFrame");
			disableVehicleFirstPersonCamThisFrame.Call(native);
		}

		public void _0x62ECFCFDEE7885D6()
		{
			if (__0x62ECFCFDEE7885D6 == null) __0x62ECFCFDEE7885D6 = (Function) native.GetObjectProperty("_0x62ECFCFDEE7885D6");
			__0x62ECFCFDEE7885D6.Call(native);
		}

		public void _0x9E4CFFF989258472()
		{
			if (__0x9E4CFFF989258472 == null) __0x9E4CFFF989258472 = (Function) native.GetObjectProperty("_0x9E4CFFF989258472");
			__0x9E4CFFF989258472.Call(native);
		}

		public void InvalidateIdleCam()
		{
			if (invalidateIdleCam == null) invalidateIdleCam = (Function) native.GetObjectProperty("invalidateIdleCam");
			invalidateIdleCam.Call(native);
		}

		public bool _0xCA9D2AA3E326D720()
		{
			if (__0xCA9D2AA3E326D720 == null) __0xCA9D2AA3E326D720 = (Function) native.GetObjectProperty("_0xCA9D2AA3E326D720");
			return (bool) __0xCA9D2AA3E326D720.Call(native);
		}

		public bool IsInVehicleCamDisabled()
		{
			if (isInVehicleCamDisabled == null) isInVehicleCamDisabled = (Function) native.GetObjectProperty("isInVehicleCamDisabled");
			return (bool) isInVehicleCamDisabled.Call(native);
		}

		public void CreateCinematicShot(object p0, int p1, object p2, int entity)
		{
			if (createCinematicShot == null) createCinematicShot = (Function) native.GetObjectProperty("createCinematicShot");
			createCinematicShot.Call(native, p0, p1, p2, entity);
		}

		public bool IsCinematicShotActive(object p0)
		{
			if (isCinematicShotActive == null) isCinematicShotActive = (Function) native.GetObjectProperty("isCinematicShotActive");
			return (bool) isCinematicShotActive.Call(native, p0);
		}

		public void StopCinematicShot(object p0)
		{
			if (stopCinematicShot == null) stopCinematicShot = (Function) native.GetObjectProperty("stopCinematicShot");
			stopCinematicShot.Call(native, p0);
		}

		public void _0xA41BCD7213805AAC(bool p0)
		{
			if (__0xA41BCD7213805AAC == null) __0xA41BCD7213805AAC = (Function) native.GetObjectProperty("_0xA41BCD7213805AAC");
			__0xA41BCD7213805AAC.Call(native, p0);
		}

		public void _0xDC9DA9E8789F5246()
		{
			if (__0xDC9DA9E8789F5246 == null) __0xDC9DA9E8789F5246 = (Function) native.GetObjectProperty("_0xDC9DA9E8789F5246");
			__0xDC9DA9E8789F5246.Call(native);
		}

		/// <summary>
		/// p0 = 0/1 or true/false
		/// It doesn't seems to work
		/// </summary>
		/// <param name="p0">0/1 or true/false</param>
		public void SetCinematicModeActive(bool p0)
		{
			if (setCinematicModeActive == null) setCinematicModeActive = (Function) native.GetObjectProperty("setCinematicModeActive");
			setCinematicModeActive.Call(native, p0);
		}

		public object _0x1F2300CB7FA7B7F6()
		{
			if (__0x1F2300CB7FA7B7F6 == null) __0x1F2300CB7FA7B7F6 = (Function) native.GetObjectProperty("_0x1F2300CB7FA7B7F6");
			return __0x1F2300CB7FA7B7F6.Call(native);
		}

		public object _0x17FCA7199A530203()
		{
			if (__0x17FCA7199A530203 == null) __0x17FCA7199A530203 = (Function) native.GetObjectProperty("_0x17FCA7199A530203");
			return __0x17FCA7199A530203.Call(native);
		}

		public object _0xD7360051C885628B()
		{
			if (__0xD7360051C885628B == null) __0xD7360051C885628B = (Function) native.GetObjectProperty("_0xD7360051C885628B");
			return __0xD7360051C885628B.Call(native);
		}

		public bool _0xF5F1E89A970B7796()
		{
			if (__0xF5F1E89A970B7796 == null) __0xF5F1E89A970B7796 = (Function) native.GetObjectProperty("_0xF5F1E89A970B7796");
			return (bool) __0xF5F1E89A970B7796.Call(native);
		}

		public void _0x7B8A361C1813FBEF()
		{
			if (__0x7B8A361C1813FBEF == null) __0x7B8A361C1813FBEF = (Function) native.GetObjectProperty("_0x7B8A361C1813FBEF");
			__0x7B8A361C1813FBEF.Call(native);
		}

		public void StopCutsceneCamShaking()
		{
			if (stopCutsceneCamShaking == null) stopCutsceneCamShaking = (Function) native.GetObjectProperty("stopCutsceneCamShaking");
			stopCutsceneCamShaking.Call(native);
		}

		public void _0x324C5AA411DA7737(object p0)
		{
			if (__0x324C5AA411DA7737 == null) __0x324C5AA411DA7737 = (Function) native.GetObjectProperty("_0x324C5AA411DA7737");
			__0x324C5AA411DA7737.Call(native, p0);
		}

		/// <summary>
		/// Hardcoded to only work in multiplayer.
		/// </summary>
		public void _0x12DED8CA53D47EA5(double p0)
		{
			if (__0x12DED8CA53D47EA5 == null) __0x12DED8CA53D47EA5 = (Function) native.GetObjectProperty("_0x12DED8CA53D47EA5");
			__0x12DED8CA53D47EA5.Call(native, p0);
		}

		public int GetFocusPedOnScreen(double p0, int p1, double p2, double p3, double p4, double p5, double p6, int p7, int p8)
		{
			if (getFocusPedOnScreen == null) getFocusPedOnScreen = (Function) native.GetObjectProperty("getFocusPedOnScreen");
			return (int) getFocusPedOnScreen.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		public void _0x5A43C76F7FC7BA5F()
		{
			if (__0x5A43C76F7FC7BA5F == null) __0x5A43C76F7FC7BA5F = (Function) native.GetObjectProperty("_0x5A43C76F7FC7BA5F");
			__0x5A43C76F7FC7BA5F.Call(native);
		}

		/// <summary>
		/// if p0 is 0, effect is cancelled
		/// if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
		/// if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
		/// </summary>
		public void SetCamEffect(int p0)
		{
			if (setCamEffect == null) setCamEffect = (Function) native.GetObjectProperty("setCamEffect");
			setCamEffect.Call(native, p0);
		}

		public void _0x5C41E6BABC9E2112(object p0)
		{
			if (__0x5C41E6BABC9E2112 == null) __0x5C41E6BABC9E2112 = (Function) native.GetObjectProperty("_0x5C41E6BABC9E2112");
			__0x5C41E6BABC9E2112.Call(native, p0);
		}

		/// <summary>
		/// From b617 scripts:
		/// CAM::_21E253A7F8DA5DFB("DINGHY");
		/// CAM::_21E253A7F8DA5DFB("ISSI2");
		/// CAM::_21E253A7F8DA5DFB("SPEEDO");
		/// </summary>
		public void SetGameplayCamVehicleCamera(string vehicleName)
		{
			if (setGameplayCamVehicleCamera == null) setGameplayCamVehicleCamera = (Function) native.GetObjectProperty("setGameplayCamVehicleCamera");
			setGameplayCamVehicleCamera.Call(native, vehicleName);
		}

		public void SetGameplayCamVehicleCameraName(object p0)
		{
			if (setGameplayCamVehicleCameraName == null) setGameplayCamVehicleCameraName = (Function) native.GetObjectProperty("setGameplayCamVehicleCameraName");
			setGameplayCamVehicleCameraName.Call(native, p0);
		}

		public object _0xEAF0FA793D05C592()
		{
			if (__0xEAF0FA793D05C592 == null) __0xEAF0FA793D05C592 = (Function) native.GetObjectProperty("_0xEAF0FA793D05C592");
			return __0xEAF0FA793D05C592.Call(native);
		}

		public void _0x62374889A4D59F72()
		{
			if (__0x62374889A4D59F72 == null) __0x62374889A4D59F72 = (Function) native.GetObjectProperty("_0x62374889A4D59F72");
			__0x62374889A4D59F72.Call(native);
		}

		public double ReplayFreeCamGetMaxRange()
		{
			if (replayFreeCamGetMaxRange == null) replayFreeCamGetMaxRange = (Function) native.GetObjectProperty("replayFreeCamGetMaxRange");
			return (double) replayFreeCamGetMaxRange.Call(native);
		}

		/// <summary>
		/// SET_CLOCK_TIME(12, 34, 56);
		/// </summary>
		public void SetClockTime(int hour, int minute, int second)
		{
			if (setClockTime == null) setClockTime = (Function) native.GetObjectProperty("setClockTime");
			setClockTime.Call(native, hour, minute, second);
		}

		public void PauseClock(bool toggle)
		{
			if (pauseClock == null) pauseClock = (Function) native.GetObjectProperty("pauseClock");
			pauseClock.Call(native, toggle);
		}

		public void AdvanceClockTimeTo(int hour, int minute, int second)
		{
			if (advanceClockTimeTo == null) advanceClockTimeTo = (Function) native.GetObjectProperty("advanceClockTimeTo");
			advanceClockTimeTo.Call(native, hour, minute, second);
		}

		public void AddToClockTime(int hours, int minutes, int seconds)
		{
			if (addToClockTime == null) addToClockTime = (Function) native.GetObjectProperty("addToClockTime");
			addToClockTime.Call(native, hours, minutes, seconds);
		}

		/// <summary>
		/// Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
		/// </summary>
		public int GetClockHours()
		{
			if (getClockHours == null) getClockHours = (Function) native.GetObjectProperty("getClockHours");
			return (int) getClockHours.Call(native);
		}

		/// <summary>
		/// Gets the current ingame clock minute.
		/// </summary>
		public int GetClockMinutes()
		{
			if (getClockMinutes == null) getClockMinutes = (Function) native.GetObjectProperty("getClockMinutes");
			return (int) getClockMinutes.Call(native);
		}

		/// <summary>
		/// Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
		/// </summary>
		public int GetClockSeconds()
		{
			if (getClockSeconds == null) getClockSeconds = (Function) native.GetObjectProperty("getClockSeconds");
			return (int) getClockSeconds.Call(native);
		}

		public void SetClockDate(int day, int month, int year)
		{
			if (setClockDate == null) setClockDate = (Function) native.GetObjectProperty("setClockDate");
			setClockDate.Call(native, day, month, year);
		}

		/// <summary>
		/// Gets the current day of the week.
		/// 0: Sunday
		/// 1: Monday
		/// 2: Tuesday
		/// 3: Wednesday
		/// 4: Thursday
		/// 5: Friday
		/// 6: Saturday
		/// </summary>
		public int GetClockDayOfWeek()
		{
			if (getClockDayOfWeek == null) getClockDayOfWeek = (Function) native.GetObjectProperty("getClockDayOfWeek");
			return (int) getClockDayOfWeek.Call(native);
		}

		public int GetClockDayOfMonth()
		{
			if (getClockDayOfMonth == null) getClockDayOfMonth = (Function) native.GetObjectProperty("getClockDayOfMonth");
			return (int) getClockDayOfMonth.Call(native);
		}

		public int GetClockMonth()
		{
			if (getClockMonth == null) getClockMonth = (Function) native.GetObjectProperty("getClockMonth");
			return (int) getClockMonth.Call(native);
		}

		public int GetClockYear()
		{
			if (getClockYear == null) getClockYear = (Function) native.GetObjectProperty("getClockYear");
			return (int) getClockYear.Call(native);
		}

		public int GetMillisecondsPerGameMinute()
		{
			if (getMillisecondsPerGameMinute == null) getMillisecondsPerGameMinute = (Function) native.GetObjectProperty("getMillisecondsPerGameMinute");
			return (int) getMillisecondsPerGameMinute.Call(native);
		}

		/// <summary>
		/// Gets system time as year, month, day, hour, minute and second.
		/// Example usage:
		/// int year;
		/// int month;
		/// int day;
		/// int hour;
		/// int minute;
		/// int second;
		/// TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
		/// </summary>
		/// <returns>Array<void, int, int, int, int, int, int></returns>
		public (object, int, int, int, int, int, int) GetPosixTime(int year, int month, int day, int hour, int minute, int second)
		{
			if (getPosixTime == null) getPosixTime = (Function) native.GetObjectProperty("getPosixTime");
			var results = (Array) getPosixTime.Call(native, year, month, day, hour, minute, second);
			return (results[0], (int) results[1], (int) results[2], (int) results[3], (int) results[4], (int) results[5], (int) results[6]);
		}

		/// <summary>
		/// Gets current UTC time
		/// </summary>
		/// <returns>Array<void, int, int, int, int, int, int></returns>
		public (object, int, int, int, int, int, int) GetUtcTime(int year, int month, int day, int hour, int minute, int second)
		{
			if (getUtcTime == null) getUtcTime = (Function) native.GetObjectProperty("getUtcTime");
			var results = (Array) getUtcTime.Call(native, year, month, day, hour, minute, second);
			return (results[0], (int) results[1], (int) results[2], (int) results[3], (int) results[4], (int) results[5], (int) results[6]);
		}

		/// <summary>
		/// Gets local system time as year, month, day, hour, minute and second.
		/// Example usage:
		/// int year;
		/// int month;
		/// int day;
		/// int hour;
		/// int minute;
		/// int second;
		/// or use std::tm struct
		/// TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
		/// </summary>
		/// <returns>Array<void, int, int, int, int, int, int></returns>
		public (object, int, int, int, int, int, int) GetLocalTime(int year, int month, int day, int hour, int minute, int second)
		{
			if (getLocalTime == null) getLocalTime = (Function) native.GetObjectProperty("getLocalTime");
			var results = (Array) getLocalTime.Call(native, year, month, day, hour, minute, second);
			return (results[0], (int) results[1], (int) results[2], (int) results[3], (int) results[4], (int) results[5], (int) results[6]);
		}

		/// <summary>
		/// flags: Usually 8
		/// </summary>
		/// <param name="flags">Usually 8</param>
		public void RequestCutscene(string cutsceneName, int flags)
		{
			if (requestCutscene == null) requestCutscene = (Function) native.GetObjectProperty("requestCutscene");
			requestCutscene.Call(native, cutsceneName, flags);
		}

		/// <summary>
		/// flags: Usually 8
		/// playbackFlags: Which scenes should be played.
		/// Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
		/// </summary>
		/// <param name="playbackFlags">Which scenes should be played.</param>
		/// <param name="flags">playbackFlags: Which scenes should be played.</param>
		public void RequestCutsceneWithPlaybackList(string cutsceneName, int playbackFlags, int flags)
		{
			if (requestCutsceneWithPlaybackList == null) requestCutsceneWithPlaybackList = (Function) native.GetObjectProperty("requestCutsceneWithPlaybackList");
			requestCutsceneWithPlaybackList.Call(native, cutsceneName, playbackFlags, flags);
		}

		public void RemoveCutscene()
		{
			if (removeCutscene == null) removeCutscene = (Function) native.GetObjectProperty("removeCutscene");
			removeCutscene.Call(native);
		}

		public bool HasCutsceneLoaded()
		{
			if (hasCutsceneLoaded == null) hasCutsceneLoaded = (Function) native.GetObjectProperty("hasCutsceneLoaded");
			return (bool) hasCutsceneLoaded.Call(native);
		}

		public bool HasThisCutsceneLoaded(string cutsceneName)
		{
			if (hasThisCutsceneLoaded == null) hasThisCutsceneLoaded = (Function) native.GetObjectProperty("hasThisCutsceneLoaded");
			return (bool) hasThisCutsceneLoaded.Call(native, cutsceneName);
		}

		/// <summary>
		/// SET_SCRIPT_*
		/// Sets the cutscene's owning thread ID.
		/// </summary>
		public void _0x8D9DF6ECA8768583(int threadId)
		{
			if (__0x8D9DF6ECA8768583 == null) __0x8D9DF6ECA8768583 = (Function) native.GetObjectProperty("_0x8D9DF6ECA8768583");
			__0x8D9DF6ECA8768583.Call(native, threadId);
		}

		public bool CanRequestAssetsForCutsceneEntity()
		{
			if (canRequestAssetsForCutsceneEntity == null) canRequestAssetsForCutsceneEntity = (Function) native.GetObjectProperty("canRequestAssetsForCutsceneEntity");
			return (bool) canRequestAssetsForCutsceneEntity.Call(native);
		}

		public bool IsCutscenePlaybackFlagSet(int flag)
		{
			if (isCutscenePlaybackFlagSet == null) isCutscenePlaybackFlagSet = (Function) native.GetObjectProperty("isCutscenePlaybackFlagSet");
			return (bool) isCutscenePlaybackFlagSet.Call(native, flag);
		}

		public void SetCutsceneEntityStreamingFlags(string cutsceneEntName, int p1, int p2)
		{
			if (setCutsceneEntityStreamingFlags == null) setCutsceneEntityStreamingFlags = (Function) native.GetObjectProperty("setCutsceneEntityStreamingFlags");
			setCutsceneEntityStreamingFlags.Call(native, cutsceneEntName, p1, p2);
		}

		/// <summary>
		/// Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
		/// </summary>
		public void RequestCutFile(string cutsceneName)
		{
			if (requestCutFile == null) requestCutFile = (Function) native.GetObjectProperty("requestCutFile");
			requestCutFile.Call(native, cutsceneName);
		}

		/// <summary>
		/// Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
		/// </summary>
		public bool HasCutFileLoaded(string cutsceneName)
		{
			if (hasCutFileLoaded == null) hasCutFileLoaded = (Function) native.GetObjectProperty("hasCutFileLoaded");
			return (bool) hasCutFileLoaded.Call(native, cutsceneName);
		}

		/// <summary>
		/// Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
		/// </summary>
		public void RemoveCutFile(string cutsceneName)
		{
			if (removeCutFile == null) removeCutFile = (Function) native.GetObjectProperty("removeCutFile");
			removeCutFile.Call(native, cutsceneName);
		}

		/// <summary>
		/// Jenkins hash probably is 0xFD8B1AC2
		/// </summary>
		public int GetCutFileNumSections(string cutsceneName)
		{
			if (getCutFileNumSections == null) getCutFileNumSections = (Function) native.GetObjectProperty("getCutFileNumSections");
			return (int) getCutFileNumSections.Call(native, cutsceneName);
		}

		/// <summary>
		/// flags: Usually 0.
		/// </summary>
		/// <param name="flags">Usually 0.</param>
		public void StartCutscene(int flags)
		{
			if (startCutscene == null) startCutscene = (Function) native.GetObjectProperty("startCutscene");
			startCutscene.Call(native, flags);
		}

		/// <summary>
		/// flags: Usually 0.
		/// </summary>
		/// <param name="flags">Usually 0.</param>
		public void StartCutsceneAtCoords(double x, double y, double z, int flags)
		{
			if (startCutsceneAtCoords == null) startCutsceneAtCoords = (Function) native.GetObjectProperty("startCutsceneAtCoords");
			startCutsceneAtCoords.Call(native, x, y, z, flags);
		}

		public void StopCutscene(bool p0)
		{
			if (stopCutscene == null) stopCutscene = (Function) native.GetObjectProperty("stopCutscene");
			stopCutscene.Call(native, p0);
		}

		public void StopCutsceneImmediately()
		{
			if (stopCutsceneImmediately == null) stopCutsceneImmediately = (Function) native.GetObjectProperty("stopCutsceneImmediately");
			stopCutsceneImmediately.Call(native);
		}

		/// <summary>
		/// p3 could be heading. Needs more research.
		/// </summary>
		/// <param name="p3">could be heading. Needs more research.</param>
		public void SetCutsceneOrigin(double x, double y, double z, double p3, int p4)
		{
			if (setCutsceneOrigin == null) setCutsceneOrigin = (Function) native.GetObjectProperty("setCutsceneOrigin");
			setCutsceneOrigin.Call(native, x, y, z, p3, p4);
		}

		public void _0x011883F41211432A(double x1, double y1, double z1, double x2, double y2, double z2, int p6)
		{
			if (__0x011883F41211432A == null) __0x011883F41211432A = (Function) native.GetObjectProperty("_0x011883F41211432A");
			__0x011883F41211432A.Call(native, x1, y1, z1, x2, y2, z2, p6);
		}

		public int GetCutsceneTime()
		{
			if (getCutsceneTime == null) getCutsceneTime = (Function) native.GetObjectProperty("getCutsceneTime");
			return (int) getCutsceneTime.Call(native);
		}

		public int GetCutsceneTotalDuration()
		{
			if (getCutsceneTotalDuration == null) getCutsceneTotalDuration = (Function) native.GetObjectProperty("getCutsceneTotalDuration");
			return (int) getCutsceneTotalDuration.Call(native);
		}

		/// <summary>
		/// GET_CUTSCENE_*
		/// </summary>
		public int _0x971D7B15BCDBEF99()
		{
			if (__0x971D7B15BCDBEF99 == null) __0x971D7B15BCDBEF99 = (Function) native.GetObjectProperty("_0x971D7B15BCDBEF99");
			return (int) __0x971D7B15BCDBEF99.Call(native);
		}

		public bool WasCutsceneSkipped()
		{
			if (wasCutsceneSkipped == null) wasCutsceneSkipped = (Function) native.GetObjectProperty("wasCutsceneSkipped");
			return (bool) wasCutsceneSkipped.Call(native);
		}

		public bool HasCutsceneFinished()
		{
			if (hasCutsceneFinished == null) hasCutsceneFinished = (Function) native.GetObjectProperty("hasCutsceneFinished");
			return (bool) hasCutsceneFinished.Call(native);
		}

		public bool IsCutsceneActive()
		{
			if (isCutsceneActive == null) isCutsceneActive = (Function) native.GetObjectProperty("isCutsceneActive");
			return (bool) isCutsceneActive.Call(native);
		}

		public bool IsCutscenePlaying()
		{
			if (isCutscenePlaying == null) isCutscenePlaying = (Function) native.GetObjectProperty("isCutscenePlaying");
			return (bool) isCutscenePlaying.Call(native);
		}

		public int GetCutsceneSectionPlaying()
		{
			if (getCutsceneSectionPlaying == null) getCutsceneSectionPlaying = (Function) native.GetObjectProperty("getCutsceneSectionPlaying");
			return (int) getCutsceneSectionPlaying.Call(native);
		}

		public int GetEntityIndexOfCutsceneEntity(string cutsceneEntName, int modelHash)
		{
			if (getEntityIndexOfCutsceneEntity == null) getEntityIndexOfCutsceneEntity = (Function) native.GetObjectProperty("getEntityIndexOfCutsceneEntity");
			return (int) getEntityIndexOfCutsceneEntity.Call(native, cutsceneEntName, modelHash);
		}

		public int _0x583DF8E3D4AFBD98()
		{
			if (__0x583DF8E3D4AFBD98 == null) __0x583DF8E3D4AFBD98 = (Function) native.GetObjectProperty("_0x583DF8E3D4AFBD98");
			return (int) __0x583DF8E3D4AFBD98.Call(native);
		}

		/// <summary>
		/// This function is hard-coded to always return 1.
		/// </summary>
		public bool _0x4CEBC1ED31E8925E(string cutsceneName)
		{
			if (__0x4CEBC1ED31E8925E == null) __0x4CEBC1ED31E8925E = (Function) native.GetObjectProperty("_0x4CEBC1ED31E8925E");
			return (bool) __0x4CEBC1ED31E8925E.Call(native, cutsceneName);
		}

		public object _0x4FCD976DA686580C(object p0)
		{
			if (__0x4FCD976DA686580C == null) __0x4FCD976DA686580C = (Function) native.GetObjectProperty("_0x4FCD976DA686580C");
			return __0x4FCD976DA686580C.Call(native, p0);
		}

		public void RegisterEntityForCutscene(int cutscenePed, string cutsceneEntName, int p2, int modelHash, int p4)
		{
			if (registerEntityForCutscene == null) registerEntityForCutscene = (Function) native.GetObjectProperty("registerEntityForCutscene");
			registerEntityForCutscene.Call(native, cutscenePed, cutsceneEntName, p2, modelHash, p4);
		}

		public int GetEntityIndexOfRegisteredEntity(string cutsceneEntName, int modelHash)
		{
			if (getEntityIndexOfRegisteredEntity == null) getEntityIndexOfRegisteredEntity = (Function) native.GetObjectProperty("getEntityIndexOfRegisteredEntity");
			return (int) getEntityIndexOfRegisteredEntity.Call(native, cutsceneEntName, modelHash);
		}

		/// <summary>
		/// SET_VEHICLE_*
		/// </summary>
		public void _0x7F96F23FA9B73327(int modelHash)
		{
			if (__0x7F96F23FA9B73327 == null) __0x7F96F23FA9B73327 = (Function) native.GetObjectProperty("_0x7F96F23FA9B73327");
			__0x7F96F23FA9B73327.Call(native, modelHash);
		}

		/// <summary>
		/// Only used twice in R* scripts
		/// </summary>
		public void SetCutsceneTriggerArea(double p0, double p1, double p2, double p3, double p4, double p5)
		{
			if (setCutsceneTriggerArea == null) setCutsceneTriggerArea = (Function) native.GetObjectProperty("setCutsceneTriggerArea");
			setCutsceneTriggerArea.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// modelHash (p1) was always 0 in R* scripts
		/// </summary>
		/// <param name="modelHash">(p1) was always 0 in R* scripts</param>
		public bool CanSetEnterStateForRegisteredEntity(string cutsceneEntName, int modelHash)
		{
			if (canSetEnterStateForRegisteredEntity == null) canSetEnterStateForRegisteredEntity = (Function) native.GetObjectProperty("canSetEnterStateForRegisteredEntity");
			return (bool) canSetEnterStateForRegisteredEntity.Call(native, cutsceneEntName, modelHash);
		}

		public bool CanSetExitStateForRegisteredEntity(string cutsceneEntName, int modelHash)
		{
			if (canSetExitStateForRegisteredEntity == null) canSetExitStateForRegisteredEntity = (Function) native.GetObjectProperty("canSetExitStateForRegisteredEntity");
			return (bool) canSetExitStateForRegisteredEntity.Call(native, cutsceneEntName, modelHash);
		}

		public bool CanSetExitStateForCamera(bool p0)
		{
			if (canSetExitStateForCamera == null) canSetExitStateForCamera = (Function) native.GetObjectProperty("canSetExitStateForCamera");
			return (bool) canSetExitStateForCamera.Call(native, p0);
		}

		/// <summary>
		/// Toggles a value (bool) for cutscenes.
		/// SET_*
		/// </summary>
		public void _0xC61B86C9F61EB404(bool toggle)
		{
			if (__0xC61B86C9F61EB404 == null) __0xC61B86C9F61EB404 = (Function) native.GetObjectProperty("_0xC61B86C9F61EB404");
			__0xC61B86C9F61EB404.Call(native, toggle);
		}

		public void SetCutsceneFadeValues(bool p0, bool p1, bool p2, bool p3)
		{
			if (setCutsceneFadeValues == null) setCutsceneFadeValues = (Function) native.GetObjectProperty("setCutsceneFadeValues");
			setCutsceneFadeValues.Call(native, p0, p1, p2, p3);
		}

		public void _0x20746F7B1032A3C7(bool p0, bool p1, bool p2, bool p3)
		{
			if (__0x20746F7B1032A3C7 == null) __0x20746F7B1032A3C7 = (Function) native.GetObjectProperty("_0x20746F7B1032A3C7");
			__0x20746F7B1032A3C7.Call(native, p0, p1, p2, p3);
		}

		public void _0x06EE9048FD080382(bool p0)
		{
			if (__0x06EE9048FD080382 == null) __0x06EE9048FD080382 = (Function) native.GetObjectProperty("_0x06EE9048FD080382");
			__0x06EE9048FD080382.Call(native, p0);
		}

		public int _0xA0FE76168A189DDB()
		{
			if (__0xA0FE76168A189DDB == null) __0xA0FE76168A189DDB = (Function) native.GetObjectProperty("_0xA0FE76168A189DDB");
			return (int) __0xA0FE76168A189DDB.Call(native);
		}

		public void _0x2F137B508DE238F2(bool p0)
		{
			if (__0x2F137B508DE238F2 == null) __0x2F137B508DE238F2 = (Function) native.GetObjectProperty("_0x2F137B508DE238F2");
			__0x2F137B508DE238F2.Call(native, p0);
		}

		public void _0xE36A98D8AB3D3C66(bool p0)
		{
			if (__0xE36A98D8AB3D3C66 == null) __0xE36A98D8AB3D3C66 = (Function) native.GetObjectProperty("_0xE36A98D8AB3D3C66");
			__0xE36A98D8AB3D3C66.Call(native, p0);
		}

		public object _0x5EDEF0CF8C1DAB3C()
		{
			if (__0x5EDEF0CF8C1DAB3C == null) __0x5EDEF0CF8C1DAB3C = (Function) native.GetObjectProperty("_0x5EDEF0CF8C1DAB3C");
			return __0x5EDEF0CF8C1DAB3C.Call(native);
		}

		public void _0x41FAA8FB2ECE8720(bool p0)
		{
			if (__0x41FAA8FB2ECE8720 == null) __0x41FAA8FB2ECE8720 = (Function) native.GetObjectProperty("_0x41FAA8FB2ECE8720");
			__0x41FAA8FB2ECE8720.Call(native, p0);
		}

		public void RegisterSynchronisedScriptSpeech()
		{
			if (registerSynchronisedScriptSpeech == null) registerSynchronisedScriptSpeech = (Function) native.GetObjectProperty("registerSynchronisedScriptSpeech");
			registerSynchronisedScriptSpeech.Call(native);
		}

		public void SetCutscenePedComponentVariation(string cutsceneEntName, int p1, int p2, int p3, int modelHash)
		{
			if (setCutscenePedComponentVariation == null) setCutscenePedComponentVariation = (Function) native.GetObjectProperty("setCutscenePedComponentVariation");
			setCutscenePedComponentVariation.Call(native, cutsceneEntName, p1, p2, p3, modelHash);
		}

		public void SetCutscenePedComponentVariationFromPed(string cutsceneEntName, int ped, int modelHash)
		{
			if (setCutscenePedComponentVariationFromPed == null) setCutscenePedComponentVariationFromPed = (Function) native.GetObjectProperty("setCutscenePedComponentVariationFromPed");
			setCutscenePedComponentVariationFromPed.Call(native, cutsceneEntName, ped, modelHash);
		}

		public bool DoesCutsceneEntityExist(string cutsceneEntName, int modelHash)
		{
			if (doesCutsceneEntityExist == null) doesCutsceneEntityExist = (Function) native.GetObjectProperty("doesCutsceneEntityExist");
			return (bool) doesCutsceneEntityExist.Call(native, cutsceneEntName, modelHash);
		}

		/// <summary>
		/// Thanks R*! ;)
		/// if ((l_161 == 0) || (l_161 == 2)) {
		/// sub_2ea27("Trying to set Jimmy prop variation");
		/// CUTSCENE::_0546524ADE2E9723("Jimmy_Boston", 1, 0, 0, 0);
		/// }
		/// </summary>
		public void SetCutscenePedPropVariation(string cutsceneEntName, int p1, int p2, int p3, int modelHash)
		{
			if (setCutscenePedPropVariation == null) setCutscenePedPropVariation = (Function) native.GetObjectProperty("setCutscenePedPropVariation");
			setCutscenePedPropVariation.Call(native, cutsceneEntName, p1, p2, p3, modelHash);
		}

		/// <summary>
		/// HAS_CUTSCENE_*
		/// Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
		/// </summary>
		public bool _0x708BDD8CD795B043()
		{
			if (__0x708BDD8CD795B043 == null) __0x708BDD8CD795B043 = (Function) native.GetObjectProperty("_0x708BDD8CD795B043");
			return (bool) __0x708BDD8CD795B043.Call(native);
		}

		/// <summary>
		/// Adds the given request ID to the watch list.
		/// </summary>
		public void DatafileWatchRequestId(int id)
		{
			if (datafileWatchRequestId == null) datafileWatchRequestId = (Function) native.GetObjectProperty("datafileWatchRequestId");
			datafileWatchRequestId.Call(native, id);
		}

		public void DatafileClearWatchList()
		{
			if (datafileClearWatchList == null) datafileClearWatchList = (Function) native.GetObjectProperty("datafileClearWatchList");
			datafileClearWatchList.Call(native);
		}

		public bool DatafileIsValidRequestId(int index)
		{
			if (datafileIsValidRequestId == null) datafileIsValidRequestId = (Function) native.GetObjectProperty("datafileIsValidRequestId");
			return (bool) datafileIsValidRequestId.Call(native, index);
		}

		public bool DatafileHasLoadedFileData(object p0)
		{
			if (datafileHasLoadedFileData == null) datafileHasLoadedFileData = (Function) native.GetObjectProperty("datafileHasLoadedFileData");
			return (bool) datafileHasLoadedFileData.Call(native, p0);
		}

		public bool DatafileHasValidFileData(object p0)
		{
			if (datafileHasValidFileData == null) datafileHasValidFileData = (Function) native.GetObjectProperty("datafileHasValidFileData");
			return (bool) datafileHasValidFileData.Call(native, p0);
		}

		public bool DatafileSelectActiveFile(object p0)
		{
			if (datafileSelectActiveFile == null) datafileSelectActiveFile = (Function) native.GetObjectProperty("datafileSelectActiveFile");
			return (bool) datafileSelectActiveFile.Call(native, p0);
		}

		public bool DatafileDeleteRequestedFile(object p0)
		{
			if (datafileDeleteRequestedFile == null) datafileDeleteRequestedFile = (Function) native.GetObjectProperty("datafileDeleteRequestedFile");
			return (bool) datafileDeleteRequestedFile.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) UgcCreateContent(object data, int dataCount, string contentName, string description, string tagsCsv, string contentTypeName, bool publish)
		{
			if (ugcCreateContent == null) ugcCreateContent = (Function) native.GetObjectProperty("ugcCreateContent");
			var results = (Array) ugcCreateContent.Call(native, data, dataCount, contentName, description, tagsCsv, contentTypeName, publish);
			return ((bool) results[0], results[1]);
		}

		public bool UgcCreateMission(string contentName, string description, string tagsCsv, string contentTypeName, bool publish)
		{
			if (ugcCreateMission == null) ugcCreateMission = (Function) native.GetObjectProperty("ugcCreateMission");
			return (bool) ugcCreateMission.Call(native, contentName, description, tagsCsv, contentTypeName, publish);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) UgcUpdateContent(string contentId, object data, int dataCount, string contentName, string description, string tagsCsv, string contentTypeName)
		{
			if (ugcUpdateContent == null) ugcUpdateContent = (Function) native.GetObjectProperty("ugcUpdateContent");
			var results = (Array) ugcUpdateContent.Call(native, contentId, data, dataCount, contentName, description, tagsCsv, contentTypeName);
			return ((bool) results[0], results[1]);
		}

		public bool UgcUpdateMission(string contentId, string contentName, string description, string tagsCsv, string contentTypeName)
		{
			if (ugcUpdateMission == null) ugcUpdateMission = (Function) native.GetObjectProperty("ugcUpdateMission");
			return (bool) ugcUpdateMission.Call(native, contentId, contentName, description, tagsCsv, contentTypeName);
		}

		public bool UgcSetPlayerData(string contentId, double rating, string contentTypeName)
		{
			if (ugcSetPlayerData == null) ugcSetPlayerData = (Function) native.GetObjectProperty("ugcSetPlayerData");
			return (bool) ugcSetPlayerData.Call(native, contentId, rating, contentTypeName);
		}

		public bool DatafileSelectUgcData(int p0)
		{
			if (datafileSelectUgcData == null) datafileSelectUgcData = (Function) native.GetObjectProperty("datafileSelectUgcData");
			return (bool) datafileSelectUgcData.Call(native, p0);
		}

		public bool DatafileSelectUgcStats(int p0, bool p1)
		{
			if (datafileSelectUgcStats == null) datafileSelectUgcStats = (Function) native.GetObjectProperty("datafileSelectUgcStats");
			return (bool) datafileSelectUgcStats.Call(native, p0, p1);
		}

		public bool DatafileSelectUgcPlayerData(int p0)
		{
			if (datafileSelectUgcPlayerData == null) datafileSelectUgcPlayerData = (Function) native.GetObjectProperty("datafileSelectUgcPlayerData");
			return (bool) datafileSelectUgcPlayerData.Call(native, p0);
		}

		/// <summary>
		/// if ((NETWORK::_597F8DBA9B206FC7() > 0) && DATAFILE::_01095C95CD46B624(0)) {
		/// v_10 = DATAFILE::_GET_ROOT_OBJECT();
		/// v_11 = DATAFILE::_OBJECT_VALUE_GET_INTEGER(v_10, "pt");
		/// sub_20202(2, v_11);
		/// a_0 += 1;
		/// } else {
		/// a_0 += 1;
		/// }
		/// </summary>
		public bool DatafileSelectCreatorStats(int p0)
		{
			if (datafileSelectCreatorStats == null) datafileSelectCreatorStats = (Function) native.GetObjectProperty("datafileSelectCreatorStats");
			return (bool) datafileSelectCreatorStats.Call(native, p0);
		}

		/// <summary>
		/// Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
		/// Example:
		/// DATAFILE::_LOAD_UGC_FILE("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"
		/// </summary>
		/// <returns>Returns whether or not the file was successfully loaded.</returns>
		public bool DatafileLoadOfflineUgc(string filename)
		{
			if (datafileLoadOfflineUgc == null) datafileLoadOfflineUgc = (Function) native.GetObjectProperty("datafileLoadOfflineUgc");
			return (bool) datafileLoadOfflineUgc.Call(native, filename);
		}

		public void DatafileCreate()
		{
			if (datafileCreate == null) datafileCreate = (Function) native.GetObjectProperty("datafileCreate");
			datafileCreate.Call(native);
		}

		public void DatafileDelete()
		{
			if (datafileDelete == null) datafileDelete = (Function) native.GetObjectProperty("datafileDelete");
			datafileDelete.Call(native);
		}

		public void DatafileStoreMissionHeader()
		{
			if (datafileStoreMissionHeader == null) datafileStoreMissionHeader = (Function) native.GetObjectProperty("datafileStoreMissionHeader");
			datafileStoreMissionHeader.Call(native);
		}

		public void DatafileFlushMissionHeader()
		{
			if (datafileFlushMissionHeader == null) datafileFlushMissionHeader = (Function) native.GetObjectProperty("datafileFlushMissionHeader");
			datafileFlushMissionHeader.Call(native);
		}

		public string DatafileGetFileDict()
		{
			if (datafileGetFileDict == null) datafileGetFileDict = (Function) native.GetObjectProperty("datafileGetFileDict");
			return (string) datafileGetFileDict.Call(native);
		}

		public bool DatafileStartSaveToCloud(string filename)
		{
			if (datafileStartSaveToCloud == null) datafileStartSaveToCloud = (Function) native.GetObjectProperty("datafileStartSaveToCloud");
			return (bool) datafileStartSaveToCloud.Call(native, filename);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, bool></returns>
		public (bool, bool) DatafileUpdateSaveToCloud(bool p0)
		{
			if (datafileUpdateSaveToCloud == null) datafileUpdateSaveToCloud = (Function) native.GetObjectProperty("datafileUpdateSaveToCloud");
			var results = (Array) datafileUpdateSaveToCloud.Call(native, p0);
			return ((bool) results[0], (bool) results[1]);
		}

		/// <summary>
		/// Example:
		/// if (!DATAFILE::_BEDB96A7584AA8CF())
		/// {
		/// if (!g_109E3)
		/// {
		/// if (((sub_d4f() == 2) == 0) && (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))
		/// {
		/// if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())
		/// {
		/// See NativeDB for reference: http://natives.altv.mp/#/0xBEDB96A7584AA8CF
		/// </summary>
		public bool DatafileIsSavePending()
		{
			if (datafileIsSavePending == null) datafileIsSavePending = (Function) native.GetObjectProperty("datafileIsSavePending");
			return (bool) datafileIsSavePending.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ObjectValueAddBoolean(object objectData, string key, bool value)
		{
			if (objectValueAddBoolean == null) objectValueAddBoolean = (Function) native.GetObjectProperty("objectValueAddBoolean");
			var results = (Array) objectValueAddBoolean.Call(native, objectData, key, value);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ObjectValueAddInteger(object objectData, string key, int value)
		{
			if (objectValueAddInteger == null) objectValueAddInteger = (Function) native.GetObjectProperty("objectValueAddInteger");
			var results = (Array) objectValueAddInteger.Call(native, objectData, key, value);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ObjectValueAddFloat(object objectData, string key, double value)
		{
			if (objectValueAddFloat == null) objectValueAddFloat = (Function) native.GetObjectProperty("objectValueAddFloat");
			var results = (Array) objectValueAddFloat.Call(native, objectData, key, value);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ObjectValueAddString(object objectData, string key, string value)
		{
			if (objectValueAddString == null) objectValueAddString = (Function) native.GetObjectProperty("objectValueAddString");
			var results = (Array) objectValueAddString.Call(native, objectData, key, value);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ObjectValueAddVector3(object objectData, string key, double valueX, double valueY, double valueZ)
		{
			if (objectValueAddVector3 == null) objectValueAddVector3 = (Function) native.GetObjectProperty("objectValueAddVector3");
			var results = (Array) objectValueAddVector3.Call(native, objectData, key, valueX, valueY, valueZ);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) ObjectValueAddObject(object objectData, string key)
		{
			if (objectValueAddObject == null) objectValueAddObject = (Function) native.GetObjectProperty("objectValueAddObject");
			var results = (Array) objectValueAddObject.Call(native, objectData, key);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) ObjectValueAddArray(object objectData, string key)
		{
			if (objectValueAddArray == null) objectValueAddArray = (Function) native.GetObjectProperty("objectValueAddArray");
			var results = (Array) objectValueAddArray.Call(native, objectData, key);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) ObjectValueGetBoolean(object objectData, string key)
		{
			if (objectValueGetBoolean == null) objectValueGetBoolean = (Function) native.GetObjectProperty("objectValueGetBoolean");
			var results = (Array) objectValueGetBoolean.Call(native, objectData, key);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) ObjectValueGetInteger(object objectData, string key)
		{
			if (objectValueGetInteger == null) objectValueGetInteger = (Function) native.GetObjectProperty("objectValueGetInteger");
			var results = (Array) objectValueGetInteger.Call(native, objectData, key);
			return ((int) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<double, object></returns>
		public (double, object) ObjectValueGetFloat(object objectData, string key)
		{
			if (objectValueGetFloat == null) objectValueGetFloat = (Function) native.GetObjectProperty("objectValueGetFloat");
			var results = (Array) objectValueGetFloat.Call(native, objectData, key);
			return ((double) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<string, object></returns>
		public (string, object) ObjectValueGetString(object objectData, string key)
		{
			if (objectValueGetString == null) objectValueGetString = (Function) native.GetObjectProperty("objectValueGetString");
			var results = (Array) objectValueGetString.Call(native, objectData, key);
			return ((string) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<Vector3, object></returns>
		public (Vector3, object) ObjectValueGetVector3(object objectData, string key)
		{
			if (objectValueGetVector3 == null) objectValueGetVector3 = (Function) native.GetObjectProperty("objectValueGetVector3");
			var results = (Array) objectValueGetVector3.Call(native, objectData, key);
			return (JSObjectToVector3(results[0]), results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) ObjectValueGetObject(object objectData, string key)
		{
			if (objectValueGetObject == null) objectValueGetObject = (Function) native.GetObjectProperty("objectValueGetObject");
			var results = (Array) objectValueGetObject.Call(native, objectData, key);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) ObjectValueGetArray(object objectData, string key)
		{
			if (objectValueGetArray == null) objectValueGetArray = (Function) native.GetObjectProperty("objectValueGetArray");
			var results = (Array) objectValueGetArray.Call(native, objectData, key);
			return (results[0], results[1]);
		}

		/// <summary>
		/// Types:
		/// 1 = Boolean
		/// 2 = Integer
		/// 3 = Float
		/// 4 = String
		/// 5 = Vector3
		/// 6 = Object
		/// 7 = Array
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) ObjectValueGetType(object objectData, string key)
		{
			if (objectValueGetType == null) objectValueGetType = (Function) native.GetObjectProperty("objectValueGetType");
			var results = (Array) objectValueGetType.Call(native, objectData, key);
			return ((int) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ArrayValueAddBoolean(object arrayData, bool value)
		{
			if (arrayValueAddBoolean == null) arrayValueAddBoolean = (Function) native.GetObjectProperty("arrayValueAddBoolean");
			var results = (Array) arrayValueAddBoolean.Call(native, arrayData, value);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ArrayValueAddInteger(object arrayData, int value)
		{
			if (arrayValueAddInteger == null) arrayValueAddInteger = (Function) native.GetObjectProperty("arrayValueAddInteger");
			var results = (Array) arrayValueAddInteger.Call(native, arrayData, value);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ArrayValueAddFloat(object arrayData, double value)
		{
			if (arrayValueAddFloat == null) arrayValueAddFloat = (Function) native.GetObjectProperty("arrayValueAddFloat");
			var results = (Array) arrayValueAddFloat.Call(native, arrayData, value);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ArrayValueAddString(object arrayData, string value)
		{
			if (arrayValueAddString == null) arrayValueAddString = (Function) native.GetObjectProperty("arrayValueAddString");
			var results = (Array) arrayValueAddString.Call(native, arrayData, value);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ArrayValueAddVector3(object arrayData, double valueX, double valueY, double valueZ)
		{
			if (arrayValueAddVector3 == null) arrayValueAddVector3 = (Function) native.GetObjectProperty("arrayValueAddVector3");
			var results = (Array) arrayValueAddVector3.Call(native, arrayData, valueX, valueY, valueZ);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) ArrayValueAddObject(object arrayData)
		{
			if (arrayValueAddObject == null) arrayValueAddObject = (Function) native.GetObjectProperty("arrayValueAddObject");
			var results = (Array) arrayValueAddObject.Call(native, arrayData);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) ArrayValueGetBoolean(object arrayData, int arrayIndex)
		{
			if (arrayValueGetBoolean == null) arrayValueGetBoolean = (Function) native.GetObjectProperty("arrayValueGetBoolean");
			var results = (Array) arrayValueGetBoolean.Call(native, arrayData, arrayIndex);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) ArrayValueGetInteger(object arrayData, int arrayIndex)
		{
			if (arrayValueGetInteger == null) arrayValueGetInteger = (Function) native.GetObjectProperty("arrayValueGetInteger");
			var results = (Array) arrayValueGetInteger.Call(native, arrayData, arrayIndex);
			return ((int) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<double, object></returns>
		public (double, object) ArrayValueGetFloat(object arrayData, int arrayIndex)
		{
			if (arrayValueGetFloat == null) arrayValueGetFloat = (Function) native.GetObjectProperty("arrayValueGetFloat");
			var results = (Array) arrayValueGetFloat.Call(native, arrayData, arrayIndex);
			return ((double) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<string, object></returns>
		public (string, object) ArrayValueGetString(object arrayData, int arrayIndex)
		{
			if (arrayValueGetString == null) arrayValueGetString = (Function) native.GetObjectProperty("arrayValueGetString");
			var results = (Array) arrayValueGetString.Call(native, arrayData, arrayIndex);
			return ((string) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<Vector3, object></returns>
		public (Vector3, object) ArrayValueGetVector3(object arrayData, int arrayIndex)
		{
			if (arrayValueGetVector3 == null) arrayValueGetVector3 = (Function) native.GetObjectProperty("arrayValueGetVector3");
			var results = (Array) arrayValueGetVector3.Call(native, arrayData, arrayIndex);
			return (JSObjectToVector3(results[0]), results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) ArrayValueGetObject(object arrayData, int arrayIndex)
		{
			if (arrayValueGetObject == null) arrayValueGetObject = (Function) native.GetObjectProperty("arrayValueGetObject");
			var results = (Array) arrayValueGetObject.Call(native, arrayData, arrayIndex);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) ArrayValueGetSize(object arrayData)
		{
			if (arrayValueGetSize == null) arrayValueGetSize = (Function) native.GetObjectProperty("arrayValueGetSize");
			var results = (Array) arrayValueGetSize.Call(native, arrayData);
			return ((int) results[0], results[1]);
		}

		/// <summary>
		/// Types:
		/// 1 = Boolean
		/// 2 = Integer
		/// 3 = Float
		/// 4 = String
		/// 5 = Vector3
		/// 6 = Object
		/// 7 = Array
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) ArrayValueGetType(object arrayData, int arrayIndex)
		{
			if (arrayValueGetType == null) arrayValueGetType = (Function) native.GetObjectProperty("arrayValueGetType");
			var results = (Array) arrayValueGetType.Call(native, arrayData, arrayIndex);
			return ((int) results[0], results[1]);
		}

		public bool DecorSetTime(int entity, string propertyName, int timestamp)
		{
			if (decorSetTime == null) decorSetTime = (Function) native.GetObjectProperty("decorSetTime");
			return (bool) decorSetTime.Call(native, entity, propertyName, timestamp);
		}

		/// <summary>
		/// This function sets metadata of type bool to specified entity.
		/// </summary>
		public bool DecorSetBool(int entity, string propertyName, bool value)
		{
			if (decorSetBool == null) decorSetBool = (Function) native.GetObjectProperty("decorSetBool");
			return (bool) decorSetBool.Call(native, entity, propertyName, value);
		}

		public bool DecorSetFloat(int entity, string propertyName, double value)
		{
			if (decorSetFloat == null) decorSetFloat = (Function) native.GetObjectProperty("decorSetFloat");
			return (bool) decorSetFloat.Call(native, entity, propertyName, value);
		}

		/// <summary>
		/// Sets property to int.
		/// </summary>
		public bool DecorSetInt(int entity, string propertyName, int value)
		{
			if (decorSetInt == null) decorSetInt = (Function) native.GetObjectProperty("decorSetInt");
			return (bool) decorSetInt.Call(native, entity, propertyName, value);
		}

		public bool DecorGetBool(int entity, string propertyName)
		{
			if (decorGetBool == null) decorGetBool = (Function) native.GetObjectProperty("decorGetBool");
			return (bool) decorGetBool.Call(native, entity, propertyName);
		}

		public double DecorGetFloat(int entity, string propertyName)
		{
			if (decorGetFloat == null) decorGetFloat = (Function) native.GetObjectProperty("decorGetFloat");
			return (double) decorGetFloat.Call(native, entity, propertyName);
		}

		public int DecorGetInt(int entity, string propertyName)
		{
			if (decorGetInt == null) decorGetInt = (Function) native.GetObjectProperty("decorGetInt");
			return (int) decorGetInt.Call(native, entity, propertyName);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether or not the specified property is set for the entity.</returns>
		public bool DecorExistOn(int entity, string propertyName)
		{
			if (decorExistOn == null) decorExistOn = (Function) native.GetObjectProperty("decorExistOn");
			return (bool) decorExistOn.Call(native, entity, propertyName);
		}

		public bool DecorRemove(int entity, string propertyName)
		{
			if (decorRemove == null) decorRemove = (Function) native.GetObjectProperty("decorRemove");
			return (bool) decorRemove.Call(native, entity, propertyName);
		}

		/// <summary>
		/// Found this in standard_global_init.c4 line 1898
		/// void sub_523a() {
		/// DECORATOR::DECOR_REGISTER("Player_Vehicle", 3);
		/// DECORATOR::DECOR_REGISTER("PV_Slot", 3);
		/// DECORATOR::DECOR_REGISTER("Previous_Owner", 3);
		/// DECORATOR::DECOR_REGISTER("Sprayed_Vehicle_Decorator", 2);
		/// DECORATOR::DECOR_REGISTER("Sprayed_Vehicle_Timer_Dec", 5);
		/// DECORATOR::DECOR_REGISTER("Vehicle_Reward", 3);
		/// DECORATOR::DECOR_REGISTER("Vehicle_Reward_Teams", 3);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x9FD90732F56403CE
		/// </summary>
		public void DecorRegister(string propertyName, int type)
		{
			if (decorRegister == null) decorRegister = (Function) native.GetObjectProperty("decorRegister");
			decorRegister.Call(native, propertyName, type);
		}

		/// <summary>
		/// enum eDecorType
		/// {
		/// DECOR_TYPE_FLOAT = 1,
		/// DECOR_TYPE_BOOL,
		/// DECOR_TYPE_INT,
		/// DECOR_TYPE_UNK,
		/// DECOR_TYPE_TIME
		/// };
		/// </summary>
		public bool DecorIsRegisteredAsType(string propertyName, int type)
		{
			if (decorIsRegisteredAsType == null) decorIsRegisteredAsType = (Function) native.GetObjectProperty("decorIsRegisteredAsType");
			return (bool) decorIsRegisteredAsType.Call(native, propertyName, type);
		}

		/// <summary>
		/// Called after all decorator type initializations.
		/// </summary>
		public void DecorRegisterLock()
		{
			if (decorRegisterLock == null) decorRegisterLock = (Function) native.GetObjectProperty("decorRegisterLock");
			decorRegisterLock.Call(native);
		}

		/// <summary>
		/// Only used once in scripts, in maintransition.
		/// maintransition.c4, line ~82432:
		/// if (PED::_7350823473013C02(PLAYER::PLAYER_PED_ID()) && (DECORATOR::_241FCA5B1AA14F75() == 0)) {
		/// g_2542A5 = a_1; // 'g_2542A5' used in 'building_controller.ysc' for IPL stuff?
		/// return 1;
		/// }
		/// Likely used solely for the players ped. The function it's in seems to only be used for initialization/quitting. Called among natives to discard scaleforms, disable frontend, fading in/out, etc. Neighboring strings to some calls include "HUD_JOINING", "HUD_QUITTING".
		/// Most likely ARE_*
		/// </summary>
		public bool _0x241FCA5B1AA14F75()
		{
			if (__0x241FCA5B1AA14F75 == null) __0x241FCA5B1AA14F75 = (Function) native.GetObjectProperty("_0x241FCA5B1AA14F75");
			return (bool) __0x241FCA5B1AA14F75.Call(native);
		}

		/// <summary>
		/// Example:
		/// DLC2::IS_DLC_PRESENT($\mpbusiness2\);
		/// ($ = gethashkey)
		/// bruteforce these:
		/// 0xB119F6D
		/// 0x96F02EE6
		/// </summary>
		public bool IsDlcPresent(int dlcHash)
		{
			if (isDlcPresent == null) isDlcPresent = (Function) native.GetObjectProperty("isDlcPresent");
			return (bool) isDlcPresent.Call(native, dlcHash);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 1.
		/// </summary>
		public bool _0xF2E07819EF1A5289()
		{
			if (__0xF2E07819EF1A5289 == null) __0xF2E07819EF1A5289 = (Function) native.GetObjectProperty("_0xF2E07819EF1A5289");
			return (bool) __0xF2E07819EF1A5289.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public bool _0x9489659372A81585()
		{
			if (__0x9489659372A81585 == null) __0x9489659372A81585 = (Function) native.GetObjectProperty("_0x9489659372A81585");
			return (bool) __0x9489659372A81585.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 1.
		/// </summary>
		public bool _0xA213B11DFF526300()
		{
			if (__0xA213B11DFF526300 == null) __0xA213B11DFF526300 = (Function) native.GetObjectProperty("_0xA213B11DFF526300");
			return (bool) __0xA213B11DFF526300.Call(native);
		}

		public bool GetExtraContentPackHasBeenInstalled()
		{
			if (getExtraContentPackHasBeenInstalled == null) getExtraContentPackHasBeenInstalled = (Function) native.GetObjectProperty("getExtraContentPackHasBeenInstalled");
			return (bool) getExtraContentPackHasBeenInstalled.Call(native);
		}

		public bool GetIsLoadingScreenActive()
		{
			if (getIsLoadingScreenActive == null) getIsLoadingScreenActive = (Function) native.GetObjectProperty("getIsLoadingScreenActive");
			return (bool) getIsLoadingScreenActive.Call(native);
		}

		/// <summary>
		/// GET_IS_LOADING_*
		/// </summary>
		public bool _0xC4637A6D03C24CC3()
		{
			if (__0xC4637A6D03C24CC3 == null) __0xC4637A6D03C24CC3 = (Function) native.GetObjectProperty("_0xC4637A6D03C24CC3");
			return (bool) __0xC4637A6D03C24CC3.Call(native);
		}

		/// <summary>
		/// Sets the value of the specified variable to 0.
		/// </summary>
		/// <returns>Array<bool, bool> Always returns true.</returns>
		public (bool, bool) HasCloudRequestsFinished(bool p0, object unused)
		{
			if (hasCloudRequestsFinished == null) hasCloudRequestsFinished = (Function) native.GetObjectProperty("hasCloudRequestsFinished");
			var results = (Array) hasCloudRequestsFinished.Call(native, p0, unused);
			return ((bool) results[0], (bool) results[1]);
		}

		/// <summary>
		/// Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
		/// The original (and wrong) definition is below:
		/// This unload the GTA:O DLC map parts (like high end garages/apartments).
		/// Works in singleplayer.
		/// </summary>
		public void OnEnterSp()
		{
			if (onEnterSp == null) onEnterSp = (Function) native.GetObjectProperty("onEnterSp");
			onEnterSp.Call(native);
		}

		/// <summary>
		/// This loads the GTA:O dlc map parts (high end garages, apartments).
		/// Works in singleplayer.
		/// In order to use GTA:O heist IPL's you have to call this native with the following params: _9BAE5AD2508DF078(1);
		/// </summary>
		public void OnEnterMp()
		{
			if (onEnterMp == null) onEnterMp = (Function) native.GetObjectProperty("onEnterMp");
			onEnterMp.Call(native);
		}

		/// <summary>
		/// Checks if the Entity exists
		/// </summary>
		public bool DoesEntityExist(int entity)
		{
			if (doesEntityExist == null) doesEntityExist = (Function) native.GetObjectProperty("doesEntityExist");
			return (bool) doesEntityExist.Call(native, entity);
		}

		public bool DoesEntityBelongToThisScript(int entity, bool p1)
		{
			if (doesEntityBelongToThisScript == null) doesEntityBelongToThisScript = (Function) native.GetObjectProperty("doesEntityBelongToThisScript");
			return (bool) doesEntityBelongToThisScript.Call(native, entity, p1);
		}

		public bool DoesEntityHaveDrawable(int entity)
		{
			if (doesEntityHaveDrawable == null) doesEntityHaveDrawable = (Function) native.GetObjectProperty("doesEntityHaveDrawable");
			return (bool) doesEntityHaveDrawable.Call(native, entity);
		}

		public bool DoesEntityHavePhysics(int entity)
		{
			if (doesEntityHavePhysics == null) doesEntityHavePhysics = (Function) native.GetObjectProperty("doesEntityHavePhysics");
			return (bool) doesEntityHavePhysics.Call(native, entity);
		}

		/// <summary>
		/// P3 is always 3 as far as i cant tell
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <param name="p3">P3 is always 3 as far as i cant tell</param>
		public bool HasEntityAnimFinished(int entity, string animDict, string animName, int p3)
		{
			if (hasEntityAnimFinished == null) hasEntityAnimFinished = (Function) native.GetObjectProperty("hasEntityAnimFinished");
			return (bool) hasEntityAnimFinished.Call(native, entity, animDict, animName, p3);
		}

		public bool HasEntityBeenDamagedByAnyObject(int entity)
		{
			if (hasEntityBeenDamagedByAnyObject == null) hasEntityBeenDamagedByAnyObject = (Function) native.GetObjectProperty("hasEntityBeenDamagedByAnyObject");
			return (bool) hasEntityBeenDamagedByAnyObject.Call(native, entity);
		}

		public bool HasEntityBeenDamagedByAnyPed(int entity)
		{
			if (hasEntityBeenDamagedByAnyPed == null) hasEntityBeenDamagedByAnyPed = (Function) native.GetObjectProperty("hasEntityBeenDamagedByAnyPed");
			return (bool) hasEntityBeenDamagedByAnyPed.Call(native, entity);
		}

		public bool HasEntityBeenDamagedByAnyVehicle(int entity)
		{
			if (hasEntityBeenDamagedByAnyVehicle == null) hasEntityBeenDamagedByAnyVehicle = (Function) native.GetObjectProperty("hasEntityBeenDamagedByAnyVehicle");
			return (bool) hasEntityBeenDamagedByAnyVehicle.Call(native, entity);
		}

		/// <summary>
		/// Entity 1 = Victim
		/// Entity 2 = Attacker
		/// p2 seems to always be 1
		/// </summary>
		/// <param name="p2">seems to always be 1</param>
		public bool HasEntityBeenDamagedByEntity(int entity1, int entity2, bool p2)
		{
			if (hasEntityBeenDamagedByEntity == null) hasEntityBeenDamagedByEntity = (Function) native.GetObjectProperty("hasEntityBeenDamagedByEntity");
			return (bool) hasEntityBeenDamagedByEntity.Call(native, entity1, entity2, p2);
		}

		/// <summary>
		/// traceType is always 17 in the scripts.
		/// There is other codes used for traceType:
		/// 19 - in jewelry_prep1a
		/// 126 - in am_hunt_the_beast
		/// 256 & 287 - in fm_mission_controller
		/// </summary>
		/// <param name="traceType">is always 17 in the scripts.</param>
		public bool HasEntityClearLosToEntity(int entity1, int entity2, int traceType)
		{
			if (hasEntityClearLosToEntity == null) hasEntityClearLosToEntity = (Function) native.GetObjectProperty("hasEntityClearLosToEntity");
			return (bool) hasEntityClearLosToEntity.Call(native, entity1, entity2, traceType);
		}

		/// <summary>
		/// Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
		/// This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
		/// </summary>
		public bool HasEntityClearLosToEntityInFront(int entity1, int entity2)
		{
			if (hasEntityClearLosToEntityInFront == null) hasEntityClearLosToEntityInFront = (Function) native.GetObjectProperty("hasEntityClearLosToEntityInFront");
			return (bool) hasEntityClearLosToEntityInFront.Call(native, entity1, entity2);
		}

		/// <summary>
		/// Called on tick.
		/// Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
		/// </summary>
		/// <returns>Tested with vehicles, returns true whenever the vehicle is touching any entity.</returns>
		public bool HasEntityCollidedWithAnything(int entity)
		{
			if (hasEntityCollidedWithAnything == null) hasEntityCollidedWithAnything = (Function) native.GetObjectProperty("hasEntityCollidedWithAnything");
			return (bool) hasEntityCollidedWithAnything.Call(native, entity);
		}

		public int GetLastMaterialHitByEntity(int entity)
		{
			if (getLastMaterialHitByEntity == null) getLastMaterialHitByEntity = (Function) native.GetObjectProperty("getLastMaterialHitByEntity");
			return (int) getLastMaterialHitByEntity.Call(native, entity);
		}

		public Vector3 GetCollisionNormalOfLastHitForEntity(int entity)
		{
			if (getCollisionNormalOfLastHitForEntity == null) getCollisionNormalOfLastHitForEntity = (Function) native.GetObjectProperty("getCollisionNormalOfLastHitForEntity");
			return JSObjectToVector3(getCollisionNormalOfLastHitForEntity.Call(native, entity));
		}

		/// <summary>
		/// Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
		/// </summary>
		public void ForceEntityAiAndAnimationUpdate(int entity)
		{
			if (forceEntityAiAndAnimationUpdate == null) forceEntityAiAndAnimationUpdate = (Function) native.GetObjectProperty("forceEntityAiAndAnimationUpdate");
			forceEntityAiAndAnimationUpdate.Call(native, entity);
		}

		/// <summary>
		/// Example:
		/// 0.000000 - mark the starting of animation.
		/// 0.500000 - mark the midpoint of the animation.
		/// 1.000000 - mark the end of animation.
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <returns>Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.</returns>
		public double GetEntityAnimCurrentTime(int entity, string animDict, string animName)
		{
			if (getEntityAnimCurrentTime == null) getEntityAnimCurrentTime = (Function) native.GetObjectProperty("getEntityAnimCurrentTime");
			return (double) getEntityAnimCurrentTime.Call(native, entity, animDict, animName);
		}

		/// <summary>
		/// Example:
		/// GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
		/// return 20800.000000
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <returns>Returns a float value representing animation's total playtime in milliseconds.</returns>
		public double GetEntityAnimTotalTime(int entity, string animDict, string animName)
		{
			if (getEntityAnimTotalTime == null) getEntityAnimTotalTime = (Function) native.GetObjectProperty("getEntityAnimTotalTime");
			return (double) getEntityAnimTotalTime.Call(native, entity, animDict, animName);
		}

		public double GetAnimDuration(string animDict, string animName)
		{
			if (getAnimDuration == null) getAnimDuration = (Function) native.GetObjectProperty("getAnimDuration");
			return (double) getAnimDuration.Call(native, animDict, animName);
		}

		public int GetEntityAttachedTo(int entity)
		{
			if (getEntityAttachedTo == null) getEntityAttachedTo = (Function) native.GetObjectProperty("getEntityAttachedTo");
			return (int) getEntityAttachedTo.Call(native, entity);
		}

		/// <summary>
		/// p1 = !IS_ENTITY_DEAD
		/// </summary>
		public Vector3 GetEntityCoords(int entity, bool alive)
		{
			if (getEntityCoords == null) getEntityCoords = (Function) native.GetObjectProperty("getEntityCoords");
			return JSObjectToVector3(getEntityCoords.Call(native, entity, alive));
		}

		/// <summary>
		/// Gets the entity's forward vector.
		/// </summary>
		public Vector3 GetEntityForwardVector(int entity)
		{
			if (getEntityForwardVector == null) getEntityForwardVector = (Function) native.GetObjectProperty("getEntityForwardVector");
			return JSObjectToVector3(getEntityForwardVector.Call(native, entity));
		}

		/// <summary>
		/// Gets the X-component of the entity's forward vector.
		/// </summary>
		public double GetEntityForwardX(int entity)
		{
			if (getEntityForwardX == null) getEntityForwardX = (Function) native.GetObjectProperty("getEntityForwardX");
			return (double) getEntityForwardX.Call(native, entity);
		}

		/// <summary>
		/// Gets the Y-component of the entity's forward vector.
		/// </summary>
		public double GetEntityForwardY(int entity)
		{
			if (getEntityForwardY == null) getEntityForwardY = (Function) native.GetObjectProperty("getEntityForwardY");
			return (double) getEntityForwardY.Call(native, entity);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.</returns>
		public double GetEntityHeading(int entity)
		{
			if (getEntityHeading == null) getEntityHeading = (Function) native.GetObjectProperty("getEntityHeading");
			return (double) getEntityHeading.Call(native, entity);
		}

		/// <summary>
		/// Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
		/// NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
		/// GET_ENTITY_HEADING_*
		/// </summary>
		public double GetEntityPhysicsHeading(int entity)
		{
			if (getEntityPhysicsHeading == null) getEntityPhysicsHeading = (Function) native.GetObjectProperty("getEntityPhysicsHeading");
			return (double) getEntityPhysicsHeading.Call(native, entity);
		}

		/// <summary>
		/// Example of range for ped:
		/// - Player [0 to 200]
		/// - Ped [100 to 200]
		/// - Vehicle [0 to 1000]
		/// - Object [0 to 1000]
		/// Health is actually a float value but this native casts it to int.
		/// In order to get the actual value, do:
		/// float health = *(float *)(entityAddress + 0x280);
		/// </summary>
		/// <returns>Returns an integer value of entity's current health.</returns>
		public int GetEntityHealth(int entity)
		{
			if (getEntityHealth == null) getEntityHealth = (Function) native.GetObjectProperty("getEntityHealth");
			return (int) getEntityHealth.Call(native, entity);
		}

		/// <summary>
		/// Return an integer value of entity's maximum health.
		/// Example:
		/// - Player = 200
		/// - Ped = 150
		/// </summary>
		public int GetEntityMaxHealth(int entity)
		{
			if (getEntityMaxHealth == null) getEntityMaxHealth = (Function) native.GetObjectProperty("getEntityMaxHealth");
			return (int) getEntityMaxHealth.Call(native, entity);
		}

		/// <summary>
		/// For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
		/// </summary>
		public void SetEntityMaxHealth(int entity, int value)
		{
			if (setEntityMaxHealth == null) setEntityMaxHealth = (Function) native.GetObjectProperty("setEntityMaxHealth");
			setEntityMaxHealth.Call(native, entity, value);
		}

		public double GetEntityHeight(int entity, double X, double Y, double Z, bool atTop, bool inWorldCoords)
		{
			if (getEntityHeight == null) getEntityHeight = (Function) native.GetObjectProperty("getEntityHeight");
			return (double) getEntityHeight.Call(native, entity, X, Y, Z, atTop, inWorldCoords);
		}

		/// <summary>
		/// Return height (z-dimension) above ground.
		/// Example: The pilot in a titan plane is 1.844176 above ground.
		/// How can i convert it to meters?
		/// Everything seems to be in meters, probably this too.
		/// </summary>
		public double GetEntityHeightAboveGround(int entity)
		{
			if (getEntityHeightAboveGround == null) getEntityHeightAboveGround = (Function) native.GetObjectProperty("getEntityHeightAboveGround");
			return (double) getEntityHeightAboveGround.Call(native, entity);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, Vector3, Vector3, Vector3, Vector3></returns>
		public (object, Vector3, Vector3, Vector3, Vector3) GetEntityMatrix(int entity, Vector3 rightVector, Vector3 forwardVector, Vector3 upVector, Vector3 position)
		{
			if (getEntityMatrix == null) getEntityMatrix = (Function) native.GetObjectProperty("getEntityMatrix");
			var results = (Array) getEntityMatrix.Call(native, entity, rightVector, forwardVector, upVector, position);
			return (results[0], JSObjectToVector3(results[1]), JSObjectToVector3(results[2]), JSObjectToVector3(results[3]), JSObjectToVector3(results[4]));
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the model hash from the entity</returns>
		public int GetEntityModel(int entity)
		{
			if (getEntityModel == null) getEntityModel = (Function) native.GetObjectProperty("getEntityModel");
			return (int) getEntityModel.Call(native, entity);
		}

		/// <summary>
		/// Converts world coords (posX - Z) to coords relative to the entity
		/// Example:
		/// posX is given as 50
		/// entity's x coord is 40
		/// the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
		/// </summary>
		/// <param name="posX">is given as 50</param>
		public Vector3 GetOffsetFromEntityGivenWorldCoords(int entity, double posX, double posY, double posZ)
		{
			if (getOffsetFromEntityGivenWorldCoords == null) getOffsetFromEntityGivenWorldCoords = (Function) native.GetObjectProperty("getOffsetFromEntityGivenWorldCoords");
			return JSObjectToVector3(getOffsetFromEntityGivenWorldCoords.Call(native, entity, posX, posY, posZ));
		}

		/// <summary>
		/// Offset values are relative to the entity.
		/// x = left/right
		/// y = forward/backward
		/// z = up/down
		/// </summary>
		public Vector3 GetOffsetFromEntityInWorldCoords(int entity, double offsetX, double offsetY, double offsetZ)
		{
			if (getOffsetFromEntityInWorldCoords == null) getOffsetFromEntityInWorldCoords = (Function) native.GetObjectProperty("getOffsetFromEntityInWorldCoords");
			return JSObjectToVector3(getOffsetFromEntityInWorldCoords.Call(native, entity, offsetX, offsetY, offsetZ));
		}

		public double GetEntityPitch(int entity)
		{
			if (getEntityPitch == null) getEntityPitch = (Function) native.GetObjectProperty("getEntityPitch");
			return (double) getEntityPitch.Call(native, entity);
		}

		/// <summary>
		/// w is the correct parameter name!
		/// </summary>
		/// <param name="w">is the correct parameter name!</param>
		/// <returns>Array<void, double, double, double, double></returns>
		public (object, double, double, double, double) GetEntityQuaternion(int entity, double x, double y, double z, double w)
		{
			if (getEntityQuaternion == null) getEntityQuaternion = (Function) native.GetObjectProperty("getEntityQuaternion");
			var results = (Array) getEntityQuaternion.Call(native, entity, x, y, z, w);
			return (results[0], (double) results[1], (double) results[2], (double) results[3], (double) results[4]);
		}

		/// <summary>
		/// Displays the current ROLL axis of the entity [-180.0000/180.0000+]
		/// (Sideways Roll) such as a vehicle tipped on its side
		/// </summary>
		public double GetEntityRoll(int entity)
		{
			if (getEntityRoll == null) getEntityRoll = (Function) native.GetObjectProperty("getEntityRoll");
			return (double) getEntityRoll.Call(native, entity);
		}

		/// <summary>
		/// rotationOrder refers to the order yaw pitch roll is applied
		/// value ranges from 0 to 5. What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
		/// Unsure what value corresponds to what rotation order, more testing will be needed for that.
		/// ------
		/// rotationOrder is usually 2 in scripts
		/// ------
		/// ENTITY::GET_ENTITY_ROTATION(Any p0, false or true);
		/// if false than return from -180 to 180
		/// if true than return from -90 to 90
		/// See NativeDB for reference: http://natives.altv.mp/#/0xAFBD61CC738D9EB9
		/// </summary>
		/// <param name="rotationOrder">is usually 2 in scripts</param>
		/// <returns>What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll:</returns>
		public Vector3 GetEntityRotation(int entity, int rotationOrder)
		{
			if (getEntityRotation == null) getEntityRotation = (Function) native.GetObjectProperty("getEntityRotation");
			return JSObjectToVector3(getEntityRotation.Call(native, entity, rotationOrder));
		}

		public Vector3 GetEntityRotationVelocity(int entity)
		{
			if (getEntityRotationVelocity == null) getEntityRotationVelocity = (Function) native.GetObjectProperty("getEntityRotationVelocity");
			return JSObjectToVector3(getEntityRotationVelocity.Call(native, entity));
		}

		/// <summary>
		/// All ambient entities in-world seem to have the same value for the second argument (Any *script), depending on when the scripthook was activated/re-activated. I've seen numbers from ~5 to almost 70 when the value was translated with to_string. The function return value seems to always be 0.
		/// </summary>
		/// <returns>Array<string, int></returns>
		public (string, int) GetEntityScript(int entity, int script)
		{
			if (getEntityScript == null) getEntityScript = (Function) native.GetObjectProperty("getEntityScript");
			var results = (Array) getEntityScript.Call(native, entity, script);
			return ((string) results[0], (int) results[1]);
		}

		/// <summary>
		/// result is in meters per second
		/// ------------------------------------------------------------
		/// So would the conversion to mph and km/h, be along the lines of this.
		/// float speed = GET_ENTITY_SPEED(veh);
		/// float kmh = (speed * 3.6);
		/// float mph = (speed * 2.236936);
		/// ------------------------------------------------------------
		/// </summary>
		public double GetEntitySpeed(int entity)
		{
			if (getEntitySpeed == null) getEntitySpeed = (Function) native.GetObjectProperty("getEntitySpeed");
			return (double) getEntitySpeed.Call(native, entity);
		}

		/// <summary>
		/// Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
		/// </summary>
		/// <param name="relative">Relative can be used for getting speed to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed). </param>
		public Vector3 GetEntitySpeedVector(int entity, bool relative)
		{
			if (getEntitySpeedVector == null) getEntitySpeedVector = (Function) native.GetObjectProperty("getEntitySpeedVector");
			return JSObjectToVector3(getEntitySpeedVector.Call(native, entity, relative));
		}

		public double GetEntityUprightValue(int entity)
		{
			if (getEntityUprightValue == null) getEntityUprightValue = (Function) native.GetObjectProperty("getEntityUprightValue");
			return (double) getEntityUprightValue.Call(native, entity);
		}

		public Vector3 GetEntityVelocity(int entity)
		{
			if (getEntityVelocity == null) getEntityVelocity = (Function) native.GetObjectProperty("getEntityVelocity");
			return JSObjectToVector3(getEntityVelocity.Call(native, entity));
		}

		/// <summary>
		/// </summary>
		/// <returns>Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).</returns>
		public int GetObjectIndexFromEntityIndex(int entity)
		{
			if (getObjectIndexFromEntityIndex == null) getObjectIndexFromEntityIndex = (Function) native.GetObjectProperty("getObjectIndexFromEntityIndex");
			return (int) getObjectIndexFromEntityIndex.Call(native, entity);
		}

		/// <summary>
		/// </summary>
		/// <returns>Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).</returns>
		public int GetPedIndexFromEntityIndex(int entity)
		{
			if (getPedIndexFromEntityIndex == null) getPedIndexFromEntityIndex = (Function) native.GetObjectProperty("getPedIndexFromEntityIndex");
			return (int) getPedIndexFromEntityIndex.Call(native, entity);
		}

		/// <summary>
		/// </summary>
		/// <returns>Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).</returns>
		public int GetVehicleIndexFromEntityIndex(int entity)
		{
			if (getVehicleIndexFromEntityIndex == null) getVehicleIndexFromEntityIndex = (Function) native.GetObjectProperty("getVehicleIndexFromEntityIndex");
			return (int) getVehicleIndexFromEntityIndex.Call(native, entity);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the coordinates of an entity-bone.</returns>
		public Vector3 GetWorldPositionOfEntityBone(int entity, int boneIndex)
		{
			if (getWorldPositionOfEntityBone == null) getWorldPositionOfEntityBone = (Function) native.GetObjectProperty("getWorldPositionOfEntityBone");
			return JSObjectToVector3(getWorldPositionOfEntityBone.Call(native, entity, boneIndex));
		}

		public int GetNearestPlayerToEntity(int entity)
		{
			if (getNearestPlayerToEntity == null) getNearestPlayerToEntity = (Function) native.GetObjectProperty("getNearestPlayerToEntity");
			return (int) getNearestPlayerToEntity.Call(native, entity);
		}

		public int GetNearestPlayerToEntityOnTeam(int entity, int team)
		{
			if (getNearestPlayerToEntityOnTeam == null) getNearestPlayerToEntityOnTeam = (Function) native.GetObjectProperty("getNearestPlayerToEntityOnTeam");
			return (int) getNearestPlayerToEntityOnTeam.Call(native, entity, team);
		}

		/// <summary>
		/// 0 = no entity
		/// 1 = ped
		/// 2 = vehicle
		/// 3 = object
		/// </summary>
		/// <returns>Returns:</returns>
		public int GetEntityType(int entity)
		{
			if (getEntityType == null) getEntityType = (Function) native.GetObjectProperty("getEntityType");
			return (int) getEntityType.Call(native, entity);
		}

		/// <summary>
		/// enum ePopulationType
		/// {
		/// POPTYPE_UNKNOWN = 0,
		/// POPTYPE_RANDOM_PERMANENT,
		/// POPTYPE_RANDOM_PARKED,
		/// POPTYPE_RANDOM_PATROL,
		/// POPTYPE_RANDOM_SCENARIO,
		/// POPTYPE_RANDOM_AMBIENT,
		/// POPTYPE_PERMANENT,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xF6F5161F4534EDFF
		/// </summary>
		public int GetEntityPopulationType(int entity)
		{
			if (getEntityPopulationType == null) getEntityPopulationType = (Function) native.GetObjectProperty("getEntityPopulationType");
			return (int) getEntityPopulationType.Call(native, entity);
		}

		public bool IsAnEntity(int handle)
		{
			if (isAnEntity == null) isAnEntity = (Function) native.GetObjectProperty("isAnEntity");
			return (bool) isAnEntity.Call(native, handle);
		}

		public bool IsEntityAPed(int entity)
		{
			if (isEntityAPed == null) isEntityAPed = (Function) native.GetObjectProperty("isEntityAPed");
			return (bool) isEntityAPed.Call(native, entity);
		}

		public bool IsEntityAMissionEntity(int entity)
		{
			if (isEntityAMissionEntity == null) isEntityAMissionEntity = (Function) native.GetObjectProperty("isEntityAMissionEntity");
			return (bool) isEntityAMissionEntity.Call(native, entity);
		}

		public bool IsEntityAVehicle(int entity)
		{
			if (isEntityAVehicle == null) isEntityAVehicle = (Function) native.GetObjectProperty("isEntityAVehicle");
			return (bool) isEntityAVehicle.Call(native, entity);
		}

		public bool IsEntityAnObject(int entity)
		{
			if (isEntityAnObject == null) isEntityAnObject = (Function) native.GetObjectProperty("isEntityAnObject");
			return (bool) isEntityAnObject.Call(native, entity);
		}

		/// <summary>
		/// Checks if entity is within x/y/zSize distance of x/y/z.
		/// Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
		/// </summary>
		/// <param name="p7">Last three are unknown ints, almost always 0, p8 = 1, p9 = 0</param>
		/// <param name="p8">Last three are unknown ints, almost always p7 = 0, 1, p9 = 0</param>
		/// <param name="p9">Last three are unknown ints, almost always p7 = 0, p8 = 1, 0</param>
		public bool IsEntityAtCoord(int entity, double xPos, double yPos, double zPos, double xSize, double ySize, double zSize, bool p7, bool p8, int p9)
		{
			if (isEntityAtCoord == null) isEntityAtCoord = (Function) native.GetObjectProperty("isEntityAtCoord");
			return (bool) isEntityAtCoord.Call(native, entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9);
		}

		/// <summary>
		/// Checks if entity1 is within the box defined by x/y/zSize of entity2.
		/// Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
		/// </summary>
		/// <param name="p5">Last three parameters are almost alwasy 0, p6 = 1, p7 = 0</param>
		/// <param name="p6">Last three parameters are almost alwasy p5 = 0, 1, p7 = 0</param>
		/// <param name="p7">Last three parameters are almost alwasy p5 = 0, p6 = 1, 0</param>
		public bool IsEntityAtEntity(int entity1, int entity2, double xSize, double ySize, double zSize, bool p5, bool p6, int p7)
		{
			if (isEntityAtEntity == null) isEntityAtEntity = (Function) native.GetObjectProperty("isEntityAtEntity");
			return (bool) isEntityAtEntity.Call(native, entity1, entity2, xSize, ySize, zSize, p5, p6, p7);
		}

		public bool IsEntityAttached(int entity)
		{
			if (isEntityAttached == null) isEntityAttached = (Function) native.GetObjectProperty("isEntityAttached");
			return (bool) isEntityAttached.Call(native, entity);
		}

		public bool IsEntityAttachedToAnyObject(int entity)
		{
			if (isEntityAttachedToAnyObject == null) isEntityAttachedToAnyObject = (Function) native.GetObjectProperty("isEntityAttachedToAnyObject");
			return (bool) isEntityAttachedToAnyObject.Call(native, entity);
		}

		public bool IsEntityAttachedToAnyPed(int entity)
		{
			if (isEntityAttachedToAnyPed == null) isEntityAttachedToAnyPed = (Function) native.GetObjectProperty("isEntityAttachedToAnyPed");
			return (bool) isEntityAttachedToAnyPed.Call(native, entity);
		}

		public bool IsEntityAttachedToAnyVehicle(int entity)
		{
			if (isEntityAttachedToAnyVehicle == null) isEntityAttachedToAnyVehicle = (Function) native.GetObjectProperty("isEntityAttachedToAnyVehicle");
			return (bool) isEntityAttachedToAnyVehicle.Call(native, entity);
		}

		public bool IsEntityAttachedToEntity(int from, int to)
		{
			if (isEntityAttachedToEntity == null) isEntityAttachedToEntity = (Function) native.GetObjectProperty("isEntityAttachedToEntity");
			return (bool) isEntityAttachedToEntity.Call(native, from, to);
		}

		public bool IsEntityDead(int entity, bool p1)
		{
			if (isEntityDead == null) isEntityDead = (Function) native.GetObjectProperty("isEntityDead");
			return (bool) isEntityDead.Call(native, entity, p1);
		}

		public bool IsEntityInAir(int entity)
		{
			if (isEntityInAir == null) isEntityInAir = (Function) native.GetObjectProperty("isEntityInAir");
			return (bool) isEntityInAir.Call(native, entity);
		}

		/// <summary>
		/// Angle is measured in degrees.
		/// These values are constant, most likely bogus:
		/// p8 = 0, p9 = 1, p10 = 0
		/// This method can also take two float<3> instead of 6 floats.
		/// </summary>
		/// <param name="angle">Angle is measured in degrees.</param>
		/// <param name="p8">0, p9 = 1, p10 = 0</param>
		/// <param name="p9">p8 = 0, 1, p10 = 0</param>
		/// <param name="p10">p8 = 0, p9 = 1, 0</param>
		/// <returns>Creates a spherical cone at origin that extends to surface with the angle specified. Then returns true if the entity is inside the spherical cone</returns>
		public bool IsEntityInAngledArea(int entity, double originX, double originY, double originZ, double edgeX, double edgeY, double edgeZ, double angle, bool p8, bool p9, object p10)
		{
			if (isEntityInAngledArea == null) isEntityInAngledArea = (Function) native.GetObjectProperty("isEntityInAngledArea");
			return (bool) isEntityInAngledArea.Call(native, entity, originX, originY, originZ, edgeX, edgeY, edgeZ, angle, p8, p9, p10);
		}

		public bool IsEntityInArea(int entity, double x1, double y1, double z1, double x2, double y2, double z2, bool p7, bool p8, object p9)
		{
			if (isEntityInArea == null) isEntityInArea = (Function) native.GetObjectProperty("isEntityInArea");
			return (bool) isEntityInArea.Call(native, entity, x1, y1, z1, x2, y2, z2, p7, p8, p9);
		}

		public bool IsEntityInZone(int entity, string zone)
		{
			if (isEntityInZone == null) isEntityInZone = (Function) native.GetObjectProperty("isEntityInZone");
			return (bool) isEntityInZone.Call(native, entity, zone);
		}

		public bool IsEntityInWater(int entity)
		{
			if (isEntityInWater == null) isEntityInWater = (Function) native.GetObjectProperty("isEntityInWater");
			return (bool) isEntityInWater.Call(native, entity);
		}

		/// <summary>
		/// Get how much of the entity is submerged.  1.0f is whole entity.
		/// </summary>
		public double GetEntitySubmergedLevel(int entity)
		{
			if (getEntitySubmergedLevel == null) getEntitySubmergedLevel = (Function) native.GetObjectProperty("getEntitySubmergedLevel");
			return (double) getEntitySubmergedLevel.Call(native, entity);
		}

		/// <summary>
		/// SET_ENTITY_R*
		/// </summary>
		public void _0x694E00132F2823ED(int entity, bool toggle)
		{
			if (__0x694E00132F2823ED == null) __0x694E00132F2823ED = (Function) native.GetObjectProperty("_0x694E00132F2823ED");
			__0x694E00132F2823ED.Call(native, entity, toggle);
		}

		/// <summary>
		/// This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.
		/// Chipping
		/// </summary>
		/// <returns>Returns true if the entity is in between the minimum and maximum values for the 2d screen coords.</returns>
		public bool IsEntityOnScreen(int entity)
		{
			if (isEntityOnScreen == null) isEntityOnScreen = (Function) native.GetObjectProperty("isEntityOnScreen");
			return (bool) isEntityOnScreen.Call(native, entity);
		}

		/// <summary>
		/// See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447
		/// Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)
		/// p4 is always 3 in the scripts.
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		public bool IsEntityPlayingAnim(int entity, string animDict, string animName, int taskFlag)
		{
			if (isEntityPlayingAnim == null) isEntityPlayingAnim = (Function) native.GetObjectProperty("isEntityPlayingAnim");
			return (bool) isEntityPlayingAnim.Call(native, entity, animDict, animName, taskFlag);
		}

		/// <summary>
		/// a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "AI::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.
		/// how can I make an entity static???
		/// </summary>
		public bool IsEntityStatic(int entity)
		{
			if (isEntityStatic == null) isEntityStatic = (Function) native.GetObjectProperty("isEntityStatic");
			return (bool) isEntityStatic.Call(native, entity);
		}

		public bool IsEntityTouchingEntity(int entity, int targetEntity)
		{
			if (isEntityTouchingEntity == null) isEntityTouchingEntity = (Function) native.GetObjectProperty("isEntityTouchingEntity");
			return (bool) isEntityTouchingEntity.Call(native, entity, targetEntity);
		}

		public bool IsEntityTouchingModel(int entity, int modelHash)
		{
			if (isEntityTouchingModel == null) isEntityTouchingModel = (Function) native.GetObjectProperty("isEntityTouchingModel");
			return (bool) isEntityTouchingModel.Call(native, entity, modelHash);
		}

		public bool IsEntityUpright(int entity, double angle)
		{
			if (isEntityUpright == null) isEntityUpright = (Function) native.GetObjectProperty("isEntityUpright");
			return (bool) isEntityUpright.Call(native, entity, angle);
		}

		public bool IsEntityUpsidedown(int entity)
		{
			if (isEntityUpsidedown == null) isEntityUpsidedown = (Function) native.GetObjectProperty("isEntityUpsidedown");
			return (bool) isEntityUpsidedown.Call(native, entity);
		}

		public bool IsEntityVisible(int entity)
		{
			if (isEntityVisible == null) isEntityVisible = (Function) native.GetObjectProperty("isEntityVisible");
			return (bool) isEntityVisible.Call(native, entity);
		}

		public bool IsEntityVisibleToScript(int entity)
		{
			if (isEntityVisibleToScript == null) isEntityVisibleToScript = (Function) native.GetObjectProperty("isEntityVisibleToScript");
			return (bool) isEntityVisibleToScript.Call(native, entity);
		}

		public bool IsEntityOccluded(int entity)
		{
			if (isEntityOccluded == null) isEntityOccluded = (Function) native.GetObjectProperty("isEntityOccluded");
			return (bool) isEntityOccluded.Call(native, entity);
		}

		public bool WouldEntityBeOccluded(int entityModelHash, double x, double y, double z, bool p4)
		{
			if (wouldEntityBeOccluded == null) wouldEntityBeOccluded = (Function) native.GetObjectProperty("wouldEntityBeOccluded");
			return (bool) wouldEntityBeOccluded.Call(native, entityModelHash, x, y, z, p4);
		}

		public bool IsEntityWaitingForWorldCollision(int entity)
		{
			if (isEntityWaitingForWorldCollision == null) isEntityWaitingForWorldCollision = (Function) native.GetObjectProperty("isEntityWaitingForWorldCollision");
			return (bool) isEntityWaitingForWorldCollision.Call(native, entity);
		}

		/// <summary>
		/// p6/relative - makes the xyz force not relative to world coords, but to something else
		/// p7/highForce - setting false will make the force really low
		/// </summary>
		public void ApplyForceToEntityCenterOfMass(int entity, int forceType, double x, double y, double z, bool p5, bool isDirectionRel, bool isForceRel, bool p8)
		{
			if (applyForceToEntityCenterOfMass == null) applyForceToEntityCenterOfMass = (Function) native.GetObjectProperty("applyForceToEntityCenterOfMass");
			applyForceToEntityCenterOfMass.Call(native, entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8);
		}

		/// <summary>
		/// Documented here:
		/// gtaforums.com/topic/885669-precisely-define-object-physics/
		/// gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
		/// forceFlags:
		/// First bit (lowest): Strong force flag, factor 100
		/// Second bit: Unkown flag
		/// Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
		/// If higher bits are unequal 0 the function doesn't applay any forces at all.
		/// (As integer possible values are 0-7)
		/// See NativeDB for reference: http://natives.altv.mp/#/0xC5F68BE9613E2D18
		/// </summary>
		public void ApplyForceToEntity(int entity, int forceFlags, double x, double y, double z, double offX, double offY, double offZ, int boneIndex, bool isDirectionRel, bool ignoreUpVec, bool isForceRel, bool p12, bool p13)
		{
			if (applyForceToEntity == null) applyForceToEntity = (Function) native.GetObjectProperty("applyForceToEntity");
			applyForceToEntity.Call(native, entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
		}

		/// <summary>
		/// Attaches entity1 to bone (boneIndex) of entity2.
		/// boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
		/// useSoftPinning - if set to false attached entity will not detach when fixed
		/// collision - controls collision between the two entities (FALSE disables collision).
		/// isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
		/// vertexIndex - position of vertex
		/// fixedRot - if false it ignores entity vector
		/// </summary>
		/// <param name="boneIndex">this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.</param>
		/// <param name="useSoftPinning">if set to false attached entity will not detach when fixed</param>
		/// <param name="collision">controls collision between the two entities (FALSE disables collision).</param>
		/// <param name="isPed">pitch doesnt work when false and roll will only work on negative numbers (only peds)</param>
		/// <param name="vertexIndex">position of vertex</param>
		/// <param name="fixedRot">if false it ignores entity vector </param>
		public void AttachEntityToEntity(int entity1, int entity2, int boneIndex, double xPos, double yPos, double zPos, double xRot, double yRot, double zRot, bool p9, bool useSoftPinning, bool collision, bool isPed, int vertexIndex, bool fixedRot)
		{
			if (attachEntityToEntity == null) attachEntityToEntity = (Function) native.GetObjectProperty("attachEntityToEntity");
			attachEntityToEntity.Call(native, entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot);
		}

		public void AttachEntityBoneToEntityBone(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (attachEntityBoneToEntityBone == null) attachEntityBoneToEntityBone = (Function) native.GetObjectProperty("attachEntityBoneToEntityBone");
			attachEntityBoneToEntityBone.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void AttachEntityBoneToEntityBonePhysically(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (attachEntityBoneToEntityBonePhysically == null) attachEntityBoneToEntityBonePhysically = (Function) native.GetObjectProperty("attachEntityBoneToEntityBonePhysically");
			attachEntityBoneToEntityBonePhysically.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// breakForce is the amount of force required to break the bond.
		/// p14 - is always 1 in scripts
		/// p15 - is 1 or 0 in scripts - unknoun what it does
		/// p16 - controls collision between the two entities (FALSE disables collision).
		/// p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
		/// p18 - is always 2 in scripts.
		/// </summary>
		/// <param name="breakForce">is the amount of force required to break the bond.</param>
		/// <param name="p15">is 1 or 0 in scripts - unknoun what it does</param>
		/// <param name="p17">do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)</param>
		/// <param name="p18">is always 2 in scripts.</param>
		public void AttachEntityToEntityPhysically(int entity1, int entity2, int boneIndex1, int boneIndex2, double xPos1, double yPos1, double zPos1, double xPos2, double yPos2, double zPos2, double xRot, double yRot, double zRot, double breakForce, bool fixedRot, bool p15, bool collision, bool p17, int p18)
		{
			if (attachEntityToEntityPhysically == null) attachEntityToEntityPhysically = (Function) native.GetObjectProperty("attachEntityToEntityPhysically");
			attachEntityToEntityPhysically.Call(native, entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18);
		}

		/// <summary>
		/// Called to update entity attachments.
		/// </summary>
		public void ProcessEntityAttachments(int entity)
		{
			if (processEntityAttachments == null) processEntityAttachments = (Function) native.GetObjectProperty("processEntityAttachments");
			processEntityAttachments.Call(native, entity);
		}

		/// <summary>
		/// list:
		/// pastebin.com/D7JMnX1g
		/// BoneNames:
		/// chassis,
		/// windscreen,
		/// seat_pside_r,
		/// seat_dside_r,
		/// bodyshell,
		/// suspension_lm,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFB71170B7E76ACBA
		/// </summary>
		/// <returns>Returns the index of the bone. If the bone was not found, -1 will be returned.</returns>
		public int GetEntityBoneIndexByName(int entity, string boneName)
		{
			if (getEntityBoneIndexByName == null) getEntityBoneIndexByName = (Function) native.GetObjectProperty("getEntityBoneIndexByName");
			return (int) getEntityBoneIndexByName.Call(native, entity, boneName);
		}

		public void ClearEntityLastDamageEntity(int entity)
		{
			if (clearEntityLastDamageEntity == null) clearEntityLastDamageEntity = (Function) native.GetObjectProperty("clearEntityLastDamageEntity");
			clearEntityLastDamageEntity.Call(native, entity);
		}

		/// <summary>
		/// Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) DeleteEntity(int entity)
		{
			if (deleteEntity == null) deleteEntity = (Function) native.GetObjectProperty("deleteEntity");
			var results = (Array) deleteEntity.Call(native, entity);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// p1 and p2 have no effect
		/// maybe a quick disassembly will tell us what they do
		/// if p2 is set to true, the both entities won't collide with the other until the distance between them is above 4 meters.
		/// p1?
		/// </summary>
		/// <param name="p1">and p2 have no effect </param>
		public void DetachEntity(int entity, bool p1, bool collision)
		{
			if (detachEntity == null) detachEntity = (Function) native.GetObjectProperty("detachEntity");
			detachEntity.Call(native, entity, p1, collision);
		}

		public void FreezeEntityPosition(int entity, bool toggle)
		{
			if (freezeEntityPosition == null) freezeEntityPosition = (Function) native.GetObjectProperty("freezeEntityPosition");
			freezeEntityPosition.Call(native, entity, toggle);
		}

		/// <summary>
		/// SET_ENTITY_*
		/// </summary>
		public void SetEntitySomething(int entity, bool toggle)
		{
			if (setEntitySomething == null) setEntitySomething = (Function) native.GetObjectProperty("setEntitySomething");
			setEntitySomething.Call(native, entity, toggle);
		}

		/// <summary>
		/// delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
		/// The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <param name="delta">and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.</param>
		public bool PlayEntityAnim(int entity, string animName, string animDict, double p3, bool loop, bool stayInAnim, bool p6, double delta, object bitset)
		{
			if (playEntityAnim == null) playEntityAnim = (Function) native.GetObjectProperty("playEntityAnim");
			return (bool) playEntityAnim.Call(native, entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset);
		}

		/// <summary>
		/// p4 and p7 are usually 1000.0f.
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <param name="p4">and p7 are usually 1000.0f.</param>
		public bool PlaySynchronizedEntityAnim(int entity, int syncedScene, string animation, string propName, double p4, double p5, object p6, double p7)
		{
			if (playSynchronizedEntityAnim == null) playSynchronizedEntityAnim = (Function) native.GetObjectProperty("playSynchronizedEntityAnim");
			return (bool) playSynchronizedEntityAnim.Call(native, entity, syncedScene, animation, propName, p4, p5, p6, p7);
		}

		/// <summary>
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) PlaySynchronizedMapEntityAnim(double p0, double p1, double p2, double p3, object p4, object p5, object p6, object p7, double p8, double p9, object p10, double p11)
		{
			if (playSynchronizedMapEntityAnim == null) playSynchronizedMapEntityAnim = (Function) native.GetObjectProperty("playSynchronizedMapEntityAnim");
			var results = (Array) playSynchronizedMapEntityAnim.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
			return ((bool) results[0], results[1], results[2]);
		}

		public bool StopSynchronizedMapEntityAnim(double p0, double p1, double p2, double p3, object p4, double p5)
		{
			if (stopSynchronizedMapEntityAnim == null) stopSynchronizedMapEntityAnim = (Function) native.GetObjectProperty("stopSynchronizedMapEntityAnim");
			return (bool) stopSynchronizedMapEntityAnim.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
		/// </summary>
		public object StopEntityAnim(int entity, string animation, string animGroup, double p3)
		{
			if (stopEntityAnim == null) stopEntityAnim = (Function) native.GetObjectProperty("stopEntityAnim");
			return stopEntityAnim.Call(native, entity, animation, animGroup, p3);
		}

		/// <summary>
		/// p1 sync task id?
		/// </summary>
		/// <param name="p1">sync task id?</param>
		public bool StopSynchronizedEntityAnim(int entity, double p1, bool p2)
		{
			if (stopSynchronizedEntityAnim == null) stopSynchronizedEntityAnim = (Function) native.GetObjectProperty("stopSynchronizedEntityAnim");
			return (bool) stopSynchronizedEntityAnim.Call(native, entity, p1, p2);
		}

		/// <summary>
		/// if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("CreateObject")))
		/// </summary>
		public bool HasAnimEventFired(int entity, int actionHash)
		{
			if (hasAnimEventFired == null) hasAnimEventFired = (Function) native.GetObjectProperty("hasAnimEventFired");
			return (bool) hasAnimEventFired.Call(native, entity, actionHash);
		}

		/// <summary>
		/// In the script "player_scene_t_bbfight.c4":
		/// "if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_416], v_9, &v_A, &v_B))"
		/// -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
		/// -- &l_19F[v_416] (p1) is used in other natives in the script as the "animation" param.
		/// -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
		/// --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:
		/// "if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
		/// Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
		/// -alphazolam
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) FindAnimEventPhase(string animDictionary, string animName, string p2, object p3, object p4)
		{
			if (findAnimEventPhase == null) findAnimEventPhase = (Function) native.GetObjectProperty("findAnimEventPhase");
			var results = (Array) findAnimEventPhase.Call(native, animDictionary, animName, p2, p3, p4);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		public void SetEntityAnimCurrentTime(int entity, string animDictionary, string animName, double time)
		{
			if (setEntityAnimCurrentTime == null) setEntityAnimCurrentTime = (Function) native.GetObjectProperty("setEntityAnimCurrentTime");
			setEntityAnimCurrentTime.Call(native, entity, animDictionary, animName, time);
		}

		/// <summary>
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		public void SetEntityAnimSpeed(int entity, string animDictionary, string animName, double speedMultiplier)
		{
			if (setEntityAnimSpeed == null) setEntityAnimSpeed = (Function) native.GetObjectProperty("setEntityAnimSpeed");
			setEntityAnimSpeed.Call(native, entity, animDictionary, animName, speedMultiplier);
		}

		/// <summary>
		/// Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
		/// p1 has no effect when either its on or off
		/// maybe a quick disassembly will tell us what it does
		/// p2 has no effect when either its on or off
		/// maybe a quick disassembly will tell us what it does
		/// </summary>
		/// <param name="p1">has no effect when either its on or off </param>
		/// <param name="p2">has no effect when either its on or off </param>
		public void SetEntityAsMissionEntity(int entity, bool p1, bool p2)
		{
			if (setEntityAsMissionEntity == null) setEntityAsMissionEntity = (Function) native.GetObjectProperty("setEntityAsMissionEntity");
			setEntityAsMissionEntity.Call(native, entity, p1, p2);
		}

		/// <summary>
		/// Marks the specified entity (ped, vehicle or object) as no longer needed.
		/// Entities marked as no longer needed, will be deleted as the engine sees fit.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) SetEntityAsNoLongerNeeded(int entity)
		{
			if (setEntityAsNoLongerNeeded == null) setEntityAsNoLongerNeeded = (Function) native.GetObjectProperty("setEntityAsNoLongerNeeded");
			var results = (Array) setEntityAsNoLongerNeeded.Call(native, entity);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) SetPedAsNoLongerNeeded(int ped)
		{
			if (setPedAsNoLongerNeeded == null) setPedAsNoLongerNeeded = (Function) native.GetObjectProperty("setPedAsNoLongerNeeded");
			var results = (Array) setPedAsNoLongerNeeded.Call(native, ped);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) SetVehicleAsNoLongerNeeded(int vehicle)
		{
			if (setVehicleAsNoLongerNeeded == null) setVehicleAsNoLongerNeeded = (Function) native.GetObjectProperty("setVehicleAsNoLongerNeeded");
			var results = (Array) setVehicleAsNoLongerNeeded.Call(native, vehicle);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) SetObjectAsNoLongerNeeded(int @object)
		{
			if (setObjectAsNoLongerNeeded == null) setObjectAsNoLongerNeeded = (Function) native.GetObjectProperty("setObjectAsNoLongerNeeded");
			var results = (Array) setObjectAsNoLongerNeeded.Call(native, @object);
			return (results[0], (int) results[1]);
		}

		public void SetEntityCanBeDamaged(int entity, bool toggle)
		{
			if (setEntityCanBeDamaged == null) setEntityCanBeDamaged = (Function) native.GetObjectProperty("setEntityCanBeDamaged");
			setEntityCanBeDamaged.Call(native, entity, toggle);
		}

		public bool GetEntityCanBeDamaged(int entity)
		{
			if (getEntityCanBeDamaged == null) getEntityCanBeDamaged = (Function) native.GetObjectProperty("getEntityCanBeDamaged");
			return (bool) getEntityCanBeDamaged.Call(native, entity);
		}

		public void SetEntityCanBeDamagedByRelationshipGroup(int entity, bool bCanBeDamaged, int relGroup)
		{
			if (setEntityCanBeDamagedByRelationshipGroup == null) setEntityCanBeDamagedByRelationshipGroup = (Function) native.GetObjectProperty("setEntityCanBeDamagedByRelationshipGroup");
			setEntityCanBeDamagedByRelationshipGroup.Call(native, entity, bCanBeDamaged, relGroup);
		}

		public void _0x352E2B5CF420BF3B(object p0, object p1)
		{
			if (__0x352E2B5CF420BF3B == null) __0x352E2B5CF420BF3B = (Function) native.GetObjectProperty("_0x352E2B5CF420BF3B");
			__0x352E2B5CF420BF3B.Call(native, p0, p1);
		}

		/// <summary>
		/// Sets whether the entity can be targeted without being in line-of-sight.
		/// </summary>
		public void SetEntityCanBeTargetedWithoutLos(int entity, bool toggle)
		{
			if (setEntityCanBeTargetedWithoutLos == null) setEntityCanBeTargetedWithoutLos = (Function) native.GetObjectProperty("setEntityCanBeTargetedWithoutLos");
			setEntityCanBeTargetedWithoutLos.Call(native, entity, toggle);
		}

		public void SetEntityCollision(int entity, bool toggle, bool keepPhysics)
		{
			if (setEntityCollision == null) setEntityCollision = (Function) native.GetObjectProperty("setEntityCollision");
			setEntityCollision.Call(native, entity, toggle, keepPhysics);
		}

		public bool GetEntityCollisionDisabled(int entity)
		{
			if (getEntityCollisionDisabled == null) getEntityCollisionDisabled = (Function) native.GetObjectProperty("getEntityCollisionDisabled");
			return (bool) getEntityCollisionDisabled.Call(native, entity);
		}

		/// <summary>
		/// p2 - mainly set as false in scripts
		/// </summary>
		/// <param name="p2">mainly set as false in scripts</param>
		public void SetEntityCompletelyDisableCollision(int entity, bool p1, bool p2)
		{
			if (setEntityCompletelyDisableCollision == null) setEntityCompletelyDisableCollision = (Function) native.GetObjectProperty("setEntityCompletelyDisableCollision");
			setEntityCompletelyDisableCollision.Call(native, entity, p1, p2);
		}

		/// <summary>
		/// p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities.
		/// Often ends with 1, 0, 0, 1); in the scripts. It works.
		/// Axis - Invert Axis Flags
		/// </summary>
		public void SetEntityCoords(int entity, double xPos, double yPos, double zPos, bool xAxis, bool yAxis, bool zAxis, bool clearArea)
		{
			if (setEntityCoords == null) setEntityCoords = (Function) native.GetObjectProperty("setEntityCoords");
			setEntityCoords.Call(native, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);
		}

		public void SetEntityCoords2(int entity, double xPos, double yPos, double zPos, bool xAxis, bool yAxis, bool zAxis, bool clearArea)
		{
			if (setEntityCoords2 == null) setEntityCoords2 = (Function) native.GetObjectProperty("setEntityCoords2");
			setEntityCoords2.Call(native, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);
		}

		/// <summary>
		/// Axis - Invert Axis Flags
		/// </summary>
		public void SetEntityCoordsNoOffset(int entity, double xPos, double yPos, double zPos, bool xAxis, bool yAxis, bool zAxis)
		{
			if (setEntityCoordsNoOffset == null) setEntityCoordsNoOffset = (Function) native.GetObjectProperty("setEntityCoordsNoOffset");
			setEntityCoordsNoOffset.Call(native, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis);
		}

		public void SetEntityDynamic(int entity, bool toggle)
		{
			if (setEntityDynamic == null) setEntityDynamic = (Function) native.GetObjectProperty("setEntityDynamic");
			setEntityDynamic.Call(native, entity, toggle);
		}

		public void SetEntityHeading(int entity, double heading)
		{
			if (setEntityHeading == null) setEntityHeading = (Function) native.GetObjectProperty("setEntityHeading");
			setEntityHeading.Call(native, entity, heading);
		}

		/// <summary>
		/// health >= 0
		/// </summary>
		/// <param name="health">>= 0</param>
		public void SetEntityHealth(int entity, int health, int p2)
		{
			if (setEntityHealth == null) setEntityHealth = (Function) native.GetObjectProperty("setEntityHealth");
			setEntityHealth.Call(native, entity, health, p2);
		}

		/// <summary>
		/// Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
		/// If you use this for a ped and you want Ragdoll to stay enabled, then do:
		/// *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
		/// Use this if you want to get the invincibility status:
		/// bool IsPedInvincible(Ped ped)
		/// {
		/// auto addr = getScriptHandleBaseAddress(ped);
		/// if (addr)
		/// {
		/// See NativeDB for reference: http://natives.altv.mp/#/0x3882114BDE571AD4
		/// </summary>
		public void SetEntityInvincible(int entity, bool toggle)
		{
			if (setEntityInvincible == null) setEntityInvincible = (Function) native.GetObjectProperty("setEntityInvincible");
			setEntityInvincible.Call(native, entity, toggle);
		}

		public void SetEntityIsTargetPriority(int entity, bool p1, double p2)
		{
			if (setEntityIsTargetPriority == null) setEntityIsTargetPriority = (Function) native.GetObjectProperty("setEntityIsTargetPriority");
			setEntityIsTargetPriority.Call(native, entity, p1, p2);
		}

		public void SetEntityLights(int entity, bool toggle)
		{
			if (setEntityLights == null) setEntityLights = (Function) native.GetObjectProperty("setEntityLights");
			setEntityLights.Call(native, entity, toggle);
		}

		public void SetEntityLoadCollisionFlag(int entity, bool toggle, object p2)
		{
			if (setEntityLoadCollisionFlag == null) setEntityLoadCollisionFlag = (Function) native.GetObjectProperty("setEntityLoadCollisionFlag");
			setEntityLoadCollisionFlag.Call(native, entity, toggle, p2);
		}

		public bool HasCollisionLoadedAroundEntity(int entity)
		{
			if (hasCollisionLoadedAroundEntity == null) hasCollisionLoadedAroundEntity = (Function) native.GetObjectProperty("hasCollisionLoadedAroundEntity");
			return (bool) hasCollisionLoadedAroundEntity.Call(native, entity);
		}

		public void SetEntityMaxSpeed(int entity, double speed)
		{
			if (setEntityMaxSpeed == null) setEntityMaxSpeed = (Function) native.GetObjectProperty("setEntityMaxSpeed");
			setEntityMaxSpeed.Call(native, entity, speed);
		}

		public void SetEntityOnlyDamagedByPlayer(int entity, bool toggle)
		{
			if (setEntityOnlyDamagedByPlayer == null) setEntityOnlyDamagedByPlayer = (Function) native.GetObjectProperty("setEntityOnlyDamagedByPlayer");
			setEntityOnlyDamagedByPlayer.Call(native, entity, toggle);
		}

		public void SetEntityOnlyDamagedByRelationshipGroup(int entity, bool p1, object p2)
		{
			if (setEntityOnlyDamagedByRelationshipGroup == null) setEntityOnlyDamagedByRelationshipGroup = (Function) native.GetObjectProperty("setEntityOnlyDamagedByRelationshipGroup");
			setEntityOnlyDamagedByRelationshipGroup.Call(native, entity, p1, p2);
		}

		/// <summary>
		/// Enable / disable each type of damage.
		/// Can't get drownProof to work.
		/// --------------
		/// p7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);
		/// </summary>
		/// <param name="p7">is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);</param>
		public void SetEntityProofs(int entity, bool bulletProof, bool fireProof, bool explosionProof, bool collisionProof, bool meleeProof, bool p6, bool p7, bool drownProof)
		{
			if (setEntityProofs == null) setEntityProofs = (Function) native.GetObjectProperty("setEntityProofs");
			setEntityProofs.Call(native, entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, bool, bool, bool, bool, bool, bool, bool, bool></returns>
		public (bool, bool, bool, bool, bool, bool, bool, bool, bool) GetEntityProofs(int entity, bool bulletProof, bool fireProof, bool explosionProof, bool collisionProof, bool meleeProof, bool p6, bool p7, bool drownProof)
		{
			if (getEntityProofs == null) getEntityProofs = (Function) native.GetObjectProperty("getEntityProofs");
			var results = (Array) getEntityProofs.Call(native, entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof);
			return ((bool) results[0], (bool) results[1], (bool) results[2], (bool) results[3], (bool) results[4], (bool) results[5], (bool) results[6], (bool) results[7], (bool) results[8]);
		}

		/// <summary>
		/// w is the correct parameter name!
		/// </summary>
		/// <param name="w">is the correct parameter name!</param>
		public void SetEntityQuaternion(int entity, double x, double y, double z, double w)
		{
			if (setEntityQuaternion == null) setEntityQuaternion = (Function) native.GetObjectProperty("setEntityQuaternion");
			setEntityQuaternion.Call(native, entity, x, y, z, w);
		}

		public void SetEntityRecordsCollisions(int entity, bool toggle)
		{
			if (setEntityRecordsCollisions == null) setEntityRecordsCollisions = (Function) native.GetObjectProperty("setEntityRecordsCollisions");
			setEntityRecordsCollisions.Call(native, entity, toggle);
		}

		/// <summary>
		/// rotationOrder refers to the order yaw pitch roll is applied
		/// value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation.
		/// Unsure what value corresponds to what rotation order, more testing will be needed for that.
		/// For the most part R* uses 1 or 2 as the order.
		/// p5 is usually set as true
		/// </summary>
		/// <param name="rotationOrder">refers to the order yaw pitch roll is applied</param>
		/// <param name="p5">is usually set as true</param>
		public void SetEntityRotation(int entity, double pitch, double roll, double yaw, int rotationOrder, bool p5)
		{
			if (setEntityRotation == null) setEntityRotation = (Function) native.GetObjectProperty("setEntityRotation");
			setEntityRotation.Call(native, entity, pitch, roll, yaw, rotationOrder, p5);
		}

		/// <summary>
		/// unk was always 0.
		/// </summary>
		/// <param name="unk">was always 0.</param>
		public void SetEntityVisible(int entity, bool toggle, bool unk)
		{
			if (setEntityVisible == null) setEntityVisible = (Function) native.GetObjectProperty("setEntityVisible");
			setEntityVisible.Call(native, entity, toggle, unk);
		}

		/// <summary>
		/// SET_ENTITY_*
		/// </summary>
		public void _0xC34BC448DA29F5E9(int entity, bool toggle)
		{
			if (__0xC34BC448DA29F5E9 == null) __0xC34BC448DA29F5E9 = (Function) native.GetObjectProperty("_0xC34BC448DA29F5E9");
			__0xC34BC448DA29F5E9.Call(native, entity, toggle);
		}

		/// <summary>
		/// SET_ENTITY_M*
		/// </summary>
		public void _0xE66377CDDADA4810(int entity, bool p1)
		{
			if (__0xE66377CDDADA4810 == null) __0xE66377CDDADA4810 = (Function) native.GetObjectProperty("_0xE66377CDDADA4810");
			__0xE66377CDDADA4810.Call(native, entity, p1);
		}

		/// <summary>
		/// Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
		/// </summary>
		public void SetEntityVelocity(int entity, double x, double y, double z)
		{
			if (setEntityVelocity == null) setEntityVelocity = (Function) native.GetObjectProperty("setEntityVelocity");
			setEntityVelocity.Call(native, entity, x, y, z);
		}

		public void SetEntityHasGravity(int entity, bool toggle)
		{
			if (setEntityHasGravity == null) setEntityHasGravity = (Function) native.GetObjectProperty("setEntityHasGravity");
			setEntityHasGravity.Call(native, entity, toggle);
		}

		/// <summary>
		/// LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
		/// </summary>
		public void SetEntityLodDist(int entity, int value)
		{
			if (setEntityLodDist == null) setEntityLodDist = (Function) native.GetObjectProperty("setEntityLodDist");
			setEntityLodDist.Call(native, entity, value);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the LOD distance of an entity.</returns>
		public int GetEntityLodDist(int entity)
		{
			if (getEntityLodDist == null) getEntityLodDist = (Function) native.GetObjectProperty("getEntityLodDist");
			return (int) getEntityLodDist.Call(native, entity);
		}

		/// <summary>
		/// skin - everything alpha except skin
		/// Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
		/// </summary>
		/// <param name="skin">everything alpha except skin</param>
		public void SetEntityAlpha(int entity, int alphaLevel, bool skin)
		{
			if (setEntityAlpha == null) setEntityAlpha = (Function) native.GetObjectProperty("setEntityAlpha");
			setEntityAlpha.Call(native, entity, alphaLevel, skin);
		}

		public int GetEntityAlpha(int entity)
		{
			if (getEntityAlpha == null) getEntityAlpha = (Function) native.GetObjectProperty("getEntityAlpha");
			return (int) getEntityAlpha.Call(native, entity);
		}

		public void ResetEntityAlpha(int entity)
		{
			if (resetEntityAlpha == null) resetEntityAlpha = (Function) native.GetObjectProperty("resetEntityAlpha");
			resetEntityAlpha.Call(native, entity);
		}

		public void _0x490861B88F4FD846(object p0)
		{
			if (__0x490861B88F4FD846 == null) __0x490861B88F4FD846 = (Function) native.GetObjectProperty("_0x490861B88F4FD846");
			__0x490861B88F4FD846.Call(native, p0);
		}

		public void _0xCEA7C8E1B48FF68C(object p0, object p1)
		{
			if (__0xCEA7C8E1B48FF68C == null) __0xCEA7C8E1B48FF68C = (Function) native.GetObjectProperty("_0xCEA7C8E1B48FF68C");
			__0xCEA7C8E1B48FF68C.Call(native, p0, p1);
		}

		/// <summary>
		/// Only called once in the scripts.
		/// Related to weapon objects.
		/// </summary>
		public void _0x5C3B791D580E0BC2(int entity, double p1)
		{
			if (__0x5C3B791D580E0BC2 == null) __0x5C3B791D580E0BC2 = (Function) native.GetObjectProperty("_0x5C3B791D580E0BC2");
			__0x5C3B791D580E0BC2.Call(native, entity, p1);
		}

		public void SetEntityAlwaysPrerender(int entity, bool toggle)
		{
			if (setEntityAlwaysPrerender == null) setEntityAlwaysPrerender = (Function) native.GetObjectProperty("setEntityAlwaysPrerender");
			setEntityAlwaysPrerender.Call(native, entity, toggle);
		}

		public void SetEntityRenderScorched(int entity, bool toggle)
		{
			if (setEntityRenderScorched == null) setEntityRenderScorched = (Function) native.GetObjectProperty("setEntityRenderScorched");
			setEntityRenderScorched.Call(native, entity, toggle);
		}

		/// <summary>
		/// Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
		/// 0 = green
		/// 1 = red
		/// 2 = yellow
		/// changing lights may not change the behavior of vehicles
		/// </summary>
		public void SetEntityTrafficlightOverride(int entity, int state)
		{
			if (setEntityTrafficlightOverride == null) setEntityTrafficlightOverride = (Function) native.GetObjectProperty("setEntityTrafficlightOverride");
			setEntityTrafficlightOverride.Call(native, entity, state);
		}

		/// <summary>
		/// Related to cutscene entities. Unsure about the use.
		/// SET_ENTITY_*
		/// </summary>
		public void _0x78E8E3A640178255(int entity)
		{
			if (__0x78E8E3A640178255 == null) __0x78E8E3A640178255 = (Function) native.GetObjectProperty("_0x78E8E3A640178255");
			__0x78E8E3A640178255.Call(native, entity);
		}

		/// <summary>
		/// Only works with objects!
		/// Network players do not see changes done with this.
		/// - Did ya try modifying p6 lol
		/// </summary>
		public void CreateModelSwap(double x, double y, double z, double radius, int originalModel, int newModel, bool p6)
		{
			if (createModelSwap == null) createModelSwap = (Function) native.GetObjectProperty("createModelSwap");
			createModelSwap.Call(native, x, y, z, radius, originalModel, newModel, p6);
		}

		public void RemoveModelSwap(double x, double y, double z, double radius, int originalModel, int newModel, bool p6)
		{
			if (removeModelSwap == null) removeModelSwap = (Function) native.GetObjectProperty("removeModelSwap");
			removeModelSwap.Call(native, x, y, z, radius, originalModel, newModel, p6);
		}

		/// <summary>
		/// p5 = sets as true in scripts
		/// Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
		/// Network players do not see changes done with this.
		/// </summary>
		/// <param name="p5">sets as true in scripts</param>
		public void CreateModelHide(double x, double y, double z, double radius, int model, bool p5)
		{
			if (createModelHide == null) createModelHide = (Function) native.GetObjectProperty("createModelHide");
			createModelHide.Call(native, x, y, z, radius, model, p5);
		}

		public void CreateModelHideExcludingScriptObjects(double x, double y, double z, double radius, int model, bool p5)
		{
			if (createModelHideExcludingScriptObjects == null) createModelHideExcludingScriptObjects = (Function) native.GetObjectProperty("createModelHideExcludingScriptObjects");
			createModelHideExcludingScriptObjects.Call(native, x, y, z, radius, model, p5);
		}

		public void RemoveModelHide(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (removeModelHide == null) removeModelHide = (Function) native.GetObjectProperty("removeModelHide");
			removeModelHide.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void CreateForcedObject(double x, double y, double z, object p3, int modelHash, bool p5)
		{
			if (createForcedObject == null) createForcedObject = (Function) native.GetObjectProperty("createForcedObject");
			createForcedObject.Call(native, x, y, z, p3, modelHash, p5);
		}

		public void RemoveForcedObject(object p0, object p1, object p2, object p3, object p4)
		{
			if (removeForcedObject == null) removeForcedObject = (Function) native.GetObjectProperty("removeForcedObject");
			removeForcedObject.Call(native, p0, p1, p2, p3, p4);
		}

		public void SetEntityNoCollisionEntity(int entity1, int entity2, bool thisFrameOnly)
		{
			if (setEntityNoCollisionEntity == null) setEntityNoCollisionEntity = (Function) native.GetObjectProperty("setEntityNoCollisionEntity");
			setEntityNoCollisionEntity.Call(native, entity1, entity2, thisFrameOnly);
		}

		public void SetEntityMotionBlur(int entity, bool toggle)
		{
			if (setEntityMotionBlur == null) setEntityMotionBlur = (Function) native.GetObjectProperty("setEntityMotionBlur");
			setEntityMotionBlur.Call(native, entity, toggle);
		}

		/// <summary>
		/// p1 always false.
		/// </summary>
		public void SetCanAutoVaultOnEntity(int entity, bool toggle)
		{
			if (setCanAutoVaultOnEntity == null) setCanAutoVaultOnEntity = (Function) native.GetObjectProperty("setCanAutoVaultOnEntity");
			setCanAutoVaultOnEntity.Call(native, entity, toggle);
		}

		/// <summary>
		/// p1 always false.
		/// </summary>
		public void SetCanClimbOnEntity(int entity, bool toggle)
		{
			if (setCanClimbOnEntity == null) setCanClimbOnEntity = (Function) native.GetObjectProperty("setCanClimbOnEntity");
			setCanClimbOnEntity.Call(native, entity, toggle);
		}

		/// <summary>
		/// SET_*
		/// Only called within 1 script for x360. 'fm_mission_controller' and it used on an object.
		/// Ran after these 2 natives,
		/// set_object_targettable(uParam0, 0);
		/// set_entity_invincible(uParam0, 1);
		/// </summary>
		public void _0xDC6F8601FAF2E893(int entity, bool toggle)
		{
			if (__0xDC6F8601FAF2E893 == null) __0xDC6F8601FAF2E893 = (Function) native.GetObjectProperty("_0xDC6F8601FAF2E893");
			__0xDC6F8601FAF2E893.Call(native, entity, toggle);
		}

		/// <summary>
		/// SET_ENTITY_*
		/// </summary>
		public void _0x2C2E3DC128F44309(int entity, bool p1)
		{
			if (__0x2C2E3DC128F44309 == null) __0x2C2E3DC128F44309 = (Function) native.GetObjectProperty("_0x2C2E3DC128F44309");
			__0x2C2E3DC128F44309.Call(native, entity, p1);
		}

		/// <summary>
		/// SET_ENTITY_*
		/// </summary>
		public void _0x1A092BB0C3808B96(int entity, bool p1)
		{
			if (__0x1A092BB0C3808B96 == null) __0x1A092BB0C3808B96 = (Function) native.GetObjectProperty("_0x1A092BB0C3808B96");
			__0x1A092BB0C3808B96.Call(native, entity, p1);
		}

		public object _0xCE6294A232D03786(object p0, object p1)
		{
			if (__0xCE6294A232D03786 == null) __0xCE6294A232D03786 = (Function) native.GetObjectProperty("_0xCE6294A232D03786");
			return __0xCE6294A232D03786.Call(native, p0, p1);
		}

		public object _0x46F8696933A63C9B(object p0, object p1)
		{
			if (__0x46F8696933A63C9B == null) __0x46F8696933A63C9B = (Function) native.GetObjectProperty("_0x46F8696933A63C9B");
			return __0x46F8696933A63C9B.Call(native, p0, p1);
		}

		/// <summary>
		/// GET_ENTITY_BONE_*
		/// </summary>
		public Vector3 _0xBD8D32550E5CEBFE(int entity, int boneIndex)
		{
			if (__0xBD8D32550E5CEBFE == null) __0xBD8D32550E5CEBFE = (Function) native.GetObjectProperty("_0xBD8D32550E5CEBFE");
			return JSObjectToVector3(__0xBD8D32550E5CEBFE.Call(native, entity, boneIndex));
		}

		public object _0xB328DCC3A3AA401B(object p0)
		{
			if (__0xB328DCC3A3AA401B == null) __0xB328DCC3A3AA401B = (Function) native.GetObjectProperty("_0xB328DCC3A3AA401B");
			return __0xB328DCC3A3AA401B.Call(native, p0);
		}

		/// <summary>
		/// ENABLE_*
		/// </summary>
		public void EnableEntityUnk(int entity)
		{
			if (enableEntityUnk == null) enableEntityUnk = (Function) native.GetObjectProperty("enableEntityUnk");
			enableEntityUnk.Call(native, entity);
		}

		public void _0xB17BC6453F6CF5AC(object p0, object p1)
		{
			if (__0xB17BC6453F6CF5AC == null) __0xB17BC6453F6CF5AC = (Function) native.GetObjectProperty("_0xB17BC6453F6CF5AC");
			__0xB17BC6453F6CF5AC.Call(native, p0, p1);
		}

		public void _0x68B562E124CC0AEF(object p0, object p1)
		{
			if (__0x68B562E124CC0AEF == null) __0x68B562E124CC0AEF = (Function) native.GetObjectProperty("_0x68B562E124CC0AEF");
			__0x68B562E124CC0AEF.Call(native, p0, p1);
		}

		public void _0x36F32DE87082343E(object p0, object p1)
		{
			if (__0x36F32DE87082343E == null) __0x36F32DE87082343E = (Function) native.GetObjectProperty("_0x36F32DE87082343E");
			__0x36F32DE87082343E.Call(native, p0, p1);
		}

		/// <summary>
		/// GET_ENTITY_*
		/// Seems to return the handle of the entity's portable pickup.
		/// </summary>
		public int GetEntityPickup(int entity, int modelHash)
		{
			if (getEntityPickup == null) getEntityPickup = (Function) native.GetObjectProperty("getEntityPickup");
			return (int) getEntityPickup.Call(native, entity, modelHash);
		}

		public void _0xD7B80E7C3BEFC396(object p0, object p1)
		{
			if (__0xD7B80E7C3BEFC396 == null) __0xD7B80E7C3BEFC396 = (Function) native.GetObjectProperty("_0xD7B80E7C3BEFC396");
			__0xD7B80E7C3BEFC396.Call(native, p0, p1);
		}

		public void SetDecisionMaker(int ped, int name)
		{
			if (setDecisionMaker == null) setDecisionMaker = (Function) native.GetObjectProperty("setDecisionMaker");
			setDecisionMaker.Call(native, ped, name);
		}

		public void ClearDecisionMakerEventResponse(int name, int type)
		{
			if (clearDecisionMakerEventResponse == null) clearDecisionMakerEventResponse = (Function) native.GetObjectProperty("clearDecisionMakerEventResponse");
			clearDecisionMakerEventResponse.Call(native, name, type);
		}

		public void BlockDecisionMakerEvent(int name, int type)
		{
			if (blockDecisionMakerEvent == null) blockDecisionMakerEvent = (Function) native.GetObjectProperty("blockDecisionMakerEvent");
			blockDecisionMakerEvent.Call(native, name, type);
		}

		public void UnblockDecisionMakerEvent(int name, int type)
		{
			if (unblockDecisionMakerEvent == null) unblockDecisionMakerEvent = (Function) native.GetObjectProperty("unblockDecisionMakerEvent");
			unblockDecisionMakerEvent.Call(native, name, type);
		}

		/// <summary>
		/// duration is float here
		/// Event types- camx.me/gtav/tasks/shockingevents.txt
		/// </summary>
		/// <param name="duration">is float here</param>
		public int AddShockingEventAtPosition(int type, double x, double y, double z, double duration)
		{
			if (addShockingEventAtPosition == null) addShockingEventAtPosition = (Function) native.GetObjectProperty("addShockingEventAtPosition");
			return (int) addShockingEventAtPosition.Call(native, type, x, y, z, duration);
		}

		/// <summary>
		/// duration is float here
		/// Event types - camx.me/gtav/tasks/shockingevents.txt
		/// </summary>
		/// <param name="duration">is float here</param>
		public int AddShockingEventForEntity(int type, int entity, double duration)
		{
			if (addShockingEventForEntity == null) addShockingEventForEntity = (Function) native.GetObjectProperty("addShockingEventForEntity");
			return (int) addShockingEventForEntity.Call(native, type, entity, duration);
		}

		/// <summary>
		/// Some events that i found, not sure about them, but seems to have logic based on my tests:
		/// '82 - dead body
		/// '86 - explosion
		/// '87 - fire
		/// '88 - shooting, fire extinguisher in use
		/// '89 - shooting
		/// '93 - ped using horn
		/// '95 - ped receiving melee attack
		/// '102 - living ped receiving shot
		/// See NativeDB for reference: http://natives.altv.mp/#/0x1374ABB7C15BAB92
		/// </summary>
		public bool IsShockingEventInSphere(int type, double x, double y, double z, double radius)
		{
			if (isShockingEventInSphere == null) isShockingEventInSphere = (Function) native.GetObjectProperty("isShockingEventInSphere");
			return (bool) isShockingEventInSphere.Call(native, type, x, y, z, radius);
		}

		public bool RemoveShockingEvent(int @event)
		{
			if (removeShockingEvent == null) removeShockingEvent = (Function) native.GetObjectProperty("removeShockingEvent");
			return (bool) removeShockingEvent.Call(native, @event);
		}

		public void RemoveAllShockingEvents(bool p0)
		{
			if (removeAllShockingEvents == null) removeAllShockingEvents = (Function) native.GetObjectProperty("removeAllShockingEvents");
			removeAllShockingEvents.Call(native, p0);
		}

		public void RemoveShockingEventSpawnBlockingAreas()
		{
			if (removeShockingEventSpawnBlockingAreas == null) removeShockingEventSpawnBlockingAreas = (Function) native.GetObjectProperty("removeShockingEventSpawnBlockingAreas");
			removeShockingEventSpawnBlockingAreas.Call(native);
		}

		public void SuppressShockingEventsNextFrame()
		{
			if (suppressShockingEventsNextFrame == null) suppressShockingEventsNextFrame = (Function) native.GetObjectProperty("suppressShockingEventsNextFrame");
			suppressShockingEventsNextFrame.Call(native);
		}

		public void SuppressShockingEventTypeNextFrame(int type)
		{
			if (suppressShockingEventTypeNextFrame == null) suppressShockingEventTypeNextFrame = (Function) native.GetObjectProperty("suppressShockingEventTypeNextFrame");
			suppressShockingEventTypeNextFrame.Call(native, type);
		}

		public void SuppressAgitationEventsNextFrame()
		{
			if (suppressAgitationEventsNextFrame == null) suppressAgitationEventsNextFrame = (Function) native.GetObjectProperty("suppressAgitationEventsNextFrame");
			suppressAgitationEventsNextFrame.Call(native);
		}

		/// <summary>
		/// GET_NUM_*
		/// </summary>
		public int GetNumDecorations(int character)
		{
			if (getNumDecorations == null) getNumDecorations = (Function) native.GetObjectProperty("getNumDecorations");
			return (int) getNumDecorations.Call(native, character);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) GetTattooCollectionData(int character, int index, object outComponent)
		{
			if (getTattooCollectionData == null) getTattooCollectionData = (Function) native.GetObjectProperty("getTattooCollectionData");
			var results = (Array) getTattooCollectionData.Call(native, character, index, outComponent);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) InitShopPedComponent(object outComponent)
		{
			if (initShopPedComponent == null) initShopPedComponent = (Function) native.GetObjectProperty("initShopPedComponent");
			var results = (Array) initShopPedComponent.Call(native, outComponent);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) InitShopPedProp(object outProp)
		{
			if (initShopPedProp == null) initShopPedProp = (Function) native.GetObjectProperty("initShopPedProp");
			var results = (Array) initShopPedProp.Call(native, outProp);
			return (results[0], results[1]);
		}

		public int _0x50F457823CE6EB5F(int p0, int p1, int p2, int p3)
		{
			if (__0x50F457823CE6EB5F == null) __0x50F457823CE6EB5F = (Function) native.GetObjectProperty("_0x50F457823CE6EB5F");
			return (int) __0x50F457823CE6EB5F.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
		/// componentId is between 0 and 11 and corresponds to the usual component slots.
		/// p1 could be the outfit number; unsure.
		/// p2 is usually -1; unknown function.
		/// p3 appears to be a boolean flag; unknown function.
		/// p4 is usually -1; unknown function.
		/// </summary>
		/// <param name="character">is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.</param>
		/// <param name="p1">could be the outfit number; unsure.</param>
		/// <param name="p2">is usually -1; unknown function.</param>
		/// <param name="p3">appears to be a boolean flag; unknown function.</param>
		/// <param name="p4">is usually -1; unknown function.</param>
		/// <param name="componentId">is between 0 and 11 and corresponds to the usual component slots.</param>
		public int GetNumPropsFromOutfit(int character, int p1, int p2, bool p3, int p4, int componentId)
		{
			if (getNumPropsFromOutfit == null) getNumPropsFromOutfit = (Function) native.GetObjectProperty("getNumPropsFromOutfit");
			return (int) getNumPropsFromOutfit.Call(native, character, p1, p2, p3, p4, componentId);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) GetShopPedQueryComponent(int componentId, object outComponent)
		{
			if (getShopPedQueryComponent == null) getShopPedQueryComponent = (Function) native.GetObjectProperty("getShopPedQueryComponent");
			var results = (Array) getShopPedQueryComponent.Call(native, componentId, outComponent);
			return (results[0], results[1]);
		}

		/// <summary>
		/// More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) GetShopPedComponent(int componentHash, object outComponent)
		{
			if (getShopPedComponent == null) getShopPedComponent = (Function) native.GetObjectProperty("getShopPedComponent");
			var results = (Array) getShopPedComponent.Call(native, componentHash, outComponent);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) GetShopPedQueryProp(object p0, object p1)
		{
			if (getShopPedQueryProp == null) getShopPedQueryProp = (Function) native.GetObjectProperty("getShopPedQueryProp");
			var results = (Array) getShopPedQueryProp.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		/// <summary>
		/// More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) GetShopPedProp(int componentHash, object outProp)
		{
			if (getShopPedProp == null) getShopPedProp = (Function) native.GetObjectProperty("getShopPedProp");
			var results = (Array) getShopPedProp.Call(native, componentHash, outProp);
			return (results[0], results[1]);
		}

		public int GetHashNameForComponent(int entity, int componentId, int drawableVariant, int textureVariant)
		{
			if (getHashNameForComponent == null) getHashNameForComponent = (Function) native.GetObjectProperty("getHashNameForComponent");
			return (int) getHashNameForComponent.Call(native, entity, componentId, drawableVariant, textureVariant);
		}

		public int GetHashNameForProp(int entity, int componentId, int propIndex, int propTextureIndex)
		{
			if (getHashNameForProp == null) getHashNameForProp = (Function) native.GetObjectProperty("getHashNameForProp");
			return (int) getHashNameForProp.Call(native, entity, componentId, propIndex, propTextureIndex);
		}

		public int GetItemVariantsCount(int componentHash)
		{
			if (getItemVariantsCount == null) getItemVariantsCount = (Function) native.GetObjectProperty("getItemVariantsCount");
			return (int) getItemVariantsCount.Call(native, componentHash);
		}

		public int GetShopPedApparelVariantPropCount(int propHash)
		{
			if (getShopPedApparelVariantPropCount == null) getShopPedApparelVariantPropCount = (Function) native.GetObjectProperty("getShopPedApparelVariantPropCount");
			return (int) getShopPedApparelVariantPropCount.Call(native, propHash);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetVariantComponent(int componentHash, int componentId, int p2, int p3, int p4)
		{
			if (getVariantComponent == null) getVariantComponent = (Function) native.GetObjectProperty("getVariantComponent");
			var results = (Array) getVariantComponent.Call(native, componentHash, componentId, p2, p3, p4);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		public void GetVariantProp(object p0, object p1, object p2, object p3, object p4)
		{
			if (getVariantProp == null) getVariantProp = (Function) native.GetObjectProperty("getVariantProp");
			getVariantProp.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns number of possible values of the componentId argument of GET_FORCED_COMPONENT.</returns>
		public int GetShopPedApparelForcedComponentCount(int componentHash)
		{
			if (getShopPedApparelForcedComponentCount == null) getShopPedApparelForcedComponentCount = (Function) native.GetObjectProperty("getShopPedApparelForcedComponentCount");
			return (int) getShopPedApparelForcedComponentCount.Call(native, componentHash);
		}

		public object GetShopPedApparelForcedPropCount(object p0)
		{
			if (getShopPedApparelForcedPropCount == null) getShopPedApparelForcedPropCount = (Function) native.GetObjectProperty("getShopPedApparelForcedPropCount");
			return getShopPedApparelForcedPropCount.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetForcedComponent(int componentHash, int componentId, int nameHash, int enumValue, int componentType)
		{
			if (getForcedComponent == null) getForcedComponent = (Function) native.GetObjectProperty("getForcedComponent");
			var results = (Array) getForcedComponent.Call(native, componentHash, componentId, nameHash, enumValue, componentType);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object></returns>
		public (object, object, object, object) GetForcedProp(object p0, object p1, object p2, object p3, object p4)
		{
			if (getForcedProp == null) getForcedProp = (Function) native.GetObjectProperty("getForcedProp");
			var results = (Array) getForcedProp.Call(native, p0, p1, p2, p3, p4);
			return (results[0], results[1], results[2], results[3]);
		}

		public bool IsTagRestricted(int componentHash, int drawableSlotHash, int componentId)
		{
			if (isTagRestricted == null) isTagRestricted = (Function) native.GetObjectProperty("isTagRestricted");
			return (bool) isTagRestricted.Call(native, componentHash, drawableSlotHash, componentId);
		}

		/// <summary>
		/// characters
		/// 0: Michael
		/// 1: Franklin
		/// 2: Trevor
		/// 3: MPMale
		/// 4: MPFemale
		/// </summary>
		public int _0xF3FBE2D50A6A8C28(int character, bool p1)
		{
			if (__0xF3FBE2D50A6A8C28 == null) __0xF3FBE2D50A6A8C28 = (Function) native.GetObjectProperty("_0xF3FBE2D50A6A8C28");
			return (int) __0xF3FBE2D50A6A8C28.Call(native, character, p1);
		}

		/// <summary>
		/// struct Outfit_s
		/// {
		/// int mask, torso, pants, parachute, shoes, misc1, tops1, armour, crew, tops2, hat, glasses, earpiece;
		/// int maskTexture, torsoTexture, pantsTexture, parachuteTexture, shoesTexture, misc1Texture, tops1Texture,
		/// armourTexture, crewTexture, tops2Texture, hatTexture, glassesTexture, earpieceTexture;
		/// };
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) GetShopPedQueryOutfit(object p0, object outfit)
		{
			if (getShopPedQueryOutfit == null) getShopPedQueryOutfit = (Function) native.GetObjectProperty("getShopPedQueryOutfit");
			var results = (Array) getShopPedQueryOutfit.Call(native, p0, outfit);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) GetShopPedOutfit(object p0, object p1)
		{
			if (getShopPedOutfit == null) getShopPedOutfit = (Function) native.GetObjectProperty("getShopPedOutfit");
			var results = (Array) getShopPedOutfit.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		public int GetShopPedOutfitLocate(object p0)
		{
			if (getShopPedOutfitLocate == null) getShopPedOutfitLocate = (Function) native.GetObjectProperty("getShopPedOutfitLocate");
			return (int) getShopPedOutfitLocate.Call(native, p0);
		}

		/// <summary>
		/// outfit = a structure passing though it - see GET_SHOP_PED_QUERY_OUTFIT
		/// slot - outfit slot
		/// item - holds 3 ints in a struct
		/// </summary>
		/// <param name="outfit">a structure passing though it - see GET_SHOP_PED_QUERY_OUTFIT</param>
		/// <param name="slot">outfit slot</param>
		/// <param name="item">holds 3 ints in a struct</param>
		/// <returns>Array<bool, object></returns>
		public (bool, object) GetShopPedOutfitPropVariant(object outfit, int slot, object item)
		{
			if (getShopPedOutfitPropVariant == null) getShopPedOutfitPropVariant = (Function) native.GetObjectProperty("getShopPedOutfitPropVariant");
			var results = (Array) getShopPedOutfitPropVariant.Call(native, outfit, slot, item);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// outfit = a structure passing though it - see GET_SHOP_PED_QUERY_OUTFIT
		/// slot - outfit slot
		/// item - holds 3 ints in a struct
		/// </summary>
		/// <param name="outfit">a structure passing though it - see GET_SHOP_PED_QUERY_OUTFIT</param>
		/// <param name="slot">outfit slot</param>
		/// <param name="item">holds 3 ints in a struct</param>
		/// <returns>Array<bool, object></returns>
		public (bool, object) GetShopPedOutfitComponentVariant(object outfit, int slot, object item)
		{
			if (getShopPedOutfitComponentVariant == null) getShopPedOutfitComponentVariant = (Function) native.GetObjectProperty("getShopPedOutfitComponentVariant");
			var results = (Array) getShopPedOutfitComponentVariant.Call(native, outfit, slot, item);
			return ((bool) results[0], results[1]);
		}

		public int GetNumDlcVehicles()
		{
			if (getNumDlcVehicles == null) getNumDlcVehicles = (Function) native.GetObjectProperty("getNumDlcVehicles");
			return (int) getNumDlcVehicles.Call(native);
		}

		/// <summary>
		/// dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
		/// </summary>
		/// <param name="dlcVehicleIndex">is 0 to GET_NUM_DLC_VEHICLS() - 1</param>
		public int GetDlcVehicleModel(int dlcVehicleIndex)
		{
			if (getDlcVehicleModel == null) getDlcVehicleModel = (Function) native.GetObjectProperty("getDlcVehicleModel");
			return (int) getDlcVehicleModel.Call(native, dlcVehicleIndex);
		}

		/// <summary>
		/// dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
		/// outData is a struct of 3 8-byte items.
		/// The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
		/// </summary>
		/// <param name="dlcVehicleIndex">takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.</param>
		/// <param name="outData">is a struct of 3 8-byte items.</param>
		/// <returns>Array<bool, object></returns>
		public (bool, object) GetDlcVehicleData(int dlcVehicleIndex, object outData)
		{
			if (getDlcVehicleData == null) getDlcVehicleData = (Function) native.GetObjectProperty("getDlcVehicleData");
			var results = (Array) getDlcVehicleData.Call(native, dlcVehicleIndex, outData);
			return ((bool) results[0], results[1]);
		}

		public int GetDlcVehicleFlags(int dlcVehicleIndex)
		{
			if (getDlcVehicleFlags == null) getDlcVehicleFlags = (Function) native.GetObjectProperty("getDlcVehicleFlags");
			return (int) getDlcVehicleFlags.Call(native, dlcVehicleIndex);
		}

		/// <summary>
		/// Gets the total number of DLC weapons.
		/// </summary>
		public int GetNumDlcWeapons()
		{
			if (getNumDlcWeapons == null) getNumDlcWeapons = (Function) native.GetObjectProperty("getNumDlcWeapons");
			return (int) getNumDlcWeapons.Call(native);
		}

		/// <summary>
		/// dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
		/// struct DlcWeaponData
		/// {
		/// int emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this
		/// int padding1;
		/// int weaponHash;
		/// int padding2;
		/// int unk;
		/// int padding3;
		/// See NativeDB for reference: http://natives.altv.mp/#/0x79923CD21BECE14E
		/// </summary>
		/// <param name="dlcWeaponIndex">takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.</param>
		/// <returns>Array<bool, object></returns>
		public (bool, object) GetDlcWeaponData(int dlcWeaponIndex, object outData)
		{
			if (getDlcWeaponData == null) getDlcWeaponData = (Function) native.GetObjectProperty("getDlcWeaponData");
			var results = (Array) getDlcWeaponData.Call(native, dlcWeaponIndex, outData);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// Allowed Values from 0 - DLC1::GET_NUM_DLC_WEAPONS() - 1
		/// </summary>
		public int GetNumDlcWeaponComponents(int dlcWeaponIndex)
		{
			if (getNumDlcWeaponComponents == null) getNumDlcWeaponComponents = (Function) native.GetObjectProperty("getNumDlcWeaponComponents");
			return (int) getNumDlcWeaponComponents.Call(native, dlcWeaponIndex);
		}

		/// <summary>
		/// p0 seems to be the weapon index
		/// p1 seems to be the weapon component index
		/// struct DlcComponentData{
		/// int attachBone;
		/// int padding1;
		/// int bActiveByDefault;
		/// int padding2;
		/// int unk;
		/// int padding3;
		/// See NativeDB for reference: http://natives.altv.mp/#/0x6CF598A2957C2BF8
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetDlcWeaponComponentData(int dlcWeaponIndex, int dlcWeapCompIndex, int ComponentDataPtr)
		{
			if (getDlcWeaponComponentData == null) getDlcWeaponComponentData = (Function) native.GetObjectProperty("getDlcWeaponComponentData");
			var results = (Array) getDlcWeaponComponentData.Call(native, dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr);
			return ((bool) results[0], (int) results[1]);
		}

		public bool IsContentItemLocked(int itemHash)
		{
			if (isContentItemLocked == null) isContentItemLocked = (Function) native.GetObjectProperty("isContentItemLocked");
			return (bool) isContentItemLocked.Call(native, itemHash);
		}

		public bool IsDlcVehicleMod(int hash)
		{
			if (isDlcVehicleMod == null) isDlcVehicleMod = (Function) native.GetObjectProperty("isDlcVehicleMod");
			return (bool) isDlcVehicleMod.Call(native, hash);
		}

		public int GetDlcVehicleModLockHash(int hash)
		{
			if (getDlcVehicleModLockHash == null) getDlcVehicleModLockHash = (Function) native.GetObjectProperty("getDlcVehicleModLockHash");
			return (int) getDlcVehicleModLockHash.Call(native, hash);
		}

		/// <summary>
		/// From fm_deathmatch_creator and fm_race_creator:
		/// FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));
		/// FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP"));
		/// </summary>
		public void LoadContentChangeSetGroup(int hash)
		{
			if (loadContentChangeSetGroup == null) loadContentChangeSetGroup = (Function) native.GetObjectProperty("loadContentChangeSetGroup");
			loadContentChangeSetGroup.Call(native, hash);
		}

		/// <summary>
		/// From fm_deathmatch_creator and fm_race_creator:
		/// FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));
		/// FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP"));
		/// </summary>
		public void UnloadContentChangeSetGroup(int hash)
		{
			if (unloadContentChangeSetGroup == null) unloadContentChangeSetGroup = (Function) native.GetObjectProperty("unloadContentChangeSetGroup");
			unloadContentChangeSetGroup.Call(native, hash);
		}

		/// <summary>
		/// Starts a fire:
		/// xyz: Location of fire
		/// maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
		/// isGasFire: Whether or not the fire is powered by gasoline.
		/// </summary>
		/// <param name="Z">xyz: Location of fire</param>
		/// <param name="maxChildren">The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.</param>
		/// <param name="isGasFire">Whether or not the fire is powered by gasoline.</param>
		public int StartScriptFire(double X, double Y, double Z, int maxChildren, bool isGasFire)
		{
			if (startScriptFire == null) startScriptFire = (Function) native.GetObjectProperty("startScriptFire");
			return (int) startScriptFire.Call(native, X, Y, Z, maxChildren, isGasFire);
		}

		public void RemoveScriptFire(int fireHandle)
		{
			if (removeScriptFire == null) removeScriptFire = (Function) native.GetObjectProperty("removeScriptFire");
			removeScriptFire.Call(native, fireHandle);
		}

		public int StartEntityFire(int entity)
		{
			if (startEntityFire == null) startEntityFire = (Function) native.GetObjectProperty("startEntityFire");
			return (int) startEntityFire.Call(native, entity);
		}

		public void StopEntityFire(int entity)
		{
			if (stopEntityFire == null) stopEntityFire = (Function) native.GetObjectProperty("stopEntityFire");
			stopEntityFire.Call(native, entity);
		}

		public bool IsEntityOnFire(int entity)
		{
			if (isEntityOnFire == null) isEntityOnFire = (Function) native.GetObjectProperty("isEntityOnFire");
			return (bool) isEntityOnFire.Call(native, entity);
		}

		public int GetNumberOfFiresInRange(double x, double y, double z, double radius)
		{
			if (getNumberOfFiresInRange == null) getNumberOfFiresInRange = (Function) native.GetObjectProperty("getNumberOfFiresInRange");
			return (int) getNumberOfFiresInRange.Call(native, x, y, z, radius);
		}

		/// <summary>
		/// SET_FIRE_*
		/// </summary>
		public void SetFireSpreadRate(double p0)
		{
			if (setFireSpreadRate == null) setFireSpreadRate = (Function) native.GetObjectProperty("setFireSpreadRate");
			setFireSpreadRate.Call(native, p0);
		}

		public void StopFireInRange(double x, double y, double z, double radius)
		{
			if (stopFireInRange == null) stopFireInRange = (Function) native.GetObjectProperty("stopFireInRange");
			stopFireInRange.Call(native, x, y, z, radius);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, Vector3> Returns TRUE if it found something. FALSE if not.</returns>
		public (bool, Vector3) GetClosestFirePos(Vector3 outPosition, double x, double y, double z)
		{
			if (getClosestFirePos == null) getClosestFirePos = (Function) native.GetObjectProperty("getClosestFirePos");
			var results = (Array) getClosestFirePos.Call(native, outPosition, x, y, z);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// BOOL isAudible = If explosion makes a sound.
		/// BOOL isInvisible = If the explosion is invisible or not.
		/// enum eExplosionTag
		/// {
		/// EXP_TAG_DONTCARE = -1,
		/// EXP_TAG_GRENADE,
		/// EXP_TAG_GRENADELAUNCHER,
		/// EXP_TAG_STICKYBOMB,
		/// EXP_TAG_MOLOTOV,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xE3AD2BDBAEE269AC
		/// </summary>
		/// <param name="isAudible">BOOL If explosion makes a sound.</param>
		/// <param name="isInvisible">BOOL If the explosion is invisible or not.</param>
		public void AddExplosion(double x, double y, double z, int explosionType, double damageScale, bool isAudible, bool isInvisible, double cameraShake, bool noDamage)
		{
			if (addExplosion == null) addExplosion = (Function) native.GetObjectProperty("addExplosion");
			addExplosion.Call(native, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage);
		}

		/// <summary>
		/// isAudible: If explosion makes a sound.
		/// isInvisible: If the explosion is invisible or not.
		/// explosionType: See ADD_EXPLOSION.
		/// </summary>
		/// <param name="explosionType">See ADD_EXPLOSION.</param>
		/// <param name="isAudible">If explosion makes a sound.</param>
		/// <param name="isInvisible">If the explosion is invisible or not.</param>
		public void AddOwnedExplosion(int ped, double x, double y, double z, int explosionType, double damageScale, bool isAudible, bool isInvisible, double cameraShake)
		{
			if (addOwnedExplosion == null) addOwnedExplosion = (Function) native.GetObjectProperty("addOwnedExplosion");
			addOwnedExplosion.Call(native, ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		}

		/// <summary>
		/// isAudible: If explosion makes a sound.
		/// isInvisible: If the explosion is invisible or not.
		/// explosionType: See ADD_EXPLOSION.
		/// </summary>
		/// <param name="explosionType">See ADD_EXPLOSION.</param>
		/// <param name="isAudible">If explosion makes a sound.</param>
		/// <param name="isInvisible">If the explosion is invisible or not.</param>
		public void AddExplosionWithUserVfx(double x, double y, double z, int explosionType, int explosionFx, double damageScale, bool isAudible, bool isInvisible, double cameraShake)
		{
			if (addExplosionWithUserVfx == null) addExplosionWithUserVfx = (Function) native.GetObjectProperty("addExplosionWithUserVfx");
			addExplosionWithUserVfx.Call(native, x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
		}

		/// <summary>
		/// explosionType: See ADD_EXPLOSION.
		/// </summary>
		/// <param name="explosionType">See ADD_EXPLOSION.</param>
		public bool IsExplosionInArea(int explosionType, double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (isExplosionInArea == null) isExplosionInArea = (Function) native.GetObjectProperty("isExplosionInArea");
			return (bool) isExplosionInArea.Call(native, explosionType, x1, y1, z1, x2, y2, z2);
		}

		/// <summary>
		/// explosionType: See ADD_EXPLOSION.
		/// </summary>
		/// <param name="explosionType">See ADD_EXPLOSION.</param>
		public bool IsExplosionActiveInArea(int explosionType, double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (isExplosionActiveInArea == null) isExplosionActiveInArea = (Function) native.GetObjectProperty("isExplosionActiveInArea");
			return (bool) isExplosionActiveInArea.Call(native, explosionType, x1, y1, z1, x2, y2, z2);
		}

		/// <summary>
		/// explosionType: See ADD_EXPLOSION.
		/// </summary>
		/// <param name="explosionType">See ADD_EXPLOSION.</param>
		public bool IsExplosionInSphere(int explosionType, double x, double y, double z, double radius)
		{
			if (isExplosionInSphere == null) isExplosionInSphere = (Function) native.GetObjectProperty("isExplosionInSphere");
			return (bool) isExplosionInSphere.Call(native, explosionType, x, y, z, radius);
		}

		/// <summary>
		/// explosionType: See ADD_EXPLOSION.
		/// </summary>
		/// <param name="explosionType">See ADD_EXPLOSION.</param>
		public int GetEntityInsideExplosionSphere(int explosionType, double x, double y, double z, double radius)
		{
			if (getEntityInsideExplosionSphere == null) getEntityInsideExplosionSphere = (Function) native.GetObjectProperty("getEntityInsideExplosionSphere");
			return (int) getEntityInsideExplosionSphere.Call(native, explosionType, x, y, z, radius);
		}

		/// <summary>
		/// explosionType: See ADD_EXPLOSION.
		/// </summary>
		/// <param name="explosionType">See ADD_EXPLOSION.</param>
		public bool IsExplosionInAngledArea(int explosionType, double x1, double y1, double z1, double x2, double y2, double z2, double angle)
		{
			if (isExplosionInAngledArea == null) isExplosionInAngledArea = (Function) native.GetObjectProperty("isExplosionInAngledArea");
			return (bool) isExplosionInAngledArea.Call(native, explosionType, x1, y1, z1, x2, y2, z2, angle);
		}

		/// <summary>
		/// explosionType: See ADD_EXPLOSION.
		/// </summary>
		/// <param name="explosionType">See ADD_EXPLOSION.</param>
		/// <returns>Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.</returns>
		public int GetEntityInsideExplosionArea(int explosionType, double x1, double y1, double z1, double x2, double y2, double z2, double radius)
		{
			if (getEntityInsideExplosionArea == null) getEntityInsideExplosionArea = (Function) native.GetObjectProperty("getEntityInsideExplosionArea");
			return (int) getEntityInsideExplosionArea.Call(native, explosionType, x1, y1, z1, x2, y2, z2, radius);
		}

		/// <summary>
		/// Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here
		/// e.g
		/// void StartLoadingMessage(char *text, int spinnerType = 3)
		/// {
		/// _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
		/// ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		/// _SHOW_LOADING_PROMPT(spinnerType);
		/// }
		/// OR
		/// See NativeDB for reference: http://natives.altv.mp/#/0xABA17D7CE615ADBF
		/// </summary>
		public void BeginTextCommandBusyspinnerOn(string @string)
		{
			if (beginTextCommandBusyspinnerOn == null) beginTextCommandBusyspinnerOn = (Function) native.GetObjectProperty("beginTextCommandBusyspinnerOn");
			beginTextCommandBusyspinnerOn.Call(native, @string);
		}

		/// <summary>
		/// enum eBusySpinnerType
		/// {
		/// BUSY_SPINNER_LEFT,
		/// BUSY_SPINNER_LEFT_2,
		/// BUSY_SPINNER_LEFT_3,
		/// BUSY_SPINNER_SAVE,
		/// BUSY_SPINNER_RIGHT,
		/// };
		/// </summary>
		public void EndTextCommandBusyspinnerOn(int busySpinnerType)
		{
			if (endTextCommandBusyspinnerOn == null) endTextCommandBusyspinnerOn = (Function) native.GetObjectProperty("endTextCommandBusyspinnerOn");
			endTextCommandBusyspinnerOn.Call(native, busySpinnerType);
		}

		/// <summary>
		/// Removes the loading prompt at the bottom right of the screen.
		/// </summary>
		public void BusyspinnerOff()
		{
			if (busyspinnerOff == null) busyspinnerOff = (Function) native.GetObjectProperty("busyspinnerOff");
			busyspinnerOff.Call(native);
		}

		public void PreloadBusyspinner()
		{
			if (preloadBusyspinner == null) preloadBusyspinner = (Function) native.GetObjectProperty("preloadBusyspinner");
			preloadBusyspinner.Call(native);
		}

		public bool BusyspinnerIsOn()
		{
			if (busyspinnerIsOn == null) busyspinnerIsOn = (Function) native.GetObjectProperty("busyspinnerIsOn");
			return (bool) busyspinnerIsOn.Call(native);
		}

		public bool BusyspinnerIsDisplaying()
		{
			if (busyspinnerIsDisplaying == null) busyspinnerIsDisplaying = (Function) native.GetObjectProperty("busyspinnerIsDisplaying");
			return (bool) busyspinnerIsDisplaying.Call(native);
		}

		/// <summary>
		/// DISABLE_*
		/// </summary>
		public void _0x9245E81072704B8A(bool p0)
		{
			if (__0x9245E81072704B8A == null) __0x9245E81072704B8A = (Function) native.GetObjectProperty("_0x9245E81072704B8A");
			__0x9245E81072704B8A.Call(native, p0);
		}

		/// <summary>
		/// Shows the cursor on screen for one frame.
		/// </summary>
		public void SetMouseCursorActiveThisFrame()
		{
			if (setMouseCursorActiveThisFrame == null) setMouseCursorActiveThisFrame = (Function) native.GetObjectProperty("setMouseCursorActiveThisFrame");
			setMouseCursorActiveThisFrame.Call(native);
		}

		/// <summary>
		/// Changes the mouse cursor's sprite.
		/// 1 = Normal
		/// 6 = Left Arrow
		/// 7 = Right Arrow
		/// </summary>
		public void SetMouseCursorSprite(int spriteId)
		{
			if (setMouseCursorSprite == null) setMouseCursorSprite = (Function) native.GetObjectProperty("setMouseCursorSprite");
			setMouseCursorSprite.Call(native, spriteId);
		}

		public void _0x98215325A695E78A(bool p0)
		{
			if (__0x98215325A695E78A == null) __0x98215325A695E78A = (Function) native.GetObjectProperty("_0x98215325A695E78A");
			__0x98215325A695E78A.Call(native, p0);
		}

		public object _0x3D9ACB1EB139E702()
		{
			if (__0x3D9ACB1EB139E702 == null) __0x3D9ACB1EB139E702 = (Function) native.GetObjectProperty("_0x3D9ACB1EB139E702");
			return __0x3D9ACB1EB139E702.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object, object></returns>
		public (bool, object, object, object) _0x632B2940C67F4EA9(int scaleformHandle, object p1, object p2, object p3)
		{
			if (__0x632B2940C67F4EA9 == null) __0x632B2940C67F4EA9 = (Function) native.GetObjectProperty("_0x632B2940C67F4EA9");
			var results = (Array) __0x632B2940C67F4EA9.Call(native, scaleformHandle, p1, p2, p3);
			return ((bool) results[0], results[1], results[2], results[3]);
		}

		public void ThefeedOnlyShowTooltips(bool toggle)
		{
			if (thefeedOnlyShowTooltips == null) thefeedOnlyShowTooltips = (Function) native.GetObjectProperty("thefeedOnlyShowTooltips");
			thefeedOnlyShowTooltips.Call(native, toggle);
		}

		public void ThefeedSetScriptedMenuHeight(double pos)
		{
			if (thefeedSetScriptedMenuHeight == null) thefeedSetScriptedMenuHeight = (Function) native.GetObjectProperty("thefeedSetScriptedMenuHeight");
			thefeedSetScriptedMenuHeight.Call(native, pos);
		}

		public void ThefeedDisable()
		{
			if (thefeedDisable == null) thefeedDisable = (Function) native.GetObjectProperty("thefeedDisable");
			thefeedDisable.Call(native);
		}

		public void ThefeedHideThisFrame()
		{
			if (thefeedHideThisFrame == null) thefeedHideThisFrame = (Function) native.GetObjectProperty("thefeedHideThisFrame");
			thefeedHideThisFrame.Call(native);
		}

		public void _0x15CFA549788D35EF()
		{
			if (__0x15CFA549788D35EF == null) __0x15CFA549788D35EF = (Function) native.GetObjectProperty("_0x15CFA549788D35EF");
			__0x15CFA549788D35EF.Call(native);
		}

		public void ThefeedFlushQueue()
		{
			if (thefeedFlushQueue == null) thefeedFlushQueue = (Function) native.GetObjectProperty("thefeedFlushQueue");
			thefeedFlushQueue.Call(native);
		}

		/// <summary>
		/// Removes a notification instantly instead of waiting for it to disappear
		/// </summary>
		public void ThefeedRemoveItem(int notificationId)
		{
			if (thefeedRemoveItem == null) thefeedRemoveItem = (Function) native.GetObjectProperty("thefeedRemoveItem");
			thefeedRemoveItem.Call(native, notificationId);
		}

		public void ThefeedForceRenderOn()
		{
			if (thefeedForceRenderOn == null) thefeedForceRenderOn = (Function) native.GetObjectProperty("thefeedForceRenderOn");
			thefeedForceRenderOn.Call(native);
		}

		public void ThefeedForceRenderOff()
		{
			if (thefeedForceRenderOff == null) thefeedForceRenderOff = (Function) native.GetObjectProperty("thefeedForceRenderOff");
			thefeedForceRenderOff.Call(native);
		}

		public void ThefeedPause()
		{
			if (thefeedPause == null) thefeedPause = (Function) native.GetObjectProperty("thefeedPause");
			thefeedPause.Call(native);
		}

		public void ThefeedResume()
		{
			if (thefeedResume == null) thefeedResume = (Function) native.GetObjectProperty("thefeedResume");
			thefeedResume.Call(native);
		}

		public bool ThefeedIsPaused()
		{
			if (thefeedIsPaused == null) thefeedIsPaused = (Function) native.GetObjectProperty("thefeedIsPaused");
			return (bool) thefeedIsPaused.Call(native);
		}

		public void ThefeedSpsExtendWidescreenOn()
		{
			if (thefeedSpsExtendWidescreenOn == null) thefeedSpsExtendWidescreenOn = (Function) native.GetObjectProperty("thefeedSpsExtendWidescreenOn");
			thefeedSpsExtendWidescreenOn.Call(native);
		}

		public void ThefeedSpsExtendWidescreenOff()
		{
			if (thefeedSpsExtendWidescreenOff == null) thefeedSpsExtendWidescreenOff = (Function) native.GetObjectProperty("thefeedSpsExtendWidescreenOff");
			thefeedSpsExtendWidescreenOff.Call(native);
		}

		public int ThefeedGetFirstVisibleDeleteRemaining()
		{
			if (thefeedGetFirstVisibleDeleteRemaining == null) thefeedGetFirstVisibleDeleteRemaining = (Function) native.GetObjectProperty("thefeedGetFirstVisibleDeleteRemaining");
			return (int) thefeedGetFirstVisibleDeleteRemaining.Call(native);
		}

		public void ThefeedCommentTeleportPoolOn()
		{
			if (thefeedCommentTeleportPoolOn == null) thefeedCommentTeleportPoolOn = (Function) native.GetObjectProperty("thefeedCommentTeleportPoolOn");
			thefeedCommentTeleportPoolOn.Call(native);
		}

		public void ThefeedCommentTeleportPoolOff()
		{
			if (thefeedCommentTeleportPoolOff == null) thefeedCommentTeleportPoolOff = (Function) native.GetObjectProperty("thefeedCommentTeleportPoolOff");
			thefeedCommentTeleportPoolOff.Call(native);
		}

		/// <summary>
		/// From the decompiled scripts:
		/// UI::_92F0DA1E27DB96DC(6);
		/// UI::_92F0DA1E27DB96DC(184);
		/// UI::_92F0DA1E27DB96DC(190);
		/// sets background color for the next notification
		/// 6 = red
		/// 184 = green
		/// 190 = yellow
		/// Here is a list of some colors that can be used: gyazo.com/68bd384455fceb0a85a8729e48216e15
		/// </summary>
		public void ThefeedSetNextPostBackgroundColor(int hudColorIndex)
		{
			if (thefeedSetNextPostBackgroundColor == null) thefeedSetNextPostBackgroundColor = (Function) native.GetObjectProperty("thefeedSetNextPostBackgroundColor");
			thefeedSetNextPostBackgroundColor.Call(native, hudColorIndex);
		}

		public void ThefeedSetAnimpostfxColor(int red, int green, int blue, int alpha)
		{
			if (thefeedSetAnimpostfxColor == null) thefeedSetAnimpostfxColor = (Function) native.GetObjectProperty("thefeedSetAnimpostfxColor");
			thefeedSetAnimpostfxColor.Call(native, red, green, blue, alpha);
		}

		public void ThefeedSetAnimpostfxCount(int count)
		{
			if (thefeedSetAnimpostfxCount == null) thefeedSetAnimpostfxCount = (Function) native.GetObjectProperty("thefeedSetAnimpostfxCount");
			thefeedSetAnimpostfxCount.Call(native, count);
		}

		public void ThefeedSetAnimpostfxSound(bool toggle)
		{
			if (thefeedSetAnimpostfxSound == null) thefeedSetAnimpostfxSound = (Function) native.GetObjectProperty("thefeedSetAnimpostfxSound");
			thefeedSetAnimpostfxSound.Call(native, toggle);
		}

		public void ThefeedResetAllParameters()
		{
			if (thefeedResetAllParameters == null) thefeedResetAllParameters = (Function) native.GetObjectProperty("thefeedResetAllParameters");
			thefeedResetAllParameters.Call(native);
		}

		public void ThefeedFreezeNextPost()
		{
			if (thefeedFreezeNextPost == null) thefeedFreezeNextPost = (Function) native.GetObjectProperty("thefeedFreezeNextPost");
			thefeedFreezeNextPost.Call(native);
		}

		public void ThefeedClearFrozenPost()
		{
			if (thefeedClearFrozenPost == null) thefeedClearFrozenPost = (Function) native.GetObjectProperty("thefeedClearFrozenPost");
			thefeedClearFrozenPost.Call(native);
		}

		public void ThefeedSetFlushAnimpostfx(bool p0)
		{
			if (thefeedSetFlushAnimpostfx == null) thefeedSetFlushAnimpostfx = (Function) native.GetObjectProperty("thefeedSetFlushAnimpostfx");
			thefeedSetFlushAnimpostfx.Call(native, p0);
		}

		/// <summary>
		/// From the decompiled scripts, called 61 times:
		/// UI::_317EBA71D7543F52(&v_13, &v_13, &v_3, &v_3);
		/// </summary>
		/// <returns>Array<void, object, object, object, object></returns>
		public (object, object, object, object, object) ThefeedAddTxdRef(object p0, object p1, object p2, object p3)
		{
			if (thefeedAddTxdRef == null) thefeedAddTxdRef = (Function) native.GetObjectProperty("thefeedAddTxdRef");
			var results = (Array) thefeedAddTxdRef.Call(native, p0, p1, p2, p3);
			return (results[0], results[1], results[2], results[3], results[4]);
		}

		/// <summary>
		/// Declares the entry type of a notification, for example "STRING".
		/// int ShowNotification(char *text)
		/// {
		/// BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
		/// ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		/// return _DRAW_NOTIFICATION(1, 1);
		/// }
		/// </summary>
		public void BeginTextCommandThefeedPost(string text)
		{
			if (beginTextCommandThefeedPost == null) beginTextCommandThefeedPost = (Function) native.GetObjectProperty("beginTextCommandThefeedPost");
			beginTextCommandThefeedPost.Call(native, text);
		}

		/// <summary>
		/// List of picNames: pastebin.com/XdpJVbHz
		/// </summary>
		public int EndTextCommandThefeedPostStats(string txdName, string textureName, bool flash, int iconType, bool p4, string sender, string subject)
		{
			if (endTextCommandThefeedPostStats == null) endTextCommandThefeedPostStats = (Function) native.GetObjectProperty("endTextCommandThefeedPostStats");
			return (int) endTextCommandThefeedPostStats.Call(native, txdName, textureName, flash, iconType, p4, sender, subject);
		}

		/// <summary>
		/// List of picNames: pastebin.com/XdpJVbHz
		/// flash is a bool for fading in.
		/// iconTypes:
		/// 1 : Chat Box
		/// 2 : Email
		/// 3 : Add Friend Request
		/// 4 : Nothing
		/// 5 : Nothing
		/// 6 : Nothing
		/// See NativeDB for reference: http://natives.altv.mp/#/0x1CCD9A37359072CF
		/// </summary>
		/// <param name="flash">is a bool for fading in.</param>
		public int EndTextCommandThefeedPostMessagetext(string picName1, string picName2, bool flash, int iconType, string sender, string subject)
		{
			if (endTextCommandThefeedPostMessagetext == null) endTextCommandThefeedPostMessagetext = (Function) native.GetObjectProperty("endTextCommandThefeedPostMessagetext");
			return (int) endTextCommandThefeedPostMessagetext.Call(native, picName1, picName2, flash, iconType, sender, subject);
		}

		/// <summary>
		/// Needs more research.
		/// Only one type of usage in the scripts:
		/// UI::_C6F580E4C94926AC("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);
		/// </summary>
		public int EndTextCommandThefeedPostMessagetextGxtEntry(string picName1, string picName2, bool flash, int iconType, string sender, string subject)
		{
			if (endTextCommandThefeedPostMessagetextGxtEntry == null) endTextCommandThefeedPostMessagetextGxtEntry = (Function) native.GetObjectProperty("endTextCommandThefeedPostMessagetextGxtEntry");
			return (int) endTextCommandThefeedPostMessagetextGxtEntry.Call(native, picName1, picName2, flash, iconType, sender, subject);
		}

		/// <summary>
		/// NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
		/// Example, only occurrence in the scripts:
		/// v_8 = UI::_1E6611149DB3DB6B("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);
		/// </summary>
		public int EndTextCommandThefeedPostMessagetextTu(string picName1, string picName2, bool flash, int iconType, string sender, string subject, double duration)
		{
			if (endTextCommandThefeedPostMessagetextTu == null) endTextCommandThefeedPostMessagetextTu = (Function) native.GetObjectProperty("endTextCommandThefeedPostMessagetextTu");
			return (int) endTextCommandThefeedPostMessagetextTu.Call(native, picName1, picName2, flash, iconType, sender, subject, duration);
		}

		/// <summary>
		/// List of picNames pastebin.com/XdpJVbHz
		/// flash is a bool for fading in.
		/// iconTypes:
		/// 1 : Chat Box
		/// 2 : Email
		/// 3 : Add Friend Request
		/// 4 : Nothing
		/// 5 : Nothing
		/// 6 : Nothing
		/// See NativeDB for reference: http://natives.altv.mp/#/0x5CBF7BADE20DB93E
		/// </summary>
		/// <param name="flash">is a bool for fading in.</param>
		public int EndTextCommandThefeedPostMessagetextWithCrewTag(string picName1, string picName2, bool flash, int iconType, string sender, string subject, double duration, string clanTag)
		{
			if (endTextCommandThefeedPostMessagetextWithCrewTag == null) endTextCommandThefeedPostMessagetextWithCrewTag = (Function) native.GetObjectProperty("endTextCommandThefeedPostMessagetextWithCrewTag");
			return (int) endTextCommandThefeedPostMessagetextWithCrewTag.Call(native, picName1, picName2, flash, iconType, sender, subject, duration, clanTag);
		}

		/// <summary>
		/// List of picNames: pastebin.com/XdpJVbHz
		/// flash is a bool for fading in.
		/// iconTypes:
		/// 1 : Chat Box
		/// 2 : Email
		/// 3 : Add Friend Request
		/// 4 : Nothing
		/// 5 : Nothing
		/// 6 : Nothing
		/// See NativeDB for reference: http://natives.altv.mp/#/0x531B84E7DA981FB6
		/// </summary>
		/// <param name="flash">is a bool for fading in.</param>
		public int EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(string picName1, string picName2, bool flash, int iconType1, string sender, string subject, double duration, string clanTag, int iconType2, int p9)
		{
			if (endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon == null) endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon = (Function) native.GetObjectProperty("endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon");
			return (int) endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon.Call(native, picName1, picName2, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9);
		}

		public int EndTextCommandThefeedPostTicker(bool blink, bool p1)
		{
			if (endTextCommandThefeedPostTicker == null) endTextCommandThefeedPostTicker = (Function) native.GetObjectProperty("endTextCommandThefeedPostTicker");
			return (int) endTextCommandThefeedPostTicker.Call(native, blink, p1);
		}

		public int EndTextCommandThefeedPostTickerForced(bool blink, bool p1)
		{
			if (endTextCommandThefeedPostTickerForced == null) endTextCommandThefeedPostTickerForced = (Function) native.GetObjectProperty("endTextCommandThefeedPostTickerForced");
			return (int) endTextCommandThefeedPostTickerForced.Call(native, blink, p1);
		}

		public int EndTextCommandThefeedPostTickerWithTokens(bool blink, bool p1)
		{
			if (endTextCommandThefeedPostTickerWithTokens == null) endTextCommandThefeedPostTickerWithTokens = (Function) native.GetObjectProperty("endTextCommandThefeedPostTickerWithTokens");
			return (int) endTextCommandThefeedPostTickerWithTokens.Call(native, blink, p1);
		}

		/// <summary>
		/// Example:
		/// UI::_SET_NOTIFICATION_TEXT_ENTRY("HUNT");
		/// UI::_0xAA295B6F28BD587D("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
		/// </summary>
		public int EndTextCommandThefeedPostAward(string p0, string p1, int p2, int p3, string p4)
		{
			if (endTextCommandThefeedPostAward == null) endTextCommandThefeedPostAward = (Function) native.GetObjectProperty("endTextCommandThefeedPostAward");
			return (int) endTextCommandThefeedPostAward.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) EndTextCommandThefeedPostCrewtag(bool p0, bool p1, int p2, int p3, bool isLeader, bool unk0, int clanDesc, int R, int G, int B)
		{
			if (endTextCommandThefeedPostCrewtag == null) endTextCommandThefeedPostCrewtag = (Function) native.GetObjectProperty("endTextCommandThefeedPostCrewtag");
			var results = (Array) endTextCommandThefeedPostCrewtag.Call(native, p0, p1, p2, p3, isLeader, unk0, clanDesc, R, G, B);
			return ((int) results[0], (int) results[1]);
		}

		/// <summary>
		/// p0 = 1 or 0
		/// crashes my game...
		/// this is for sending invites to network players - jobs/apartment/ect...
		/// return notification handle
		/// int invite(Player player)
		/// {
		/// networkHandleMgr netHandle;
		/// networkClanMgr clan;
		/// char *playerName = GET_PLAYER_NAME(player);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x137BC35589E34E1E
		/// </summary>
		/// <param name="p0">1 or 0</param>
		/// <param name="playerName">      char *GET_PLAYER_NAME(player);</param>
		/// <returns>Array<int, int></returns>
		public (int, int) EndTextCommandThefeedPostCrewtagWithGameName(bool p0, bool p1, int p2, int p3, bool isLeader, bool unk0, int clanDesc, string playerName, int R, int G, int B)
		{
			if (endTextCommandThefeedPostCrewtagWithGameName == null) endTextCommandThefeedPostCrewtagWithGameName = (Function) native.GetObjectProperty("endTextCommandThefeedPostCrewtagWithGameName");
			var results = (Array) endTextCommandThefeedPostCrewtagWithGameName.Call(native, p0, p1, p2, p3, isLeader, unk0, clanDesc, playerName, R, G, B);
			return ((int) results[0], (int) results[1]);
		}

		public object EndTextCommandThefeedPostUnlock(object p0, object p1, object p2)
		{
			if (endTextCommandThefeedPostUnlock == null) endTextCommandThefeedPostUnlock = (Function) native.GetObjectProperty("endTextCommandThefeedPostUnlock");
			return endTextCommandThefeedPostUnlock.Call(native, p0, p1, p2);
		}

		public object EndTextCommandThefeedPostUnlockTu(object p0, object p1, object p2, object p3)
		{
			if (endTextCommandThefeedPostUnlockTu == null) endTextCommandThefeedPostUnlockTu = (Function) native.GetObjectProperty("endTextCommandThefeedPostUnlockTu");
			return endTextCommandThefeedPostUnlockTu.Call(native, p0, p1, p2, p3);
		}

		public object EndTextCommandThefeedPostUnlockTuWithColor(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (endTextCommandThefeedPostUnlockTuWithColor == null) endTextCommandThefeedPostUnlockTuWithColor = (Function) native.GetObjectProperty("endTextCommandThefeedPostUnlockTuWithColor");
			return endTextCommandThefeedPostUnlockTuWithColor.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public int EndTextCommandThefeedPostMpticker(bool blink, bool p1)
		{
			if (endTextCommandThefeedPostMpticker == null) endTextCommandThefeedPostMpticker = (Function) native.GetObjectProperty("endTextCommandThefeedPostMpticker");
			return (int) endTextCommandThefeedPostMpticker.Call(native, blink, p1);
		}

		public int EndTextCommandThefeedPostCrewRankup(string p0, string p1, string p2, bool p3, bool p4)
		{
			if (endTextCommandThefeedPostCrewRankup == null) endTextCommandThefeedPostCrewRankup = (Function) native.GetObjectProperty("endTextCommandThefeedPostCrewRankup");
			return (int) endTextCommandThefeedPostCrewRankup.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object, object, object, object></returns>
		public (object, object, object, object, object) EndTextCommandThefeedPostVersusTu(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7)
		{
			if (endTextCommandThefeedPostVersusTu == null) endTextCommandThefeedPostVersusTu = (Function) native.GetObjectProperty("endTextCommandThefeedPostVersusTu");
			var results = (Array) endTextCommandThefeedPostVersusTu.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
			return (results[0], results[1], results[2], results[3], results[4]);
		}

		/// <summary>
		/// type range: 0 - 2
		/// if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
		/// example:
		/// UI::_0xD202B92CBF1D816F(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
		/// - imgur.com/lGBPCz3
		/// </summary>
		/// <param name="type">range: 0 - 2</param>
		/// <returns>returns a notification handle, prints out a notification like below:</returns>
		public int EndTextCommandThefeedPostReplayIcon(int type, int image, string text)
		{
			if (endTextCommandThefeedPostReplayIcon == null) endTextCommandThefeedPostReplayIcon = (Function) native.GetObjectProperty("endTextCommandThefeedPostReplayIcon");
			return (int) endTextCommandThefeedPostReplayIcon.Call(native, type, image, text);
		}

		/// <summary>
		/// type range: 0 - 2
		/// if you set type to 1, button accepts "~INPUT_SOMETHING~"
		/// example:
		/// UI::_0xDD6CB2CCE7C2735C(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
		/// - imgur.com/UPy0Ial
		/// Examples from the scripts:
		/// l_D1[11]=UI::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
		/// l_D1[21]=UI::_DD6CB2CCE7C2735C(1,"~INPUT_SAVE_REPLAY_CLIP~","");
		/// l_D1[11]=UI::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
		/// l_D1[21]=UI::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
		/// </summary>
		/// <param name="type">range: 0 - 2</param>
		/// <returns>returns a notification handle, prints out a notification like below:</returns>
		public int EndTextCommandThefeedPostReplayInput(int type, string button, string text)
		{
			if (endTextCommandThefeedPostReplayInput == null) endTextCommandThefeedPostReplayInput = (Function) native.GetObjectProperty("endTextCommandThefeedPostReplayInput");
			return (int) endTextCommandThefeedPostReplayInput.Call(native, type, button, text);
		}

		/// <summary>
		/// Used to be known as _SET_TEXT_ENTRY_2
		/// void ShowSubtitle(char *text)
		/// {
		/// BEGIN_TEXT_COMMAND_PRINT("STRING");
		/// ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		/// END_TEXT_COMMAND_PRINT(2000, 1);
		/// }
		/// </summary>
		public void BeginTextCommandPrint(string GxtEntry)
		{
			if (beginTextCommandPrint == null) beginTextCommandPrint = (Function) native.GetObjectProperty("beginTextCommandPrint");
			beginTextCommandPrint.Call(native, GxtEntry);
		}

		/// <summary>
		/// Draws the subtitle at middle center of the screen.
		/// int duration = time in milliseconds to show text on screen before disappearing
		/// drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
		/// Used to be known as _DRAW_SUBTITLE_TIMED
		/// </summary>
		/// <param name="duration">int time in milliseconds to show text on screen before disappearing</param>
		/// <param name="drawImmediately">If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished</param>
		public void EndTextCommandPrint(int duration, bool drawImmediately)
		{
			if (endTextCommandPrint == null) endTextCommandPrint = (Function) native.GetObjectProperty("endTextCommandPrint");
			endTextCommandPrint.Call(native, duration, drawImmediately);
		}

		/// <summary>
		/// nothin doin.
		/// BOOL Message(const char* text)
		/// {
		/// BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
		/// ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		/// return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
		/// }
		/// </summary>
		public void BeginTextCommandIsMessageDisplayed(string text)
		{
			if (beginTextCommandIsMessageDisplayed == null) beginTextCommandIsMessageDisplayed = (Function) native.GetObjectProperty("beginTextCommandIsMessageDisplayed");
			beginTextCommandIsMessageDisplayed.Call(native, text);
		}

		public bool EndTextCommandIsMessageDisplayed()
		{
			if (endTextCommandIsMessageDisplayed == null) endTextCommandIsMessageDisplayed = (Function) native.GetObjectProperty("endTextCommandIsMessageDisplayed");
			return (bool) endTextCommandIsMessageDisplayed.Call(native);
		}

		/// <summary>
		/// The following were found in the decompiled script files:
		/// STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
		/// ESDOLLA - cash
		/// ESMINDOLLA - cash (negative)
		/// Used to be known as _SET_TEXT_ENTRY
		/// </summary>
		public void BeginTextCommandDisplayText(string text)
		{
			if (beginTextCommandDisplayText == null) beginTextCommandDisplayText = (Function) native.GetObjectProperty("beginTextCommandDisplayText");
			beginTextCommandDisplayText.Call(native, text);
		}

		/// <summary>
		/// After applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.
		/// Used to be known as _DRAW_TEXT
		/// </summary>
		public void EndTextCommandDisplayText(double x, double y, int p2)
		{
			if (endTextCommandDisplayText == null) endTextCommandDisplayText = (Function) native.GetObjectProperty("endTextCommandDisplayText");
			endTextCommandDisplayText.Call(native, x, y, p2);
		}

		/// <summary>
		/// BEGIN_TEXT_COMMAND_*
		/// Example:
		/// _BEGIN_TEXT_COMMAND_GET_WIDTH("NUMBER");
		/// ADD_TEXT_COMPONENT_FLOAT(69.420f, 2);
		/// float width = _END_TEXT_COMMAND_GET_WIDTH(1);
		/// </summary>
		public void BeginTextCommandGetWidth(string text)
		{
			if (beginTextCommandGetWidth == null) beginTextCommandGetWidth = (Function) native.GetObjectProperty("beginTextCommandGetWidth");
			beginTextCommandGetWidth.Call(native, text);
		}

		/// <summary>
		/// END_TEXT_COMMAND_*
		/// In scripts font most of the time is passed as 1.
		/// Use _BEGIN_TEXT_GET_COMMAND_GET_WIDTH
		/// param is not font from what i've tested
		/// </summary>
		public double EndTextCommandGetWidth(bool p0)
		{
			if (endTextCommandGetWidth == null) endTextCommandGetWidth = (Function) native.GetObjectProperty("endTextCommandGetWidth");
			return (double) endTextCommandGetWidth.Call(native, p0);
		}

		/// <summary>
		/// BEGIN_TEXT_COMMAND_*
		/// get's line count
		/// int GetLineCount(char *text, float x, float y)
		/// {
		/// _BEGIN_TEXT_COMMAND_LINE_COUNT("STRING");
		/// ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		/// return _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);
		/// }
		/// </summary>
		public void BeginTextCommandLineCount(string entry)
		{
			if (beginTextCommandLineCount == null) beginTextCommandLineCount = (Function) native.GetObjectProperty("beginTextCommandLineCount");
			beginTextCommandLineCount.Call(native, entry);
		}

		/// <summary>
		/// END_TEXT_COMMAND_*
		/// Determines how many lines the text string will use when drawn on screen.
		/// Must use 0x521FB041D93DD0E4 for setting up
		/// </summary>
		public int EndTextCommandLineCount(double x, double y)
		{
			if (endTextCommandLineCount == null) endTextCommandLineCount = (Function) native.GetObjectProperty("endTextCommandLineCount");
			return (int) endTextCommandLineCount.Call(native, x, y);
		}

		/// <summary>
		/// Used to be known as _SET_TEXT_COMPONENT_FORMAT
		/// </summary>
		public void BeginTextCommandDisplayHelp(string inputType)
		{
			if (beginTextCommandDisplayHelp == null) beginTextCommandDisplayHelp = (Function) native.GetObjectProperty("beginTextCommandDisplayHelp");
			beginTextCommandDisplayHelp.Call(native, inputType);
		}

		/// <summary>
		/// shape goes from -1 to 50 (may be more).
		/// p0 is always 0.
		/// Example:
		/// void FloatingHelpText(const char* text)
		/// {
		/// BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
		/// ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		/// END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0x238FFE5C7B0498A6
		/// </summary>
		/// <param name="p0">is always 0.</param>
		/// <param name="shape">goes from -1 to 50 (may be more).</param>
		public void EndTextCommandDisplayHelp(int p0, bool loop, bool beep, int shape)
		{
			if (endTextCommandDisplayHelp == null) endTextCommandDisplayHelp = (Function) native.GetObjectProperty("endTextCommandDisplayHelp");
			endTextCommandDisplayHelp.Call(native, p0, loop, beep, shape);
		}

		/// <summary>
		/// BOOL IsContextActive(char *ctx)
		/// {
		/// BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
		/// return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
		/// }
		/// </summary>
		public void BeginTextCommandIsThisHelpMessageBeingDisplayed(string labelName)
		{
			if (beginTextCommandIsThisHelpMessageBeingDisplayed == null) beginTextCommandIsThisHelpMessageBeingDisplayed = (Function) native.GetObjectProperty("beginTextCommandIsThisHelpMessageBeingDisplayed");
			beginTextCommandIsThisHelpMessageBeingDisplayed.Call(native, labelName);
		}

		public bool EndTextCommandIsThisHelpMessageBeingDisplayed(int p0)
		{
			if (endTextCommandIsThisHelpMessageBeingDisplayed == null) endTextCommandIsThisHelpMessageBeingDisplayed = (Function) native.GetObjectProperty("endTextCommandIsThisHelpMessageBeingDisplayed");
			return (bool) endTextCommandIsThisHelpMessageBeingDisplayed.Call(native, p0);
		}

		/// <summary>
		/// example:
		/// UI::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
		/// UI::_ADD_TEXT_COMPONENT_STRING("Name");
		/// UI::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
		/// </summary>
		public void BeginTextCommandSetBlipName(string gxtentry)
		{
			if (beginTextCommandSetBlipName == null) beginTextCommandSetBlipName = (Function) native.GetObjectProperty("beginTextCommandSetBlipName");
			beginTextCommandSetBlipName.Call(native, gxtentry);
		}

		public void EndTextCommandSetBlipName(int blip)
		{
			if (endTextCommandSetBlipName == null) endTextCommandSetBlipName = (Function) native.GetObjectProperty("endTextCommandSetBlipName");
			endTextCommandSetBlipName.Call(native, blip);
		}

		public void BeginTextCommandObjective(string p0)
		{
			if (beginTextCommandObjective == null) beginTextCommandObjective = (Function) native.GetObjectProperty("beginTextCommandObjective");
			beginTextCommandObjective.Call(native, p0);
		}

		public void EndTextCommandObjective(bool p0)
		{
			if (endTextCommandObjective == null) endTextCommandObjective = (Function) native.GetObjectProperty("endTextCommandObjective");
			endTextCommandObjective.Call(native, p0);
		}

		/// <summary>
		/// clears a print text command with this text
		/// </summary>
		public void BeginTextCommandClearPrint(string text)
		{
			if (beginTextCommandClearPrint == null) beginTextCommandClearPrint = (Function) native.GetObjectProperty("beginTextCommandClearPrint");
			beginTextCommandClearPrint.Call(native, text);
		}

		public void EndTextCommandClearPrint()
		{
			if (endTextCommandClearPrint == null) endTextCommandClearPrint = (Function) native.GetObjectProperty("endTextCommandClearPrint");
			endTextCommandClearPrint.Call(native);
		}

		public void BeginTextCommandOverrideButtonText(string gxtEntry)
		{
			if (beginTextCommandOverrideButtonText == null) beginTextCommandOverrideButtonText = (Function) native.GetObjectProperty("beginTextCommandOverrideButtonText");
			beginTextCommandOverrideButtonText.Call(native, gxtEntry);
		}

		public void EndTextCommandOverrideButtonText(int p0)
		{
			if (endTextCommandOverrideButtonText == null) endTextCommandOverrideButtonText = (Function) native.GetObjectProperty("endTextCommandOverrideButtonText");
			endTextCommandOverrideButtonText.Call(native, p0);
		}

		public void AddTextComponentInteger(int value)
		{
			if (addTextComponentInteger == null) addTextComponentInteger = (Function) native.GetObjectProperty("addTextComponentInteger");
			addTextComponentInteger.Call(native, value);
		}

		public void AddTextComponentFloat(double value, int decimalPlaces)
		{
			if (addTextComponentFloat == null) addTextComponentFloat = (Function) native.GetObjectProperty("addTextComponentFloat");
			addTextComponentFloat.Call(native, value, decimalPlaces);
		}

		public void AddTextComponentSubstringTextLabel(string labelName)
		{
			if (addTextComponentSubstringTextLabel == null) addTextComponentSubstringTextLabel = (Function) native.GetObjectProperty("addTextComponentSubstringTextLabel");
			addTextComponentSubstringTextLabel.Call(native, labelName);
		}

		/// <summary>
		/// It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
		/// </summary>
		public void AddTextComponentSubstringTextLabelHashKey(int gxtEntryHash)
		{
			if (addTextComponentSubstringTextLabelHashKey == null) addTextComponentSubstringTextLabelHashKey = (Function) native.GetObjectProperty("addTextComponentSubstringTextLabelHashKey");
			addTextComponentSubstringTextLabelHashKey.Call(native, gxtEntryHash);
		}

		public void AddTextComponentSubstringBlipName(int blip)
		{
			if (addTextComponentSubstringBlipName == null) addTextComponentSubstringBlipName = (Function) native.GetObjectProperty("addTextComponentSubstringBlipName");
			addTextComponentSubstringBlipName.Call(native, blip);
		}

		public void AddTextComponentSubstringPlayerName(string text)
		{
			if (addTextComponentSubstringPlayerName == null) addTextComponentSubstringPlayerName = (Function) native.GetObjectProperty("addTextComponentSubstringPlayerName");
			addTextComponentSubstringPlayerName.Call(native, text);
		}

		/// <summary>
		/// Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
		/// </summary>
		public void AddTextComponentSubstringTime(int timestamp, int flags)
		{
			if (addTextComponentSubstringTime == null) addTextComponentSubstringTime = (Function) native.GetObjectProperty("addTextComponentSubstringTime");
			addTextComponentSubstringTime.Call(native, timestamp, flags);
		}

		public void AddTextComponentFormattedInteger(int value, bool commaSeparated)
		{
			if (addTextComponentFormattedInteger == null) addTextComponentFormattedInteger = (Function) native.GetObjectProperty("addTextComponentFormattedInteger");
			addTextComponentFormattedInteger.Call(native, value, commaSeparated);
		}

		/// <summary>
		/// p1 was always -1
		/// </summary>
		/// <param name="p1">was always -1</param>
		public void AddTextComponentSubstringPhoneNumber(string p0, int p1)
		{
			if (addTextComponentSubstringPhoneNumber == null) addTextComponentSubstringPhoneNumber = (Function) native.GetObjectProperty("addTextComponentSubstringPhoneNumber");
			addTextComponentSubstringPhoneNumber.Call(native, p0, p1);
		}

		/// <summary>
		/// This native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)
		/// </summary>
		public void AddTextComponentSubstringWebsite(string website)
		{
			if (addTextComponentSubstringWebsite == null) addTextComponentSubstringWebsite = (Function) native.GetObjectProperty("addTextComponentSubstringWebsite");
			addTextComponentSubstringWebsite.Call(native, website);
		}

		/// <summary>
		/// ADD_TEXT_COMPONENT_SUBSTRING_*
		/// ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY ?
		/// </summary>
		public void AddTextComponentSubstringUnk(string p0)
		{
			if (addTextComponentSubstringUnk == null) addTextComponentSubstringUnk = (Function) native.GetObjectProperty("addTextComponentSubstringUnk");
			addTextComponentSubstringUnk.Call(native, p0);
		}

		public void SetColourOfNextTextComponent(int hudColor)
		{
			if (setColourOfNextTextComponent == null) setColourOfNextTextComponent = (Function) native.GetObjectProperty("setColourOfNextTextComponent");
			setColourOfNextTextComponent.Call(native, hudColor);
		}

		/// <summary>
		/// Example:
		/// // Get "STRING" text from "MY_STRING"
		/// subStr = UI::_GET_TEXT_SUBSTRING("MY_STRING", 3, 6);
		/// </summary>
		/// <returns>Returns a substring of a specified length starting at a specified position.</returns>
		public string GetTextSubstring(string text, int position, int length)
		{
			if (getTextSubstring == null) getTextSubstring = (Function) native.GetObjectProperty("getTextSubstring");
			return (string) getTextSubstring.Call(native, text, position, length);
		}

		/// <summary>
		/// NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
		/// Example:
		/// // Condensed example of how Rockstar uses this function
		/// strLen = UI::GET_LENGTH_OF_LITERAL_STRING(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
		/// subStr = UI::_GET_TEXT_SUBSTRING_SAFE(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);
		/// --
		/// "fm_race_creator.ysc", line 85115:
		/// // parameters modified for clarity
		/// BOOL sub_8e5aa(char *text, int length) {
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB2798643312205C5
		/// </summary>
		/// <returns>Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.</returns>
		public string GetTextSubstringSafe(string text, int position, int length, int maxLength)
		{
			if (getTextSubstringSafe == null) getTextSubstringSafe = (Function) native.GetObjectProperty("getTextSubstringSafe");
			return (string) getTextSubstringSafe.Call(native, text, position, length, maxLength);
		}

		/// <summary>
		/// Example:
		/// // Get "STRING" text from "MY_STRING"
		/// subStr = UI::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 9);
		/// // Overflows are possibly replaced with underscores (needs verification)
		/// subStr = UI::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 10); // "STRING_"?
		/// </summary>
		/// <returns>Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).</returns>
		public string GetTextSubstringSlice(string text, int startPosition, int endPosition)
		{
			if (getTextSubstringSlice == null) getTextSubstringSlice = (Function) native.GetObjectProperty("getTextSubstringSlice");
			return (string) getTextSubstringSlice.Call(native, text, startPosition, endPosition);
		}

		/// <summary>
		/// Gets a string literal from a label name.
		/// GET_F*
		/// </summary>
		public string GetLabelText(string labelName)
		{
			if (getLabelText == null) getLabelText = (Function) native.GetObjectProperty("getLabelText");
			return (string) getLabelText.Call(native, labelName);
		}

		public void ClearPrints()
		{
			if (clearPrints == null) clearPrints = (Function) native.GetObjectProperty("clearPrints");
			clearPrints.Call(native);
		}

		public void ClearBrief()
		{
			if (clearBrief == null) clearBrief = (Function) native.GetObjectProperty("clearBrief");
			clearBrief.Call(native);
		}

		public void ClearAllHelpMessages()
		{
			if (clearAllHelpMessages == null) clearAllHelpMessages = (Function) native.GetObjectProperty("clearAllHelpMessages");
			clearAllHelpMessages.Call(native);
		}

		/// <summary>
		/// p0: found arguments in the b617d scripts: pastebin.com/X5akCN7z
		/// </summary>
		/// <param name="p0">found arguments in the b617d scripts: pastebin.com/X5akCN7z</param>
		public void ClearThisPrint(string p0)
		{
			if (clearThisPrint == null) clearThisPrint = (Function) native.GetObjectProperty("clearThisPrint");
			clearThisPrint.Call(native, p0);
		}

		public void ClearSmallPrints()
		{
			if (clearSmallPrints == null) clearSmallPrints = (Function) native.GetObjectProperty("clearSmallPrints");
			clearSmallPrints.Call(native);
		}

		public bool DoesTextBlockExist(string gxt)
		{
			if (doesTextBlockExist == null) doesTextBlockExist = (Function) native.GetObjectProperty("doesTextBlockExist");
			return (bool) doesTextBlockExist.Call(native, gxt);
		}

		/// <summary>
		/// Request a gxt into the passed slot.
		/// </summary>
		public void RequestAdditionalText(string gxt, int slot)
		{
			if (requestAdditionalText == null) requestAdditionalText = (Function) native.GetObjectProperty("requestAdditionalText");
			requestAdditionalText.Call(native, gxt, slot);
		}

		public void RequestAdditionalTextForDlc(string gxt, int slot)
		{
			if (requestAdditionalTextForDlc == null) requestAdditionalTextForDlc = (Function) native.GetObjectProperty("requestAdditionalTextForDlc");
			requestAdditionalTextForDlc.Call(native, gxt, slot);
		}

		public bool HasAdditionalTextLoaded(int slot)
		{
			if (hasAdditionalTextLoaded == null) hasAdditionalTextLoaded = (Function) native.GetObjectProperty("hasAdditionalTextLoaded");
			return (bool) hasAdditionalTextLoaded.Call(native, slot);
		}

		public void ClearAdditionalText(int p0, bool p1)
		{
			if (clearAdditionalText == null) clearAdditionalText = (Function) native.GetObjectProperty("clearAdditionalText");
			clearAdditionalText.Call(native, p0, p1);
		}

		public bool IsStreamingAdditionalText(int p0)
		{
			if (isStreamingAdditionalText == null) isStreamingAdditionalText = (Function) native.GetObjectProperty("isStreamingAdditionalText");
			return (bool) isStreamingAdditionalText.Call(native, p0);
		}

		/// <summary>
		/// Checks if the specified gxt has loaded into the passed slot.
		/// </summary>
		public bool HasThisAdditionalTextLoaded(string gxt, int slot)
		{
			if (hasThisAdditionalTextLoaded == null) hasThisAdditionalTextLoaded = (Function) native.GetObjectProperty("hasThisAdditionalTextLoaded");
			return (bool) hasThisAdditionalTextLoaded.Call(native, gxt, slot);
		}

		public bool IsMessageBeingDisplayed()
		{
			if (isMessageBeingDisplayed == null) isMessageBeingDisplayed = (Function) native.GetObjectProperty("isMessageBeingDisplayed");
			return (bool) isMessageBeingDisplayed.Call(native);
		}

		/// <summary>
		/// Checks if the passed gxt name exists in the game files.
		/// </summary>
		public bool DoesTextLabelExist(string gxt)
		{
			if (doesTextLabelExist == null) doesTextLabelExist = (Function) native.GetObjectProperty("doesTextLabelExist");
			return (bool) doesTextLabelExist.Call(native, gxt);
		}

		/// <summary>
		/// GET_F*
		/// </summary>
		public string _0x98C3CF913D895111(string @string, int length)
		{
			if (__0x98C3CF913D895111 == null) __0x98C3CF913D895111 = (Function) native.GetObjectProperty("_0x98C3CF913D895111");
			return (string) __0x98C3CF913D895111.Call(native, @string, length);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the string length of the string from the gxt string .</returns>
		public int GetLengthOfStringWithThisTextLabel(string gxt)
		{
			if (getLengthOfStringWithThisTextLabel == null) getLengthOfStringWithThisTextLabel = (Function) native.GetObjectProperty("getLengthOfStringWithThisTextLabel");
			return (int) getLengthOfStringWithThisTextLabel.Call(native, gxt);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the length of the string passed (much like strlen).</returns>
		public int GetLengthOfLiteralString(string @string)
		{
			if (getLengthOfLiteralString == null) getLengthOfLiteralString = (Function) native.GetObjectProperty("getLengthOfLiteralString");
			return (int) getLengthOfLiteralString.Call(native, @string);
		}

		public int GetLengthOfLiteralStringInBytes(string @string)
		{
			if (getLengthOfLiteralStringInBytes == null) getLengthOfLiteralStringInBytes = (Function) native.GetObjectProperty("getLengthOfLiteralStringInBytes");
			return (int) getLengthOfLiteralStringInBytes.Call(native, @string);
		}

		/// <summary>
		/// This functions converts the hash of a street name into a readable string.
		/// For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.
		/// </summary>
		public string GetStreetNameFromHashKey(int hash)
		{
			if (getStreetNameFromHashKey == null) getStreetNameFromHashKey = (Function) native.GetObjectProperty("getStreetNameFromHashKey");
			return (string) getStreetNameFromHashKey.Call(native, hash);
		}

		public bool IsHudPreferenceSwitchedOn()
		{
			if (isHudPreferenceSwitchedOn == null) isHudPreferenceSwitchedOn = (Function) native.GetObjectProperty("isHudPreferenceSwitchedOn");
			return (bool) isHudPreferenceSwitchedOn.Call(native);
		}

		public bool IsRadarPreferenceSwitchedOn()
		{
			if (isRadarPreferenceSwitchedOn == null) isRadarPreferenceSwitchedOn = (Function) native.GetObjectProperty("isRadarPreferenceSwitchedOn");
			return (bool) isRadarPreferenceSwitchedOn.Call(native);
		}

		public bool IsSubtitlePreferenceSwitchedOn()
		{
			if (isSubtitlePreferenceSwitchedOn == null) isSubtitlePreferenceSwitchedOn = (Function) native.GetObjectProperty("isSubtitlePreferenceSwitchedOn");
			return (bool) isSubtitlePreferenceSwitchedOn.Call(native);
		}

		/// <summary>
		/// If Hud should be displayed
		/// </summary>
		public void DisplayHud(bool toggle)
		{
			if (displayHud == null) displayHud = (Function) native.GetObjectProperty("displayHud");
			displayHud.Call(native, toggle);
		}

		/// <summary>
		/// DISPLAY_HUD_*
		/// </summary>
		public void _0x7669F9E39DC17063()
		{
			if (__0x7669F9E39DC17063 == null) __0x7669F9E39DC17063 = (Function) native.GetObjectProperty("_0x7669F9E39DC17063");
			__0x7669F9E39DC17063.Call(native);
		}

		public void DisplayHudWhenPausedThisFrame()
		{
			if (displayHudWhenPausedThisFrame == null) displayHudWhenPausedThisFrame = (Function) native.GetObjectProperty("displayHudWhenPausedThisFrame");
			displayHudWhenPausedThisFrame.Call(native);
		}

		/// <summary>
		/// If Minimap / Radar should be displayed.
		/// </summary>
		public void DisplayRadar(bool toggle)
		{
			if (displayRadar == null) displayRadar = (Function) native.GetObjectProperty("displayRadar");
			displayRadar.Call(native, toggle);
		}

		/// <summary>
		/// Setter for 0xC2D2AD9EAAE265B8
		/// SET_*
		/// </summary>
		public void _0xCD74233600C4EA6B(bool toggle)
		{
			if (__0xCD74233600C4EA6B == null) __0xCD74233600C4EA6B = (Function) native.GetObjectProperty("_0xCD74233600C4EA6B");
			__0xCD74233600C4EA6B.Call(native, toggle);
		}

		/// <summary>
		/// Getter for 0xCD74233600C4EA6B
		/// GET_*
		/// </summary>
		public bool _0xC2D2AD9EAAE265B8()
		{
			if (__0xC2D2AD9EAAE265B8 == null) __0xC2D2AD9EAAE265B8 = (Function) native.GetObjectProperty("_0xC2D2AD9EAAE265B8");
			return (bool) __0xC2D2AD9EAAE265B8.Call(native);
		}

		public bool IsHudHidden()
		{
			if (isHudHidden == null) isHudHidden = (Function) native.GetObjectProperty("isHudHidden");
			return (bool) isHudHidden.Call(native);
		}

		public bool IsRadarHidden()
		{
			if (isRadarHidden == null) isRadarHidden = (Function) native.GetObjectProperty("isRadarHidden");
			return (bool) isRadarHidden.Call(native);
		}

		public bool IsMinimapRendering()
		{
			if (isMinimapRendering == null) isMinimapRendering = (Function) native.GetObjectProperty("isMinimapRendering");
			return (bool) isMinimapRendering.Call(native);
		}

		public void _0x0C698D8F099174C7(object p0)
		{
			if (__0x0C698D8F099174C7 == null) __0x0C698D8F099174C7 = (Function) native.GetObjectProperty("_0x0C698D8F099174C7");
			__0x0C698D8F099174C7.Call(native, p0);
		}

		public void _0xE4C3B169876D33D7(object p0)
		{
			if (__0xE4C3B169876D33D7 == null) __0xE4C3B169876D33D7 = (Function) native.GetObjectProperty("_0xE4C3B169876D33D7");
			__0xE4C3B169876D33D7.Call(native, p0);
		}

		public void _0xEB81A3DADD503187()
		{
			if (__0xEB81A3DADD503187 == null) __0xEB81A3DADD503187 = (Function) native.GetObjectProperty("_0xEB81A3DADD503187");
			__0xEB81A3DADD503187.Call(native);
		}

		/// <summary>
		/// Enable / disable showing route for the Blip-object.
		/// </summary>
		public void SetBlipRoute(int blip, bool enabled)
		{
			if (setBlipRoute == null) setBlipRoute = (Function) native.GetObjectProperty("setBlipRoute");
			setBlipRoute.Call(native, blip, enabled);
		}

		public void ClearAllBlipRoutes()
		{
			if (clearAllBlipRoutes == null) clearAllBlipRoutes = (Function) native.GetObjectProperty("clearAllBlipRoutes");
			clearAllBlipRoutes.Call(native);
		}

		public void SetBlipRouteColour(int blip, int colour)
		{
			if (setBlipRouteColour == null) setBlipRouteColour = (Function) native.GetObjectProperty("setBlipRouteColour");
			setBlipRouteColour.Call(native, blip, colour);
		}

		/// <summary>
		/// SET_F*
		/// </summary>
		public void _0x2790F4B17D098E26(bool toggle)
		{
			if (__0x2790F4B17D098E26 == null) __0x2790F4B17D098E26 = (Function) native.GetObjectProperty("_0x2790F4B17D098E26");
			__0x2790F4B17D098E26.Call(native, toggle);
		}

		public void _0x6CDD58146A436083(object p0)
		{
			if (__0x6CDD58146A436083 == null) __0x6CDD58146A436083 = (Function) native.GetObjectProperty("_0x6CDD58146A436083");
			__0x6CDD58146A436083.Call(native, p0);
		}

		public void _0xD1942374085C8469(object p0)
		{
			if (__0xD1942374085C8469 == null) __0xD1942374085C8469 = (Function) native.GetObjectProperty("_0xD1942374085C8469");
			__0xD1942374085C8469.Call(native, p0);
		}

		public void AddNextMessageToPreviousBriefs(bool p0)
		{
			if (addNextMessageToPreviousBriefs == null) addNextMessageToPreviousBriefs = (Function) native.GetObjectProperty("addNextMessageToPreviousBriefs");
			addNextMessageToPreviousBriefs.Call(native, p0);
		}

		/// <summary>
		/// FORCE_*
		/// </summary>
		public void _0x57D760D55F54E071(int p0)
		{
			if (__0x57D760D55F54E071 == null) __0x57D760D55F54E071 = (Function) native.GetObjectProperty("_0x57D760D55F54E071");
			__0x57D760D55F54E071.Call(native, p0);
		}

		public void SetRadarZoomPrecise(double zoom)
		{
			if (setRadarZoomPrecise == null) setRadarZoomPrecise = (Function) native.GetObjectProperty("setRadarZoomPrecise");
			setRadarZoomPrecise.Call(native, zoom);
		}

		/// <summary>
		/// zoomLevel ranges from 0 to 200
		/// </summary>
		/// <param name="zoomLevel">ranges from 0 to 200 </param>
		public void SetRadarZoom(int zoomLevel)
		{
			if (setRadarZoom == null) setRadarZoom = (Function) native.GetObjectProperty("setRadarZoom");
			setRadarZoom.Call(native, zoomLevel);
		}

		public void SetRadarZoomToBlip(int blip, double zoom)
		{
			if (setRadarZoomToBlip == null) setRadarZoomToBlip = (Function) native.GetObjectProperty("setRadarZoomToBlip");
			setRadarZoomToBlip.Call(native, blip, zoom);
		}

		public void SetRadarZoomToDistance(double zoom)
		{
			if (setRadarZoomToDistance == null) setRadarZoomToDistance = (Function) native.GetObjectProperty("setRadarZoomToDistance");
			setRadarZoomToDistance.Call(native, zoom);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0xD2049635DEB9C375()
		{
			if (__0xD2049635DEB9C375 == null) __0xD2049635DEB9C375 = (Function) native.GetObjectProperty("_0xD2049635DEB9C375");
			__0xD2049635DEB9C375.Call(native);
		}

		/// <summary>
		/// HUD colors and their values: pastebin.com/d9aHPbXN
		/// </summary>
		/// <returns>Array<void, int, int, int, int></returns>
		public (object, int, int, int, int) GetHudColour(int hudColorIndex, int r, int g, int b, int a)
		{
			if (getHudColour == null) getHudColour = (Function) native.GetObjectProperty("getHudColour");
			var results = (Array) getHudColour.Call(native, hudColorIndex, r, g, b, a);
			return (results[0], (int) results[1], (int) results[2], (int) results[3], (int) results[4]);
		}

		/// <summary>
		/// Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
		/// </summary>
		public void SetScriptVariableHudColour(int r, int g, int b, int a)
		{
			if (setScriptVariableHudColour == null) setScriptVariableHudColour = (Function) native.GetObjectProperty("setScriptVariableHudColour");
			setScriptVariableHudColour.Call(native, r, g, b, a);
		}

		/// <summary>
		/// Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
		/// </summary>
		public void SetScriptVariable2HudColour(int r, int g, int b, int a)
		{
			if (setScriptVariable2HudColour == null) setScriptVariable2HudColour = (Function) native.GetObjectProperty("setScriptVariable2HudColour");
			setScriptVariable2HudColour.Call(native, r, g, b, a);
		}

		/// <summary>
		/// HUD colors and their values: pastebin.com/d9aHPbXN
		/// --------------------------------------------------
		/// makes hudColorIndex2 color into hudColorIndex color
		/// </summary>
		public void ReplaceHudColour(int hudColorIndex, int hudColorIndex2)
		{
			if (replaceHudColour == null) replaceHudColour = (Function) native.GetObjectProperty("replaceHudColour");
			replaceHudColour.Call(native, hudColorIndex, hudColorIndex2);
		}

		/// <summary>
		/// HUD colors and their values: pastebin.com/d9aHPbXN
		/// </summary>
		public void ReplaceHudColourWithRgba(int hudColorIndex, int r, int g, int b, int a)
		{
			if (replaceHudColourWithRgba == null) replaceHudColourWithRgba = (Function) native.GetObjectProperty("replaceHudColourWithRgba");
			replaceHudColourWithRgba.Call(native, hudColorIndex, r, g, b, a);
		}

		public void SetAbilityBarVisibilityInMultiplayer(bool visible)
		{
			if (setAbilityBarVisibilityInMultiplayer == null) setAbilityBarVisibilityInMultiplayer = (Function) native.GetObjectProperty("setAbilityBarVisibilityInMultiplayer");
			setAbilityBarVisibilityInMultiplayer.Call(native, visible);
		}

		public void FlashAbilityBar(int millisecondsToFlash)
		{
			if (flashAbilityBar == null) flashAbilityBar = (Function) native.GetObjectProperty("flashAbilityBar");
			flashAbilityBar.Call(native, millisecondsToFlash);
		}

		public void SetAbilityBarValue(double p0, double p1)
		{
			if (setAbilityBarValue == null) setAbilityBarValue = (Function) native.GetObjectProperty("setAbilityBarValue");
			setAbilityBarValue.Call(native, p0, p1);
		}

		public void FlashWantedDisplay(bool p0)
		{
			if (flashWantedDisplay == null) flashWantedDisplay = (Function) native.GetObjectProperty("flashWantedDisplay");
			flashWantedDisplay.Call(native, p0);
		}

		/// <summary>
		/// FORCE_*
		/// </summary>
		public void _0xBA8D65C1C65702E5(bool toggle)
		{
			if (__0xBA8D65C1C65702E5 == null) __0xBA8D65C1C65702E5 = (Function) native.GetObjectProperty("_0xBA8D65C1C65702E5");
			__0xBA8D65C1C65702E5.Call(native, toggle);
		}

		/// <summary>
		/// This get's the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
		/// </summary>
		public double GetTextScaleHeight(double size, int font)
		{
			if (getTextScaleHeight == null) getTextScaleHeight = (Function) native.GetObjectProperty("getTextScaleHeight");
			return (double) getTextScaleHeight.Call(native, size, font);
		}

		/// <summary>
		/// Size range : 0F to 1.0F
		/// p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
		/// </summary>
		/// <param name="size">Size range : 0F to 1.0F</param>
		public void SetTextScale(double scale, double size)
		{
			if (setTextScale == null) setTextScale = (Function) native.GetObjectProperty("setTextScale");
			setTextScale.Call(native, scale, size);
		}

		/// <summary>
		/// colors you input not same as you think?
		/// A: for some reason its R B G A
		/// </summary>
		public void SetTextColour(int red, int green, int blue, int alpha)
		{
			if (setTextColour == null) setTextColour = (Function) native.GetObjectProperty("setTextColour");
			setTextColour.Call(native, red, green, blue, alpha);
		}

		public void SetTextCentre(bool align)
		{
			if (setTextCentre == null) setTextCentre = (Function) native.GetObjectProperty("setTextCentre");
			setTextCentre.Call(native, align);
		}

		public void SetTextRightJustify(bool toggle)
		{
			if (setTextRightJustify == null) setTextRightJustify = (Function) native.GetObjectProperty("setTextRightJustify");
			setTextRightJustify.Call(native, toggle);
		}

		/// <summary>
		/// Types -
		/// 0: Center-Justify
		/// 1: Left-Justify
		/// 2: Right-Justify
		/// Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
		/// </summary>
		public void SetTextJustification(int justifyType)
		{
			if (setTextJustification == null) setTextJustification = (Function) native.GetObjectProperty("setTextJustification");
			setTextJustification.Call(native, justifyType);
		}

		/// <summary>
		/// It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
		/// start - left boundry on screen position (0.0 - 1.0)
		/// end - right boundry on screen position (0.0 - 1.0)
		/// </summary>
		/// <param name="start">left boundry on screen position (0.0 - 1.0)</param>
		/// <param name="end">right boundry on screen position (0.0 - 1.0)</param>
		public void SetTextWrap(double start, double end)
		{
			if (setTextWrap == null) setTextWrap = (Function) native.GetObjectProperty("setTextWrap");
			setTextWrap.Call(native, start, end);
		}

		public void SetTextLeading(int p0)
		{
			if (setTextLeading == null) setTextLeading = (Function) native.GetObjectProperty("setTextLeading");
			setTextLeading.Call(native, p0);
		}

		public void SetTextProportional(bool p0)
		{
			if (setTextProportional == null) setTextProportional = (Function) native.GetObjectProperty("setTextProportional");
			setTextProportional.Call(native, p0);
		}

		/// <summary>
		/// fonts that mess up your text where made for number values/misc stuff
		/// </summary>
		public void SetTextFont(int fontType)
		{
			if (setTextFont == null) setTextFont = (Function) native.GetObjectProperty("setTextFont");
			setTextFont.Call(native, fontType);
		}

		public void SetTextDropShadow()
		{
			if (setTextDropShadow == null) setTextDropShadow = (Function) native.GetObjectProperty("setTextDropShadow");
			setTextDropShadow.Call(native);
		}

		/// <summary>
		/// distance - shadow distance in pixels, both horizontal and vertical
		/// r, g, b, a - color
		/// </summary>
		/// <param name="distance">shadow distance in pixels, both horizontal and vertical</param>
		/// <param name="a">r, g, b, color</param>
		public void SetTextDropshadow(int distance, int r, int g, int b, int a)
		{
			if (setTextDropshadow == null) setTextDropshadow = (Function) native.GetObjectProperty("setTextDropshadow");
			setTextDropshadow.Call(native, distance, r, g, b, a);
		}

		public void SetTextOutline()
		{
			if (setTextOutline == null) setTextOutline = (Function) native.GetObjectProperty("setTextOutline");
			setTextOutline.Call(native);
		}

		public void SetTextEdge(int p0, int r, int g, int b, int a)
		{
			if (setTextEdge == null) setTextEdge = (Function) native.GetObjectProperty("setTextEdge");
			setTextEdge.Call(native, p0, r, g, b, a);
		}

		public void SetTextRenderId(int renderId)
		{
			if (setTextRenderId == null) setTextRenderId = (Function) native.GetObjectProperty("setTextRenderId");
			setTextRenderId.Call(native, renderId);
		}

		/// <summary>
		/// This function is hard-coded to always return 1.
		/// </summary>
		public int GetDefaultScriptRendertargetRenderId()
		{
			if (getDefaultScriptRendertargetRenderId == null) getDefaultScriptRendertargetRenderId = (Function) native.GetObjectProperty("getDefaultScriptRendertargetRenderId");
			return (int) getDefaultScriptRendertargetRenderId.Call(native);
		}

		public bool RegisterNamedRendertarget(string name, bool p1)
		{
			if (registerNamedRendertarget == null) registerNamedRendertarget = (Function) native.GetObjectProperty("registerNamedRendertarget");
			return (bool) registerNamedRendertarget.Call(native, name, p1);
		}

		public bool IsNamedRendertargetRegistered(string name)
		{
			if (isNamedRendertargetRegistered == null) isNamedRendertargetRegistered = (Function) native.GetObjectProperty("isNamedRendertargetRegistered");
			return (bool) isNamedRendertargetRegistered.Call(native, name);
		}

		public bool ReleaseNamedRendertarget(string name)
		{
			if (releaseNamedRendertarget == null) releaseNamedRendertarget = (Function) native.GetObjectProperty("releaseNamedRendertarget");
			return (bool) releaseNamedRendertarget.Call(native, name);
		}

		public void LinkNamedRendertarget(int modelHash)
		{
			if (linkNamedRendertarget == null) linkNamedRendertarget = (Function) native.GetObjectProperty("linkNamedRendertarget");
			linkNamedRendertarget.Call(native, modelHash);
		}

		public int GetNamedRendertargetRenderId(string name)
		{
			if (getNamedRendertargetRenderId == null) getNamedRendertargetRenderId = (Function) native.GetObjectProperty("getNamedRendertargetRenderId");
			return (int) getNamedRendertargetRenderId.Call(native, name);
		}

		public bool IsNamedRendertargetLinked(int modelHash)
		{
			if (isNamedRendertargetLinked == null) isNamedRendertargetLinked = (Function) native.GetObjectProperty("isNamedRendertargetLinked");
			return (bool) isNamedRendertargetLinked.Call(native, modelHash);
		}

		public void ClearHelp(bool toggle)
		{
			if (clearHelp == null) clearHelp = (Function) native.GetObjectProperty("clearHelp");
			clearHelp.Call(native, toggle);
		}

		public bool IsHelpMessageOnScreen()
		{
			if (isHelpMessageOnScreen == null) isHelpMessageOnScreen = (Function) native.GetObjectProperty("isHelpMessageOnScreen");
			return (bool) isHelpMessageOnScreen.Call(native);
		}

		/// <summary>
		/// HAS_S*
		/// </summary>
		public bool _0x214CD562A939246A()
		{
			if (__0x214CD562A939246A == null) __0x214CD562A939246A = (Function) native.GetObjectProperty("_0x214CD562A939246A");
			return (bool) __0x214CD562A939246A.Call(native);
		}

		public bool IsHelpMessageBeingDisplayed()
		{
			if (isHelpMessageBeingDisplayed == null) isHelpMessageBeingDisplayed = (Function) native.GetObjectProperty("isHelpMessageBeingDisplayed");
			return (bool) isHelpMessageBeingDisplayed.Call(native);
		}

		public bool IsHelpMessageFadingOut()
		{
			if (isHelpMessageFadingOut == null) isHelpMessageFadingOut = (Function) native.GetObjectProperty("isHelpMessageFadingOut");
			return (bool) isHelpMessageFadingOut.Call(native);
		}

		public void SetHelpMessageTextStyle(object p0, object p1, object p2, object p3, object p4)
		{
			if (setHelpMessageTextStyle == null) setHelpMessageTextStyle = (Function) native.GetObjectProperty("setHelpMessageTextStyle");
			setHelpMessageTextStyle.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// example:
		/// if (!((v_7)==UI::_4A9923385BDB9DAD())) {
		/// UI::SET_BLIP_SPRITE((v_6), (v_7));
		/// }
		/// This function is hard-coded to always return 1.
		/// </summary>
		public bool GetLevelBlipSprite()
		{
			if (getLevelBlipSprite == null) getLevelBlipSprite = (Function) native.GetObjectProperty("getLevelBlipSprite");
			return (bool) getLevelBlipSprite.Call(native);
		}

		public int GetWaypointBlipSprite()
		{
			if (getWaypointBlipSprite == null) getWaypointBlipSprite = (Function) native.GetObjectProperty("getWaypointBlipSprite");
			return (int) getWaypointBlipSprite.Call(native);
		}

		public int GetNumberOfActiveBlips()
		{
			if (getNumberOfActiveBlips == null) getNumberOfActiveBlips = (Function) native.GetObjectProperty("getNumberOfActiveBlips");
			return (int) getNumberOfActiveBlips.Call(native);
		}

		public int GetNextBlipInfoId(int blipSprite)
		{
			if (getNextBlipInfoId == null) getNextBlipInfoId = (Function) native.GetObjectProperty("getNextBlipInfoId");
			return (int) getNextBlipInfoId.Call(native, blipSprite);
		}

		public int GetFirstBlipInfoId(int blipSprite)
		{
			if (getFirstBlipInfoId == null) getFirstBlipInfoId = (Function) native.GetObjectProperty("getFirstBlipInfoId");
			return (int) getFirstBlipInfoId.Call(native, blipSprite);
		}

		public object _0xD484BF71050CA1EE(object p0)
		{
			if (__0xD484BF71050CA1EE == null) __0xD484BF71050CA1EE = (Function) native.GetObjectProperty("_0xD484BF71050CA1EE");
			return __0xD484BF71050CA1EE.Call(native, p0);
		}

		public Vector3 GetBlipInfoIdCoord(int blip)
		{
			if (getBlipInfoIdCoord == null) getBlipInfoIdCoord = (Function) native.GetObjectProperty("getBlipInfoIdCoord");
			return JSObjectToVector3(getBlipInfoIdCoord.Call(native, blip));
		}

		public int GetBlipInfoIdDisplay(int blip)
		{
			if (getBlipInfoIdDisplay == null) getBlipInfoIdDisplay = (Function) native.GetObjectProperty("getBlipInfoIdDisplay");
			return (int) getBlipInfoIdDisplay.Call(native, blip);
		}

		/// <summary>
		/// 1 - Vehicle
		/// 2 - Ped
		/// 3 - Object
		/// 4 - Coord
		/// 5 - unk
		/// 6 - Pickup
		/// 7 - Radius
		/// </summary>
		/// <returns>Returns a value based on what the blip is attached to</returns>
		public int GetBlipInfoIdType(int blip)
		{
			if (getBlipInfoIdType == null) getBlipInfoIdType = (Function) native.GetObjectProperty("getBlipInfoIdType");
			return (int) getBlipInfoIdType.Call(native, blip);
		}

		public int GetBlipInfoIdEntityIndex(int blip)
		{
			if (getBlipInfoIdEntityIndex == null) getBlipInfoIdEntityIndex = (Function) native.GetObjectProperty("getBlipInfoIdEntityIndex");
			return (int) getBlipInfoIdEntityIndex.Call(native, blip);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public int GetBlipInfoIdPickupIndex(int blip)
		{
			if (getBlipInfoIdPickupIndex == null) getBlipInfoIdPickupIndex = (Function) native.GetObjectProperty("getBlipInfoIdPickupIndex");
			return (int) getBlipInfoIdPickupIndex.Call(native, blip);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the Blip handle of given Entity.</returns>
		public int GetBlipFromEntity(int entity)
		{
			if (getBlipFromEntity == null) getBlipFromEntity = (Function) native.GetObjectProperty("getBlipFromEntity");
			return (int) getBlipFromEntity.Call(native, entity);
		}

		public int AddBlipForRadius(double posX, double posY, double posZ, double radius)
		{
			if (addBlipForRadius == null) addBlipForRadius = (Function) native.GetObjectProperty("addBlipForRadius");
			return (int) addBlipForRadius.Call(native, posX, posY, posZ, radius);
		}

		public int AddBlipForArea(double x, double y, double z, double scaleX, double scaleY)
		{
			if (addBlipForArea == null) addBlipForArea = (Function) native.GetObjectProperty("addBlipForArea");
			return (int) addBlipForArea.Call(native, x, y, z, scaleX, scaleY);
		}

		/// <summary>
		/// Example:
		/// Blip blip; //Put this outside your case or option
		/// blip = UI::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
		/// UI::SET_BLIP_AS_FRIENDLY(blip, true);
		/// </summary>
		/// <returns>Returns red ( default ) blip attached to entity.</returns>
		public int AddBlipForEntity(int entity)
		{
			if (addBlipForEntity == null) addBlipForEntity = (Function) native.GetObjectProperty("addBlipForEntity");
			return (int) addBlipForEntity.Call(native, entity);
		}

		public int AddBlipForPickup(int pickup)
		{
			if (addBlipForPickup == null) addBlipForPickup = (Function) native.GetObjectProperty("addBlipForPickup");
			return (int) addBlipForPickup.Call(native, pickup);
		}

		/// <summary>
		/// </summary>
		/// <returns>Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.</returns>
		public int AddBlipForCoord(double x, double y, double z)
		{
			if (addBlipForCoord == null) addBlipForCoord = (Function) native.GetObjectProperty("addBlipForCoord");
			return (int) addBlipForCoord.Call(native, x, y, z);
		}

		public void TriggerSonarBlip(double posX, double posY, double posZ, double radius, int p4)
		{
			if (triggerSonarBlip == null) triggerSonarBlip = (Function) native.GetObjectProperty("triggerSonarBlip");
			triggerSonarBlip.Call(native, posX, posY, posZ, radius, p4);
		}

		public void AllowSonarBlips(bool toggle)
		{
			if (allowSonarBlips == null) allowSonarBlips = (Function) native.GetObjectProperty("allowSonarBlips");
			allowSonarBlips.Call(native, toggle);
		}

		public void SetBlipCoords(int blip, double posX, double posY, double posZ)
		{
			if (setBlipCoords == null) setBlipCoords = (Function) native.GetObjectProperty("setBlipCoords");
			setBlipCoords.Call(native, blip, posX, posY, posZ);
		}

		public Vector3 GetBlipCoords(int blip)
		{
			if (getBlipCoords == null) getBlipCoords = (Function) native.GetObjectProperty("getBlipCoords");
			return JSObjectToVector3(getBlipCoords.Call(native, blip));
		}

		/// <summary>
		/// Takes a blip object and adds a sprite to it on the map.
		/// You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
		/// h t t p://pastebin.com/Bpj9Sfft
		/// Blips Images + IDs:
		/// gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
		/// </summary>
		public void SetBlipSprite(int blip, int spriteId)
		{
			if (setBlipSprite == null) setBlipSprite = (Function) native.GetObjectProperty("setBlipSprite");
			setBlipSprite.Call(native, blip, spriteId);
		}

		/// <summary>
		/// Blips Images + IDs:
		/// gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
		/// </summary>
		public int GetBlipSprite(int blip)
		{
			if (getBlipSprite == null) getBlipSprite = (Function) native.GetObjectProperty("getBlipSprite");
			return (int) getBlipSprite.Call(native, blip);
		}

		/// <summary>
		/// SET_C*
		/// </summary>
		public void _0x9FCB3CBFB3EAD69A(int p0, double p1)
		{
			if (__0x9FCB3CBFB3EAD69A == null) __0x9FCB3CBFB3EAD69A = (Function) native.GetObjectProperty("_0x9FCB3CBFB3EAD69A");
			__0x9FCB3CBFB3EAD69A.Call(native, p0, p1);
		}

		/// <summary>
		/// SET_C*
		/// </summary>
		public void _0xB7B873520C84C118()
		{
			if (__0xB7B873520C84C118 == null) __0xB7B873520C84C118 = (Function) native.GetObjectProperty("_0xB7B873520C84C118");
			__0xB7B873520C84C118.Call(native);
		}

		/// <summary>
		/// Doesn't work if the label text of gxtEntry is >= 80.
		/// </summary>
		public void SetBlipNameFromTextFile(int blip, string gxtEntry)
		{
			if (setBlipNameFromTextFile == null) setBlipNameFromTextFile = (Function) native.GetObjectProperty("setBlipNameFromTextFile");
			setBlipNameFromTextFile.Call(native, blip, gxtEntry);
		}

		public void SetBlipNameToPlayerName(int blip, int player)
		{
			if (setBlipNameToPlayerName == null) setBlipNameToPlayerName = (Function) native.GetObjectProperty("setBlipNameToPlayerName");
			setBlipNameToPlayerName.Call(native, blip, player);
		}

		/// <summary>
		/// Sets alpha-channel for blip color.
		/// Example:
		/// Blip blip = UI::ADD_BLIP_FOR_ENTITY(entity);
		/// UI::SET_BLIP_COLOUR(blip , 3);
		/// UI::SET_BLIP_ALPHA(blip , 64);
		/// </summary>
		/// <param name="blip">Blip UI::ADD_BLIP_FOR_ENTITY(entity);</param>
		public void SetBlipAlpha(int blip, int alpha)
		{
			if (setBlipAlpha == null) setBlipAlpha = (Function) native.GetObjectProperty("setBlipAlpha");
			setBlipAlpha.Call(native, blip, alpha);
		}

		public int GetBlipAlpha(int blip)
		{
			if (getBlipAlpha == null) getBlipAlpha = (Function) native.GetObjectProperty("getBlipAlpha");
			return (int) getBlipAlpha.Call(native, blip);
		}

		public void SetBlipFade(int blip, int opacity, int duration)
		{
			if (setBlipFade == null) setBlipFade = (Function) native.GetObjectProperty("setBlipFade");
			setBlipFade.Call(native, blip, opacity, duration);
		}

		/// <summary>
		/// GET_BLIP_*
		/// </summary>
		public int _0x2C173AE2BDB9385E(int blip)
		{
			if (__0x2C173AE2BDB9385E == null) __0x2C173AE2BDB9385E = (Function) native.GetObjectProperty("_0x2C173AE2BDB9385E");
			return (int) __0x2C173AE2BDB9385E.Call(native, blip);
		}

		/// <summary>
		/// After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
		/// </summary>
		public void SetBlipRotation(int blip, int rotation)
		{
			if (setBlipRotation == null) setBlipRotation = (Function) native.GetObjectProperty("setBlipRotation");
			setBlipRotation.Call(native, blip, rotation);
		}

		public void SetBlipSquaredRotation(object p0, object p1)
		{
			if (setBlipSquaredRotation == null) setBlipSquaredRotation = (Function) native.GetObjectProperty("setBlipSquaredRotation");
			setBlipSquaredRotation.Call(native, p0, p1);
		}

		/// <summary>
		/// Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
		/// </summary>
		public void SetBlipFlashTimer(int blip, int duration)
		{
			if (setBlipFlashTimer == null) setBlipFlashTimer = (Function) native.GetObjectProperty("setBlipFlashTimer");
			setBlipFlashTimer.Call(native, blip, duration);
		}

		public void SetBlipFlashInterval(int blip, object p1)
		{
			if (setBlipFlashInterval == null) setBlipFlashInterval = (Function) native.GetObjectProperty("setBlipFlashInterval");
			setBlipFlashInterval.Call(native, blip, p1);
		}

		/// <summary>
		/// https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
		/// </summary>
		public void SetBlipColour(int blip, int color)
		{
			if (setBlipColour == null) setBlipColour = (Function) native.GetObjectProperty("setBlipColour");
			setBlipColour.Call(native, blip, color);
		}

		public void SetBlipSecondaryColour(int blip, double r, double g, double b)
		{
			if (setBlipSecondaryColour == null) setBlipSecondaryColour = (Function) native.GetObjectProperty("setBlipSecondaryColour");
			setBlipSecondaryColour.Call(native, blip, r, g, b);
		}

		public int GetBlipColour(int blip)
		{
			if (getBlipColour == null) getBlipColour = (Function) native.GetObjectProperty("getBlipColour");
			return (int) getBlipColour.Call(native, blip);
		}

		public int GetBlipHudColour(int blip)
		{
			if (getBlipHudColour == null) getBlipHudColour = (Function) native.GetObjectProperty("getBlipHudColour");
			return (int) getBlipHudColour.Call(native, blip);
		}

		public bool IsBlipShortRange(int blip)
		{
			if (isBlipShortRange == null) isBlipShortRange = (Function) native.GetObjectProperty("isBlipShortRange");
			return (bool) isBlipShortRange.Call(native, blip);
		}

		public bool IsBlipOnMinimap(int blip)
		{
			if (isBlipOnMinimap == null) isBlipOnMinimap = (Function) native.GetObjectProperty("isBlipOnMinimap");
			return (bool) isBlipOnMinimap.Call(native, blip);
		}

		public bool DoesBlipHaveGpsRoute(int blip)
		{
			if (doesBlipHaveGpsRoute == null) doesBlipHaveGpsRoute = (Function) native.GetObjectProperty("doesBlipHaveGpsRoute");
			return (bool) doesBlipHaveGpsRoute.Call(native, blip);
		}

		public void SetBlipHiddenOnLegend(int blip, bool toggle)
		{
			if (setBlipHiddenOnLegend == null) setBlipHiddenOnLegend = (Function) native.GetObjectProperty("setBlipHiddenOnLegend");
			setBlipHiddenOnLegend.Call(native, blip, toggle);
		}

		public void SetBlipHighDetail(int blip, bool toggle)
		{
			if (setBlipHighDetail == null) setBlipHighDetail = (Function) native.GetObjectProperty("setBlipHighDetail");
			setBlipHighDetail.Call(native, blip, toggle);
		}

		public void SetBlipAsMissionCreatorBlip(int blip, bool toggle)
		{
			if (setBlipAsMissionCreatorBlip == null) setBlipAsMissionCreatorBlip = (Function) native.GetObjectProperty("setBlipAsMissionCreatorBlip");
			setBlipAsMissionCreatorBlip.Call(native, blip, toggle);
		}

		public bool IsMissionCreatorBlip(int blip)
		{
			if (isMissionCreatorBlip == null) isMissionCreatorBlip = (Function) native.GetObjectProperty("isMissionCreatorBlip");
			return (bool) isMissionCreatorBlip.Call(native, blip);
		}

		public int GetNewSelectedMissionCreatorBlip()
		{
			if (getNewSelectedMissionCreatorBlip == null) getNewSelectedMissionCreatorBlip = (Function) native.GetObjectProperty("getNewSelectedMissionCreatorBlip");
			return (int) getNewSelectedMissionCreatorBlip.Call(native);
		}

		public bool IsHoveringOverMissionCreatorBlip()
		{
			if (isHoveringOverMissionCreatorBlip == null) isHoveringOverMissionCreatorBlip = (Function) native.GetObjectProperty("isHoveringOverMissionCreatorBlip");
			return (bool) isHoveringOverMissionCreatorBlip.Call(native);
		}

		public void _0xF1A6C18B35BCADE6(bool p0)
		{
			if (__0xF1A6C18B35BCADE6 == null) __0xF1A6C18B35BCADE6 = (Function) native.GetObjectProperty("_0xF1A6C18B35BCADE6");
			__0xF1A6C18B35BCADE6.Call(native, p0);
		}

		public void _0x2916A928514C9827()
		{
			if (__0x2916A928514C9827 == null) __0x2916A928514C9827 = (Function) native.GetObjectProperty("_0x2916A928514C9827");
			__0x2916A928514C9827.Call(native);
		}

		public void _0xB552929B85FC27EC(object p0, object p1)
		{
			if (__0xB552929B85FC27EC == null) __0xB552929B85FC27EC = (Function) native.GetObjectProperty("_0xB552929B85FC27EC");
			__0xB552929B85FC27EC.Call(native, p0, p1);
		}

		public void SetBlipFlashes(int blip, bool toggle)
		{
			if (setBlipFlashes == null) setBlipFlashes = (Function) native.GetObjectProperty("setBlipFlashes");
			setBlipFlashes.Call(native, blip, toggle);
		}

		public void SetBlipFlashesAlternate(int blip, bool toggle)
		{
			if (setBlipFlashesAlternate == null) setBlipFlashesAlternate = (Function) native.GetObjectProperty("setBlipFlashesAlternate");
			setBlipFlashesAlternate.Call(native, blip, toggle);
		}

		public bool IsBlipFlashing(int blip)
		{
			if (isBlipFlashing == null) isBlipFlashing = (Function) native.GetObjectProperty("isBlipFlashing");
			return (bool) isBlipFlashing.Call(native, blip);
		}

		public void SetBlipAsShortRange(int blip, bool toggle)
		{
			if (setBlipAsShortRange == null) setBlipAsShortRange = (Function) native.GetObjectProperty("setBlipAsShortRange");
			setBlipAsShortRange.Call(native, blip, toggle);
		}

		public void SetBlipScale(int blip, double scale)
		{
			if (setBlipScale == null) setBlipScale = (Function) native.GetObjectProperty("setBlipScale");
			setBlipScale.Call(native, blip, scale);
		}

		/// <summary>
		/// SET_BLIP_*
		/// </summary>
		public void _0xCD6524439909C979(int blip, double p1, double p2)
		{
			if (__0xCD6524439909C979 == null) __0xCD6524439909C979 = (Function) native.GetObjectProperty("_0xCD6524439909C979");
			__0xCD6524439909C979.Call(native, blip, p1, p2);
		}

		/// <summary>
		/// See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
		/// </summary>
		public void SetBlipPriority(int blip, int priority)
		{
			if (setBlipPriority == null) setBlipPriority = (Function) native.GetObjectProperty("setBlipPriority");
			setBlipPriority.Call(native, blip, priority);
		}

		/// <summary>
		/// displayId = 8 : shows on radar
		/// displayId:
		/// 3 = Shows on Main map but not Radar (not selectable on map)
		/// displayId = 2 (Shows on Main map + Radar + selectable)
		/// </summary>
		/// <param name="displayId">2 (Shows on Main map + Radar + selectable)</param>
		public void SetBlipDisplay(int blip, int displayId)
		{
			if (setBlipDisplay == null) setBlipDisplay = (Function) native.GetObjectProperty("setBlipDisplay");
			setBlipDisplay.Call(native, blip, displayId);
		}

		/// <summary>
		/// int index:
		/// 1 = No Text on blip or Distance
		/// 2 = Text on blip
		/// 3 = No text, just distance
		/// 4+ No Text on blip or distance
		/// </summary>
		public void SetBlipCategory(int blip, int index)
		{
			if (setBlipCategory == null) setBlipCategory = (Function) native.GetObjectProperty("setBlipCategory");
			setBlipCategory.Call(native, blip, index);
		}

		/// <summary>
		/// In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
		/// E.g.:
		/// Ped pped = PLAYER::PLAYER_PED_ID();
		/// Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
		/// Blip b = UI::ADD_BLIP_FOR_ENTITY(v);
		/// works fine.
		/// But later attempting to delete it with:
		/// Blip b = UI::GET_BLIP_FROM_ENTITY(v);
		/// if (UI::DOES_BLIP_EXIST(b)) UI::REMOVE_BLIP(&b);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x86A652570E5F25DD
		/// </summary>
		/// <param name="blip">Blip b = UI::GET_BLIP_FROM_ENTITY(v);</param>
		/// <returns>Array<void, int></returns>
		public (object, int) RemoveBlip(int blip)
		{
			if (removeBlip == null) removeBlip = (Function) native.GetObjectProperty("removeBlip");
			var results = (Array) removeBlip.Call(native, blip);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// false for enemy
		/// true for friendly
		/// </summary>
		public void SetBlipAsFriendly(int blip, bool toggle)
		{
			if (setBlipAsFriendly == null) setBlipAsFriendly = (Function) native.GetObjectProperty("setBlipAsFriendly");
			setBlipAsFriendly.Call(native, blip, toggle);
		}

		public void PulseBlip(int blip)
		{
			if (pulseBlip == null) pulseBlip = (Function) native.GetObjectProperty("pulseBlip");
			pulseBlip.Call(native, blip);
		}

		public void ShowNumberOnBlip(int blip, int number)
		{
			if (showNumberOnBlip == null) showNumberOnBlip = (Function) native.GetObjectProperty("showNumberOnBlip");
			showNumberOnBlip.Call(native, blip, number);
		}

		public void HideNumberOnBlip(int blip)
		{
			if (hideNumberOnBlip == null) hideNumberOnBlip = (Function) native.GetObjectProperty("hideNumberOnBlip");
			hideNumberOnBlip.Call(native, blip);
		}

		public void ShowHeightOnBlip(int blip, bool toggle)
		{
			if (showHeightOnBlip == null) showHeightOnBlip = (Function) native.GetObjectProperty("showHeightOnBlip");
			showHeightOnBlip.Call(native, blip, toggle);
		}

		/// <summary>
		/// Adds a green checkmark on top of a blip.
		/// </summary>
		public void ShowTickOnBlip(int blip, bool toggle)
		{
			if (showTickOnBlip == null) showTickOnBlip = (Function) native.GetObjectProperty("showTickOnBlip");
			showTickOnBlip.Call(native, blip, toggle);
		}

		/// <summary>
		/// Adds the GTA: Online player heading indicator to a blip.
		/// </summary>
		public void ShowHeadingIndicatorOnBlip(int blip, bool toggle)
		{
			if (showHeadingIndicatorOnBlip == null) showHeadingIndicatorOnBlip = (Function) native.GetObjectProperty("showHeadingIndicatorOnBlip");
			showHeadingIndicatorOnBlip.Call(native, blip, toggle);
		}

		/// <summary>
		/// Highlights a blip by a cyan color circle.
		/// Color can be changed with SET_BLIP_SECONDARY_COLOUR
		/// </summary>
		public void ShowOutlineIndicatorOnBlip(int blip, bool toggle)
		{
			if (showOutlineIndicatorOnBlip == null) showOutlineIndicatorOnBlip = (Function) native.GetObjectProperty("showOutlineIndicatorOnBlip");
			showOutlineIndicatorOnBlip.Call(native, blip, toggle);
		}

		/// <summary>
		/// Highlights a blip by a half cyan circle.
		/// </summary>
		public void ShowFriendIndicatorOnBlip(int blip, bool toggle)
		{
			if (showFriendIndicatorOnBlip == null) showFriendIndicatorOnBlip = (Function) native.GetObjectProperty("showFriendIndicatorOnBlip");
			showFriendIndicatorOnBlip.Call(native, blip, toggle);
		}

		public void ShowCrewIndicatorOnBlip(int blip, bool toggle)
		{
			if (showCrewIndicatorOnBlip == null) showCrewIndicatorOnBlip = (Function) native.GetObjectProperty("showCrewIndicatorOnBlip");
			showCrewIndicatorOnBlip.Call(native, blip, toggle);
		}

		public void SetBlipDisplayIndicatorOnBlip(int blip, bool toggle)
		{
			if (setBlipDisplayIndicatorOnBlip == null) setBlipDisplayIndicatorOnBlip = (Function) native.GetObjectProperty("setBlipDisplayIndicatorOnBlip");
			setBlipDisplayIndicatorOnBlip.Call(native, blip, toggle);
		}

		public void _0x4B5B620C9B59ED34(object p0, object p1)
		{
			if (__0x4B5B620C9B59ED34 == null) __0x4B5B620C9B59ED34 = (Function) native.GetObjectProperty("_0x4B5B620C9B59ED34");
			__0x4B5B620C9B59ED34.Call(native, p0, p1);
		}

		public void _0x2C9F302398E13141(object p0, object p1)
		{
			if (__0x2C9F302398E13141 == null) __0x2C9F302398E13141 = (Function) native.GetObjectProperty("_0x2C9F302398E13141");
			__0x2C9F302398E13141.Call(native, p0, p1);
		}

		/// <summary>
		/// Makes a blip go small when off the minimap.
		/// SET_BLIP_AS_*
		/// </summary>
		public void SetBlipShrink(int blip, bool toggle)
		{
			if (setBlipShrink == null) setBlipShrink = (Function) native.GetObjectProperty("setBlipShrink");
			setBlipShrink.Call(native, blip, toggle);
		}

		public void SetRadiusBlipEdge(object p0, bool p1)
		{
			if (setRadiusBlipEdge == null) setRadiusBlipEdge = (Function) native.GetObjectProperty("setRadiusBlipEdge");
			setRadiusBlipEdge.Call(native, p0, p1);
		}

		public bool DoesBlipExist(int blip)
		{
			if (doesBlipExist == null) doesBlipExist = (Function) native.GetObjectProperty("doesBlipExist");
			return (bool) doesBlipExist.Call(native, blip);
		}

		/// <summary>
		/// This native removes the current waypoint from the map.
		/// Example:
		/// C#:
		/// Function.Call(Hash.SET_WAYPOINT_OFF);
		/// C++:
		/// UI::SET_WAYPOINT_OFF();
		/// </summary>
		public void SetWaypointOff()
		{
			if (setWaypointOff == null) setWaypointOff = (Function) native.GetObjectProperty("setWaypointOff");
			setWaypointOff.Call(native);
		}

		public void DeleteWaypoint()
		{
			if (deleteWaypoint == null) deleteWaypoint = (Function) native.GetObjectProperty("deleteWaypoint");
			deleteWaypoint.Call(native);
		}

		public void RefreshWaypoint()
		{
			if (refreshWaypoint == null) refreshWaypoint = (Function) native.GetObjectProperty("refreshWaypoint");
			refreshWaypoint.Call(native);
		}

		public bool IsWaypointActive()
		{
			if (isWaypointActive == null) isWaypointActive = (Function) native.GetObjectProperty("isWaypointActive");
			return (bool) isWaypointActive.Call(native);
		}

		public void SetNewWaypoint(double x, double y)
		{
			if (setNewWaypoint == null) setNewWaypoint = (Function) native.GetObjectProperty("setNewWaypoint");
			setNewWaypoint.Call(native, x, y);
		}

		public void SetBlipBright(int blip, bool toggle)
		{
			if (setBlipBright == null) setBlipBright = (Function) native.GetObjectProperty("setBlipBright");
			setBlipBright.Call(native, blip, toggle);
		}

		public void SetBlipShowCone(int blip, bool toggle)
		{
			if (setBlipShowCone == null) setBlipShowCone = (Function) native.GetObjectProperty("setBlipShowCone");
			setBlipShowCone.Call(native, blip, toggle);
		}

		/// <summary>
		/// Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
		/// </summary>
		public void _0xC594B315EDF2D4AF(int ped)
		{
			if (__0xC594B315EDF2D4AF == null) __0xC594B315EDF2D4AF = (Function) native.GetObjectProperty("_0xC594B315EDF2D4AF");
			__0xC594B315EDF2D4AF.Call(native, ped);
		}

		public void _0xF83D0FEBE75E62C9(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7)
		{
			if (__0xF83D0FEBE75E62C9 == null) __0xF83D0FEBE75E62C9 = (Function) native.GetObjectProperty("_0xF83D0FEBE75E62C9");
			__0xF83D0FEBE75E62C9.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public void _0x35A3CD97B2C0A6D2(object p0)
		{
			if (__0x35A3CD97B2C0A6D2 == null) __0x35A3CD97B2C0A6D2 = (Function) native.GetObjectProperty("_0x35A3CD97B2C0A6D2");
			__0x35A3CD97B2C0A6D2.Call(native, p0);
		}

		public void _0x8410C5E0CD847B9D()
		{
			if (__0x8410C5E0CD847B9D == null) __0x8410C5E0CD847B9D = (Function) native.GetObjectProperty("_0x8410C5E0CD847B9D");
			__0x8410C5E0CD847B9D.Call(native);
		}

		/// <summary>
		/// Please change to void.
		/// p2 appears to be always -1.
		/// </summary>
		/// <param name="p2">appears to be always -1.</param>
		public object SetMinimapComponent(int p0, bool p1, int p2)
		{
			if (setMinimapComponent == null) setMinimapComponent = (Function) native.GetObjectProperty("setMinimapComponent");
			return setMinimapComponent.Call(native, p0, p1, p2);
		}

		public void ShowSigninUi()
		{
			if (showSigninUi == null) showSigninUi = (Function) native.GetObjectProperty("showSigninUi");
			showSigninUi.Call(native);
		}

		public int GetMainPlayerBlipId()
		{
			if (getMainPlayerBlipId == null) getMainPlayerBlipId = (Function) native.GetObjectProperty("getMainPlayerBlipId");
			return (int) getMainPlayerBlipId.Call(native);
		}

		public void _0x41350B4FC28E3941(bool p0)
		{
			if (__0x41350B4FC28E3941 == null) __0x41350B4FC28E3941 = (Function) native.GetObjectProperty("_0x41350B4FC28E3941");
			__0x41350B4FC28E3941.Call(native, p0);
		}

		public void HideLoadingOnFadeThisFrame()
		{
			if (hideLoadingOnFadeThisFrame == null) hideLoadingOnFadeThisFrame = (Function) native.GetObjectProperty("hideLoadingOnFadeThisFrame");
			hideLoadingOnFadeThisFrame.Call(native);
		}

		/// <summary>
		/// List of interior hashes: pastebin.com/1FUyXNqY
		/// Not for every interior zoom > 0 available.
		/// </summary>
		public void SetRadarAsInteriorThisFrame(int interior, double x, double y, int z, int zoom)
		{
			if (setRadarAsInteriorThisFrame == null) setRadarAsInteriorThisFrame = (Function) native.GetObjectProperty("setRadarAsInteriorThisFrame");
			setRadarAsInteriorThisFrame.Call(native, interior, x, y, z, zoom);
		}

		public void _0x504DFE62A1692296(bool toggle)
		{
			if (__0x504DFE62A1692296 == null) __0x504DFE62A1692296 = (Function) native.GetObjectProperty("_0x504DFE62A1692296");
			__0x504DFE62A1692296.Call(native, toggle);
		}

		public void SetRadarAsExteriorThisFrame()
		{
			if (setRadarAsExteriorThisFrame == null) setRadarAsExteriorThisFrame = (Function) native.GetObjectProperty("setRadarAsExteriorThisFrame");
			setRadarAsExteriorThisFrame.Call(native);
		}

		/// <summary>
		/// Sets the position of the arrow icon representing the player on both the minimap and world map.
		/// Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
		/// </summary>
		public void SetPlayerBlipPositionThisFrame(double x, double y)
		{
			if (setPlayerBlipPositionThisFrame == null) setPlayerBlipPositionThisFrame = (Function) native.GetObjectProperty("setPlayerBlipPositionThisFrame");
			setPlayerBlipPositionThisFrame.Call(native, x, y);
		}

		public void _0xA17784FCA9548D15(object p0, object p1, object p2)
		{
			if (__0xA17784FCA9548D15 == null) __0xA17784FCA9548D15 = (Function) native.GetObjectProperty("_0xA17784FCA9548D15");
			__0xA17784FCA9548D15.Call(native, p0, p1, p2);
		}

		public bool IsMinimapInInterior()
		{
			if (isMinimapInInterior == null) isMinimapInInterior = (Function) native.GetObjectProperty("isMinimapInInterior");
			return (bool) isMinimapInInterior.Call(native);
		}

		public void HideMinimapExteriorMapThisFrame()
		{
			if (hideMinimapExteriorMapThisFrame == null) hideMinimapExteriorMapThisFrame = (Function) native.GetObjectProperty("hideMinimapExteriorMapThisFrame");
			hideMinimapExteriorMapThisFrame.Call(native);
		}

		public void HideMinimapInteriorMapThisFrame()
		{
			if (hideMinimapInteriorMapThisFrame == null) hideMinimapInteriorMapThisFrame = (Function) native.GetObjectProperty("hideMinimapInteriorMapThisFrame");
			hideMinimapInteriorMapThisFrame.Call(native);
		}

		/// <summary>
		/// When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
		/// </summary>
		public void DontTiltMinimapThisFrame()
		{
			if (dontTiltMinimapThisFrame == null) dontTiltMinimapThisFrame = (Function) native.GetObjectProperty("dontTiltMinimapThisFrame");
			dontTiltMinimapThisFrame.Call(native);
		}

		public void _0x55F5A5F07134DE60()
		{
			if (__0x55F5A5F07134DE60 == null) __0x55F5A5F07134DE60 = (Function) native.GetObjectProperty("_0x55F5A5F07134DE60");
			__0x55F5A5F07134DE60.Call(native);
		}

		public void SetWidescreenFormat(object p0)
		{
			if (setWidescreenFormat == null) setWidescreenFormat = (Function) native.GetObjectProperty("setWidescreenFormat");
			setWidescreenFormat.Call(native, p0);
		}

		public void DisplayAreaName(bool toggle)
		{
			if (displayAreaName == null) displayAreaName = (Function) native.GetObjectProperty("displayAreaName");
			displayAreaName.Call(native, toggle);
		}

		/// <summary>
		/// "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
		/// "DISPLAY_CASH(true);" disables cash amount rendering
		/// </summary>
		public void DisplayCash(bool toggle)
		{
			if (displayCash == null) displayCash = (Function) native.GetObjectProperty("displayCash");
			displayCash.Call(native, toggle);
		}

		/// <summary>
		/// Related to displaying cash on the HUD
		/// Always called before UI::_SET_SINGLEPLAYER_HUD_CASH in decompiled scripts
		/// </summary>
		public void _0x170F541E1CADD1DE(bool p0)
		{
			if (__0x170F541E1CADD1DE == null) __0x170F541E1CADD1DE = (Function) native.GetObjectProperty("_0x170F541E1CADD1DE");
			__0x170F541E1CADD1DE.Call(native, p0);
		}

		/// <summary>
		/// Displays cash change notifications on HUD.
		/// </summary>
		public void SetPlayerCashChange(int cash, int bank)
		{
			if (setPlayerCashChange == null) setPlayerCashChange = (Function) native.GetObjectProperty("setPlayerCashChange");
			setPlayerCashChange.Call(native, cash, bank);
		}

		public void DisplayAmmoThisFrame(bool display)
		{
			if (displayAmmoThisFrame == null) displayAmmoThisFrame = (Function) native.GetObjectProperty("displayAmmoThisFrame");
			displayAmmoThisFrame.Call(native, display);
		}

		/// <summary>
		/// Displays the crosshair for this frame.
		/// </summary>
		public void DisplaySniperScopeThisFrame()
		{
			if (displaySniperScopeThisFrame == null) displaySniperScopeThisFrame = (Function) native.GetObjectProperty("displaySniperScopeThisFrame");
			displaySniperScopeThisFrame.Call(native);
		}

		/// <summary>
		/// I think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)
		/// </summary>
		public void HideHudAndRadarThisFrame()
		{
			if (hideHudAndRadarThisFrame == null) hideHudAndRadarThisFrame = (Function) native.GetObjectProperty("hideHudAndRadarThisFrame");
			hideHudAndRadarThisFrame.Call(native);
		}

		public void _0xE67C6DFD386EA5E7(bool p0)
		{
			if (__0xE67C6DFD386EA5E7 == null) __0xE67C6DFD386EA5E7 = (Function) native.GetObjectProperty("_0xE67C6DFD386EA5E7");
			__0xE67C6DFD386EA5E7.Call(native, p0);
		}

		public void SetMultiplayerWalletCash()
		{
			if (setMultiplayerWalletCash == null) setMultiplayerWalletCash = (Function) native.GetObjectProperty("setMultiplayerWalletCash");
			setMultiplayerWalletCash.Call(native);
		}

		public void RemoveMultiplayerWalletCash()
		{
			if (removeMultiplayerWalletCash == null) removeMultiplayerWalletCash = (Function) native.GetObjectProperty("removeMultiplayerWalletCash");
			removeMultiplayerWalletCash.Call(native);
		}

		public void SetMultiplayerBankCash()
		{
			if (setMultiplayerBankCash == null) setMultiplayerBankCash = (Function) native.GetObjectProperty("setMultiplayerBankCash");
			setMultiplayerBankCash.Call(native);
		}

		public void RemoveMultiplayerBankCash()
		{
			if (removeMultiplayerBankCash == null) removeMultiplayerBankCash = (Function) native.GetObjectProperty("removeMultiplayerBankCash");
			removeMultiplayerBankCash.Call(native);
		}

		public void SetMultiplayerHudCash(int p0, int p1)
		{
			if (setMultiplayerHudCash == null) setMultiplayerHudCash = (Function) native.GetObjectProperty("setMultiplayerHudCash");
			setMultiplayerHudCash.Call(native, p0, p1);
		}

		/// <summary>
		/// Removes multiplayer cash hud each frame
		/// </summary>
		public void RemoveMultiplayerHudCash()
		{
			if (removeMultiplayerHudCash == null) removeMultiplayerHudCash = (Function) native.GetObjectProperty("removeMultiplayerHudCash");
			removeMultiplayerHudCash.Call(native);
		}

		public void HideHelpTextThisFrame()
		{
			if (hideHelpTextThisFrame == null) hideHelpTextThisFrame = (Function) native.GetObjectProperty("hideHelpTextThisFrame");
			hideHelpTextThisFrame.Call(native);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool _0x801879A9B4F4B2FB()
		{
			if (__0x801879A9B4F4B2FB == null) __0x801879A9B4F4B2FB = (Function) native.GetObjectProperty("_0x801879A9B4F4B2FB");
			return (bool) __0x801879A9B4F4B2FB.Call(native);
		}

		/// <summary>
		/// The messages are localized strings.
		/// Examples:
		/// "No_bus_money"
		/// "Enter_bus"
		/// "Tour_help"
		/// "LETTERS_HELP2"
		/// "Dummy"
		/// **The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
		/// --------
		/// See NativeDB for reference: http://natives.altv.mp/#/0x960C9FF8F616E41C
		/// </summary>
		public void DisplayHelpTextThisFrame(string message, bool p1)
		{
			if (displayHelpTextThisFrame == null) displayHelpTextThisFrame = (Function) native.GetObjectProperty("displayHelpTextThisFrame");
			displayHelpTextThisFrame.Call(native, message, p1);
		}

		/// <summary>
		/// Forces the weapon wheel to show/hide.
		/// </summary>
		public void HudForceWeaponWheel(bool show)
		{
			if (hudForceWeaponWheel == null) hudForceWeaponWheel = (Function) native.GetObjectProperty("hudForceWeaponWheel");
			hudForceWeaponWheel.Call(native, show);
		}

		public void _0x488043841BBE156F()
		{
			if (__0x488043841BBE156F == null) __0x488043841BBE156F = (Function) native.GetObjectProperty("_0x488043841BBE156F");
			__0x488043841BBE156F.Call(native);
		}

		/// <summary>
		/// calling this each frame, it stops the player from receiving a weapon via the weapon wheel.
		/// </summary>
		public void BlockWeaponWheelThisFrame()
		{
			if (blockWeaponWheelThisFrame == null) blockWeaponWheelThisFrame = (Function) native.GetObjectProperty("blockWeaponWheelThisFrame");
			blockWeaponWheelThisFrame.Call(native);
		}

		public int HudWeaponWheelGetSelectedHash()
		{
			if (hudWeaponWheelGetSelectedHash == null) hudWeaponWheelGetSelectedHash = (Function) native.GetObjectProperty("hudWeaponWheelGetSelectedHash");
			return (int) hudWeaponWheelGetSelectedHash.Call(native);
		}

		public void HudWeaponWheelSetSlotHash(int weaponHash)
		{
			if (hudWeaponWheelSetSlotHash == null) hudWeaponWheelSetSlotHash = (Function) native.GetObjectProperty("hudWeaponWheelSetSlotHash");
			hudWeaponWheelSetSlotHash.Call(native, weaponHash);
		}

		public object HudWeaponWheelGetSlotHash(object p0)
		{
			if (hudWeaponWheelGetSlotHash == null) hudWeaponWheelGetSlotHash = (Function) native.GetObjectProperty("hudWeaponWheelGetSlotHash");
			return hudWeaponWheelGetSlotHash.Call(native, p0);
		}

		public void HudWeaponWheelIgnoreControlInput(bool p0)
		{
			if (hudWeaponWheelIgnoreControlInput == null) hudWeaponWheelIgnoreControlInput = (Function) native.GetObjectProperty("hudWeaponWheelIgnoreControlInput");
			hudWeaponWheelIgnoreControlInput.Call(native, p0);
		}

		/// <summary>
		/// Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
		/// Doesn't seem like the flags are actually read by the game at all.
		/// </summary>
		public void SetGpsFlags(int p0, double p1)
		{
			if (setGpsFlags == null) setGpsFlags = (Function) native.GetObjectProperty("setGpsFlags");
			setGpsFlags.Call(native, p0, p1);
		}

		/// <summary>
		/// Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
		/// Doesn't seem like the flags are actually read by the game at all.
		/// </summary>
		public void ClearGpsFlags()
		{
			if (clearGpsFlags == null) clearGpsFlags = (Function) native.GetObjectProperty("clearGpsFlags");
			clearGpsFlags.Call(native);
		}

		public void SetRaceTrackRender(bool toggle)
		{
			if (setRaceTrackRender == null) setRaceTrackRender = (Function) native.GetObjectProperty("setRaceTrackRender");
			setRaceTrackRender.Call(native, toggle);
		}

		/// <summary>
		/// Does the same as SET_RACE_TRACK_RENDER(false);
		/// </summary>
		public void ClearGpsRaceTrack()
		{
			if (clearGpsRaceTrack == null) clearGpsRaceTrack = (Function) native.GetObjectProperty("clearGpsRaceTrack");
			clearGpsRaceTrack.Call(native);
		}

		public void StartGpsCustomRoute(int hudColor, bool p1, bool p2)
		{
			if (startGpsCustomRoute == null) startGpsCustomRoute = (Function) native.GetObjectProperty("startGpsCustomRoute");
			startGpsCustomRoute.Call(native, hudColor, p1, p2);
		}

		public void AddPointToGpsCustomRoute(double x, double y, double z)
		{
			if (addPointToGpsCustomRoute == null) addPointToGpsCustomRoute = (Function) native.GetObjectProperty("addPointToGpsCustomRoute");
			addPointToGpsCustomRoute.Call(native, x, y, z);
		}

		public void SetGpsCustomRouteRender(bool p0, int p1, int p2)
		{
			if (setGpsCustomRouteRender == null) setGpsCustomRouteRender = (Function) native.GetObjectProperty("setGpsCustomRouteRender");
			setGpsCustomRouteRender.Call(native, p0, p1, p2);
		}

		public void ClearGpsCustomRoute()
		{
			if (clearGpsCustomRoute == null) clearGpsCustomRoute = (Function) native.GetObjectProperty("clearGpsCustomRoute");
			clearGpsCustomRoute.Call(native);
		}

		public void StartGpsMultiRoute(int hudColor, bool p1, bool p2)
		{
			if (startGpsMultiRoute == null) startGpsMultiRoute = (Function) native.GetObjectProperty("startGpsMultiRoute");
			startGpsMultiRoute.Call(native, hudColor, p1, p2);
		}

		public void AddPointToGpsMultiRoute(double x, double y, double z)
		{
			if (addPointToGpsMultiRoute == null) addPointToGpsMultiRoute = (Function) native.GetObjectProperty("addPointToGpsMultiRoute");
			addPointToGpsMultiRoute.Call(native, x, y, z);
		}

		public void SetGpsMultiRouteRender(bool toggle)
		{
			if (setGpsMultiRouteRender == null) setGpsMultiRouteRender = (Function) native.GetObjectProperty("setGpsMultiRouteRender");
			setGpsMultiRouteRender.Call(native, toggle);
		}

		/// <summary>
		/// Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
		/// </summary>
		public void ClearGpsMultiRoute()
		{
			if (clearGpsMultiRoute == null) clearGpsMultiRoute = (Function) native.GetObjectProperty("clearGpsMultiRoute");
			clearGpsMultiRoute.Call(native);
		}

		public void ClearGpsPlayerWaypoint()
		{
			if (clearGpsPlayerWaypoint == null) clearGpsPlayerWaypoint = (Function) native.GetObjectProperty("clearGpsPlayerWaypoint");
			clearGpsPlayerWaypoint.Call(native);
		}

		public void SetGpsFlashes(bool toggle)
		{
			if (setGpsFlashes == null) setGpsFlashes = (Function) native.GetObjectProperty("setGpsFlashes");
			setGpsFlashes.Call(native, toggle);
		}

		public void _0x7B21E0BB01E8224A(object p0)
		{
			if (__0x7B21E0BB01E8224A == null) __0x7B21E0BB01E8224A = (Function) native.GetObjectProperty("_0x7B21E0BB01E8224A");
			__0x7B21E0BB01E8224A.Call(native, p0);
		}

		/// <summary>
		/// adds a short flash to the Radar/Minimap
		/// Usage: UI.FLASH_MINIMAP_DISPLAY
		/// </summary>
		public void FlashMinimapDisplay()
		{
			if (flashMinimapDisplay == null) flashMinimapDisplay = (Function) native.GetObjectProperty("flashMinimapDisplay");
			flashMinimapDisplay.Call(native);
		}

		public void FlashMinimapDisplayWithColor(object p0)
		{
			if (flashMinimapDisplayWithColor == null) flashMinimapDisplayWithColor = (Function) native.GetObjectProperty("flashMinimapDisplayWithColor");
			flashMinimapDisplayWithColor.Call(native, p0);
		}

		public void ToggleStealthRadar(bool toggle)
		{
			if (toggleStealthRadar == null) toggleStealthRadar = (Function) native.GetObjectProperty("toggleStealthRadar");
			toggleStealthRadar.Call(native, toggle);
		}

		public void SetMinimapInSpectatorMode(bool toggle, int ped)
		{
			if (setMinimapInSpectatorMode == null) setMinimapInSpectatorMode = (Function) native.GetObjectProperty("setMinimapInSpectatorMode");
			setMinimapInSpectatorMode.Call(native, toggle, ped);
		}

		public void SetMissionName(bool p0, string name)
		{
			if (setMissionName == null) setMissionName = (Function) native.GetObjectProperty("setMissionName");
			setMissionName.Call(native, p0, name);
		}

		public void SetMissionName2(bool p0, string name)
		{
			if (setMissionName2 == null) setMissionName2 = (Function) native.GetObjectProperty("setMissionName2");
			setMissionName2.Call(native, p0, name);
		}

		/// <summary>
		/// UI::_817B86108EB94E51(1, &g_189F36._f10CD1[016], &g_189F36._f10CD1[116], &g_189F36._f10CD1[216], &g_189F36._f10CD1[316], &g_189F36._f10CD1[416], &g_189F36._f10CD1[516], &g_189F36._f10CD1[616], &g_189F36._f10CD1[716]);
		/// </summary>
		/// <returns>Array<void, object, object, object, object, object, object, object, object></returns>
		public (object, object, object, object, object, object, object, object, object) _0x817B86108EB94E51(bool p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8)
		{
			if (__0x817B86108EB94E51 == null) __0x817B86108EB94E51 = (Function) native.GetObjectProperty("_0x817B86108EB94E51");
			var results = (Array) __0x817B86108EB94E51.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
			return (results[0], results[1], results[2], results[3], results[4], results[5], results[6], results[7], results[8]);
		}

		public void SetMinimapBlockWaypoint(bool toggle)
		{
			if (setMinimapBlockWaypoint == null) setMinimapBlockWaypoint = (Function) native.GetObjectProperty("setMinimapBlockWaypoint");
			setMinimapBlockWaypoint.Call(native, toggle);
		}

		/// <summary>
		/// Toggles the North Yankton map
		/// </summary>
		public void SetMinimapInPrologue(bool toggle)
		{
			if (setMinimapInPrologue == null) setMinimapInPrologue = (Function) native.GetObjectProperty("setMinimapInPrologue");
			setMinimapInPrologue.Call(native, toggle);
		}

		/// <summary>
		/// If true, the entire map will be revealed.
		/// FOW = Fog of War
		/// </summary>
		public void SetMinimapHideFow(bool toggle)
		{
			if (setMinimapHideFow == null) setMinimapHideFow = (Function) native.GetObjectProperty("setMinimapHideFow");
			setMinimapHideFow.Call(native, toggle);
		}

		public double GetMinimapRevealPercentage()
		{
			if (getMinimapRevealPercentage == null) getMinimapRevealPercentage = (Function) native.GetObjectProperty("getMinimapRevealPercentage");
			return (double) getMinimapRevealPercentage.Call(native);
		}

		/// <summary>
		/// GET_MI*
		/// </summary>
		public bool GetMinimapAreaIsRevealed(double x, double y, double radius)
		{
			if (getMinimapAreaIsRevealed == null) getMinimapAreaIsRevealed = (Function) native.GetObjectProperty("getMinimapAreaIsRevealed");
			return (bool) getMinimapAreaIsRevealed.Call(native, x, y, radius);
		}

		public void _0x62E849B7EB28E770(bool p0)
		{
			if (__0x62E849B7EB28E770 == null) __0x62E849B7EB28E770 = (Function) native.GetObjectProperty("_0x62E849B7EB28E770");
			__0x62E849B7EB28E770.Call(native, p0);
		}

		public void _0x0923DBF87DFF735E(double x, double y, double z)
		{
			if (__0x0923DBF87DFF735E == null) __0x0923DBF87DFF735E = (Function) native.GetObjectProperty("_0x0923DBF87DFF735E");
			__0x0923DBF87DFF735E.Call(native, x, y, z);
		}

		public void SetMinimapGolfCourse(int hole)
		{
			if (setMinimapGolfCourse == null) setMinimapGolfCourse = (Function) native.GetObjectProperty("setMinimapGolfCourse");
			setMinimapGolfCourse.Call(native, hole);
		}

		public void SetMinimapGolfCourseOff()
		{
			if (setMinimapGolfCourseOff == null) setMinimapGolfCourseOff = (Function) native.GetObjectProperty("setMinimapGolfCourseOff");
			setMinimapGolfCourseOff.Call(native);
		}

		/// <summary>
		/// Locks the minimap to the specified angle in integer degrees.
		/// angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
		/// </summary>
		/// <param name="angle">The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.</param>
		public void LockMinimapAngle(int angle)
		{
			if (lockMinimapAngle == null) lockMinimapAngle = (Function) native.GetObjectProperty("lockMinimapAngle");
			lockMinimapAngle.Call(native, angle);
		}

		public void UnlockMinimapAngle()
		{
			if (unlockMinimapAngle == null) unlockMinimapAngle = (Function) native.GetObjectProperty("unlockMinimapAngle");
			unlockMinimapAngle.Call(native);
		}

		/// <summary>
		/// Locks the minimap to the specified world position.
		/// </summary>
		public void LockMinimapPosition(double x, double y)
		{
			if (lockMinimapPosition == null) lockMinimapPosition = (Function) native.GetObjectProperty("lockMinimapPosition");
			lockMinimapPosition.Call(native, x, y);
		}

		public void UnlockMinimapPosition()
		{
			if (unlockMinimapPosition == null) unlockMinimapPosition = (Function) native.GetObjectProperty("unlockMinimapPosition");
			unlockMinimapPosition.Call(native);
		}

		/// <summary>
		/// Argument must be 0.0f or above 38.0f, or it will be ignored.
		/// </summary>
		public void SetMinimapAltitudeIndicatorLevel(double altitude, bool p1, object p2)
		{
			if (setMinimapAltitudeIndicatorLevel == null) setMinimapAltitudeIndicatorLevel = (Function) native.GetObjectProperty("setMinimapAltitudeIndicatorLevel");
			setMinimapAltitudeIndicatorLevel.Call(native, altitude, p1, p2);
		}

		public void SetHealthHudDisplayValues(object p0, object p1, bool p2)
		{
			if (setHealthHudDisplayValues == null) setHealthHudDisplayValues = (Function) native.GetObjectProperty("setHealthHudDisplayValues");
			setHealthHudDisplayValues.Call(native, p0, p1, p2);
		}

		public void SetMaxHealthHudDisplay(object p0)
		{
			if (setMaxHealthHudDisplay == null) setMaxHealthHudDisplay = (Function) native.GetObjectProperty("setMaxHealthHudDisplay");
			setMaxHealthHudDisplay.Call(native, p0);
		}

		public void SetMaxArmourHudDisplay(object p0)
		{
			if (setMaxArmourHudDisplay == null) setMaxArmourHudDisplay = (Function) native.GetObjectProperty("setMaxArmourHudDisplay");
			setMaxArmourHudDisplay.Call(native, p0);
		}

		/// <summary>
		/// Toggles the big minimap state like in GTA:Online.
		/// </summary>
		public void SetBigmapActive(bool toggleBigMap, bool showFullMap)
		{
			if (setBigmapActive == null) setBigmapActive = (Function) native.GetObjectProperty("setBigmapActive");
			setBigmapActive.Call(native, toggleBigMap, showFullMap);
		}

		/// <summary>
		/// Full list of components below
		/// HUD = 0;
		/// HUD_WANTED_STARS = 1;
		/// HUD_WEAPON_ICON = 2;
		/// HUD_CASH = 3;
		/// HUD_MP_CASH = 4;
		/// HUD_MP_MESSAGE = 5;
		/// HUD_VEHICLE_NAME = 6;
		/// HUD_AREA_NAME = 7;
		/// See NativeDB for reference: http://natives.altv.mp/#/0xBC4C9EA5391ECC0D
		/// </summary>
		public bool IsHudComponentActive(int id)
		{
			if (isHudComponentActive == null) isHudComponentActive = (Function) native.GetObjectProperty("isHudComponentActive");
			return (bool) isHudComponentActive.Call(native, id);
		}

		public bool IsScriptedHudComponentActive(int id)
		{
			if (isScriptedHudComponentActive == null) isScriptedHudComponentActive = (Function) native.GetObjectProperty("isScriptedHudComponentActive");
			return (bool) isScriptedHudComponentActive.Call(native, id);
		}

		public void HideScriptedHudComponentThisFrame(int id)
		{
			if (hideScriptedHudComponentThisFrame == null) hideScriptedHudComponentThisFrame = (Function) native.GetObjectProperty("hideScriptedHudComponentThisFrame");
			hideScriptedHudComponentThisFrame.Call(native, id);
		}

		/// <summary>
		/// SHOW_*
		/// </summary>
		public void ShowScriptedHudComponentThisFrame(int id)
		{
			if (showScriptedHudComponentThisFrame == null) showScriptedHudComponentThisFrame = (Function) native.GetObjectProperty("showScriptedHudComponentThisFrame");
			showScriptedHudComponentThisFrame.Call(native, id);
		}

		public bool IsScriptedHudComponentHiddenThisFrame(int id)
		{
			if (isScriptedHudComponentHiddenThisFrame == null) isScriptedHudComponentHiddenThisFrame = (Function) native.GetObjectProperty("isScriptedHudComponentHiddenThisFrame");
			return (bool) isScriptedHudComponentHiddenThisFrame.Call(native, id);
		}

		public void HideHudComponentThisFrame(int id)
		{
			if (hideHudComponentThisFrame == null) hideHudComponentThisFrame = (Function) native.GetObjectProperty("hideHudComponentThisFrame");
			hideHudComponentThisFrame.Call(native, id);
		}

		public void ShowHudComponentThisFrame(int id)
		{
			if (showHudComponentThisFrame == null) showHudComponentThisFrame = (Function) native.GetObjectProperty("showHudComponentThisFrame");
			showHudComponentThisFrame.Call(native, id);
		}

		/// <summary>
		/// HIDE_*_THIS_FRAME
		/// Hides area and vehicle name HUD components for one frame.
		/// </summary>
		public void HideAreaAndVehicleNameThisFrame()
		{
			if (hideAreaAndVehicleNameThisFrame == null) hideAreaAndVehicleNameThisFrame = (Function) native.GetObjectProperty("hideAreaAndVehicleNameThisFrame");
			hideAreaAndVehicleNameThisFrame.Call(native);
		}

		public void ResetReticuleValues()
		{
			if (resetReticuleValues == null) resetReticuleValues = (Function) native.GetObjectProperty("resetReticuleValues");
			resetReticuleValues.Call(native);
		}

		public void ResetHudComponentValues(int id)
		{
			if (resetHudComponentValues == null) resetHudComponentValues = (Function) native.GetObjectProperty("resetHudComponentValues");
			resetHudComponentValues.Call(native, id);
		}

		public void SetHudComponentPosition(int id, double x, double y)
		{
			if (setHudComponentPosition == null) setHudComponentPosition = (Function) native.GetObjectProperty("setHudComponentPosition");
			setHudComponentPosition.Call(native, id, x, y);
		}

		public Vector3 GetHudComponentPosition(int id)
		{
			if (getHudComponentPosition == null) getHudComponentPosition = (Function) native.GetObjectProperty("getHudComponentPosition");
			return JSObjectToVector3(getHudComponentPosition.Call(native, id));
		}

		public void ClearReminderMessage()
		{
			if (clearReminderMessage == null) clearReminderMessage = (Function) native.GetObjectProperty("clearReminderMessage");
			clearReminderMessage.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double, double></returns>
		public (bool, double, double) GetScreenCoordFromWorldCoord2(double worldX, double worldY, double worldZ, double screenX, double screenY)
		{
			if (getScreenCoordFromWorldCoord2 == null) getScreenCoordFromWorldCoord2 = (Function) native.GetObjectProperty("getScreenCoordFromWorldCoord2");
			var results = (Array) getScreenCoordFromWorldCoord2.Call(native, worldX, worldY, worldZ, screenX, screenY);
			return ((bool) results[0], (double) results[1], (double) results[2]);
		}

		/// <summary>
		/// Shows a menu for reporting UGC content.
		/// </summary>
		public void OpenReportugcMenu()
		{
			if (openReportugcMenu == null) openReportugcMenu = (Function) native.GetObjectProperty("openReportugcMenu");
			openReportugcMenu.Call(native);
		}

		public void ForceCloseReportugcMenu()
		{
			if (forceCloseReportugcMenu == null) forceCloseReportugcMenu = (Function) native.GetObjectProperty("forceCloseReportugcMenu");
			forceCloseReportugcMenu.Call(native);
		}

		public bool IsReportugcMenuOpen()
		{
			if (isReportugcMenuOpen == null) isReportugcMenuOpen = (Function) native.GetObjectProperty("isReportugcMenuOpen");
			return (bool) isReportugcMenuOpen.Call(native);
		}

		public bool IsFloatingHelpTextOnScreen(int p0)
		{
			if (isFloatingHelpTextOnScreen == null) isFloatingHelpTextOnScreen = (Function) native.GetObjectProperty("isFloatingHelpTextOnScreen");
			return (bool) isFloatingHelpTextOnScreen.Call(native, p0);
		}

		public void SetFloatingHelpTextScreenPosition(int p0, double x, double y)
		{
			if (setFloatingHelpTextScreenPosition == null) setFloatingHelpTextScreenPosition = (Function) native.GetObjectProperty("setFloatingHelpTextScreenPosition");
			setFloatingHelpTextScreenPosition.Call(native, p0, x, y);
		}

		public void SetFloatingHelpTextWorldPosition(int p0, double x, double y, double z)
		{
			if (setFloatingHelpTextWorldPosition == null) setFloatingHelpTextWorldPosition = (Function) native.GetObjectProperty("setFloatingHelpTextWorldPosition");
			setFloatingHelpTextWorldPosition.Call(native, p0, x, y, z);
		}

		public void SetFloatingHelpTextToEntity(int p0, int entity, double p2, double p3)
		{
			if (setFloatingHelpTextToEntity == null) setFloatingHelpTextToEntity = (Function) native.GetObjectProperty("setFloatingHelpTextToEntity");
			setFloatingHelpTextToEntity.Call(native, p0, entity, p2, p3);
		}

		public void SetFloatingHelpTextStyle(int p0, int p1, int p2, int p3, int p4, int p5)
		{
			if (setFloatingHelpTextStyle == null) setFloatingHelpTextStyle = (Function) native.GetObjectProperty("setFloatingHelpTextStyle");
			setFloatingHelpTextStyle.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void ClearFloatingHelp(int p0, bool p1)
		{
			if (clearFloatingHelp == null) clearFloatingHelp = (Function) native.GetObjectProperty("clearFloatingHelp");
			clearFloatingHelp.Call(native, p0, p1);
		}

		public void CreateMpGamerTagWithCrewColor(int player, string username, bool pointedClanTag, bool isRockstarClan, string clanTag, object p5, int r, int g, int b)
		{
			if (createMpGamerTagWithCrewColor == null) createMpGamerTagWithCrewColor = (Function) native.GetObjectProperty("createMpGamerTagWithCrewColor");
			createMpGamerTagWithCrewColor.Call(native, player, username, pointedClanTag, isRockstarClan, clanTag, p5, r, g, b);
		}

		public bool IsMpGamerTagMovieActive()
		{
			if (isMpGamerTagMovieActive == null) isMpGamerTagMovieActive = (Function) native.GetObjectProperty("isMpGamerTagMovieActive");
			return (bool) isMpGamerTagMovieActive.Call(native);
		}

		public int CreateFakeMpGamerTag(int ped, string username, bool pointedClanTag, bool isRockstarClan, string clanTag, object p5)
		{
			if (createFakeMpGamerTag == null) createFakeMpGamerTag = (Function) native.GetObjectProperty("createFakeMpGamerTag");
			return (int) createFakeMpGamerTag.Call(native, ped, username, pointedClanTag, isRockstarClan, clanTag, p5);
		}

		public void RemoveMpGamerTag(int gamerTagId)
		{
			if (removeMpGamerTag == null) removeMpGamerTag = (Function) native.GetObjectProperty("removeMpGamerTag");
			removeMpGamerTag.Call(native, gamerTagId);
		}

		public bool IsMpGamerTagActive(int gamerTagId)
		{
			if (isMpGamerTagActive == null) isMpGamerTagActive = (Function) native.GetObjectProperty("isMpGamerTagActive");
			return (bool) isMpGamerTagActive.Call(native, gamerTagId);
		}

		public bool IsMpGamerTagFree(int gamerTagId)
		{
			if (isMpGamerTagFree == null) isMpGamerTagFree = (Function) native.GetObjectProperty("isMpGamerTagFree");
			return (bool) isMpGamerTagFree.Call(native, gamerTagId);
		}

		/// <summary>
		/// enum eMpGamerTagComponent
		/// {
		/// MP_TAG_GAMER_NAME,
		/// MP_TAG_CREW_TAG,
		/// MP_TAG_HEALTH_ARMOUR,
		/// MP_TAG_BIG_TEXT,
		/// MP_TAG_AUDIO_ICON,
		/// MP_TAG_USING_MENU,
		/// MP_TAG_PASSIVE_MODE,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x63BB75ABEDC1F6A0
		/// </summary>
		public void SetMpGamerTagVisibility(int gamerTagId, int component, bool toggle, object p3)
		{
			if (setMpGamerTagVisibility == null) setMpGamerTagVisibility = (Function) native.GetObjectProperty("setMpGamerTagVisibility");
			setMpGamerTagVisibility.Call(native, gamerTagId, component, toggle, p3);
		}

		/// <summary>
		/// SET_A*
		/// </summary>
		public void _0xEE76FF7E6A0166B0(int gamerTagId, bool p1)
		{
			if (__0xEE76FF7E6A0166B0 == null) __0xEE76FF7E6A0166B0 = (Function) native.GetObjectProperty("_0xEE76FF7E6A0166B0");
			__0xEE76FF7E6A0166B0.Call(native, gamerTagId, p1);
		}

		/// <summary>
		/// Displays a bunch of icons above the players name, and level, and their name twice
		/// </summary>
		public void SetMpGamerTagIcons(int gamerTagId, bool p1)
		{
			if (setMpGamerTagIcons == null) setMpGamerTagIcons = (Function) native.GetObjectProperty("setMpGamerTagIcons");
			setMpGamerTagIcons.Call(native, gamerTagId, p1);
		}

		public void SetMpGamerHealthBarDisplay(object p0, object p1)
		{
			if (setMpGamerHealthBarDisplay == null) setMpGamerHealthBarDisplay = (Function) native.GetObjectProperty("setMpGamerHealthBarDisplay");
			setMpGamerHealthBarDisplay.Call(native, p0, p1);
		}

		public void SetMpGamerHealthBarMax(object p0, object p1, object p2)
		{
			if (setMpGamerHealthBarMax == null) setMpGamerHealthBarMax = (Function) native.GetObjectProperty("setMpGamerHealthBarMax");
			setMpGamerHealthBarMax.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
		/// </summary>
		public void SetMpGamerTagColour(int gamerTagId, int flag, int color)
		{
			if (setMpGamerTagColour == null) setMpGamerTagColour = (Function) native.GetObjectProperty("setMpGamerTagColour");
			setMpGamerTagColour.Call(native, gamerTagId, flag, color);
		}

		/// <summary>
		/// Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
		/// Should be enabled as flag (2). Has 0 opacity by default.
		/// - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
		/// -> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
		/// </summary>
		public void SetMpGamerTagHealthBarColour(int headDisplayId, int color)
		{
			if (setMpGamerTagHealthBarColour == null) setMpGamerTagHealthBarColour = (Function) native.GetObjectProperty("setMpGamerTagHealthBarColour");
			setMpGamerTagHealthBarColour.Call(native, headDisplayId, color);
		}

		/// <summary>
		/// Sets flag's sprite transparency. 0-255.
		/// </summary>
		public void SetMpGamerTagAlpha(int gamerTagId, int component, int alpha)
		{
			if (setMpGamerTagAlpha == null) setMpGamerTagAlpha = (Function) native.GetObjectProperty("setMpGamerTagAlpha");
			setMpGamerTagAlpha.Call(native, gamerTagId, component, alpha);
		}

		/// <summary>
		/// displays wanted star above head
		/// </summary>
		public void SetMpGamerTagWantedLevel(int gamerTagId, int wantedlvl)
		{
			if (setMpGamerTagWantedLevel == null) setMpGamerTagWantedLevel = (Function) native.GetObjectProperty("setMpGamerTagWantedLevel");
			setMpGamerTagWantedLevel.Call(native, gamerTagId, wantedlvl);
		}

		public void SetMpGamerTagUnk(int gamerTagId, int p1)
		{
			if (setMpGamerTagUnk == null) setMpGamerTagUnk = (Function) native.GetObjectProperty("setMpGamerTagUnk");
			setMpGamerTagUnk.Call(native, gamerTagId, p1);
		}

		public void SetMpGamerTagName(int gamerTagId, string @string)
		{
			if (setMpGamerTagName == null) setMpGamerTagName = (Function) native.GetObjectProperty("setMpGamerTagName");
			setMpGamerTagName.Call(native, gamerTagId, @string);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool IsValidMpGamerTagMovie(int gamerTagId)
		{
			if (isValidMpGamerTagMovie == null) isValidMpGamerTagMovie = (Function) native.GetObjectProperty("isValidMpGamerTagMovie");
			return (bool) isValidMpGamerTagMovie.Call(native, gamerTagId);
		}

		public void SetMpGamerTagBigText(int gamerTagId, string @string)
		{
			if (setMpGamerTagBigText == null) setMpGamerTagBigText = (Function) native.GetObjectProperty("setMpGamerTagBigText");
			setMpGamerTagBigText.Call(native, gamerTagId, @string);
		}

		public int GetCurrentWebpageId()
		{
			if (getCurrentWebpageId == null) getCurrentWebpageId = (Function) native.GetObjectProperty("getCurrentWebpageId");
			return (int) getCurrentWebpageId.Call(native);
		}

		public int GetCurrentWebsiteId()
		{
			if (getCurrentWebsiteId == null) getCurrentWebsiteId = (Function) native.GetObjectProperty("getCurrentWebsiteId");
			return (int) getCurrentWebsiteId.Call(native);
		}

		/// <summary>
		/// GET_G*
		/// </summary>
		public object _0xE3B05614DCE1D014(object p0)
		{
			if (__0xE3B05614DCE1D014 == null) __0xE3B05614DCE1D014 = (Function) native.GetObjectProperty("_0xE3B05614DCE1D014");
			return __0xE3B05614DCE1D014.Call(native, p0);
		}

		/// <summary>
		/// RESET_*
		/// </summary>
		public void _0xB99C4E4D9499DF29(int p0)
		{
			if (__0xB99C4E4D9499DF29 == null) __0xB99C4E4D9499DF29 = (Function) native.GetObjectProperty("_0xB99C4E4D9499DF29");
			__0xB99C4E4D9499DF29.Call(native, p0);
		}

		/// <summary>
		/// IS_WARNING_MESSAGE_*
		/// </summary>
		public bool IsWarningMessageActive2()
		{
			if (isWarningMessageActive2 == null) isWarningMessageActive2 = (Function) native.GetObjectProperty("isWarningMessageActive2");
			return (bool) isWarningMessageActive2.Call(native);
		}

		/// <summary>
		/// You can only use text entries. No custom text.
		/// Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
		/// </summary>
		public void SetWarningMessage(string titleMsg, int flags, string promptMsg, bool p3, int p4, string p5, string p6, bool showBg, object p8)
		{
			if (setWarningMessage == null) setWarningMessage = (Function) native.GetObjectProperty("setWarningMessage");
			setWarningMessage.Call(native, titleMsg, flags, promptMsg, p3, p4, p5, p6, showBg, p8);
		}

		/// <summary>
		/// You can only use text entries. No custom text.
		/// [24/03/2017] by ins1de :
		/// C# Example :
		/// Function.Call(Hash._SET_WARNING_MESSAGE_2, "HUD_QUIT", "HUD_CGIGNORE", 2, "HUD_CGINVITE", 0, -1, 0, 0, 1);
		/// @unknown, you can recreate this easily with scaleforms
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) SetWarningMessageWithHeader(string titleMsg, string p1, int flags, string promptMsg, bool p4, object p5, object p6, object p7, bool showBg, object p9)
		{
			if (setWarningMessageWithHeader == null) setWarningMessageWithHeader = (Function) native.GetObjectProperty("setWarningMessageWithHeader");
			var results = (Array) setWarningMessageWithHeader.Call(native, titleMsg, p1, flags, promptMsg, p4, p5, p6, p7, showBg, p9);
			return (results[0], results[1], results[2]);
		}

		/// <summary>
		/// You can only use text entries. No custom text.
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) SetWarningMessageWithHeaderAndSubstringFlags(string entryHeader, string entryLine1, object instructionalKey, string entryLine2, bool p4, object p5, object p6, object p7, object p8, bool p9, object p10)
		{
			if (setWarningMessageWithHeaderAndSubstringFlags == null) setWarningMessageWithHeaderAndSubstringFlags = (Function) native.GetObjectProperty("setWarningMessageWithHeaderAndSubstringFlags");
			var results = (Array) setWarningMessageWithHeaderAndSubstringFlags.Call(native, entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p6, p7, p8, p9, p10);
			return (results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) SetWarningMessageWithHeaderUnk(string entryHeader, string entryLine1, int flags, string entryLine2, bool p4, object p5, object p6, object p7, bool showBg, object p9, object p10)
		{
			if (setWarningMessageWithHeaderUnk == null) setWarningMessageWithHeaderUnk = (Function) native.GetObjectProperty("setWarningMessageWithHeaderUnk");
			var results = (Array) setWarningMessageWithHeaderUnk.Call(native, entryHeader, entryLine1, flags, entryLine2, p4, p5, p6, p7, showBg, p9, p10);
			return (results[0], results[1], results[2]);
		}

		public void SetWarningMessage4(string p0, string p1, int p2, int p3, string p4, bool p5, int p6, int p7, string p8, string p9, bool p10, object p11)
		{
			if (setWarningMessage4 == null) setWarningMessage4 = (Function) native.GetObjectProperty("setWarningMessage4");
			setWarningMessage4.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		}

		public int GetWarningMessageTitleHash()
		{
			if (getWarningMessageTitleHash == null) getWarningMessageTitleHash = (Function) native.GetObjectProperty("getWarningMessageTitleHash");
			return (int) getWarningMessageTitleHash.Call(native);
		}

		/// <summary>
		/// Param names copied from the corresponding scaleform function "SET_LIST_ROW"
		/// </summary>
		public bool SetWarningMessageListRow(int index, string name, int cash, int rp, int lvl, int colour)
		{
			if (setWarningMessageListRow == null) setWarningMessageListRow = (Function) native.GetObjectProperty("setWarningMessageListRow");
			return (bool) setWarningMessageListRow.Call(native, index, name, cash, rp, lvl, colour);
		}

		public bool _0xDAF87174BE7454FF(object p0)
		{
			if (__0xDAF87174BE7454FF == null) __0xDAF87174BE7454FF = (Function) native.GetObjectProperty("_0xDAF87174BE7454FF");
			return (bool) __0xDAF87174BE7454FF.Call(native, p0);
		}

		public void RemoveWarningMessageListItems()
		{
			if (removeWarningMessageListItems == null) removeWarningMessageListItems = (Function) native.GetObjectProperty("removeWarningMessageListItems");
			removeWarningMessageListItems.Call(native);
		}

		public bool IsWarningMessageActive()
		{
			if (isWarningMessageActive == null) isWarningMessageActive = (Function) native.GetObjectProperty("isWarningMessageActive");
			return (bool) isWarningMessageActive.Call(native);
		}

		public void ClearDynamicPauseMenuErrorMessage()
		{
			if (clearDynamicPauseMenuErrorMessage == null) clearDynamicPauseMenuErrorMessage = (Function) native.GetObjectProperty("clearDynamicPauseMenuErrorMessage");
			clearDynamicPauseMenuErrorMessage.Call(native);
		}

		/// <summary>
		/// If toggle is true, the map is shown in full screen
		/// If toggle is false, the map is shown in normal mode
		/// </summary>
		public void RaceGalleryFullscreen(bool toggle)
		{
			if (raceGalleryFullscreen == null) raceGalleryFullscreen = (Function) native.GetObjectProperty("raceGalleryFullscreen");
			raceGalleryFullscreen.Call(native, toggle);
		}

		public void RaceGalleryNextBlipSprite(object p0)
		{
			if (raceGalleryNextBlipSprite == null) raceGalleryNextBlipSprite = (Function) native.GetObjectProperty("raceGalleryNextBlipSprite");
			raceGalleryNextBlipSprite.Call(native, p0);
		}

		public object RaceGalleryAddBlip(double p0, double p1, double p2)
		{
			if (raceGalleryAddBlip == null) raceGalleryAddBlip = (Function) native.GetObjectProperty("raceGalleryAddBlip");
			return raceGalleryAddBlip.Call(native, p0, p1, p2);
		}

		public void ClearRaceGalleryBlips()
		{
			if (clearRaceGalleryBlips == null) clearRaceGalleryBlips = (Function) native.GetObjectProperty("clearRaceGalleryBlips");
			clearRaceGalleryBlips.Call(native);
		}

		/// <summary>
		/// Doesn't actually return anything.
		/// </summary>
		public object ForceSonarBlipsThisFrame()
		{
			if (forceSonarBlipsThisFrame == null) forceSonarBlipsThisFrame = (Function) native.GetObjectProperty("forceSonarBlipsThisFrame");
			return forceSonarBlipsThisFrame.Call(native);
		}

		public object _0x3F0CF9CB7E589B88()
		{
			if (__0x3F0CF9CB7E589B88 == null) __0x3F0CF9CB7E589B88 = (Function) native.GetObjectProperty("_0x3F0CF9CB7E589B88");
			return __0x3F0CF9CB7E589B88.Call(native);
		}

		public void _0x82CEDC33687E1F50(bool p0)
		{
			if (__0x82CEDC33687E1F50 == null) __0x82CEDC33687E1F50 = (Function) native.GetObjectProperty("_0x82CEDC33687E1F50");
			__0x82CEDC33687E1F50.Call(native, p0);
		}

		public void _0x211C4EF450086857()
		{
			if (__0x211C4EF450086857 == null) __0x211C4EF450086857 = (Function) native.GetObjectProperty("_0x211C4EF450086857");
			__0x211C4EF450086857.Call(native);
		}

		public void _0xBF4F34A85CA2970C()
		{
			if (__0xBF4F34A85CA2970C == null) __0xBF4F34A85CA2970C = (Function) native.GetObjectProperty("_0xBF4F34A85CA2970C");
			__0xBF4F34A85CA2970C.Call(native);
		}

		/// <summary>
		/// Does stuff like this:
		/// gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
		/// Example:
		/// int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
		/// ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
		/// BOOL p1 is a toggle to define the game in pause.
		/// int p2 is unknown but -1 always works, not sure why though.
		/// [30/03/2017] ins1de :
		/// the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
		/// See NativeDB for reference: http://natives.altv.mp/#/0xEF01D36B9C9D0C7B
		/// </summary>
		public void ActivateFrontendMenu(int menuhash, bool togglePause, int component)
		{
			if (activateFrontendMenu == null) activateFrontendMenu = (Function) native.GetObjectProperty("activateFrontendMenu");
			activateFrontendMenu.Call(native, menuhash, togglePause, component);
		}

		/// <summary>
		/// Before using this native click the native above and look at the decription.
		/// Example:
		/// int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
		/// Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
		/// Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
		/// This native refreshes the frontend menu.
		/// p1 = Hash of Menu
		/// p2 = Unknown but always works with -1.
		/// </summary>
		/// <param name="p1">Hash of Menu</param>
		public void RestartFrontendMenu(int menuHash, int p1)
		{
			if (restartFrontendMenu == null) restartFrontendMenu = (Function) native.GetObjectProperty("restartFrontendMenu");
			restartFrontendMenu.Call(native, menuHash, p1);
		}

		/// <summary>
		/// if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))
		/// </summary>
		public int GetCurrentFrontendMenuVersion()
		{
			if (getCurrentFrontendMenuVersion == null) getCurrentFrontendMenuVersion = (Function) native.GetObjectProperty("getCurrentFrontendMenuVersion");
			return (int) getCurrentFrontendMenuVersion.Call(native);
		}

		public void SetPauseMenuActive(bool toggle)
		{
			if (setPauseMenuActive == null) setPauseMenuActive = (Function) native.GetObjectProperty("setPauseMenuActive");
			setPauseMenuActive.Call(native, toggle);
		}

		public void DisableFrontendThisFrame()
		{
			if (disableFrontendThisFrame == null) disableFrontendThisFrame = (Function) native.GetObjectProperty("disableFrontendThisFrame");
			disableFrontendThisFrame.Call(native);
		}

		public void SuppressFrontendRenderingThisFrame()
		{
			if (suppressFrontendRenderingThisFrame == null) suppressFrontendRenderingThisFrame = (Function) native.GetObjectProperty("suppressFrontendRenderingThisFrame");
			suppressFrontendRenderingThisFrame.Call(native);
		}

		public void AllowPauseMenuWhenDeadThisFrame()
		{
			if (allowPauseMenuWhenDeadThisFrame == null) allowPauseMenuWhenDeadThisFrame = (Function) native.GetObjectProperty("allowPauseMenuWhenDeadThisFrame");
			allowPauseMenuWhenDeadThisFrame.Call(native);
		}

		public void SetFrontendActive(bool active)
		{
			if (setFrontendActive == null) setFrontendActive = (Function) native.GetObjectProperty("setFrontendActive");
			setFrontendActive.Call(native, active);
		}

		public bool IsPauseMenuActive()
		{
			if (isPauseMenuActive == null) isPauseMenuActive = (Function) native.GetObjectProperty("isPauseMenuActive");
			return (bool) isPauseMenuActive.Call(native);
		}

		/// <summary>
		/// IS_S*
		/// IS_STORE_EXIT_PURCHASE_CAPABILITY_ACTIVATED ?
		/// </summary>
		/// <returns>Returns something related to the store.</returns>
		public bool _0x2F057596F2BD0061()
		{
			if (__0x2F057596F2BD0061 == null) __0x2F057596F2BD0061 = (Function) native.GetObjectProperty("_0x2F057596F2BD0061");
			return (bool) __0x2F057596F2BD0061.Call(native);
		}

		/// <summary>
		/// 0
		/// 5
		/// 10
		/// 15
		/// 20
		/// 25
		/// 30
		/// 35
		/// </summary>
		/// <returns>Returns:</returns>
		public int GetPauseMenuState()
		{
			if (getPauseMenuState == null) getPauseMenuState = (Function) native.GetObjectProperty("getPauseMenuState");
			return (int) getPauseMenuState.Call(native);
		}

		/// <summary>
		/// GET_PAUSE_MENU_*
		/// </summary>
		public Vector3 _0x5BFF36D6ED83E0AE()
		{
			if (__0x5BFF36D6ED83E0AE == null) __0x5BFF36D6ED83E0AE = (Function) native.GetObjectProperty("_0x5BFF36D6ED83E0AE");
			return JSObjectToVector3(__0x5BFF36D6ED83E0AE.Call(native));
		}

		public bool IsPauseMenuRestarting()
		{
			if (isPauseMenuRestarting == null) isPauseMenuRestarting = (Function) native.GetObjectProperty("isPauseMenuRestarting");
			return (bool) isPauseMenuRestarting.Call(native);
		}

		/// <summary>
		/// Not present in retail version of the game, actual definiton seems to be
		/// _LOG_DEBUG_INFO(const char* category, const char* debugText);
		/// </summary>
		public void LogDebugInfo(string p0)
		{
			if (logDebugInfo == null) logDebugInfo = (Function) native.GetObjectProperty("logDebugInfo");
			logDebugInfo.Call(native, p0);
		}

		public void _0x77F16B447824DA6C(object p0)
		{
			if (__0x77F16B447824DA6C == null) __0x77F16B447824DA6C = (Function) native.GetObjectProperty("_0x77F16B447824DA6C");
			__0x77F16B447824DA6C.Call(native, p0);
		}

		public void _0xCDCA26E80FAECB8F()
		{
			if (__0xCDCA26E80FAECB8F == null) __0xCDCA26E80FAECB8F = (Function) native.GetObjectProperty("_0xCDCA26E80FAECB8F");
			__0xCDCA26E80FAECB8F.Call(native);
		}

		public void _0x2DE6C5E2E996F178(object p0)
		{
			if (__0x2DE6C5E2E996F178 == null) __0x2DE6C5E2E996F178 = (Function) native.GetObjectProperty("_0x2DE6C5E2E996F178");
			__0x2DE6C5E2E996F178.Call(native, p0);
		}

		public void PauseMenuActivateContext(int contextHash)
		{
			if (pauseMenuActivateContext == null) pauseMenuActivateContext = (Function) native.GetObjectProperty("pauseMenuActivateContext");
			pauseMenuActivateContext.Call(native, contextHash);
		}

		public void PauseMenuDeactivateContext(int contextHash)
		{
			if (pauseMenuDeactivateContext == null) pauseMenuDeactivateContext = (Function) native.GetObjectProperty("pauseMenuDeactivateContext");
			pauseMenuDeactivateContext.Call(native, contextHash);
		}

		public bool PauseMenuIsContextActive(int contextHash)
		{
			if (pauseMenuIsContextActive == null) pauseMenuIsContextActive = (Function) native.GetObjectProperty("pauseMenuIsContextActive");
			return (bool) pauseMenuIsContextActive.Call(native, contextHash);
		}

		public object _0x2A25ADC48F87841F()
		{
			if (__0x2A25ADC48F87841F == null) __0x2A25ADC48F87841F = (Function) native.GetObjectProperty("_0x2A25ADC48F87841F");
			return __0x2A25ADC48F87841F.Call(native);
		}

		public object _0xDE03620F8703A9DF()
		{
			if (__0xDE03620F8703A9DF == null) __0xDE03620F8703A9DF = (Function) native.GetObjectProperty("_0xDE03620F8703A9DF");
			return __0xDE03620F8703A9DF.Call(native);
		}

		public object _0x359AF31A4B52F5ED()
		{
			if (__0x359AF31A4B52F5ED == null) __0x359AF31A4B52F5ED = (Function) native.GetObjectProperty("_0x359AF31A4B52F5ED");
			return __0x359AF31A4B52F5ED.Call(native);
		}

		public object _0x13C4B962653A5280()
		{
			if (__0x13C4B962653A5280 == null) __0x13C4B962653A5280 = (Function) native.GetObjectProperty("_0x13C4B962653A5280");
			return __0x13C4B962653A5280.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object, object></returns>
		public (bool, object, object, object) _0xC8E1071177A23BE5(object p0, object p1, object p2)
		{
			if (__0xC8E1071177A23BE5 == null) __0xC8E1071177A23BE5 = (Function) native.GetObjectProperty("_0xC8E1071177A23BE5");
			var results = (Array) __0xC8E1071177A23BE5.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1], results[2], results[3]);
		}

		public void _0x4895BDEA16E7C080(int p0)
		{
			if (__0x4895BDEA16E7C080 == null) __0x4895BDEA16E7C080 = (Function) native.GetObjectProperty("_0x4895BDEA16E7C080");
			__0x4895BDEA16E7C080.Call(native, p0);
		}

		public void _0xC78E239AC5B2DDB9(bool p0, object p1, object p2)
		{
			if (__0xC78E239AC5B2DDB9 == null) __0xC78E239AC5B2DDB9 = (Function) native.GetObjectProperty("_0xC78E239AC5B2DDB9");
			__0xC78E239AC5B2DDB9.Call(native, p0, p1, p2);
		}

		public void _0xF06EBB91A81E09E3(bool p0)
		{
			if (__0xF06EBB91A81E09E3 == null) __0xF06EBB91A81E09E3 = (Function) native.GetObjectProperty("_0xF06EBB91A81E09E3");
			__0xF06EBB91A81E09E3.Call(native, p0);
		}

		public bool IsFrontendReadyForControl()
		{
			if (isFrontendReadyForControl == null) isFrontendReadyForControl = (Function) native.GetObjectProperty("isFrontendReadyForControl");
			return (bool) isFrontendReadyForControl.Call(native);
		}

		public void _0xEC9264727EEC0F28()
		{
			if (__0xEC9264727EEC0F28 == null) __0xEC9264727EEC0F28 = (Function) native.GetObjectProperty("_0xEC9264727EEC0F28");
			__0xEC9264727EEC0F28.Call(native);
		}

		public void _0x14621BB1DF14E2B2()
		{
			if (__0x14621BB1DF14E2B2 == null) __0x14621BB1DF14E2B2 = (Function) native.GetObjectProperty("_0x14621BB1DF14E2B2");
			__0x14621BB1DF14E2B2.Call(native);
		}

		public object _0x66E7CB63C97B7D20()
		{
			if (__0x66E7CB63C97B7D20 == null) __0x66E7CB63C97B7D20 = (Function) native.GetObjectProperty("_0x66E7CB63C97B7D20");
			return __0x66E7CB63C97B7D20.Call(native);
		}

		public object _0x593FEAE1F73392D4()
		{
			if (__0x593FEAE1F73392D4 == null) __0x593FEAE1F73392D4 = (Function) native.GetObjectProperty("_0x593FEAE1F73392D4");
			return __0x593FEAE1F73392D4.Call(native);
		}

		public object _0x4E3CD0EF8A489541()
		{
			if (__0x4E3CD0EF8A489541 == null) __0x4E3CD0EF8A489541 = (Function) native.GetObjectProperty("_0x4E3CD0EF8A489541");
			return __0x4E3CD0EF8A489541.Call(native);
		}

		public object _0xF284AC67940C6812()
		{
			if (__0xF284AC67940C6812 == null) __0xF284AC67940C6812 = (Function) native.GetObjectProperty("_0xF284AC67940C6812");
			return __0xF284AC67940C6812.Call(native);
		}

		public object _0x2E22FEFA0100275E()
		{
			if (__0x2E22FEFA0100275E == null) __0x2E22FEFA0100275E = (Function) native.GetObjectProperty("_0x2E22FEFA0100275E");
			return __0x2E22FEFA0100275E.Call(native);
		}

		public void _0x0CF54F20DE43879C(object p0)
		{
			if (__0x0CF54F20DE43879C == null) __0x0CF54F20DE43879C = (Function) native.GetObjectProperty("_0x0CF54F20DE43879C");
			__0x0CF54F20DE43879C.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) _0x36C1451A88A09630(object p0, object p1)
		{
			if (__0x36C1451A88A09630 == null) __0x36C1451A88A09630 = (Function) native.GetObjectProperty("_0x36C1451A88A09630");
			var results = (Array) __0x36C1451A88A09630.Call(native, p0, p1);
			return (results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object></returns>
		public (object, object, object, object) _0x7E17BE53E1AAABAF(object p0, object p1, object p2)
		{
			if (__0x7E17BE53E1AAABAF == null) __0x7E17BE53E1AAABAF = (Function) native.GetObjectProperty("_0x7E17BE53E1AAABAF");
			var results = (Array) __0x7E17BE53E1AAABAF.Call(native, p0, p1, p2);
			return (results[0], results[1], results[2], results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int, int, int></returns>
		public (bool, int, int, int) _0xA238192F33110615(int p0, int p1, int p2)
		{
			if (__0xA238192F33110615 == null) __0xA238192F33110615 = (Function) native.GetObjectProperty("_0xA238192F33110615");
			var results = (Array) __0xA238192F33110615.Call(native, p0, p1, p2);
			return ((bool) results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0xEF4CED81CEBEDC6D(object p0, object p1)
		{
			if (__0xEF4CED81CEBEDC6D == null) __0xEF4CED81CEBEDC6D = (Function) native.GetObjectProperty("_0xEF4CED81CEBEDC6D");
			var results = (Array) __0xEF4CED81CEBEDC6D.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0xCA6B2F7CE32AB653(object p0, object p1, object p2)
		{
			if (__0xCA6B2F7CE32AB653 == null) __0xCA6B2F7CE32AB653 = (Function) native.GetObjectProperty("_0xCA6B2F7CE32AB653");
			var results = (Array) __0xCA6B2F7CE32AB653.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x90A6526CF0381030(object p0, object p1, object p2, object p3)
		{
			if (__0x90A6526CF0381030 == null) __0x90A6526CF0381030 = (Function) native.GetObjectProperty("_0x90A6526CF0381030");
			var results = (Array) __0x90A6526CF0381030.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x24A49BEAF468DC90(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0x24A49BEAF468DC90 == null) __0x24A49BEAF468DC90 = (Function) native.GetObjectProperty("_0x24A49BEAF468DC90");
			var results = (Array) __0x24A49BEAF468DC90.Call(native, p0, p1, p2, p3, p4);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) _0x5FBD7095FE7AE57F(object p0, double p1)
		{
			if (__0x5FBD7095FE7AE57F == null) __0x5FBD7095FE7AE57F = (Function) native.GetObjectProperty("_0x5FBD7095FE7AE57F");
			var results = (Array) __0x5FBD7095FE7AE57F.Call(native, p0, p1);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x8F08017F9D7C47BD(object p0, object p1, object p2)
		{
			if (__0x8F08017F9D7C47BD == null) __0x8F08017F9D7C47BD = (Function) native.GetObjectProperty("_0x8F08017F9D7C47BD");
			var results = (Array) __0x8F08017F9D7C47BD.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// p0 was always 0xAE2602A3.
		/// </summary>
		/// <param name="p0">was always 0xAE2602A3.</param>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x052991E59076E4E4(int p0, object p1)
		{
			if (__0x052991E59076E4E4 == null) __0x052991E59076E4E4 = (Function) native.GetObjectProperty("_0x052991E59076E4E4");
			var results = (Array) __0x052991E59076E4E4.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public void ClearPedInPauseMenu()
		{
			if (clearPedInPauseMenu == null) clearPedInPauseMenu = (Function) native.GetObjectProperty("clearPedInPauseMenu");
			clearPedInPauseMenu.Call(native);
		}

		/// <summary>
		/// p1 is either 1 or 2 in the PC scripts.
		/// </summary>
		/// <param name="p1">is either 1 or 2 in the PC scripts.</param>
		public void GivePedToPauseMenu(int ped, int p1)
		{
			if (givePedToPauseMenu == null) givePedToPauseMenu = (Function) native.GetObjectProperty("givePedToPauseMenu");
			givePedToPauseMenu.Call(native, ped, p1);
		}

		public void SetPauseMenuPedLighting(bool p0)
		{
			if (setPauseMenuPedLighting == null) setPauseMenuPedLighting = (Function) native.GetObjectProperty("setPauseMenuPedLighting");
			setPauseMenuPedLighting.Call(native, p0);
		}

		public void SetPauseMenuPedSleepState(bool state)
		{
			if (setPauseMenuPedSleepState == null) setPauseMenuPedSleepState = (Function) native.GetObjectProperty("setPauseMenuPedSleepState");
			setPauseMenuPedSleepState.Call(native, state);
		}

		public void OpenOnlinePoliciesMenu()
		{
			if (openOnlinePoliciesMenu == null) openOnlinePoliciesMenu = (Function) native.GetObjectProperty("openOnlinePoliciesMenu");
			openOnlinePoliciesMenu.Call(native);
		}

		public bool _0xF13FE2A80C05C561()
		{
			if (__0xF13FE2A80C05C561 == null) __0xF13FE2A80C05C561 = (Function) native.GetObjectProperty("_0xF13FE2A80C05C561");
			return (bool) __0xF13FE2A80C05C561.Call(native);
		}

		public bool IsOnlinePoliciesMenuActive()
		{
			if (isOnlinePoliciesMenuActive == null) isOnlinePoliciesMenuActive = (Function) native.GetObjectProperty("isOnlinePoliciesMenuActive");
			return (bool) isOnlinePoliciesMenuActive.Call(native);
		}

		public void OpenSocialClubMenu()
		{
			if (openSocialClubMenu == null) openSocialClubMenu = (Function) native.GetObjectProperty("openSocialClubMenu");
			openSocialClubMenu.Call(native);
		}

		public void CloseSocialClubMenu()
		{
			if (closeSocialClubMenu == null) closeSocialClubMenu = (Function) native.GetObjectProperty("closeSocialClubMenu");
			closeSocialClubMenu.Call(native);
		}

		/// <summary>
		/// HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
		/// HUD::SET_SOCIAL_CLUB_TOUR("Missions");
		/// HUD::SET_SOCIAL_CLUB_TOUR("General");
		/// HUD::SET_SOCIAL_CLUB_TOUR("Playlists");
		/// </summary>
		public void SetSocialClubTour(string name)
		{
			if (setSocialClubTour == null) setSocialClubTour = (Function) native.GetObjectProperty("setSocialClubTour");
			setSocialClubTour.Call(native, name);
		}

		public bool IsSocialClubActive()
		{
			if (isSocialClubActive == null) isSocialClubActive = (Function) native.GetObjectProperty("isSocialClubActive");
			return (bool) isSocialClubActive.Call(native);
		}

		/// <summary>
		/// SET_TEXT_??? - Used in golf and golf_mp
		/// </summary>
		public void _0x1185A8087587322C(bool p0)
		{
			if (__0x1185A8087587322C == null) __0x1185A8087587322C = (Function) native.GetObjectProperty("_0x1185A8087587322C");
			__0x1185A8087587322C.Call(native, p0);
		}

		public void ForceCloseTextInputBox()
		{
			if (forceCloseTextInputBox == null) forceCloseTextInputBox = (Function) native.GetObjectProperty("forceCloseTextInputBox");
			forceCloseTextInputBox.Call(native);
		}

		public void _0x577599CCED639CA2(object p0)
		{
			if (__0x577599CCED639CA2 == null) __0x577599CCED639CA2 = (Function) native.GetObjectProperty("_0x577599CCED639CA2");
			__0x577599CCED639CA2.Call(native, p0);
		}

		public void OverrideMultiplayerChatPrefix(object p0)
		{
			if (overrideMultiplayerChatPrefix == null) overrideMultiplayerChatPrefix = (Function) native.GetObjectProperty("overrideMultiplayerChatPrefix");
			overrideMultiplayerChatPrefix.Call(native, p0);
		}

		/// <summary>
		/// -- NTAuthority (http://fivem.net)
		/// </summary>
		/// <returns>Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.</returns>
		public bool IsMultiplayerChatActive()
		{
			if (isMultiplayerChatActive == null) isMultiplayerChatActive = (Function) native.GetObjectProperty("isMultiplayerChatActive");
			return (bool) isMultiplayerChatActive.Call(native);
		}

		public void CloseMultiplayerChat()
		{
			if (closeMultiplayerChat == null) closeMultiplayerChat = (Function) native.GetObjectProperty("closeMultiplayerChat");
			closeMultiplayerChat.Call(native);
		}

		public void _0x7C226D5346D4D10A(object p0)
		{
			if (__0x7C226D5346D4D10A == null) __0x7C226D5346D4D10A = (Function) native.GetObjectProperty("_0x7C226D5346D4D10A");
			__0x7C226D5346D4D10A.Call(native, p0);
		}

		public void OverrideMultiplayerChatColour(object p0, object p1)
		{
			if (overrideMultiplayerChatColour == null) overrideMultiplayerChatColour = (Function) native.GetObjectProperty("overrideMultiplayerChatColour");
			overrideMultiplayerChatColour.Call(native, p0, p1);
		}

		/// <summary>
		/// Sets an unknown boolean value in the text chat.
		/// </summary>
		public void SetTextChatUnk(bool p0)
		{
			if (setTextChatUnk == null) setTextChatUnk = (Function) native.GetObjectProperty("setTextChatUnk");
			setTextChatUnk.Call(native, p0);
		}

		public void FlagPlayerContextInTournament(bool toggle)
		{
			if (flagPlayerContextInTournament == null) flagPlayerContextInTournament = (Function) native.GetObjectProperty("flagPlayerContextInTournament");
			flagPlayerContextInTournament.Call(native, toggle);
		}

		/// <summary>
		/// This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
		/// See gtaforums.com/topic/884370-native-research-ai-blips for further information.
		/// </summary>
		public void SetPedHasAiBlip(int ped, bool hasCone)
		{
			if (setPedHasAiBlip == null) setPedHasAiBlip = (Function) native.GetObjectProperty("setPedHasAiBlip");
			setPedHasAiBlip.Call(native, ped, hasCone);
		}

		/// <summary>
		/// color: see SET_BLIP_COLOUR
		/// </summary>
		/// <param name="color">see SET_BLIP_COLOUR</param>
		public void SetPedHasAiBlipWithColor(int ped, bool hasCone, int color)
		{
			if (setPedHasAiBlipWithColor == null) setPedHasAiBlipWithColor = (Function) native.GetObjectProperty("setPedHasAiBlipWithColor");
			setPedHasAiBlipWithColor.Call(native, ped, hasCone, color);
		}

		public bool DoesPedHaveAiBlip(int ped)
		{
			if (doesPedHaveAiBlip == null) doesPedHaveAiBlip = (Function) native.GetObjectProperty("doesPedHaveAiBlip");
			return (bool) doesPedHaveAiBlip.Call(native, ped);
		}

		public void SetPedAiBlipGangId(int ped, int gangId)
		{
			if (setPedAiBlipGangId == null) setPedAiBlipGangId = (Function) native.GetObjectProperty("setPedAiBlipGangId");
			setPedAiBlipGangId.Call(native, ped, gangId);
		}

		public void SetPedAiBlipHasCone(int ped, bool toggle)
		{
			if (setPedAiBlipHasCone == null) setPedAiBlipHasCone = (Function) native.GetObjectProperty("setPedAiBlipHasCone");
			setPedAiBlipHasCone.Call(native, ped, toggle);
		}

		public void SetPedAiBlipForcedOn(int ped, bool toggle)
		{
			if (setPedAiBlipForcedOn == null) setPedAiBlipForcedOn = (Function) native.GetObjectProperty("setPedAiBlipForcedOn");
			setPedAiBlipForcedOn.Call(native, ped, toggle);
		}

		public void SetPedAiBlipNoticeRange(int ped, double range)
		{
			if (setPedAiBlipNoticeRange == null) setPedAiBlipNoticeRange = (Function) native.GetObjectProperty("setPedAiBlipNoticeRange");
			setPedAiBlipNoticeRange.Call(native, ped, range);
		}

		public void SetPedAiBlipSprite(int ped, int spriteId)
		{
			if (setPedAiBlipSprite == null) setPedAiBlipSprite = (Function) native.GetObjectProperty("setPedAiBlipSprite");
			setPedAiBlipSprite.Call(native, ped, spriteId);
		}

		public int GetAiBlip2(int ped)
		{
			if (getAiBlip2 == null) getAiBlip2 = (Function) native.GetObjectProperty("getAiBlip2");
			return (int) getAiBlip2.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the current AI BLIP for the specified ped</returns>
		public int GetAiBlip(int ped)
		{
			if (getAiBlip == null) getAiBlip = (Function) native.GetObjectProperty("getAiBlip");
			return (int) getAiBlip.Call(native, ped);
		}

		/// <summary>
		/// HAS_*
		/// </summary>
		public bool HasDirectorModeBeenTriggered()
		{
			if (hasDirectorModeBeenTriggered == null) hasDirectorModeBeenTriggered = (Function) native.GetObjectProperty("hasDirectorModeBeenTriggered");
			return (bool) hasDirectorModeBeenTriggered.Call(native);
		}

		/// <summary>
		/// SET_*
		/// </summary>
		public void SetDirectorModeClearTriggeredFlag()
		{
			if (setDirectorModeClearTriggeredFlag == null) setDirectorModeClearTriggeredFlag = (Function) native.GetObjectProperty("setDirectorModeClearTriggeredFlag");
			setDirectorModeClearTriggeredFlag.Call(native);
		}

		/// <summary>
		/// If toggle is true, hides special ability bar / character name in the pause menu
		/// If toggle is false, shows special ability bar / character name in the pause menu
		/// SET_PLAYER_*
		/// </summary>
		public void SetPlayerIsInDirectorMode(bool toggle)
		{
			if (setPlayerIsInDirectorMode == null) setPlayerIsInDirectorMode = (Function) native.GetObjectProperty("setPlayerIsInDirectorMode");
			setPlayerIsInDirectorMode.Call(native, toggle);
		}

		/// <summary>
		/// SET_*
		/// </summary>
		public void _0x04655F9D075D0AE5(bool toggle)
		{
			if (__0x04655F9D075D0AE5 == null) __0x04655F9D075D0AE5 = (Function) native.GetObjectProperty("_0x04655F9D075D0AE5");
			__0x04655F9D075D0AE5.Call(native, toggle);
		}

		/// <summary>
		/// GET_INTERIOR_*
		/// </summary>
		public double GetInteriorHeading(int interior)
		{
			if (getInteriorHeading == null) getInteriorHeading = (Function) native.GetObjectProperty("getInteriorHeading");
			return (double) getInteriorHeading.Call(native, interior);
		}

		/// <summary>
		/// GET_INTERIOR_*
		/// </summary>
		/// <returns>Array<void, Vector3, int></returns>
		public (object, Vector3, int) GetInteriorInfo(int interior, Vector3 position, int nameHash)
		{
			if (getInteriorInfo == null) getInteriorInfo = (Function) native.GetObjectProperty("getInteriorInfo");
			var results = (Array) getInteriorInfo.Call(native, interior, position, nameHash);
			return (results[0], JSObjectToVector3(results[1]), (int) results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.</returns>
		public int GetInteriorGroupId(int interior)
		{
			if (getInteriorGroupId == null) getInteriorGroupId = (Function) native.GetObjectProperty("getInteriorGroupId");
			return (int) getInteriorGroupId.Call(native, interior);
		}

		public Vector3 GetOffsetFromInteriorInWorldCoords(int interior, double x, double y, double z)
		{
			if (getOffsetFromInteriorInWorldCoords == null) getOffsetFromInteriorInWorldCoords = (Function) native.GetObjectProperty("getOffsetFromInteriorInWorldCoords");
			return JSObjectToVector3(getOffsetFromInteriorInWorldCoords.Call(native, interior, x, y, z));
		}

		public bool IsInteriorScene()
		{
			if (isInteriorScene == null) isInteriorScene = (Function) native.GetObjectProperty("isInteriorScene");
			return (bool) isInteriorScene.Call(native);
		}

		public bool IsValidInterior(int interior)
		{
			if (isValidInterior == null) isValidInterior = (Function) native.GetObjectProperty("isValidInterior");
			return (bool) isValidInterior.Call(native, interior);
		}

		public void ClearRoomForEntity(int entity)
		{
			if (clearRoomForEntity == null) clearRoomForEntity = (Function) native.GetObjectProperty("clearRoomForEntity");
			clearRoomForEntity.Call(native, entity);
		}

		/// <summary>
		/// Does anyone know what this does? I know online modding isn't generally supported especially by the owner of this db, but I first thought this could be used to force ourselves into someones apartment, but I see now that isn't possible.
		/// </summary>
		public void ForceRoomForEntity(int entity, int interior, int roomHashKey)
		{
			if (forceRoomForEntity == null) forceRoomForEntity = (Function) native.GetObjectProperty("forceRoomForEntity");
			forceRoomForEntity.Call(native, entity, interior, roomHashKey);
		}

		/// <summary>
		/// </summary>
		/// <returns>Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.</returns>
		public int GetRoomKeyFromEntity(int entity)
		{
			if (getRoomKeyFromEntity == null) getRoomKeyFromEntity = (Function) native.GetObjectProperty("getRoomKeyFromEntity");
			return (int) getRoomKeyFromEntity.Call(native, entity);
		}

		/// <summary>
		/// Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
		/// </summary>
		public int GetKeyForEntityInRoom(int entity)
		{
			if (getKeyForEntityInRoom == null) getKeyForEntityInRoom = (Function) native.GetObjectProperty("getKeyForEntityInRoom");
			return (int) getKeyForEntityInRoom.Call(native, entity);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the handle of the interior that the entity is in. Returns 0 if outside.</returns>
		public int GetInteriorFromEntity(int entity)
		{
			if (getInteriorFromEntity == null) getInteriorFromEntity = (Function) native.GetObjectProperty("getInteriorFromEntity");
			return (int) getInteriorFromEntity.Call(native, entity);
		}

		public void _0x82EBB79E258FA2B7(int entity, int interior)
		{
			if (__0x82EBB79E258FA2B7 == null) __0x82EBB79E258FA2B7 = (Function) native.GetObjectProperty("_0x82EBB79E258FA2B7");
			__0x82EBB79E258FA2B7.Call(native, entity, interior);
		}

		public void _0x38C1CB1CB119A016(object p0, object p1)
		{
			if (__0x38C1CB1CB119A016 == null) __0x38C1CB1CB119A016 = (Function) native.GetObjectProperty("_0x38C1CB1CB119A016");
			__0x38C1CB1CB119A016.Call(native, p0, p1);
		}

		public void ForceRoomForGameViewport(int interiorID, int roomHashKey)
		{
			if (forceRoomForGameViewport == null) forceRoomForGameViewport = (Function) native.GetObjectProperty("forceRoomForGameViewport");
			forceRoomForGameViewport.Call(native, interiorID, roomHashKey);
		}

		/// <summary>
		/// Exemple of use(carmod_shop.c4)
		/// INTERIOR::_AF348AFCB575A441("V_CarModRoom");
		/// </summary>
		public void _0xAF348AFCB575A441(string roomName)
		{
			if (__0xAF348AFCB575A441 == null) __0xAF348AFCB575A441 = (Function) native.GetObjectProperty("_0xAF348AFCB575A441");
			__0xAF348AFCB575A441.Call(native, roomName);
		}

		/// <summary>
		/// Usage: INTERIOR::_0x405DC2AEF6AF95B9(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
		/// </summary>
		public void _0x405DC2AEF6AF95B9(int roomHashKey)
		{
			if (__0x405DC2AEF6AF95B9 == null) __0x405DC2AEF6AF95B9 = (Function) native.GetObjectProperty("_0x405DC2AEF6AF95B9");
			__0x405DC2AEF6AF95B9.Call(native, roomHashKey);
		}

		public int GetRoomKeyForGameViewport()
		{
			if (getRoomKeyForGameViewport == null) getRoomKeyForGameViewport = (Function) native.GetObjectProperty("getRoomKeyForGameViewport");
			return (int) getRoomKeyForGameViewport.Call(native);
		}

		public void ClearRoomForGameViewport()
		{
			if (clearRoomForGameViewport == null) clearRoomForGameViewport = (Function) native.GetObjectProperty("clearRoomForGameViewport");
			clearRoomForGameViewport.Call(native);
		}

		public object _0xE7D267EC6CA966C3()
		{
			if (__0xE7D267EC6CA966C3 == null) __0xE7D267EC6CA966C3 = (Function) native.GetObjectProperty("_0xE7D267EC6CA966C3");
			return __0xE7D267EC6CA966C3.Call(native);
		}

		/// <summary>
		/// Example for VB.NET
		/// Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
		/// </summary>
		/// <returns>Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.</returns>
		public int GetInteriorAtCoords(double x, double y, double z)
		{
			if (getInteriorAtCoords == null) getInteriorAtCoords = (Function) native.GetObjectProperty("getInteriorAtCoords");
			return (int) getInteriorAtCoords.Call(native, x, y, z);
		}

		public void AddPickupToInteriorRoomByName(int pickup, string roomName)
		{
			if (addPickupToInteriorRoomByName == null) addPickupToInteriorRoomByName = (Function) native.GetObjectProperty("addPickupToInteriorRoomByName");
			addPickupToInteriorRoomByName.Call(native, pickup, roomName);
		}

		public void PinInteriorInMemory(int interior)
		{
			if (pinInteriorInMemory == null) pinInteriorInMemory = (Function) native.GetObjectProperty("pinInteriorInMemory");
			pinInteriorInMemory.Call(native, interior);
		}

		/// <summary>
		/// Does something similar to INTERIOR::DISABLE_INTERIOR.
		/// You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.
		/// </summary>
		public void UnpinInterior(int interior)
		{
			if (unpinInterior == null) unpinInterior = (Function) native.GetObjectProperty("unpinInterior");
			unpinInterior.Call(native, interior);
		}

		public bool IsInteriorReady(int interior)
		{
			if (isInteriorReady == null) isInteriorReady = (Function) native.GetObjectProperty("isInteriorReady");
			return (bool) isInteriorReady.Call(native, interior);
		}

		/// <summary>
		/// Only used once in the entire game scripts.
		/// Does not actually return anything.
		/// </summary>
		public object _0x4C2330E61D3DEB56(int interior)
		{
			if (__0x4C2330E61D3DEB56 == null) __0x4C2330E61D3DEB56 = (Function) native.GetObjectProperty("_0x4C2330E61D3DEB56");
			return __0x4C2330E61D3DEB56.Call(native, interior);
		}

		/// <summary>
		/// Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
		/// Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
		/// Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
		/// </summary>
		/// <returns>Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.</returns>
		public int GetInteriorAtCoordsWithType(double x, double y, double z, string interiorType)
		{
			if (getInteriorAtCoordsWithType == null) getInteriorAtCoordsWithType = (Function) native.GetObjectProperty("getInteriorAtCoordsWithType");
			return (int) getInteriorAtCoordsWithType.Call(native, x, y, z, interiorType);
		}

		/// <summary>
		/// Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
		/// </summary>
		public int GetInteriorAtCoordsWithTypehash(double x, double y, double z, int typeHash)
		{
			if (getInteriorAtCoordsWithTypehash == null) getInteriorAtCoordsWithTypehash = (Function) native.GetObjectProperty("getInteriorAtCoordsWithTypehash");
			return (int) getInteriorAtCoordsWithTypehash.Call(native, x, y, z, typeHash);
		}

		public void _0x483ACA1176CA93F1()
		{
			if (__0x483ACA1176CA93F1 == null) __0x483ACA1176CA93F1 = (Function) native.GetObjectProperty("_0x483ACA1176CA93F1");
			__0x483ACA1176CA93F1.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the coords are colliding with the outdoors, and false if they collide with an interior.</returns>
		public bool AreCoordsCollidingWithExterior(double x, double y, double z)
		{
			if (areCoordsCollidingWithExterior == null) areCoordsCollidingWithExterior = (Function) native.GetObjectProperty("areCoordsCollidingWithExterior");
			return (bool) areCoordsCollidingWithExterior.Call(native, x, y, z);
		}

		public int GetInteriorFromCollision(double x, double y, double z)
		{
			if (getInteriorFromCollision == null) getInteriorFromCollision = (Function) native.GetObjectProperty("getInteriorFromCollision");
			return (int) getInteriorFromCollision.Call(native, x, y, z);
		}

		public void _0x7ECDF98587E92DEC(object p0)
		{
			if (__0x7ECDF98587E92DEC == null) __0x7ECDF98587E92DEC = (Function) native.GetObjectProperty("_0x7ECDF98587E92DEC");
			__0x7ECDF98587E92DEC.Call(native, p0);
		}

		/// <summary>
		/// More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
		/// </summary>
		public void ActivateInteriorEntitySet(int interior, string entitySetName)
		{
			if (activateInteriorEntitySet == null) activateInteriorEntitySet = (Function) native.GetObjectProperty("activateInteriorEntitySet");
			activateInteriorEntitySet.Call(native, interior, entitySetName);
		}

		public void DeactivateInteriorEntitySet(int interior, string entitySetName)
		{
			if (deactivateInteriorEntitySet == null) deactivateInteriorEntitySet = (Function) native.GetObjectProperty("deactivateInteriorEntitySet");
			deactivateInteriorEntitySet.Call(native, interior, entitySetName);
		}

		public bool IsInteriorEntitySetActive(int interior, string entitySetName)
		{
			if (isInteriorEntitySetActive == null) isInteriorEntitySetActive = (Function) native.GetObjectProperty("isInteriorEntitySetActive");
			return (bool) isInteriorEntitySetActive.Call(native, interior, entitySetName);
		}

		public void SetInteriorEntitySetColor(int interior, string entitySetName, int color)
		{
			if (setInteriorEntitySetColor == null) setInteriorEntitySetColor = (Function) native.GetObjectProperty("setInteriorEntitySetColor");
			setInteriorEntitySetColor.Call(native, interior, entitySetName, color);
		}

		public void RefreshInterior(int interior)
		{
			if (refreshInterior == null) refreshInterior = (Function) native.GetObjectProperty("refreshInterior");
			refreshInterior.Call(native, interior);
		}

		/// <summary>
		/// This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
		/// More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
		/// </summary>
		public void EnableExteriorCullModelThisFrame(int mapObjectHash)
		{
			if (enableExteriorCullModelThisFrame == null) enableExteriorCullModelThisFrame = (Function) native.GetObjectProperty("enableExteriorCullModelThisFrame");
			enableExteriorCullModelThisFrame.Call(native, mapObjectHash);
		}

		public void EnableScriptCullModelThisFrame(object p0)
		{
			if (enableScriptCullModelThisFrame == null) enableScriptCullModelThisFrame = (Function) native.GetObjectProperty("enableScriptCullModelThisFrame");
			enableScriptCullModelThisFrame.Call(native, p0);
		}

		/// <summary>
		/// Example:
		/// This removes the interior from the strip club and when trying to walk inside the player just falls:
		/// INTERIOR::DISABLE_INTERIOR(118018, true);
		/// </summary>
		public void DisableInterior(int interior, bool toggle)
		{
			if (disableInterior == null) disableInterior = (Function) native.GetObjectProperty("disableInterior");
			disableInterior.Call(native, interior, toggle);
		}

		public bool IsInteriorDisabled(int interior)
		{
			if (isInteriorDisabled == null) isInteriorDisabled = (Function) native.GetObjectProperty("isInteriorDisabled");
			return (bool) isInteriorDisabled.Call(native, interior);
		}

		/// <summary>
		/// Does something similar to INTERIOR::DISABLE_INTERIOR
		/// </summary>
		public void CapInterior(int interior, bool toggle)
		{
			if (capInterior == null) capInterior = (Function) native.GetObjectProperty("capInterior");
			capInterior.Call(native, interior, toggle);
		}

		public bool IsInteriorCapped(int interior)
		{
			if (isInteriorCapped == null) isInteriorCapped = (Function) native.GetObjectProperty("isInteriorCapped");
			return (bool) isInteriorCapped.Call(native, interior);
		}

		/// <summary>
		/// DISABLE_*
		/// </summary>
		public void _0x9E6542F0CE8E70A3(bool toggle)
		{
			if (__0x9E6542F0CE8E70A3 == null) __0x9E6542F0CE8E70A3 = (Function) native.GetObjectProperty("_0x9E6542F0CE8E70A3");
			__0x9E6542F0CE8E70A3.Call(native, toggle);
		}

		/// <summary>
		/// Jenkins hash _might_ be 0xFC227584.
		/// </summary>
		public void _0x7241CCB7D020DB69(int entity, bool toggle)
		{
			if (__0x7241CCB7D020DB69 == null) __0x7241CCB7D020DB69 = (Function) native.GetObjectProperty("_0x7241CCB7D020DB69");
			__0x7241CCB7D020DB69.Call(native, entity, toggle);
		}

		public int CreateItemset(bool p0)
		{
			if (createItemset == null) createItemset = (Function) native.GetObjectProperty("createItemset");
			return (int) createItemset.Call(native, p0);
		}

		public void DestroyItemset(object p0)
		{
			if (destroyItemset == null) destroyItemset = (Function) native.GetObjectProperty("destroyItemset");
			destroyItemset.Call(native, p0);
		}

		public bool IsItemsetValid(object p0)
		{
			if (isItemsetValid == null) isItemsetValid = (Function) native.GetObjectProperty("isItemsetValid");
			return (bool) isItemsetValid.Call(native, p0);
		}

		public bool AddToItemset(object p0, object p1)
		{
			if (addToItemset == null) addToItemset = (Function) native.GetObjectProperty("addToItemset");
			return (bool) addToItemset.Call(native, p0, p1);
		}

		public void RemoveFromItemset(object p0, object p1)
		{
			if (removeFromItemset == null) removeFromItemset = (Function) native.GetObjectProperty("removeFromItemset");
			removeFromItemset.Call(native, p0, p1);
		}

		public object GetItemsetSize(int x)
		{
			if (getItemsetSize == null) getItemsetSize = (Function) native.GetObjectProperty("getItemsetSize");
			return getItemsetSize.Call(native, x);
		}

		public object GetIndexedItemInItemset(object p0, object p1)
		{
			if (getIndexedItemInItemset == null) getIndexedItemInItemset = (Function) native.GetObjectProperty("getIndexedItemInItemset");
			return getIndexedItemInItemset.Call(native, p0, p1);
		}

		public bool IsInItemset(object p0, object p1)
		{
			if (isInItemset == null) isInItemset = (Function) native.GetObjectProperty("isInItemset");
			return (bool) isInItemset.Call(native, p0, p1);
		}

		public void CleanItemset(object p0)
		{
			if (cleanItemset == null) cleanItemset = (Function) native.GetObjectProperty("cleanItemset");
			cleanItemset.Call(native, p0);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public int _0xF2CA003F167E21D2()
		{
			if (__0xF2CA003F167E21D2 == null) __0xF2CA003F167E21D2 = (Function) native.GetObjectProperty("_0xF2CA003F167E21D2");
			return (int) __0xF2CA003F167E21D2.Call(native);
		}

		public bool LoadingscreenGetLoadFreemode()
		{
			if (loadingscreenGetLoadFreemode == null) loadingscreenGetLoadFreemode = (Function) native.GetObjectProperty("loadingscreenGetLoadFreemode");
			return (bool) loadingscreenGetLoadFreemode.Call(native);
		}

		public void LoadingscreenSetLoadFreemode(bool toggle)
		{
			if (loadingscreenSetLoadFreemode == null) loadingscreenSetLoadFreemode = (Function) native.GetObjectProperty("loadingscreenSetLoadFreemode");
			loadingscreenSetLoadFreemode.Call(native, toggle);
		}

		public bool LoadingscreenGetLoadFreemodeWithEventName()
		{
			if (loadingscreenGetLoadFreemodeWithEventName == null) loadingscreenGetLoadFreemodeWithEventName = (Function) native.GetObjectProperty("loadingscreenGetLoadFreemodeWithEventName");
			return (bool) loadingscreenGetLoadFreemodeWithEventName.Call(native);
		}

		public void LoadingscreenSetLoadFreemodeWithEventName(bool toggle)
		{
			if (loadingscreenSetLoadFreemodeWithEventName == null) loadingscreenSetLoadFreemodeWithEventName = (Function) native.GetObjectProperty("loadingscreenSetLoadFreemodeWithEventName");
			loadingscreenSetLoadFreemodeWithEventName.Call(native, toggle);
		}

		public bool LoadingscreenIsLoadingFreemode()
		{
			if (loadingscreenIsLoadingFreemode == null) loadingscreenIsLoadingFreemode = (Function) native.GetObjectProperty("loadingscreenIsLoadingFreemode");
			return (bool) loadingscreenIsLoadingFreemode.Call(native);
		}

		public void LoadingscreenSetIsLoadingFreemode(bool toggle)
		{
			if (loadingscreenSetIsLoadingFreemode == null) loadingscreenSetIsLoadingFreemode = (Function) native.GetObjectProperty("loadingscreenSetIsLoadingFreemode");
			loadingscreenSetIsLoadingFreemode.Call(native, toggle);
		}

		public void _0xFA1E0E893D915215(bool toggle)
		{
			if (__0xFA1E0E893D915215 == null) __0xFA1E0E893D915215 = (Function) native.GetObjectProperty("_0xFA1E0E893D915215");
			__0xFA1E0E893D915215.Call(native, toggle);
		}

		public int LocalizationGetSystemLanguage()
		{
			if (localizationGetSystemLanguage == null) localizationGetSystemLanguage = (Function) native.GetObjectProperty("localizationGetSystemLanguage");
			return (int) localizationGetSystemLanguage.Call(native);
		}

		/// <summary>
		/// american = 0
		/// french = 1
		/// german = 2
		/// italian =3
		/// spanish = 4
		/// portuguese = 5
		/// polish = 6
		/// russian = 7
		/// korean = 8
		/// See NativeDB for reference: http://natives.altv.mp/#/0x2BDD44CC428A7EAE
		/// </summary>
		public int GetCurrentLanguage()
		{
			if (getCurrentLanguage == null) getCurrentLanguage = (Function) native.GetObjectProperty("getCurrentLanguage");
			return (int) getCurrentLanguage.Call(native);
		}

		/// <summary>
		/// english: 12
		/// french = 7
		/// german = 22
		/// italian = 21
		/// japanese = 9
		/// korean = 17
		/// portuguese = 16
		/// spanish = 10
		/// russian = 25
		/// </summary>
		/// <returns>Returns the user's defined language as ID</returns>
		public int LocalizationGetUserLanguage()
		{
			if (localizationGetUserLanguage == null) localizationGetUserLanguage = (Function) native.GetObjectProperty("localizationGetUserLanguage");
			return (int) localizationGetUserLanguage.Call(native);
		}

		public int GetAllocatedStackSize()
		{
			if (getAllocatedStackSize == null) getAllocatedStackSize = (Function) native.GetObjectProperty("getAllocatedStackSize");
			return (int) getAllocatedStackSize.Call(native);
		}

		public int GetNumberOfFreeStacksOfThisSize(int stackSize)
		{
			if (getNumberOfFreeStacksOfThisSize == null) getNumberOfFreeStacksOfThisSize = (Function) native.GetObjectProperty("getNumberOfFreeStacksOfThisSize");
			return (int) getNumberOfFreeStacksOfThisSize.Call(native, stackSize);
		}

		public void SetRandomSeed(int seed)
		{
			if (setRandomSeed == null) setRandomSeed = (Function) native.GetObjectProperty("setRandomSeed");
			setRandomSeed.Call(native, seed);
		}

		/// <summary>
		/// Maximum value is 1.
		/// At a value of 0 the game will still run at a minimum time scale.
		/// Slow Motion 1: 0.6
		/// Slow Motion 2: 0.4
		/// Slow Motion 3: 0.2
		/// </summary>
		public void SetTimeScale(double timeScale)
		{
			if (setTimeScale == null) setTimeScale = (Function) native.GetObjectProperty("setTimeScale");
			setTimeScale.Call(native, timeScale);
		}

		/// <summary>
		/// If true, the player can't save the game.
		/// If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
		/// ^ also, if the mission flag is already set, the function does nothing at all
		/// </summary>
		public void SetMissionFlag(bool toggle)
		{
			if (setMissionFlag == null) setMissionFlag = (Function) native.GetObjectProperty("setMissionFlag");
			setMissionFlag.Call(native, toggle);
		}

		public bool GetMissionFlag()
		{
			if (getMissionFlag == null) getMissionFlag = (Function) native.GetObjectProperty("getMissionFlag");
			return (bool) getMissionFlag.Call(native);
		}

		/// <summary>
		/// If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
		/// Does nothing if the mission flag is set.
		/// </summary>
		public void SetRandomEventFlag(bool toggle)
		{
			if (setRandomEventFlag == null) setRandomEventFlag = (Function) native.GetObjectProperty("setRandomEventFlag");
			setRandomEventFlag.Call(native, toggle);
		}

		public bool GetRandomEventFlag()
		{
			if (getRandomEventFlag == null) getRandomEventFlag = (Function) native.GetObjectProperty("getRandomEventFlag");
			return (bool) getRandomEventFlag.Call(native);
		}

		/// <summary>
		/// GET_C*
		/// </summary>
		/// <returns>Returns pointer to an empty string.</returns>
		public string GetGlobalCharBuffer()
		{
			if (getGlobalCharBuffer == null) getGlobalCharBuffer = (Function) native.GetObjectProperty("getGlobalCharBuffer");
			return (string) getGlobalCharBuffer.Call(native);
		}

		/// <summary>
		/// Does nothing (it's a nullsub). Seems to be PS4 specific.
		/// </summary>
		public void _0x4DCDF92BF64236CD(string p0, string p1)
		{
			if (__0x4DCDF92BF64236CD == null) __0x4DCDF92BF64236CD = (Function) native.GetObjectProperty("_0x4DCDF92BF64236CD");
			__0x4DCDF92BF64236CD.Call(native, p0, p1);
		}

		/// <summary>
		/// Does nothing (it's a nullsub). Seems to be PS4 specific.
		/// </summary>
		public void _0x31125FD509D9043F(string p0)
		{
			if (__0x31125FD509D9043F == null) __0x31125FD509D9043F = (Function) native.GetObjectProperty("_0x31125FD509D9043F");
			__0x31125FD509D9043F.Call(native, p0);
		}

		/// <summary>
		/// Does nothing (it's a nullsub). Seems to be PS4 specific.
		/// </summary>
		public void _0xEBD3205A207939ED(string p0)
		{
			if (__0xEBD3205A207939ED == null) __0xEBD3205A207939ED = (Function) native.GetObjectProperty("_0xEBD3205A207939ED");
			__0xEBD3205A207939ED.Call(native, p0);
		}

		/// <summary>
		/// Does nothing (it's a nullsub). Seems to be PS4 specific.
		/// </summary>
		public void _0x97E7E2C04245115B(object p0)
		{
			if (__0x97E7E2C04245115B == null) __0x97E7E2C04245115B = (Function) native.GetObjectProperty("_0x97E7E2C04245115B");
			__0x97E7E2C04245115B.Call(native, p0);
		}

		/// <summary>
		/// Does nothing (it's a nullsub). Seems to be PS4 specific.
		/// </summary>
		public void _0xEB078CA2B5E82ADD(string p0, string p1)
		{
			if (__0xEB078CA2B5E82ADD == null) __0xEB078CA2B5E82ADD = (Function) native.GetObjectProperty("_0xEB078CA2B5E82ADD");
			__0xEB078CA2B5E82ADD.Call(native, p0, p1);
		}

		/// <summary>
		/// Does nothing (it's a nullsub). Seems to be PS4 specific.
		/// </summary>
		public void _0x703CC7F60CBB2B57(string p0)
		{
			if (__0x703CC7F60CBB2B57 == null) __0x703CC7F60CBB2B57 = (Function) native.GetObjectProperty("_0x703CC7F60CBB2B57");
			__0x703CC7F60CBB2B57.Call(native, p0);
		}

		/// <summary>
		/// Does nothing (it's a nullsub). Seems to be PS4 specific.
		/// </summary>
		public void _0x8951EB9C6906D3C8()
		{
			if (__0x8951EB9C6906D3C8 == null) __0x8951EB9C6906D3C8 = (Function) native.GetObjectProperty("_0x8951EB9C6906D3C8");
			__0x8951EB9C6906D3C8.Call(native);
		}

		/// <summary>
		/// Does nothing (it's a nullsub). Seems to be PS4 specific.
		/// </summary>
		public void _0xBA4B8D83BDC75551(string p0)
		{
			if (__0xBA4B8D83BDC75551 == null) __0xBA4B8D83BDC75551 = (Function) native.GetObjectProperty("_0xBA4B8D83BDC75551");
			__0xBA4B8D83BDC75551.Call(native, p0);
		}

		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public bool HasResumedFromSuspend()
		{
			if (hasResumedFromSuspend == null) hasResumedFromSuspend = (Function) native.GetObjectProperty("hasResumedFromSuspend");
			return (bool) hasResumedFromSuspend.Call(native);
		}

		/// <summary>
		/// Sets GtaThread+0x14A
		/// SET_S*
		/// </summary>
		public void _0x65D2EBB47E1CEC21(bool toggle)
		{
			if (__0x65D2EBB47E1CEC21 == null) __0x65D2EBB47E1CEC21 = (Function) native.GetObjectProperty("_0x65D2EBB47E1CEC21");
			__0x65D2EBB47E1CEC21.Call(native, toggle);
		}

		/// <summary>
		/// Sets bit 3 in GtaThread+0x150
		/// SET_T*
		/// </summary>
		public void _0x6F2135B6129620C1(bool toggle)
		{
			if (__0x6F2135B6129620C1 == null) __0x6F2135B6129620C1 = (Function) native.GetObjectProperty("_0x6F2135B6129620C1");
			__0x6F2135B6129620C1.Call(native, toggle);
		}

		/// <summary>
		/// I*
		/// </summary>
		public void _0x8D74E26F54B4E5C3(string p0)
		{
			if (__0x8D74E26F54B4E5C3 == null) __0x8D74E26F54B4E5C3 = (Function) native.GetObjectProperty("_0x8D74E26F54B4E5C3");
			__0x8D74E26F54B4E5C3.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) GetBaseElementMetadata(object p0, object p1, object p2, bool p3)
		{
			if (getBaseElementMetadata == null) getBaseElementMetadata = (Function) native.GetObjectProperty("getBaseElementMetadata");
			var results = (Array) getBaseElementMetadata.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		public int GetPrevWeatherTypeHashName()
		{
			if (getPrevWeatherTypeHashName == null) getPrevWeatherTypeHashName = (Function) native.GetObjectProperty("getPrevWeatherTypeHashName");
			return (int) getPrevWeatherTypeHashName.Call(native);
		}

		public int GetNextWeatherTypeHashName()
		{
			if (getNextWeatherTypeHashName == null) getNextWeatherTypeHashName = (Function) native.GetObjectProperty("getNextWeatherTypeHashName");
			return (int) getNextWeatherTypeHashName.Call(native);
		}

		public bool IsPrevWeatherType(string weatherType)
		{
			if (isPrevWeatherType == null) isPrevWeatherType = (Function) native.GetObjectProperty("isPrevWeatherType");
			return (bool) isPrevWeatherType.Call(native, weatherType);
		}

		public bool IsNextWeatherType(string weatherType)
		{
			if (isNextWeatherType == null) isNextWeatherType = (Function) native.GetObjectProperty("isNextWeatherType");
			return (bool) isNextWeatherType.Call(native, weatherType);
		}

		/// <summary>
		/// The following weatherTypes are used in the scripts:
		/// "CLEAR"
		/// "EXTRASUNNY"
		/// "CLOUDS"
		/// "OVERCAST"
		/// "RAIN"
		/// "CLEARING"
		/// "THUNDER"
		/// "SMOG"
		/// See NativeDB for reference: http://natives.altv.mp/#/0x704983DF373B198F
		/// </summary>
		public void SetWeatherTypePersist(string weatherType)
		{
			if (setWeatherTypePersist == null) setWeatherTypePersist = (Function) native.GetObjectProperty("setWeatherTypePersist");
			setWeatherTypePersist.Call(native, weatherType);
		}

		/// <summary>
		/// The following weatherTypes are used in the scripts:
		/// "CLEAR"
		/// "EXTRASUNNY"
		/// "CLOUDS"
		/// "OVERCAST"
		/// "RAIN"
		/// "CLEARING"
		/// "THUNDER"
		/// "SMOG"
		/// See NativeDB for reference: http://natives.altv.mp/#/0xED712CA327900C8A
		/// </summary>
		public void SetWeatherTypeNowPersist(string weatherType)
		{
			if (setWeatherTypeNowPersist == null) setWeatherTypeNowPersist = (Function) native.GetObjectProperty("setWeatherTypeNowPersist");
			setWeatherTypeNowPersist.Call(native, weatherType);
		}

		/// <summary>
		/// The following weatherTypes are used in the scripts:
		/// "CLEAR"
		/// "EXTRASUNNY"
		/// "CLOUDS"
		/// "OVERCAST"
		/// "RAIN"
		/// "CLEARING"
		/// "THUNDER"
		/// "SMOG"
		/// See NativeDB for reference: http://natives.altv.mp/#/0x29B487C359E19889
		/// </summary>
		public void SetWeatherTypeNow(string weatherType)
		{
			if (setWeatherTypeNow == null) setWeatherTypeNow = (Function) native.GetObjectProperty("setWeatherTypeNow");
			setWeatherTypeNow.Call(native, weatherType);
		}

		public void SetWeatherTypeOvertimePersist(string weatherType, double time)
		{
			if (setWeatherTypeOvertimePersist == null) setWeatherTypeOvertimePersist = (Function) native.GetObjectProperty("setWeatherTypeOvertimePersist");
			setWeatherTypeOvertimePersist.Call(native, weatherType, time);
		}

		public void SetRandomWeatherType()
		{
			if (setRandomWeatherType == null) setRandomWeatherType = (Function) native.GetObjectProperty("setRandomWeatherType");
			setRandomWeatherType.Call(native);
		}

		public void ClearWeatherTypePersist()
		{
			if (clearWeatherTypePersist == null) clearWeatherTypePersist = (Function) native.GetObjectProperty("clearWeatherTypePersist");
			clearWeatherTypePersist.Call(native);
		}

		public void _0x0CF97F497FE7D048(object p0)
		{
			if (__0x0CF97F497FE7D048 == null) __0x0CF97F497FE7D048 = (Function) native.GetObjectProperty("_0x0CF97F497FE7D048");
			__0x0CF97F497FE7D048.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, double></returns>
		public (object, int, int, double) GetWeatherTypeTransition(int weatherType1, int weatherType2, double percentWeather2)
		{
			if (getWeatherTypeTransition == null) getWeatherTypeTransition = (Function) native.GetObjectProperty("getWeatherTypeTransition");
			var results = (Array) getWeatherTypeTransition.Call(native, weatherType1, weatherType2, percentWeather2);
			return (results[0], (int) results[1], (int) results[2], (double) results[3]);
		}

		/// <summary>
		/// Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
		/// execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
		/// Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
		/// CLEAR  0x36A83D84
		/// EXTRASUNNY  0x97AA0A79
		/// CLOUDS  0x30FDAF5C
		/// OVERCAST    0xBB898D2D
		/// RAIN    0x54A69840
		/// CLEARING    0x6DB1A50D
		/// See NativeDB for reference: http://natives.altv.mp/#/0x578C752848ECFA0C
		/// </summary>
		public void SetWeatherTypeTransition(int weatherType1, int weatherType2, double percentWeather2)
		{
			if (setWeatherTypeTransition == null) setWeatherTypeTransition = (Function) native.GetObjectProperty("setWeatherTypeTransition");
			setWeatherTypeTransition.Call(native, weatherType1, weatherType2, percentWeather2);
		}

		/// <summary>
		/// Appears to have an optional bool parameter that is unused in the scripts.
		/// If you pass true, something will be set to zero.
		/// </summary>
		public void SetOverrideWeather(string weatherType)
		{
			if (setOverrideWeather == null) setOverrideWeather = (Function) native.GetObjectProperty("setOverrideWeather");
			setOverrideWeather.Call(native, weatherType);
		}

		public void ClearOverrideWeather()
		{
			if (clearOverrideWeather == null) clearOverrideWeather = (Function) native.GetObjectProperty("clearOverrideWeather");
			clearOverrideWeather.Call(native);
		}

		public void _0xB8F87EAD7533B176(double p0)
		{
			if (__0xB8F87EAD7533B176 == null) __0xB8F87EAD7533B176 = (Function) native.GetObjectProperty("_0xB8F87EAD7533B176");
			__0xB8F87EAD7533B176.Call(native, p0);
		}

		public void _0xC3EAD29AB273ECE8(double p0)
		{
			if (__0xC3EAD29AB273ECE8 == null) __0xC3EAD29AB273ECE8 = (Function) native.GetObjectProperty("_0xC3EAD29AB273ECE8");
			__0xC3EAD29AB273ECE8.Call(native, p0);
		}

		public void _0xA7A1127490312C36(double p0)
		{
			if (__0xA7A1127490312C36 == null) __0xA7A1127490312C36 = (Function) native.GetObjectProperty("_0xA7A1127490312C36");
			__0xA7A1127490312C36.Call(native, p0);
		}

		public void _0x31727907B2C43C55(double p0)
		{
			if (__0x31727907B2C43C55 == null) __0x31727907B2C43C55 = (Function) native.GetObjectProperty("_0x31727907B2C43C55");
			__0x31727907B2C43C55.Call(native, p0);
		}

		public void _0x405591EC8FD9096D(double p0)
		{
			if (__0x405591EC8FD9096D == null) __0x405591EC8FD9096D = (Function) native.GetObjectProperty("_0x405591EC8FD9096D");
			__0x405591EC8FD9096D.Call(native, p0);
		}

		public void _0xF751B16FB32ABC1D(double p0)
		{
			if (__0xF751B16FB32ABC1D == null) __0xF751B16FB32ABC1D = (Function) native.GetObjectProperty("_0xF751B16FB32ABC1D");
			__0xF751B16FB32ABC1D.Call(native, p0);
		}

		public void _0xB3E6360DDE733E82(double p0)
		{
			if (__0xB3E6360DDE733E82 == null) __0xB3E6360DDE733E82 = (Function) native.GetObjectProperty("_0xB3E6360DDE733E82");
			__0xB3E6360DDE733E82.Call(native, p0);
		}

		public void _0x7C9C0B1EEB1F9072(double p0)
		{
			if (__0x7C9C0B1EEB1F9072 == null) __0x7C9C0B1EEB1F9072 = (Function) native.GetObjectProperty("_0x7C9C0B1EEB1F9072");
			__0x7C9C0B1EEB1F9072.Call(native, p0);
		}

		public void _0x6216B116083A7CB4(double p0)
		{
			if (__0x6216B116083A7CB4 == null) __0x6216B116083A7CB4 = (Function) native.GetObjectProperty("_0x6216B116083A7CB4");
			__0x6216B116083A7CB4.Call(native, p0);
		}

		public void _0x9F5E6BB6B34540DA(double p0)
		{
			if (__0x9F5E6BB6B34540DA == null) __0x9F5E6BB6B34540DA = (Function) native.GetObjectProperty("_0x9F5E6BB6B34540DA");
			__0x9F5E6BB6B34540DA.Call(native, p0);
		}

		public void _0xB9854DFDE0D833D6(double p0)
		{
			if (__0xB9854DFDE0D833D6 == null) __0xB9854DFDE0D833D6 = (Function) native.GetObjectProperty("_0xB9854DFDE0D833D6");
			__0xB9854DFDE0D833D6.Call(native, p0);
		}

		/// <summary>
		/// This seems to edit the water wave, intensity around your current location.
		/// 0.0f = Normal
		/// 1.0f = So Calm and Smooth, a boat will stay still.
		/// 3.0f = Really Intense.
		/// </summary>
		public void _0xC54A08C85AE4D410(double p0)
		{
			if (__0xC54A08C85AE4D410 == null) __0xC54A08C85AE4D410 = (Function) native.GetObjectProperty("_0xC54A08C85AE4D410");
			__0xC54A08C85AE4D410.Call(native, p0);
		}

		public void _0xA8434F1DFF41D6E7(double p0)
		{
			if (__0xA8434F1DFF41D6E7 == null) __0xA8434F1DFF41D6E7 = (Function) native.GetObjectProperty("_0xA8434F1DFF41D6E7");
			__0xA8434F1DFF41D6E7.Call(native, p0);
		}

		public void _0xC3C221ADDDE31A11(double p0)
		{
			if (__0xC3C221ADDDE31A11 == null) __0xC3C221ADDDE31A11 = (Function) native.GetObjectProperty("_0xC3C221ADDDE31A11");
			__0xC3C221ADDDE31A11.Call(native, p0);
		}

		/// <summary>
		/// Sets the the raw wind speed value.
		/// </summary>
		public void SetWind(double speed)
		{
			if (setWind == null) setWind = (Function) native.GetObjectProperty("setWind");
			setWind.Call(native, speed);
		}

		/// <summary>
		/// Using this native will clamp the wind speed value to a range of 0.0- 12.0. Using SET_WIND sets the same value but without the restriction.
		/// </summary>
		public void SetWindSpeed(double speed)
		{
			if (setWindSpeed == null) setWindSpeed = (Function) native.GetObjectProperty("setWindSpeed");
			setWindSpeed.Call(native, speed);
		}

		public double GetWindSpeed()
		{
			if (getWindSpeed == null) getWindSpeed = (Function) native.GetObjectProperty("getWindSpeed");
			return (double) getWindSpeed.Call(native);
		}

		public void SetWindDirection(double direction)
		{
			if (setWindDirection == null) setWindDirection = (Function) native.GetObjectProperty("setWindDirection");
			setWindDirection.Call(native, direction);
		}

		public Vector3 GetWindDirection()
		{
			if (getWindDirection == null) getWindDirection = (Function) native.GetObjectProperty("getWindDirection");
			return JSObjectToVector3(getWindDirection.Call(native));
		}

		public void SetRainFxIntensity(double intensity)
		{
			if (setRainFxIntensity == null) setRainFxIntensity = (Function) native.GetObjectProperty("setRainFxIntensity");
			setRainFxIntensity.Call(native, intensity);
		}

		public double GetRainLevel()
		{
			if (getRainLevel == null) getRainLevel = (Function) native.GetObjectProperty("getRainLevel");
			return (double) getRainLevel.Call(native);
		}

		public double GetSnowLevel()
		{
			if (getSnowLevel == null) getSnowLevel = (Function) native.GetObjectProperty("getSnowLevel");
			return (double) getSnowLevel.Call(native);
		}

		/// <summary>
		/// creates single lightning+thunder at random position
		/// </summary>
		public void ForceLightningFlash()
		{
			if (forceLightningFlash == null) forceLightningFlash = (Function) native.GetObjectProperty("forceLightningFlash");
			forceLightningFlash.Call(native);
		}

		/// <summary>
		/// Found in the scripts:
		/// GAMEPLAY::_02DEAAC8F8EA7FE7("");
		/// </summary>
		public void _0x02DEAAC8F8EA7FE7(string p0)
		{
			if (__0x02DEAAC8F8EA7FE7 == null) __0x02DEAAC8F8EA7FE7 = (Function) native.GetObjectProperty("_0x02DEAAC8F8EA7FE7");
			__0x02DEAAC8F8EA7FE7.Call(native, p0);
		}

		/// <summary>
		/// Found in the scripts:
		/// GAMEPLAY::_11B56FBBF7224868("CONTRAILS");
		/// </summary>
		public void PreloadCloudHat(string name)
		{
			if (preloadCloudHat == null) preloadCloudHat = (Function) native.GetObjectProperty("preloadCloudHat");
			preloadCloudHat.Call(native, name);
		}

		public void LoadCloudHat(string name, double transitionTime)
		{
			if (loadCloudHat == null) loadCloudHat = (Function) native.GetObjectProperty("loadCloudHat");
			loadCloudHat.Call(native, name, transitionTime);
		}

		/// <summary>
		/// Called 4 times in the b617d scripts:
		/// GAMEPLAY::_A74802FB8D0B7814("CONTRAILS", 0);
		/// </summary>
		public void UnloadCloudHat(string name, double p1)
		{
			if (unloadCloudHat == null) unloadCloudHat = (Function) native.GetObjectProperty("unloadCloudHat");
			unloadCloudHat.Call(native, name, p1);
		}

		public void ClearCloudHat()
		{
			if (clearCloudHat == null) clearCloudHat = (Function) native.GetObjectProperty("clearCloudHat");
			clearCloudHat.Call(native);
		}

		public void SetCloudHatOpacity(double opacity)
		{
			if (setCloudHatOpacity == null) setCloudHatOpacity = (Function) native.GetObjectProperty("setCloudHatOpacity");
			setCloudHatOpacity.Call(native, opacity);
		}

		public double GetCloudHatOpacity()
		{
			if (getCloudHatOpacity == null) getCloudHatOpacity = (Function) native.GetObjectProperty("getCloudHatOpacity");
			return (double) getCloudHatOpacity.Call(native);
		}

		public int GetGameTimer()
		{
			if (getGameTimer == null) getGameTimer = (Function) native.GetObjectProperty("getGameTimer");
			return (int) getGameTimer.Call(native);
		}

		public double GetFrameTime()
		{
			if (getFrameTime == null) getFrameTime = (Function) native.GetObjectProperty("getFrameTime");
			return (double) getFrameTime.Call(native);
		}

		public double GetBenchmarkTime()
		{
			if (getBenchmarkTime == null) getBenchmarkTime = (Function) native.GetObjectProperty("getBenchmarkTime");
			return (double) getBenchmarkTime.Call(native);
		}

		public int GetFrameCount()
		{
			if (getFrameCount == null) getFrameCount = (Function) native.GetObjectProperty("getFrameCount");
			return (int) getFrameCount.Call(native);
		}

		public double GetRandomFloatInRange(double startRange, double endRange)
		{
			if (getRandomFloatInRange == null) getRandomFloatInRange = (Function) native.GetObjectProperty("getRandomFloatInRange");
			return (double) getRandomFloatInRange.Call(native, startRange, endRange);
		}

		public int GetRandomIntInRange(int startRange, int endRange)
		{
			if (getRandomIntInRange == null) getRandomIntInRange = (Function) native.GetObjectProperty("getRandomIntInRange");
			return (int) getRandomIntInRange.Call(native, startRange, endRange);
		}

		public int GetRandomIntInRange2(int startRange, int endRange)
		{
			if (getRandomIntInRange2 == null) getRandomIntInRange2 = (Function) native.GetObjectProperty("getRandomIntInRange2");
			return (int) getRandomIntInRange2.Call(native, startRange, endRange);
		}

		/// <summary>
		/// Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
		/// x: Position on the X-axis to get ground elevation at.
		/// y: Position on the Y-axis to get ground elevation at.
		/// z: Position on the Z-axis to get ground elevation at.
		/// groundZ: The ground elevation at the specified position.
		/// unk: Nearly always 0, very rarely 1 in the scripts.
		/// </summary>
		/// <param name="x">Position on the X-axis to get ground elevation at.</param>
		/// <param name="y">Position on the Y-axis to get ground elevation at.</param>
		/// <param name="z">groundZ: The ground elevation at the specified position.</param>
		/// <param name="groundZ">The ground elevation at the specified position.</param>
		/// <param name="unk">Nearly always 0, very rarely 1 in the scripts.</param>
		/// <returns>Array<bool, double></returns>
		public (bool, double) GetGroundZFor3dCoord(double x, double y, double z, double groundZ, bool unk, bool p5)
		{
			if (getGroundZFor3dCoord == null) getGroundZFor3dCoord = (Function) native.GetObjectProperty("getGroundZFor3dCoord");
			var results = (Array) getGroundZFor3dCoord.Call(native, x, y, z, groundZ, unk, p5);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double, Vector3></returns>
		public (bool, double, Vector3) GetGroundZAndNormalFor3dCoord(double x, double y, double z, double groundZ, Vector3 normal)
		{
			if (getGroundZAndNormalFor3dCoord == null) getGroundZAndNormalFor3dCoord = (Function) native.GetObjectProperty("getGroundZAndNormalFor3dCoord");
			var results = (Array) getGroundZAndNormalFor3dCoord.Call(native, x, y, z, groundZ, normal);
			return ((bool) results[0], (double) results[1], JSObjectToVector3(results[2]));
		}

		public object GetGroundZFor3dCoord2(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (getGroundZFor3dCoord2 == null) getGroundZFor3dCoord2 = (Function) native.GetObjectProperty("getGroundZFor3dCoord2");
			return getGroundZFor3dCoord2.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public double Asin(double p0)
		{
			if (asin == null) asin = (Function) native.GetObjectProperty("asin");
			return (double) asin.Call(native, p0);
		}

		public double Acos(double p0)
		{
			if (acos == null) acos = (Function) native.GetObjectProperty("acos");
			return (double) acos.Call(native, p0);
		}

		public double Tan(double p0)
		{
			if (tan == null) tan = (Function) native.GetObjectProperty("tan");
			return (double) tan.Call(native, p0);
		}

		public double Atan(double p0)
		{
			if (atan == null) atan = (Function) native.GetObjectProperty("atan");
			return (double) atan.Call(native, p0);
		}

		public double Atan2(double p0, double p1)
		{
			if (atan2 == null) atan2 = (Function) native.GetObjectProperty("atan2");
			return (double) atan2.Call(native, p0, p1);
		}

		/// <summary>
		/// If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
		/// Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
		/// </summary>
		public double GetDistanceBetweenCoords(double x1, double y1, double z1, double x2, double y2, double z2, bool useZ)
		{
			if (getDistanceBetweenCoords == null) getDistanceBetweenCoords = (Function) native.GetObjectProperty("getDistanceBetweenCoords");
			return (double) getDistanceBetweenCoords.Call(native, x1, y1, z1, x2, y2, z2, useZ);
		}

		public double GetAngleBetween2dVectors(double x1, double y1, double x2, double y2)
		{
			if (getAngleBetween2dVectors == null) getAngleBetween2dVectors = (Function) native.GetObjectProperty("getAngleBetween2dVectors");
			return (double) getAngleBetween2dVectors.Call(native, x1, y1, x2, y2);
		}

		/// <summary>
		/// dx = x1 - x2
		/// dy = y1 - y2
		/// </summary>
		/// <param name="dx">x1 - x2</param>
		/// <param name="dy">y1 - y2</param>
		public double GetHeadingFromVector2d(double dx, double dy)
		{
			if (getHeadingFromVector2d == null) getHeadingFromVector2d = (Function) native.GetObjectProperty("getHeadingFromVector2d");
			return (double) getHeadingFromVector2d.Call(native, dx, dy);
		}

		public double _0x7F8F6405F4777AF6(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, bool p9)
		{
			if (__0x7F8F6405F4777AF6 == null) __0x7F8F6405F4777AF6 = (Function) native.GetObjectProperty("_0x7F8F6405F4777AF6");
			return (double) __0x7F8F6405F4777AF6.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		/// <summary>
		/// GET_C*
		/// </summary>
		public Vector3 _0x21C235BC64831E5A(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, bool p9)
		{
			if (__0x21C235BC64831E5A == null) __0x21C235BC64831E5A = (Function) native.GetObjectProperty("_0x21C235BC64831E5A");
			return JSObjectToVector3(__0x21C235BC64831E5A.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9));
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) _0xF56DFB7B61BE7276(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12)
		{
			if (__0xF56DFB7B61BE7276 == null) __0xF56DFB7B61BE7276 = (Function) native.GetObjectProperty("_0xF56DFB7B61BE7276");
			var results = (Array) __0xF56DFB7B61BE7276.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// This sets bit [offset] of [address] to on.
		/// The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
		/// Example:
		/// GAMEPLAY::SET_BIT(&bitAddress, 1);
		/// To check if this bit has been enabled:
		/// GAMEPLAY::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards
		/// Please note, this method may assign a value to [address] when used.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) SetBit(int address, int offset)
		{
			if (setBit == null) setBit = (Function) native.GetObjectProperty("setBit");
			var results = (Array) setBit.Call(native, address, offset);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// This sets bit [offset] of [address] to off.
		/// Example:
		/// GAMEPLAY::CLEAR_BIT(&bitAddress, 1);
		/// To check if this bit has been enabled:
		/// GAMEPLAY::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) ClearBit(int address, int offset)
		{
			if (clearBit == null) clearBit = (Function) native.GetObjectProperty("clearBit");
			var results = (Array) clearBit.Call(native, address, offset);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// This native converts its past string to hash. It is hashed using jenkins one at a time method.
		/// </summary>
		public int GetHashKey(string @string)
		{
			if (getHashKey == null) getHashKey = (Function) native.GetObjectProperty("getHashKey");
			return (int) getHashKey.Call(native, @string);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, double, double, double, double></returns>
		public (object, double, double, double, double) SlerpNearQuaternion(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12)
		{
			if (slerpNearQuaternion == null) slerpNearQuaternion = (Function) native.GetObjectProperty("slerpNearQuaternion");
			var results = (Array) slerpNearQuaternion.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
			return (results[0], (double) results[1], (double) results[2], (double) results[3], (double) results[4]);
		}

		public bool IsAreaOccupied(double p0, double p1, double p2, double p3, double p4, double p5, bool p6, bool p7, bool p8, bool p9, bool p10, object p11, bool p12)
		{
			if (isAreaOccupied == null) isAreaOccupied = (Function) native.GetObjectProperty("isAreaOccupied");
			return (bool) isAreaOccupied.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		}

		public bool IsPositionOccupied(double x, double y, double z, double range, bool p4, bool p5, bool p6, bool p7, bool p8, object p9, bool p10)
		{
			if (isPositionOccupied == null) isPositionOccupied = (Function) native.GetObjectProperty("isPositionOccupied");
			return (bool) isPositionOccupied.Call(native, x, y, z, range, p4, p5, p6, p7, p8, p9, p10);
		}

		public bool IsPointObscuredByAMissionEntity(double p0, double p1, double p2, double p3, double p4, double p5, object p6)
		{
			if (isPointObscuredByAMissionEntity == null) isPointObscuredByAMissionEntity = (Function) native.GetObjectProperty("isPointObscuredByAMissionEntity");
			return (bool) isPointObscuredByAMissionEntity.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
		/// </summary>
		public void ClearArea(double X, double Y, double Z, double radius, bool p4, bool ignoreCopCars, bool ignoreObjects, bool p7)
		{
			if (clearArea == null) clearArea = (Function) native.GetObjectProperty("clearArea");
			clearArea.Call(native, X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7);
		}

		/// <summary>
		/// GAMEPLAY::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.
		/// </summary>
		public void ClearAreaOfEverything(double x, double y, double z, double radius, bool p4, bool p5, bool p6, bool p7)
		{
			if (clearAreaOfEverything == null) clearAreaOfEverything = (Function) native.GetObjectProperty("clearAreaOfEverything");
			clearAreaOfEverything.Call(native, x, y, z, radius, p4, p5, p6, p7);
		}

		/// <summary>
		/// Example:
		/// CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
		/// </summary>
		public void ClearAreaOfVehicles(double x, double y, double z, double radius, bool p4, bool p5, bool p6, bool p7, bool p8, bool p9)
		{
			if (clearAreaOfVehicles == null) clearAreaOfVehicles = (Function) native.GetObjectProperty("clearAreaOfVehicles");
			clearAreaOfVehicles.Call(native, x, y, z, radius, p4, p5, p6, p7, p8, p9);
		}

		public void ClearAngledAreaOfVehicles(double p0, double p1, double p2, double p3, double p4, double p5, double p6, bool p7, bool p8, bool p9, bool p10, bool p11, object p12)
		{
			if (clearAngledAreaOfVehicles == null) clearAngledAreaOfVehicles = (Function) native.GetObjectProperty("clearAngledAreaOfVehicles");
			clearAngledAreaOfVehicles.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		}

		/// <summary>
		/// I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
		/// </summary>
		public void ClearAreaOfObjects(double x, double y, double z, double radius, int flags)
		{
			if (clearAreaOfObjects == null) clearAreaOfObjects = (Function) native.GetObjectProperty("clearAreaOfObjects");
			clearAreaOfObjects.Call(native, x, y, z, radius, flags);
		}

		/// <summary>
		/// Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
		/// </summary>
		public void ClearAreaOfPeds(double x, double y, double z, double radius, int flags)
		{
			if (clearAreaOfPeds == null) clearAreaOfPeds = (Function) native.GetObjectProperty("clearAreaOfPeds");
			clearAreaOfPeds.Call(native, x, y, z, radius, flags);
		}

		/// <summary>
		/// flags appears to always be 0
		/// </summary>
		/// <param name="flags">appears to always be 0</param>
		public void ClearAreaOfCops(double x, double y, double z, double radius, int flags)
		{
			if (clearAreaOfCops == null) clearAreaOfCops = (Function) native.GetObjectProperty("clearAreaOfCops");
			clearAreaOfCops.Call(native, x, y, z, radius, flags);
		}

		/// <summary>
		/// flags is usually 0 in the scripts.
		/// </summary>
		/// <param name="flags">is usually 0 in the scripts.</param>
		public void ClearAreaOfProjectiles(double x, double y, double z, double radius, int flags)
		{
			if (clearAreaOfProjectiles == null) clearAreaOfProjectiles = (Function) native.GetObjectProperty("clearAreaOfProjectiles");
			clearAreaOfProjectiles.Call(native, x, y, z, radius, flags);
		}

		/// <summary>
		/// Possibly used to clear scenario points.
		/// CLEAR_*
		/// </summary>
		public void _0x7EC6F9A478A6A512()
		{
			if (__0x7EC6F9A478A6A512 == null) __0x7EC6F9A478A6A512 = (Function) native.GetObjectProperty("_0x7EC6F9A478A6A512");
			__0x7EC6F9A478A6A512.Call(native);
		}

		/// <summary>
		/// ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
		/// </summary>
		/// <param name="ignoreVehicle">bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)</param>
		public void SetSaveMenuActive(bool ignoreVehicle)
		{
			if (setSaveMenuActive == null) setSaveMenuActive = (Function) native.GetObjectProperty("setSaveMenuActive");
			setSaveMenuActive.Call(native, ignoreVehicle);
		}

		public int _0x397BAA01068BAA96()
		{
			if (__0x397BAA01068BAA96 == null) __0x397BAA01068BAA96 = (Function) native.GetObjectProperty("_0x397BAA01068BAA96");
			return (int) __0x397BAA01068BAA96.Call(native);
		}

		public void SetCreditsActive(bool toggle)
		{
			if (setCreditsActive == null) setCreditsActive = (Function) native.GetObjectProperty("setCreditsActive");
			setCreditsActive.Call(native, toggle);
		}

		public void _0xB51B9AB9EF81868C(bool toggle)
		{
			if (__0xB51B9AB9EF81868C == null) __0xB51B9AB9EF81868C = (Function) native.GetObjectProperty("_0xB51B9AB9EF81868C");
			__0xB51B9AB9EF81868C.Call(native, toggle);
		}

		public bool HaveCreditsReachedEnd()
		{
			if (haveCreditsReachedEnd == null) haveCreditsReachedEnd = (Function) native.GetObjectProperty("haveCreditsReachedEnd");
			return (bool) haveCreditsReachedEnd.Call(native);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/yLNWicUi
		/// </summary>
		public void TerminateAllScriptsWithThisName(string scriptName)
		{
			if (terminateAllScriptsWithThisName == null) terminateAllScriptsWithThisName = (Function) native.GetObjectProperty("terminateAllScriptsWithThisName");
			terminateAllScriptsWithThisName.Call(native, scriptName);
		}

		public void NetworkSetScriptIsSafeForNetworkGame()
		{
			if (networkSetScriptIsSafeForNetworkGame == null) networkSetScriptIsSafeForNetworkGame = (Function) native.GetObjectProperty("networkSetScriptIsSafeForNetworkGame");
			networkSetScriptIsSafeForNetworkGame.Call(native);
		}

		/// <summary>
		/// p3 might be radius?
		/// </summary>
		/// <param name="p3">might be radius?</param>
		/// <returns>Returns the index of the newly created hospital spawn point.</returns>
		public int AddHospitalRestart(double x, double y, double z, double p3, object p4)
		{
			if (addHospitalRestart == null) addHospitalRestart = (Function) native.GetObjectProperty("addHospitalRestart");
			return (int) addHospitalRestart.Call(native, x, y, z, p3, p4);
		}

		/// <summary>
		/// The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
		/// </summary>
		public void DisableHospitalRestart(int hospitalIndex, bool toggle)
		{
			if (disableHospitalRestart == null) disableHospitalRestart = (Function) native.GetObjectProperty("disableHospitalRestart");
			disableHospitalRestart.Call(native, hospitalIndex, toggle);
		}

		public object AddPoliceRestart(double p0, double p1, double p2, double p3, object p4)
		{
			if (addPoliceRestart == null) addPoliceRestart = (Function) native.GetObjectProperty("addPoliceRestart");
			return addPoliceRestart.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// Disables the spawn point at the police house on the specified index.
		/// policeIndex: The police house index.
		/// toggle: true to enable the spawn point, false to disable.
		/// - Nacorpio
		/// </summary>
		/// <param name="policeIndex">The police house index.</param>
		/// <param name="toggle">true to enable the spawn point, false to disable.</param>
		public void DisablePoliceRestart(int policeIndex, bool toggle)
		{
			if (disablePoliceRestart == null) disablePoliceRestart = (Function) native.GetObjectProperty("disablePoliceRestart");
			disablePoliceRestart.Call(native, policeIndex, toggle);
		}

		public void SetRestartCustomPosition(double x, double y, double z, double heading)
		{
			if (setRestartCustomPosition == null) setRestartCustomPosition = (Function) native.GetObjectProperty("setRestartCustomPosition");
			setRestartCustomPosition.Call(native, x, y, z, heading);
		}

		public void ClearRestartCustomPosition()
		{
			if (clearRestartCustomPosition == null) clearRestartCustomPosition = (Function) native.GetObjectProperty("clearRestartCustomPosition");
			clearRestartCustomPosition.Call(native);
		}

		public void PauseDeathArrestRestart(bool toggle)
		{
			if (pauseDeathArrestRestart == null) pauseDeathArrestRestart = (Function) native.GetObjectProperty("pauseDeathArrestRestart");
			pauseDeathArrestRestart.Call(native, toggle);
		}

		public void IgnoreNextRestart(bool toggle)
		{
			if (ignoreNextRestart == null) ignoreNextRestart = (Function) native.GetObjectProperty("ignoreNextRestart");
			ignoreNextRestart.Call(native, toggle);
		}

		/// <summary>
		/// Sets whether the game should fade out after the player dies.
		/// </summary>
		public void SetFadeOutAfterDeath(bool toggle)
		{
			if (setFadeOutAfterDeath == null) setFadeOutAfterDeath = (Function) native.GetObjectProperty("setFadeOutAfterDeath");
			setFadeOutAfterDeath.Call(native, toggle);
		}

		/// <summary>
		/// Sets whether the game should fade out after the player is arrested.
		/// </summary>
		public void SetFadeOutAfterArrest(bool toggle)
		{
			if (setFadeOutAfterArrest == null) setFadeOutAfterArrest = (Function) native.GetObjectProperty("setFadeOutAfterArrest");
			setFadeOutAfterArrest.Call(native, toggle);
		}

		/// <summary>
		/// Sets whether the game should fade in after the player dies or is arrested.
		/// </summary>
		public void SetFadeInAfterDeathArrest(bool toggle)
		{
			if (setFadeInAfterDeathArrest == null) setFadeInAfterDeathArrest = (Function) native.GetObjectProperty("setFadeInAfterDeathArrest");
			setFadeInAfterDeathArrest.Call(native, toggle);
		}

		public void SetFadeInAfterLoad(bool toggle)
		{
			if (setFadeInAfterLoad == null) setFadeInAfterLoad = (Function) native.GetObjectProperty("setFadeInAfterLoad");
			setFadeInAfterLoad.Call(native, toggle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) RegisterSaveHouse(double p0, double p1, double p2, double p3, object p4, object p5, object p6)
		{
			if (registerSaveHouse == null) registerSaveHouse = (Function) native.GetObjectProperty("registerSaveHouse");
			var results = (Array) registerSaveHouse.Call(native, p0, p1, p2, p3, p4, p5, p6);
			return (results[0], results[1]);
		}

		public void SetSaveHouse(object p0, bool p1, bool p2)
		{
			if (setSaveHouse == null) setSaveHouse = (Function) native.GetObjectProperty("setSaveHouse");
			setSaveHouse.Call(native, p0, p1, p2);
		}

		public bool OverrideSaveHouse(bool p0, double p1, double p2, double p3, double p4, bool p5, double p6, double p7)
		{
			if (overrideSaveHouse == null) overrideSaveHouse = (Function) native.GetObjectProperty("overrideSaveHouse");
			return (bool) overrideSaveHouse.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// GET_SAVE_*
		/// GET_SAVE_UNLESS_CUSTOM_DOT ?
		/// </summary>
		/// <returns>Array<bool, Vector3, double, bool, bool></returns>
		public (bool, Vector3, double, bool, bool) _0xA4A0065E39C9F25C(Vector3 p0, double p1, bool fadeInAfterLoad, bool p3)
		{
			if (__0xA4A0065E39C9F25C == null) __0xA4A0065E39C9F25C = (Function) native.GetObjectProperty("_0xA4A0065E39C9F25C");
			var results = (Array) __0xA4A0065E39C9F25C.Call(native, p0, p1, fadeInAfterLoad, p3);
			return ((bool) results[0], JSObjectToVector3(results[1]), (double) results[2], (bool) results[3], (bool) results[4]);
		}

		public void DoAutoSave()
		{
			if (doAutoSave == null) doAutoSave = (Function) native.GetObjectProperty("doAutoSave");
			doAutoSave.Call(native);
		}

		public bool GetIsAutoSaveOff()
		{
			if (getIsAutoSaveOff == null) getIsAutoSaveOff = (Function) native.GetObjectProperty("getIsAutoSaveOff");
			return (bool) getIsAutoSaveOff.Call(native);
		}

		public bool IsAutoSaveInProgress()
		{
			if (isAutoSaveInProgress == null) isAutoSaveInProgress = (Function) native.GetObjectProperty("isAutoSaveInProgress");
			return (bool) isAutoSaveInProgress.Call(native);
		}

		/// <summary>
		/// HAS_*
		/// </summary>
		public bool _0x2107A3773771186D()
		{
			if (__0x2107A3773771186D == null) __0x2107A3773771186D = (Function) native.GetObjectProperty("_0x2107A3773771186D");
			return (bool) __0x2107A3773771186D.Call(native);
		}

		/// <summary>
		/// CLEAR_*
		/// </summary>
		public void _0x06462A961E94B67C()
		{
			if (__0x06462A961E94B67C == null) __0x06462A961E94B67C = (Function) native.GetObjectProperty("_0x06462A961E94B67C");
			__0x06462A961E94B67C.Call(native);
		}

		public void BeginReplayStats(object p0, object p1)
		{
			if (beginReplayStats == null) beginReplayStats = (Function) native.GetObjectProperty("beginReplayStats");
			beginReplayStats.Call(native, p0, p1);
		}

		public void AddReplayStatValue(object value)
		{
			if (addReplayStatValue == null) addReplayStatValue = (Function) native.GetObjectProperty("addReplayStatValue");
			addReplayStatValue.Call(native, value);
		}

		public void EndReplayStats()
		{
			if (endReplayStats == null) endReplayStats = (Function) native.GetObjectProperty("endReplayStats");
			endReplayStats.Call(native);
		}

		public object _0xD642319C54AADEB6()
		{
			if (__0xD642319C54AADEB6 == null) __0xD642319C54AADEB6 = (Function) native.GetObjectProperty("_0xD642319C54AADEB6");
			return __0xD642319C54AADEB6.Call(native);
		}

		public object _0x5B1F2E327B6B6FE1()
		{
			if (__0x5B1F2E327B6B6FE1 == null) __0x5B1F2E327B6B6FE1 = (Function) native.GetObjectProperty("_0x5B1F2E327B6B6FE1");
			return __0x5B1F2E327B6B6FE1.Call(native);
		}

		public int GetReplayStatMissionType()
		{
			if (getReplayStatMissionType == null) getReplayStatMissionType = (Function) native.GetObjectProperty("getReplayStatMissionType");
			return (int) getReplayStatMissionType.Call(native);
		}

		public int GetReplayStatCount()
		{
			if (getReplayStatCount == null) getReplayStatCount = (Function) native.GetObjectProperty("getReplayStatCount");
			return (int) getReplayStatCount.Call(native);
		}

		public int GetReplayStatAtIndex(int index)
		{
			if (getReplayStatAtIndex == null) getReplayStatAtIndex = (Function) native.GetObjectProperty("getReplayStatAtIndex");
			return (int) getReplayStatAtIndex.Call(native, index);
		}

		public void ClearReplayStats()
		{
			if (clearReplayStats == null) clearReplayStats = (Function) native.GetObjectProperty("clearReplayStats");
			clearReplayStats.Call(native);
		}

		public object _0x72DE52178C291CB5()
		{
			if (__0x72DE52178C291CB5 == null) __0x72DE52178C291CB5 = (Function) native.GetObjectProperty("_0x72DE52178C291CB5");
			return __0x72DE52178C291CB5.Call(native);
		}

		public object _0x44A0BDC559B35F6E()
		{
			if (__0x44A0BDC559B35F6E == null) __0x44A0BDC559B35F6E = (Function) native.GetObjectProperty("_0x44A0BDC559B35F6E");
			return __0x44A0BDC559B35F6E.Call(native);
		}

		public object _0xEB2104E905C6F2E9()
		{
			if (__0xEB2104E905C6F2E9 == null) __0xEB2104E905C6F2E9 = (Function) native.GetObjectProperty("_0xEB2104E905C6F2E9");
			return __0xEB2104E905C6F2E9.Call(native);
		}

		public object _0x2B5E102E4A42F2BF()
		{
			if (__0x2B5E102E4A42F2BF == null) __0x2B5E102E4A42F2BF = (Function) native.GetObjectProperty("_0x2B5E102E4A42F2BF");
			return __0x2B5E102E4A42F2BF.Call(native);
		}

		public bool IsMemoryCardInUse()
		{
			if (isMemoryCardInUse == null) isMemoryCardInUse = (Function) native.GetObjectProperty("isMemoryCardInUse");
			return (bool) isMemoryCardInUse.Call(native);
		}

		public void ShootSingleBulletBetweenCoords(double x1, double y1, double z1, double x2, double y2, double z2, int damage, bool p7, int weaponHash, int ownerPed, bool isAudible, bool isInvisible, double speed)
		{
			if (shootSingleBulletBetweenCoords == null) shootSingleBulletBetweenCoords = (Function) native.GetObjectProperty("shootSingleBulletBetweenCoords");
			shootSingleBulletBetweenCoords.Call(native, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed);
		}

		/// <summary>
		/// entity - entity to ignore
		/// </summary>
		/// <param name="entity">entity to ignore</param>
		public void ShootSingleBulletBetweenCoordsIgnoreEntity(double x1, double y1, double z1, double x2, double y2, double z2, int damage, bool p7, int weaponHash, int ownerPed, bool isAudible, bool isInvisible, double speed, int entity, object p14)
		{
			if (shootSingleBulletBetweenCoordsIgnoreEntity == null) shootSingleBulletBetweenCoordsIgnoreEntity = (Function) native.GetObjectProperty("shootSingleBulletBetweenCoordsIgnoreEntity");
			shootSingleBulletBetweenCoordsIgnoreEntity.Call(native, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14);
		}

		/// <summary>
		/// entity - entity to ignore
		/// </summary>
		/// <param name="entity">entity to ignore</param>
		public void ShootSingleBulletBetweenCoordsIgnoreEntityNew(double x1, double y1, double z1, double x2, double y2, double z2, int damage, bool p7, int weaponHash, int ownerPed, bool isAudible, bool isInvisible, double speed, int entity, bool p14, bool p15, bool p16, bool p17, object p18, object p19)
		{
			if (shootSingleBulletBetweenCoordsIgnoreEntityNew == null) shootSingleBulletBetweenCoordsIgnoreEntityNew = (Function) native.GetObjectProperty("shootSingleBulletBetweenCoordsIgnoreEntityNew");
			shootSingleBulletBetweenCoordsIgnoreEntityNew.Call(native, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, p16, p17, p18, p19);
		}

		/// <summary>
		/// Gets the dimensions of a model.
		/// Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
		/// Example from the scripts: GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);
		/// </summary>
		/// <param name="maximum">Calculate (minimum) to get the size, in which case, Y will be how long the model is.</param>
		/// <returns>Array<void, Vector3, Vector3></returns>
		public (object, Vector3, Vector3) GetModelDimensions(int modelHash, Vector3 minimum, Vector3 maximum)
		{
			if (getModelDimensions == null) getModelDimensions = (Function) native.GetObjectProperty("getModelDimensions");
			var results = (Array) getModelDimensions.Call(native, modelHash, minimum, maximum);
			return (results[0], JSObjectToVector3(results[1]), JSObjectToVector3(results[2]));
		}

		/// <summary>
		/// Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are ignored.
		/// Max is 5, anything above this makes it just 5. Also the mini-map gets the red & blue flashing effect. I wish I could use this to fake I had 6 stars like a few of the old GTAs'
		/// </summary>
		public void SetFakeWantedLevel(int fakeWantedLevel)
		{
			if (setFakeWantedLevel == null) setFakeWantedLevel = (Function) native.GetObjectProperty("setFakeWantedLevel");
			setFakeWantedLevel.Call(native, fakeWantedLevel);
		}

		public int GetFakeWantedLevel()
		{
			if (getFakeWantedLevel == null) getFakeWantedLevel = (Function) native.GetObjectProperty("getFakeWantedLevel");
			return (int) getFakeWantedLevel.Call(native);
		}

		/// <summary>
		/// Example:
		/// GAMEPLAY::IS_BIT_SET(bitAddress, 1);
		/// To enable and disable bits, see:
		/// GAMEPLAY::SET_BIT(&bitAddress, 1);   // enable
		/// GAMEPLAY::CLEAR_BIT(&bitAddress, 1); // disable
		/// </summary>
		/// <returns>Returns bit's boolean state from [offset] of [address].</returns>
		public bool IsBitSet(int address, int offset)
		{
			if (isBitSet == null) isBitSet = (Function) native.GetObjectProperty("isBitSet");
			return (bool) isBitSet.Call(native, address, offset);
		}

		public void UsingMissionCreator(bool toggle)
		{
			if (usingMissionCreator == null) usingMissionCreator = (Function) native.GetObjectProperty("usingMissionCreator");
			usingMissionCreator.Call(native, toggle);
		}

		public void AllowMissionCreatorWarp(bool toggle)
		{
			if (allowMissionCreatorWarp == null) allowMissionCreatorWarp = (Function) native.GetObjectProperty("allowMissionCreatorWarp");
			allowMissionCreatorWarp.Call(native, toggle);
		}

		public void SetMinigameInProgress(bool toggle)
		{
			if (setMinigameInProgress == null) setMinigameInProgress = (Function) native.GetObjectProperty("setMinigameInProgress");
			setMinigameInProgress.Call(native, toggle);
		}

		public bool IsMinigameInProgress()
		{
			if (isMinigameInProgress == null) isMinigameInProgress = (Function) native.GetObjectProperty("isMinigameInProgress");
			return (bool) isMinigameInProgress.Call(native);
		}

		public bool IsThisAMinigameScript()
		{
			if (isThisAMinigameScript == null) isThisAMinigameScript = (Function) native.GetObjectProperty("isThisAMinigameScript");
			return (bool) isThisAMinigameScript.Call(native);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public bool IsSniperInverted()
		{
			if (isSniperInverted == null) isSniperInverted = (Function) native.GetObjectProperty("isSniperInverted");
			return (bool) isSniperInverted.Call(native);
		}

		public bool ShouldUseMetricMeasurements()
		{
			if (shouldUseMetricMeasurements == null) shouldUseMetricMeasurements = (Function) native.GetObjectProperty("shouldUseMetricMeasurements");
			return (bool) shouldUseMetricMeasurements.Call(native);
		}

		public int GetProfileSetting(int profileSetting)
		{
			if (getProfileSetting == null) getProfileSetting = (Function) native.GetObjectProperty("getProfileSetting");
			return (int) getProfileSetting.Call(native, profileSetting);
		}

		public bool AreStringsEqual(string string1, string string2)
		{
			if (areStringsEqual == null) areStringsEqual = (Function) native.GetObjectProperty("areStringsEqual");
			return (bool) areStringsEqual.Call(native, string1, string2);
		}

		/// <summary>
		/// Compares two strings up to a specified number of characters.
		/// Parameters:
		/// str1 - String to be compared.
		/// str2 - String to be compared.
		/// matchCase - Comparison will be case-sensitive.
		/// maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
		/// A value indicating the relationship between the strings:
		/// <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
		/// 0 - The contents of both strings are equal.
		/// See NativeDB for reference: http://natives.altv.mp/#/0x1E34710ECD4AB0EB
		/// </summary>
		/// <param name="str1">String to be compared.</param>
		/// <param name="str2">String to be compared.</param>
		/// <param name="matchCase">Comparison will be case-sensitive.</param>
		/// <param name="maxLength">Maximum number of characters to compare. A value of -1 indicates an infinite length.</param>
		/// <returns>Returns:</returns>
		public int CompareStrings(string str1, string str2, bool matchCase, int maxLength)
		{
			if (compareStrings == null) compareStrings = (Function) native.GetObjectProperty("compareStrings");
			return (int) compareStrings.Call(native, str1, str2, matchCase, maxLength);
		}

		public int Absi(int value)
		{
			if (absi == null) absi = (Function) native.GetObjectProperty("absi");
			return (int) absi.Call(native, value);
		}

		public double Absf(double value)
		{
			if (absf == null) absf = (Function) native.GetObjectProperty("absf");
			return (double) absf.Call(native, value);
		}

		/// <summary>
		/// Determines whether there is a sniper bullet within the specified coordinates. The coordinates form a rectangle.
		/// - Nacorpio
		/// </summary>
		public bool IsSniperBulletInArea(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (isSniperBulletInArea == null) isSniperBulletInArea = (Function) native.GetObjectProperty("isSniperBulletInArea");
			return (bool) isSniperBulletInArea.Call(native, x1, y1, z1, x2, y2, z2);
		}

		/// <summary>
		/// Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
		/// - Nacorpio
		/// ownedByPlayer = only projectiles fired by the player will be detected.
		/// </summary>
		/// <param name="ownedByPlayer">only projectiles fired by the player will be detected.</param>
		public bool IsProjectileInArea(double x1, double y1, double z1, double x2, double y2, double z2, bool ownedByPlayer)
		{
			if (isProjectileInArea == null) isProjectileInArea = (Function) native.GetObjectProperty("isProjectileInArea");
			return (bool) isProjectileInArea.Call(native, x1, y1, z1, x2, y2, z2, ownedByPlayer);
		}

		/// <summary>
		/// Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a rectangle.
		/// Note: This native hasn't been tested yet.
		/// - Nacorpio
		/// </summary>
		public bool IsProjectileTypeInArea(double x1, double y1, double z1, double x2, double y2, double z2, int type, bool p7)
		{
			if (isProjectileTypeInArea == null) isProjectileTypeInArea = (Function) native.GetObjectProperty("isProjectileTypeInArea");
			return (bool) isProjectileTypeInArea.Call(native, x1, y1, z1, x2, y2, z2, type, p7);
		}

		public bool IsProjectileTypeInAngledArea(double p0, double p1, double p2, double p3, double p4, double p5, double p6, object p7, bool p8)
		{
			if (isProjectileTypeInAngledArea == null) isProjectileTypeInAngledArea = (Function) native.GetObjectProperty("isProjectileTypeInAngledArea");
			return (bool) isProjectileTypeInAngledArea.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		public bool IsProjectileTypeInRadius(double p0, double p1, double p2, object p3, double p4, bool p5)
		{
			if (isProjectileTypeInRadius == null) isProjectileTypeInRadius = (Function) native.GetObjectProperty("isProjectileTypeInRadius");
			return (bool) isProjectileTypeInRadius.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// GET_C*
		/// </summary>
		public object GetIsProjectileTypeInArea(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8)
		{
			if (getIsProjectileTypeInArea == null) getIsProjectileTypeInArea = (Function) native.GetObjectProperty("getIsProjectileTypeInArea");
			return getIsProjectileTypeInArea.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetProjectileNearPedCoords(int ped, int weaponHash, double radius, int entity, bool p4)
		{
			if (getProjectileNearPedCoords == null) getProjectileNearPedCoords = (Function) native.GetObjectProperty("getProjectileNearPedCoords");
			var results = (Array) getProjectileNearPedCoords.Call(native, ped, weaponHash, radius, entity, p4);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// GET_*
		/// </summary>
		public bool GetProjectileNearPed(int ped, int weaponhash, double p2, double p3, double p4, bool p5)
		{
			if (getProjectileNearPed == null) getProjectileNearPed = (Function) native.GetObjectProperty("getProjectileNearPed");
			return (bool) getProjectileNearPed.Call(native, ped, weaponhash, p2, p3, p4, p5);
		}

		public bool IsBulletInAngledArea(double p0, double p1, double p2, double p3, double p4, double p5, double p6, bool p7)
		{
			if (isBulletInAngledArea == null) isBulletInAngledArea = (Function) native.GetObjectProperty("isBulletInAngledArea");
			return (bool) isBulletInAngledArea.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public bool IsBulletInArea(double p0, double p1, double p2, double p3, bool p4)
		{
			if (isBulletInArea == null) isBulletInArea = (Function) native.GetObjectProperty("isBulletInArea");
			return (bool) isBulletInArea.Call(native, p0, p1, p2, p3, p4);
		}

		public bool IsBulletInBox(double p0, double p1, double p2, double p3, double p4, double p5, bool p6)
		{
			if (isBulletInBox == null) isBulletInBox = (Function) native.GetObjectProperty("isBulletInBox");
			return (bool) isBulletInBox.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// p3 - possibly radius?
		/// </summary>
		/// <param name="p3">possibly radius?</param>
		public bool HasBulletImpactedInArea(double x, double y, double z, double p3, bool p4, bool p5)
		{
			if (hasBulletImpactedInArea == null) hasBulletImpactedInArea = (Function) native.GetObjectProperty("hasBulletImpactedInArea");
			return (bool) hasBulletImpactedInArea.Call(native, x, y, z, p3, p4, p5);
		}

		public bool HasBulletImpactedInBox(double p0, double p1, double p2, double p3, double p4, double p5, bool p6, bool p7)
		{
			if (hasBulletImpactedInBox == null) hasBulletImpactedInBox = (Function) native.GetObjectProperty("hasBulletImpactedInBox");
			return (bool) hasBulletImpactedInBox.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// PS4
		/// </summary>
		public bool IsOrbisVersion()
		{
			if (isOrbisVersion == null) isOrbisVersion = (Function) native.GetObjectProperty("isOrbisVersion");
			return (bool) isOrbisVersion.Call(native);
		}

		/// <summary>
		/// XBOX ONE
		/// </summary>
		public bool IsDurangoVersion()
		{
			if (isDurangoVersion == null) isDurangoVersion = (Function) native.GetObjectProperty("isDurangoVersion");
			return (bool) isDurangoVersion.Call(native);
		}

		public bool IsXbox360Version()
		{
			if (isXbox360Version == null) isXbox360Version = (Function) native.GetObjectProperty("isXbox360Version");
			return (bool) isXbox360Version.Call(native);
		}

		public bool IsPs3Version()
		{
			if (isPs3Version == null) isPs3Version = (Function) native.GetObjectProperty("isPs3Version");
			return (bool) isPs3Version.Call(native);
		}

		public bool IsPcVersion()
		{
			if (isPcVersion == null) isPcVersion = (Function) native.GetObjectProperty("isPcVersion");
			return (bool) isPcVersion.Call(native);
		}

		/// <summary>
		/// if (GAMEPLAY::IS_AUSSIE_VERSION()) {
		/// sub_127a9(&l_31, 1024); // l_31 |= 1024
		/// l_129 = 3;
		/// sub_129d2("AUSSIE VERSION IS TRUE!?!?!"); // DEBUG
		/// }
		/// Used to block some of the prostitute stuff due to laws in Australia.
		/// </summary>
		public bool IsAussieVersion()
		{
			if (isAussieVersion == null) isAussieVersion = (Function) native.GetObjectProperty("isAussieVersion");
			return (bool) isAussieVersion.Call(native);
		}

		public bool IsStringNull(string @string)
		{
			if (isStringNull == null) isStringNull = (Function) native.GetObjectProperty("isStringNull");
			return (bool) isStringNull.Call(native, @string);
		}

		public bool IsStringNullOrEmpty(string @string)
		{
			if (isStringNullOrEmpty == null) isStringNullOrEmpty = (Function) native.GetObjectProperty("isStringNullOrEmpty");
			return (bool) isStringNullOrEmpty.Call(native, @string);
		}

		/// <summary>
		/// If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
		/// </summary>
		/// <returns>Array<bool, int> Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.</returns>
		public (bool, int) StringToInt(string @string, int outInteger)
		{
			if (stringToInt == null) stringToInt = (Function) native.GetObjectProperty("stringToInt");
			var results = (Array) stringToInt.Call(native, @string, outInteger);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) SetBitsInRange(int unkVar, int rangeStart, int rangeEnd, int p3)
		{
			if (setBitsInRange == null) setBitsInRange = (Function) native.GetObjectProperty("setBitsInRange");
			var results = (Array) setBitsInRange.Call(native, unkVar, rangeStart, rangeEnd, p3);
			return (results[0], (int) results[1]);
		}

		public int GetBitsInRange(int unkVar, int rangeStart, int rangeEnd)
		{
			if (getBitsInRange == null) getBitsInRange = (Function) native.GetObjectProperty("getBitsInRange");
			return (int) getBitsInRange.Call(native, unkVar, rangeStart, rangeEnd);
		}

		public int AddStuntJump(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, object p15, object p16, object p17)
		{
			if (addStuntJump == null) addStuntJump = (Function) native.GetObjectProperty("addStuntJump");
			return (int) addStuntJump.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
		}

		public int AddStuntJumpAngled(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15, double p16, object p17, object p18, object p19)
		{
			if (addStuntJumpAngled == null) addStuntJumpAngled = (Function) native.GetObjectProperty("addStuntJumpAngled");
			return (int) addStuntJumpAngled.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19);
		}

		/// <summary>
		/// Toggles some stunt jump stuff.
		/// </summary>
		public void _0xFB80AB299D2EE1BD(bool toggle)
		{
			if (__0xFB80AB299D2EE1BD == null) __0xFB80AB299D2EE1BD = (Function) native.GetObjectProperty("_0xFB80AB299D2EE1BD");
			__0xFB80AB299D2EE1BD.Call(native, toggle);
		}

		public void DeleteStuntJump(int p0)
		{
			if (deleteStuntJump == null) deleteStuntJump = (Function) native.GetObjectProperty("deleteStuntJump");
			deleteStuntJump.Call(native, p0);
		}

		public void EnableStuntJumpSet(int p0)
		{
			if (enableStuntJumpSet == null) enableStuntJumpSet = (Function) native.GetObjectProperty("enableStuntJumpSet");
			enableStuntJumpSet.Call(native, p0);
		}

		public void DisableStuntJumpSet(int p0)
		{
			if (disableStuntJumpSet == null) disableStuntJumpSet = (Function) native.GetObjectProperty("disableStuntJumpSet");
			disableStuntJumpSet.Call(native, p0);
		}

		public void SetStuntJumpsCanTrigger(bool toggle)
		{
			if (setStuntJumpsCanTrigger == null) setStuntJumpsCanTrigger = (Function) native.GetObjectProperty("setStuntJumpsCanTrigger");
			setStuntJumpsCanTrigger.Call(native, toggle);
		}

		public bool IsStuntJumpInProgress()
		{
			if (isStuntJumpInProgress == null) isStuntJumpInProgress = (Function) native.GetObjectProperty("isStuntJumpInProgress");
			return (bool) isStuntJumpInProgress.Call(native);
		}

		public bool IsStuntJumpMessageShowing()
		{
			if (isStuntJumpMessageShowing == null) isStuntJumpMessageShowing = (Function) native.GetObjectProperty("isStuntJumpMessageShowing");
			return (bool) isStuntJumpMessageShowing.Call(native);
		}

		public int GetNumSuccessfulStuntJumps()
		{
			if (getNumSuccessfulStuntJumps == null) getNumSuccessfulStuntJumps = (Function) native.GetObjectProperty("getNumSuccessfulStuntJumps");
			return (int) getNumSuccessfulStuntJumps.Call(native);
		}

		public int GetTotalSuccessfulStuntJumps()
		{
			if (getTotalSuccessfulStuntJumps == null) getTotalSuccessfulStuntJumps = (Function) native.GetObjectProperty("getTotalSuccessfulStuntJumps");
			return (int) getTotalSuccessfulStuntJumps.Call(native);
		}

		public void CancelStuntJump()
		{
			if (cancelStuntJump == null) cancelStuntJump = (Function) native.GetObjectProperty("cancelStuntJump");
			cancelStuntJump.Call(native);
		}

		/// <summary>
		/// Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
		/// </summary>
		public void SetGamePaused(bool toggle)
		{
			if (setGamePaused == null) setGamePaused = (Function) native.GetObjectProperty("setGamePaused");
			setGamePaused.Call(native, toggle);
		}

		public void SetThisScriptCanBePaused(bool toggle)
		{
			if (setThisScriptCanBePaused == null) setThisScriptCanBePaused = (Function) native.GetObjectProperty("setThisScriptCanBePaused");
			setThisScriptCanBePaused.Call(native, toggle);
		}

		public void SetThisScriptCanRemoveBlipsCreatedByAnyScript(bool toggle)
		{
			if (setThisScriptCanRemoveBlipsCreatedByAnyScript == null) setThisScriptCanRemoveBlipsCreatedByAnyScript = (Function) native.GetObjectProperty("setThisScriptCanRemoveBlipsCreatedByAnyScript");
			setThisScriptCanRemoveBlipsCreatedByAnyScript.Call(native, toggle);
		}

		/// <summary>
		/// This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
		/// INT_SCORES_SCORTED was a hash collision
		/// </summary>
		public bool HasButtonCombinationJustBeenEntered(int hash, int amount)
		{
			if (hasButtonCombinationJustBeenEntered == null) hasButtonCombinationJustBeenEntered = (Function) native.GetObjectProperty("hasButtonCombinationJustBeenEntered");
			return (bool) hasButtonCombinationJustBeenEntered.Call(native, hash, amount);
		}

		/// <summary>
		/// Get inputted "Cheat code", for example:
		/// while (TRUE)
		/// {
		/// if (GAMEPLAY::_557E43C447E700A8(${fugitive}))
		/// {
		/// // Do something.
		/// }
		/// SYSTEM::WAIT(0);
		/// }
		/// Calling this will also set the last saved string hash to zero.
		/// </summary>
		public bool HasCheatStringJustBeenEntered(int hash)
		{
			if (hasCheatStringJustBeenEntered == null) hasCheatStringJustBeenEntered = (Function) native.GetObjectProperty("hasCheatStringJustBeenEntered");
			return (bool) hasCheatStringJustBeenEntered.Call(native, hash);
		}

		/// <summary>
		/// Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
		/// Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
		/// In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
		/// </summary>
		public void SetInstancePriorityMode(int p0)
		{
			if (setInstancePriorityMode == null) setInstancePriorityMode = (Function) native.GetObjectProperty("setInstancePriorityMode");
			setInstancePriorityMode.Call(native, p0);
		}

		/// <summary>
		/// Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to 9BAE5AD2508DF078.
		/// Documented by NTAuthority (http://fivem.net/).
		/// </summary>
		public void SetInstancePriorityHint(int flag)
		{
			if (setInstancePriorityHint == null) setInstancePriorityHint = (Function) native.GetObjectProperty("setInstancePriorityHint");
			setInstancePriorityHint.Call(native, flag);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public bool IsFrontendFading()
		{
			if (isFrontendFading == null) isFrontendFading = (Function) native.GetObjectProperty("isFrontendFading");
			return (bool) isFrontendFading.Call(native);
		}

		/// <summary>
		/// spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
		/// </summary>
		public void PopulateNow()
		{
			if (populateNow == null) populateNow = (Function) native.GetObjectProperty("populateNow");
			populateNow.Call(native);
		}

		public int GetIndexOfCurrentLevel()
		{
			if (getIndexOfCurrentLevel == null) getIndexOfCurrentLevel = (Function) native.GetObjectProperty("getIndexOfCurrentLevel");
			return (int) getIndexOfCurrentLevel.Call(native);
		}

		/// <summary>
		/// level can be from 0 to 3
		/// 0: 9.8 - normal
		/// 1: 2.4 - low
		/// 2: 0.1 - very low
		/// 3: 0.0 - off
		/// //SuckMyCoke
		/// </summary>
		/// <param name="level">can be from 0 to 3</param>
		public void SetGravityLevel(int level)
		{
			if (setGravityLevel == null) setGravityLevel = (Function) native.GetObjectProperty("setGravityLevel");
			setGravityLevel.Call(native, level);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) StartSaveData(object p0, object p1, bool p2)
		{
			if (startSaveData == null) startSaveData = (Function) native.GetObjectProperty("startSaveData");
			var results = (Array) startSaveData.Call(native, p0, p1, p2);
			return (results[0], results[1]);
		}

		public void StopSaveData()
		{
			if (stopSaveData == null) stopSaveData = (Function) native.GetObjectProperty("stopSaveData");
			stopSaveData.Call(native);
		}

		/// <summary>
		/// GET_S*
		/// </summary>
		public int _0xA09F896CE912481F(bool p0)
		{
			if (__0xA09F896CE912481F == null) __0xA09F896CE912481F = (Function) native.GetObjectProperty("_0xA09F896CE912481F");
			return (int) __0xA09F896CE912481F.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) RegisterIntToSave(object p0, string name)
		{
			if (registerIntToSave == null) registerIntToSave = (Function) native.GetObjectProperty("registerIntToSave");
			var results = (Array) registerIntToSave.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) RegisterInt64ToSave(object p0, string name)
		{
			if (registerInt64ToSave == null) registerInt64ToSave = (Function) native.GetObjectProperty("registerInt64ToSave");
			var results = (Array) registerInt64ToSave.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) RegisterEnumToSave(object p0, string name)
		{
			if (registerEnumToSave == null) registerEnumToSave = (Function) native.GetObjectProperty("registerEnumToSave");
			var results = (Array) registerEnumToSave.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) RegisterFloatToSave(object p0, string name)
		{
			if (registerFloatToSave == null) registerFloatToSave = (Function) native.GetObjectProperty("registerFloatToSave");
			var results = (Array) registerFloatToSave.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) RegisterBoolToSave(object p0, string name)
		{
			if (registerBoolToSave == null) registerBoolToSave = (Function) native.GetObjectProperty("registerBoolToSave");
			var results = (Array) registerBoolToSave.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) RegisterTextLabelToSave(object p0, string name)
		{
			if (registerTextLabelToSave == null) registerTextLabelToSave = (Function) native.GetObjectProperty("registerTextLabelToSave");
			var results = (Array) registerTextLabelToSave.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// Seems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE?
		/// GAMEPLAY::_6F7794F28C6B2535(&a_0._f1, "tlPlateText");
		/// GAMEPLAY::_6F7794F28C6B2535(&a_0._f1C, "tlPlateText_pending");
		/// GAMEPLAY::_6F7794F28C6B2535(&a_0._f10B, "tlCarAppPlateText");
		/// "tl" prefix sounds like "Text Label"
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) RegisterTextLabelToSave2(object p0, string name)
		{
			if (registerTextLabelToSave2 == null) registerTextLabelToSave2 = (Function) native.GetObjectProperty("registerTextLabelToSave2");
			var results = (Array) registerTextLabelToSave2.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// Only found 3 times in decompiled scripts. Not a whole lot to go off of.
		/// GAMEPLAY::_48F069265A0E4BEC(a_0, "Movie_Name_For_This_Player");
		/// GAMEPLAY::_48F069265A0E4BEC(&a_0._fB, "Ringtone_For_This_Player");
		/// GAMEPLAY::_48F069265A0E4BEC(&a_0._f1EC4._f12[v_A6], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) _0x48F069265A0E4BEC(object p0, string name)
		{
			if (__0x48F069265A0E4BEC == null) __0x48F069265A0E4BEC = (Function) native.GetObjectProperty("_0x48F069265A0E4BEC");
			var results = (Array) __0x48F069265A0E4BEC.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// Only found 2 times in decompiled scripts. Not a whole lot to go off of.
		/// GAMEPLAY::_8269816F6CFD40F8(&a_0._f1F5A._f6[08], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
		/// GAMEPLAY::_8269816F6CFD40F8(&a_0._f4B4[v_1A8], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) _0x8269816F6CFD40F8(object p0, string name)
		{
			if (__0x8269816F6CFD40F8 == null) __0x8269816F6CFD40F8 = (Function) native.GetObjectProperty("_0x8269816F6CFD40F8");
			var results = (Array) __0x8269816F6CFD40F8.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// Another unknown label type...
		/// GAMEPLAY::_FAA457EF263E8763(a_0, "Thumb_label");
		/// GAMEPLAY::_FAA457EF263E8763(&a_0._f10, "Photo_label");
		/// GAMEPLAY::_FAA457EF263E8763(a_0, "GXTlabel");
		/// GAMEPLAY::_FAA457EF263E8763(&a_0._f21, "StringComp");
		/// GAMEPLAY::_FAA457EF263E8763(&a_0._f43, "SecondStringComp");
		/// GAMEPLAY::_FAA457EF263E8763(&a_0._f53, "ThirdStringComp");
		/// GAMEPLAY::_FAA457EF263E8763(&a_0._f32, "SenderStringComp");
		/// GAMEPLAY::_FAA457EF263E8763(&a_0._f726[v_1A16], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFAA457EF263E8763
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) _0xFAA457EF263E8763(object p0, string name)
		{
			if (__0xFAA457EF263E8763 == null) __0xFAA457EF263E8763 = (Function) native.GetObjectProperty("_0xFAA457EF263E8763");
			var results = (Array) __0xFAA457EF263E8763.Call(native, p0, name);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) StartSaveStructWithSize(object p0, int size, string structName)
		{
			if (startSaveStructWithSize == null) startSaveStructWithSize = (Function) native.GetObjectProperty("startSaveStructWithSize");
			var results = (Array) startSaveStructWithSize.Call(native, p0, size, structName);
			return (results[0], results[1]);
		}

		public void StopSaveStruct()
		{
			if (stopSaveStruct == null) stopSaveStruct = (Function) native.GetObjectProperty("stopSaveStruct");
			stopSaveStruct.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) StartSaveArrayWithSize(object p0, int size, string arrayName)
		{
			if (startSaveArrayWithSize == null) startSaveArrayWithSize = (Function) native.GetObjectProperty("startSaveArrayWithSize");
			var results = (Array) startSaveArrayWithSize.Call(native, p0, size, arrayName);
			return (results[0], results[1]);
		}

		public void StopSaveArray()
		{
			if (stopSaveArray == null) stopSaveArray = (Function) native.GetObjectProperty("stopSaveArray");
			stopSaveArray.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) CopyMemory(object dst, object src, int size)
		{
			if (copyMemory == null) copyMemory = (Function) native.GetObjectProperty("copyMemory");
			var results = (Array) copyMemory.Call(native, dst, src, size);
			return (results[0], results[1], results[2]);
		}

		/// <summary>
		/// Directly from R*:
		/// enum eDispatchType : uint16_t
		/// {
		/// DT_PoliceAutomobile = 1,
		/// DT_PoliceHelicopter = 2,
		/// DT_FireDepartment = 3,
		/// DT_SwatAutomobile = 4,
		/// DT_AmbulanceDepartment = 5,
		/// DT_PoliceRiders = 6,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xDC0F817884CDD856
		/// </summary>
		public void EnableDispatchService(int dispatchService, bool toggle)
		{
			if (enableDispatchService == null) enableDispatchService = (Function) native.GetObjectProperty("enableDispatchService");
			enableDispatchService.Call(native, dispatchService, toggle);
		}

		public void BlockDispatchServiceResourceCreation(int dispatchService, bool toggle)
		{
			if (blockDispatchServiceResourceCreation == null) blockDispatchServiceResourceCreation = (Function) native.GetObjectProperty("blockDispatchServiceResourceCreation");
			blockDispatchServiceResourceCreation.Call(native, dispatchService, toggle);
		}

		public int GetNumDispatchedUnitsForPlayer(int dispatchService)
		{
			if (getNumDispatchedUnitsForPlayer == null) getNumDispatchedUnitsForPlayer = (Function) native.GetObjectProperty("getNumDispatchedUnitsForPlayer");
			return (int) getNumDispatchedUnitsForPlayer.Call(native, dispatchService);
		}

		/// <summary>
		/// As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
		/// Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
		/// Side Note 2: I say it breaks as if you call this proper,
		/// if(CREATE_INCIDENT) etc it will return false if you do as I said above.
		/// =====================================================
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) CreateIncident(int dispatchService, double x, double y, double z, int numUnits, double radius, int outIncidentID, object p7, object p8)
		{
			if (createIncident == null) createIncident = (Function) native.GetObjectProperty("createIncident");
			var results = (Array) createIncident.Call(native, dispatchService, x, y, z, numUnits, radius, outIncidentID, p7, p8);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
		/// Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
		/// Side Note 2: I say it breaks as if you call this proper,
		/// if(CREATE_INCIDENT) etc it will return false if you do as I said above.
		/// =====================================================
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) CreateIncidentWithEntity(int dispatchService, int ped, int numUnits, double radius, int outIncidentID, object p5, object p6)
		{
			if (createIncidentWithEntity == null) createIncidentWithEntity = (Function) native.GetObjectProperty("createIncidentWithEntity");
			var results = (Array) createIncidentWithEntity.Call(native, dispatchService, ped, numUnits, radius, outIncidentID, p5, p6);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// Delete an incident with a given id.
		/// =======================================================
		/// Correction, I have change this to int, instead of int*
		/// as it doesn't use a pointer to the createdIncident.
		/// If you try it you will crash (or) freeze.
		/// =======================================================
		/// </summary>
		public void DeleteIncident(int incidentId)
		{
			if (deleteIncident == null) deleteIncident = (Function) native.GetObjectProperty("deleteIncident");
			deleteIncident.Call(native, incidentId);
		}

		/// <summary>
		/// =======================================================
		/// Correction, I have change this to int, instead of int*
		/// as it doesn't use a pointer to the createdIncident.
		/// If you try it you will crash (or) freeze.
		/// =======================================================
		/// </summary>
		public bool IsIncidentValid(int incidentId)
		{
			if (isIncidentValid == null) isIncidentValid = (Function) native.GetObjectProperty("isIncidentValid");
			return (bool) isIncidentValid.Call(native, incidentId);
		}

		public void SetIncidentRequestedUnits(int incidentId, int dispatchService, int numUnits)
		{
			if (setIncidentRequestedUnits == null) setIncidentRequestedUnits = (Function) native.GetObjectProperty("setIncidentRequestedUnits");
			setIncidentRequestedUnits.Call(native, incidentId, dispatchService, numUnits);
		}

		/// <summary>
		/// SET_INCIDENT_*
		/// </summary>
		public void SetIncidentUnk(int incidentId, double p1)
		{
			if (setIncidentUnk == null) setIncidentUnk = (Function) native.GetObjectProperty("setIncidentUnk");
			setIncidentUnk.Call(native, incidentId, p1);
		}

		/// <summary>
		/// Finds a position ahead of the player by predicting the players next actions.
		/// The positions match path finding node positions.
		/// When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
		/// =======================================================
		/// I may sort this with alter research, but if someone
		/// already knows please tell what the difference in
		/// X2, Y2, Z2 is. I doubt it's rotation. Is it like
		/// checkpoints where X1, Y1, Z1 is your/a position and
		/// X2, Y2, Z2 is a given position ahead of that position?
		/// =======================================================
		/// </summary>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) FindSpawnPointInDirection(double x1, double y1, double z1, double x2, double y2, double z2, double distance, Vector3 spawnPoint)
		{
			if (findSpawnPointInDirection == null) findSpawnPointInDirection = (Function) native.GetObjectProperty("findSpawnPointInDirection");
			var results = (Array) findSpawnPointInDirection.Call(native, x1, y1, z1, x2, y2, z2, distance, spawnPoint);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		public int AddPopMultiplierArea(double x1, double y1, double z1, double x2, double y2, double z2, double p6, double p7, bool p8, bool p9)
		{
			if (addPopMultiplierArea == null) addPopMultiplierArea = (Function) native.GetObjectProperty("addPopMultiplierArea");
			return (int) addPopMultiplierArea.Call(native, x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);
		}

		public bool DoesPopMultiplierAreaExist(int id)
		{
			if (doesPopMultiplierAreaExist == null) doesPopMultiplierAreaExist = (Function) native.GetObjectProperty("doesPopMultiplierAreaExist");
			return (bool) doesPopMultiplierAreaExist.Call(native, id);
		}

		public void RemovePopMultiplierArea(int id, bool p1)
		{
			if (removePopMultiplierArea == null) removePopMultiplierArea = (Function) native.GetObjectProperty("removePopMultiplierArea");
			removePopMultiplierArea.Call(native, id, p1);
		}

		public bool IsPopMultiplierAreaUnk(int id)
		{
			if (isPopMultiplierAreaUnk == null) isPopMultiplierAreaUnk = (Function) native.GetObjectProperty("isPopMultiplierAreaUnk");
			return (bool) isPopMultiplierAreaUnk.Call(native, id);
		}

		public int AddPopMultiplierSphere(double p0, double p1, double p2, double p3, double p4, double p5, bool p6, bool p7)
		{
			if (addPopMultiplierSphere == null) addPopMultiplierSphere = (Function) native.GetObjectProperty("addPopMultiplierSphere");
			return (int) addPopMultiplierSphere.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public bool DoesPopMultiplierSphereExist(int id)
		{
			if (doesPopMultiplierSphereExist == null) doesPopMultiplierSphereExist = (Function) native.GetObjectProperty("doesPopMultiplierSphereExist");
			return (bool) doesPopMultiplierSphereExist.Call(native, id);
		}

		public void RemovePopMultiplierSphere(int id, bool p1)
		{
			if (removePopMultiplierSphere == null) removePopMultiplierSphere = (Function) native.GetObjectProperty("removePopMultiplierSphere");
			removePopMultiplierSphere.Call(native, id, p1);
		}

		/// <summary>
		/// Makes the ped jump around like they're in a tennis match
		/// </summary>
		public void EnableTennisMode(int ped, bool toggle, bool p2)
		{
			if (enableTennisMode == null) enableTennisMode = (Function) native.GetObjectProperty("enableTennisMode");
			enableTennisMode.Call(native, ped, toggle, p2);
		}

		public bool IsTennisMode(int ped)
		{
			if (isTennisMode == null) isTennisMode = (Function) native.GetObjectProperty("isTennisMode");
			return (bool) isTennisMode.Call(native, ped);
		}

		public void PlayTennisSwingAnim(int ped, string animDict, string animName, double p3, double p4, bool p5)
		{
			if (playTennisSwingAnim == null) playTennisSwingAnim = (Function) native.GetObjectProperty("playTennisSwingAnim");
			playTennisSwingAnim.Call(native, ped, animDict, animName, p3, p4, p5);
		}

		public bool GetTennisSwingAnimComplete(int ped)
		{
			if (getTennisSwingAnimComplete == null) getTennisSwingAnimComplete = (Function) native.GetObjectProperty("getTennisSwingAnimComplete");
			return (bool) getTennisSwingAnimComplete.Call(native, ped);
		}

		/// <summary>
		/// Related to tennis mode.
		/// GET_TENNIS_*
		/// </summary>
		public bool _0x19BFED045C647C49(int ped)
		{
			if (__0x19BFED045C647C49 == null) __0x19BFED045C647C49 = (Function) native.GetObjectProperty("_0x19BFED045C647C49");
			return (bool) __0x19BFED045C647C49.Call(native, ped);
		}

		/// <summary>
		/// Related to tennis mode.
		/// GET_TENNIS_*
		/// </summary>
		public bool _0xE95B0C7D5BA3B96B(int ped)
		{
			if (__0xE95B0C7D5BA3B96B == null) __0xE95B0C7D5BA3B96B = (Function) native.GetObjectProperty("_0xE95B0C7D5BA3B96B");
			return (bool) __0xE95B0C7D5BA3B96B.Call(native, ped);
		}

		public void PlayTennisDiveAnim(int ped, int p1, double p2, double p3, double p4, bool p5)
		{
			if (playTennisDiveAnim == null) playTennisDiveAnim = (Function) native.GetObjectProperty("playTennisDiveAnim");
			playTennisDiveAnim.Call(native, ped, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// From the scripts:
		/// GAMEPLAY::_54F157E0336A3822(sub_aa49(a_0), "ForcedStopDirection", v_E);
		/// Related to tennis mode.
		/// SET_*
		/// </summary>
		public void _0x54F157E0336A3822(int ped, string p1, double p2)
		{
			if (__0x54F157E0336A3822 == null) __0x54F157E0336A3822 = (Function) native.GetObjectProperty("_0x54F157E0336A3822");
			__0x54F157E0336A3822.Call(native, ped, p1, p2);
		}

		public void SetDispatchSpawnLocation(double x, double y, double z)
		{
			if (setDispatchSpawnLocation == null) setDispatchSpawnLocation = (Function) native.GetObjectProperty("setDispatchSpawnLocation");
			setDispatchSpawnLocation.Call(native, x, y, z);
		}

		public void ResetDispatchIdealSpawnDistance()
		{
			if (resetDispatchIdealSpawnDistance == null) resetDispatchIdealSpawnDistance = (Function) native.GetObjectProperty("resetDispatchIdealSpawnDistance");
			resetDispatchIdealSpawnDistance.Call(native);
		}

		public void SetDispatchIdealSpawnDistance(double p0)
		{
			if (setDispatchIdealSpawnDistance == null) setDispatchIdealSpawnDistance = (Function) native.GetObjectProperty("setDispatchIdealSpawnDistance");
			setDispatchIdealSpawnDistance.Call(native, p0);
		}

		public void ResetDispatchTimeBetweenSpawnAttempts(object p0)
		{
			if (resetDispatchTimeBetweenSpawnAttempts == null) resetDispatchTimeBetweenSpawnAttempts = (Function) native.GetObjectProperty("resetDispatchTimeBetweenSpawnAttempts");
			resetDispatchTimeBetweenSpawnAttempts.Call(native, p0);
		}

		public void SetDispatchTimeBetweenSpawnAttempts(object p0, double p1)
		{
			if (setDispatchTimeBetweenSpawnAttempts == null) setDispatchTimeBetweenSpawnAttempts = (Function) native.GetObjectProperty("setDispatchTimeBetweenSpawnAttempts");
			setDispatchTimeBetweenSpawnAttempts.Call(native, p0, p1);
		}

		public void SetDispatchTimeBetweenSpawnAttemptsMultiplier(object p0, double p1)
		{
			if (setDispatchTimeBetweenSpawnAttemptsMultiplier == null) setDispatchTimeBetweenSpawnAttemptsMultiplier = (Function) native.GetObjectProperty("setDispatchTimeBetweenSpawnAttemptsMultiplier");
			setDispatchTimeBetweenSpawnAttemptsMultiplier.Call(native, p0, p1);
		}

		public object AddDispatchSpawnBlockingAngledArea(double p0, double p1, double p2, double p3, double p4, double p5, double p6)
		{
			if (addDispatchSpawnBlockingAngledArea == null) addDispatchSpawnBlockingAngledArea = (Function) native.GetObjectProperty("addDispatchSpawnBlockingAngledArea");
			return addDispatchSpawnBlockingAngledArea.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public object AddDispatchSpawnBlockingArea(double p0, double p1, double p2, double p3)
		{
			if (addDispatchSpawnBlockingArea == null) addDispatchSpawnBlockingArea = (Function) native.GetObjectProperty("addDispatchSpawnBlockingArea");
			return addDispatchSpawnBlockingArea.Call(native, p0, p1, p2, p3);
		}

		public void RemoveDispatchSpawnBlockingArea(object p0)
		{
			if (removeDispatchSpawnBlockingArea == null) removeDispatchSpawnBlockingArea = (Function) native.GetObjectProperty("removeDispatchSpawnBlockingArea");
			removeDispatchSpawnBlockingArea.Call(native, p0);
		}

		public void ResetDispatchSpawnBlockingAreas()
		{
			if (resetDispatchSpawnBlockingAreas == null) resetDispatchSpawnBlockingAreas = (Function) native.GetObjectProperty("resetDispatchSpawnBlockingAreas");
			resetDispatchSpawnBlockingAreas.Call(native);
		}

		/// <summary>
		/// RESET_*
		/// </summary>
		public void _0xD9F692D349249528()
		{
			if (__0xD9F692D349249528 == null) __0xD9F692D349249528 = (Function) native.GetObjectProperty("_0xD9F692D349249528");
			__0xD9F692D349249528.Call(native);
		}

		/// <summary>
		/// SET_*
		/// </summary>
		public void _0xE532EC1A63231B4F(int p0, int p1)
		{
			if (__0xE532EC1A63231B4F == null) __0xE532EC1A63231B4F = (Function) native.GetObjectProperty("_0xE532EC1A63231B4F");
			__0xE532EC1A63231B4F.Call(native, p0, p1);
		}

		public void AddTacticalAnalysisPoint(object p0, object p1, object p2)
		{
			if (addTacticalAnalysisPoint == null) addTacticalAnalysisPoint = (Function) native.GetObjectProperty("addTacticalAnalysisPoint");
			addTacticalAnalysisPoint.Call(native, p0, p1, p2);
		}

		public void ClearTacticalAnalysisPoints()
		{
			if (clearTacticalAnalysisPoints == null) clearTacticalAnalysisPoints = (Function) native.GetObjectProperty("clearTacticalAnalysisPoints");
			clearTacticalAnalysisPoints.Call(native);
		}

		public void _0x2587A48BC88DFADF(bool p0)
		{
			if (__0x2587A48BC88DFADF == null) __0x2587A48BC88DFADF = (Function) native.GetObjectProperty("_0x2587A48BC88DFADF");
			__0x2587A48BC88DFADF.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) DisplayOnscreenKeyboardWithLongerInitialString(int p0, string windowTitle, object p2, string defaultText, string defaultConcat1, string defaultConcat2, string defaultConcat3, string defaultConcat4, string defaultConcat5, string defaultConcat6, string defaultConcat7, int maxInputLength)
		{
			if (displayOnscreenKeyboardWithLongerInitialString == null) displayOnscreenKeyboardWithLongerInitialString = (Function) native.GetObjectProperty("displayOnscreenKeyboardWithLongerInitialString");
			var results = (Array) displayOnscreenKeyboardWithLongerInitialString.Call(native, p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);
			return (results[0], results[1]);
		}

		/// <summary>
		/// sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.
		/// NOTE: windowTitle uses text labels, and an invalid value will display nothing.
		/// www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
		/// windowTitle's
		/// -----------------
		/// CELL_EMAIL_BOD  =   "Enter your Eyefind message"
		/// CELL_EMAIL_BODE =   "Message too long. Try again"
		/// CELL_EMAIL_BODF    =   "Forbidden message. Try again"
		/// CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
		/// See NativeDB for reference: http://natives.altv.mp/#/0x00DC833F2568DBF6
		/// </summary>
		public void DisplayOnscreenKeyboard(int p0, string windowTitle, string p2, string defaultText, string defaultConcat1, string defaultConcat2, string defaultConcat3, int maxInputLength)
		{
			if (displayOnscreenKeyboard == null) displayOnscreenKeyboard = (Function) native.GetObjectProperty("displayOnscreenKeyboard");
			displayOnscreenKeyboard.Call(native, p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
		}

		/// <summary>
		/// Status Codes:
		/// 0 - User still editing
		/// 1 - User has finished editing
		/// 2 - User has canceled editing
		/// 3 - Keyboard isn't active
		/// </summary>
		/// <returns>Returns the current status of the onscreen keyboard, and updates the output.</returns>
		public int UpdateOnscreenKeyboard()
		{
			if (updateOnscreenKeyboard == null) updateOnscreenKeyboard = (Function) native.GetObjectProperty("updateOnscreenKeyboard");
			return (int) updateOnscreenKeyboard.Call(native);
		}

		public string GetOnscreenKeyboardResult()
		{
			if (getOnscreenKeyboardResult == null) getOnscreenKeyboardResult = (Function) native.GetObjectProperty("getOnscreenKeyboardResult");
			return (string) getOnscreenKeyboardResult.Call(native);
		}

		/// <summary>
		/// DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
		/// Use _FORCE_CLOSE_TEXT_INPUT_BOX instead.
		/// CANCEL_*
		/// </summary>
		public void CancelOnscreenKeyboard()
		{
			if (cancelOnscreenKeyboard == null) cancelOnscreenKeyboard = (Function) native.GetObjectProperty("cancelOnscreenKeyboard");
			cancelOnscreenKeyboard.Call(native);
		}

		/// <summary>
		/// p0 was always 2 in R* scripts.
		/// Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
		/// </summary>
		/// <param name="p0">was always 2 in R* scripts.</param>
		public void _0x3ED1438C1F5C6612(int p0)
		{
			if (__0x3ED1438C1F5C6612 == null) __0x3ED1438C1F5C6612 = (Function) native.GetObjectProperty("_0x3ED1438C1F5C6612");
			__0x3ED1438C1F5C6612.Call(native, p0);
		}

		/// <summary>
		/// Appears to remove stealth kill action from memory
		/// </summary>
		public void RemoveStealthKill(int hash, bool p1)
		{
			if (removeStealthKill == null) removeStealthKill = (Function) native.GetObjectProperty("removeStealthKill");
			removeStealthKill.Call(native, hash, p1);
		}

		/// <summary>
		/// Unsure about the use of this native but here's an example:
		/// void sub_8709() {
		/// GAMEPLAY::_1EAE0A6E978894A2(0, 1);
		/// GAMEPLAY::_1EAE0A6E978894A2(1, 1);
		/// GAMEPLAY::_1EAE0A6E978894A2(2, 1);
		/// GAMEPLAY::_1EAE0A6E978894A2(3, 1);
		/// GAMEPLAY::_1EAE0A6E978894A2(4, 1);
		/// GAMEPLAY::_1EAE0A6E978894A2(5, 1);
		/// GAMEPLAY::_1EAE0A6E978894A2(6, 1);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x1EAE0A6E978894A2
		/// </summary>
		public void _0x1EAE0A6E978894A2(int p0, bool p1)
		{
			if (__0x1EAE0A6E978894A2 == null) __0x1EAE0A6E978894A2 = (Function) native.GetObjectProperty("_0x1EAE0A6E978894A2");
			__0x1EAE0A6E978894A2.Call(native, p0, p1);
		}

		public void SetExplosiveAmmoThisFrame(int player)
		{
			if (setExplosiveAmmoThisFrame == null) setExplosiveAmmoThisFrame = (Function) native.GetObjectProperty("setExplosiveAmmoThisFrame");
			setExplosiveAmmoThisFrame.Call(native, player);
		}

		public void SetFireAmmoThisFrame(int player)
		{
			if (setFireAmmoThisFrame == null) setFireAmmoThisFrame = (Function) native.GetObjectProperty("setFireAmmoThisFrame");
			setFireAmmoThisFrame.Call(native, player);
		}

		public void SetExplosiveMeleeThisFrame(int player)
		{
			if (setExplosiveMeleeThisFrame == null) setExplosiveMeleeThisFrame = (Function) native.GetObjectProperty("setExplosiveMeleeThisFrame");
			setExplosiveMeleeThisFrame.Call(native, player);
		}

		public void SetSuperJumpThisFrame(int player)
		{
			if (setSuperJumpThisFrame == null) setSuperJumpThisFrame = (Function) native.GetObjectProperty("setSuperJumpThisFrame");
			setSuperJumpThisFrame.Call(native, player);
		}

		public void _0x438822C279B73B93(object p0)
		{
			if (__0x438822C279B73B93 == null) __0x438822C279B73B93 = (Function) native.GetObjectProperty("_0x438822C279B73B93");
			__0x438822C279B73B93.Call(native, p0);
		}

		public void _0xA1183BCFEE0F93D1(object p0)
		{
			if (__0xA1183BCFEE0F93D1 == null) __0xA1183BCFEE0F93D1 = (Function) native.GetObjectProperty("_0xA1183BCFEE0F93D1");
			__0xA1183BCFEE0F93D1.Call(native, p0);
		}

		/// <summary>
		/// HAS_*
		/// Probably something like "has game been started for the first time".
		/// </summary>
		public bool _0x6FDDF453C0C756EC()
		{
			if (__0x6FDDF453C0C756EC == null) __0x6FDDF453C0C756EC = (Function) native.GetObjectProperty("_0x6FDDF453C0C756EC");
			return (bool) __0x6FDDF453C0C756EC.Call(native);
		}

		public void _0xFB00CA71DA386228()
		{
			if (__0xFB00CA71DA386228 == null) __0xFB00CA71DA386228 = (Function) native.GetObjectProperty("_0xFB00CA71DA386228");
			__0xFB00CA71DA386228.Call(native);
		}

		public bool AreProfileSettingsValid()
		{
			if (areProfileSettingsValid == null) areProfileSettingsValid = (Function) native.GetObjectProperty("areProfileSettingsValid");
			return (bool) areProfileSettingsValid.Call(native);
		}

		/// <summary>
		/// sets something to 1
		/// </summary>
		public void _0xE3D969D2785FFB5E()
		{
			if (__0xE3D969D2785FFB5E == null) __0xE3D969D2785FFB5E = (Function) native.GetObjectProperty("_0xE3D969D2785FFB5E");
			__0xE3D969D2785FFB5E.Call(native);
		}

		/// <summary>
		/// Sets the localplayer playerinfo state back to playing (State 0)
		/// States are:
		/// -1: "Invalid"
		/// 0: "Playing"
		/// 1: "Died"
		/// 2: "Arrested"
		/// 3: "Failed Mission"
		/// 4: "Left Game"
		/// 5: "Respawn"
		/// 6: "In MP Cutscene"
		/// </summary>
		public void ResetLocalplayerState()
		{
			if (resetLocalplayerState == null) resetLocalplayerState = (Function) native.GetObjectProperty("resetLocalplayerState");
			resetLocalplayerState.Call(native);
		}

		public void _0x0A60017F841A54F2(object p0, object p1, object p2, object p3)
		{
			if (__0x0A60017F841A54F2 == null) __0x0A60017F841A54F2 = (Function) native.GetObjectProperty("_0x0A60017F841A54F2");
			__0x0A60017F841A54F2.Call(native, p0, p1, p2, p3);
		}

		public void _0x1FF6BF9A63E5757F()
		{
			if (__0x1FF6BF9A63E5757F == null) __0x1FF6BF9A63E5757F = (Function) native.GetObjectProperty("_0x1FF6BF9A63E5757F");
			__0x1FF6BF9A63E5757F.Call(native);
		}

		public void _0x1BB299305C3E8C13(object p0, object p1, object p2, object p3)
		{
			if (__0x1BB299305C3E8C13 == null) __0x1BB299305C3E8C13 = (Function) native.GetObjectProperty("_0x1BB299305C3E8C13");
			__0x1BB299305C3E8C13.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) _0x8EF5573A1F801A5C(object p0, object p1, object p2)
		{
			if (__0x8EF5573A1F801A5C == null) __0x8EF5573A1F801A5C = (Function) native.GetObjectProperty("_0x8EF5573A1F801A5C");
			var results = (Array) __0x8EF5573A1F801A5C.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// Begins with START_*. Next character in the name is either D or E.
		/// </summary>
		public void StartBenchmarkRecording()
		{
			if (startBenchmarkRecording == null) startBenchmarkRecording = (Function) native.GetObjectProperty("startBenchmarkRecording");
			startBenchmarkRecording.Call(native);
		}

		/// <summary>
		/// Begins with STOP_*. Next character in the name is either D or E.
		/// </summary>
		public void StopBenchmarkRecording()
		{
			if (stopBenchmarkRecording == null) stopBenchmarkRecording = (Function) native.GetObjectProperty("stopBenchmarkRecording");
			stopBenchmarkRecording.Call(native);
		}

		/// <summary>
		/// Begins with RESET_*. Next character in the name is either D or E.
		/// </summary>
		public void ResetBenchmarkRecording()
		{
			if (resetBenchmarkRecording == null) resetBenchmarkRecording = (Function) native.GetObjectProperty("resetBenchmarkRecording");
			resetBenchmarkRecording.Call(native);
		}

		/// <summary>
		/// Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
		/// </summary>
		public void SaveBenchmarkRecording()
		{
			if (saveBenchmarkRecording == null) saveBenchmarkRecording = (Function) native.GetObjectProperty("saveBenchmarkRecording");
			saveBenchmarkRecording.Call(native);
		}

		/// <summary>
		/// U*
		/// </summary>
		/// <returns>Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE</returns>
		public bool UiIsSingleplayerPauseMenuActive()
		{
			if (uiIsSingleplayerPauseMenuActive == null) uiIsSingleplayerPauseMenuActive = (Function) native.GetObjectProperty("uiIsSingleplayerPauseMenuActive");
			return (bool) uiIsSingleplayerPauseMenuActive.Call(native);
		}

		public bool LandingMenuIsActive()
		{
			if (landingMenuIsActive == null) landingMenuIsActive = (Function) native.GetObjectProperty("landingMenuIsActive");
			return (bool) landingMenuIsActive.Call(native);
		}

		public bool IsCommandLineBenchmarkValueSet()
		{
			if (isCommandLineBenchmarkValueSet == null) isCommandLineBenchmarkValueSet = (Function) native.GetObjectProperty("isCommandLineBenchmarkValueSet");
			return (bool) isCommandLineBenchmarkValueSet.Call(native);
		}

		public int GetBenchmarkIterationsFromCommandLine()
		{
			if (getBenchmarkIterationsFromCommandLine == null) getBenchmarkIterationsFromCommandLine = (Function) native.GetObjectProperty("getBenchmarkIterationsFromCommandLine");
			return (int) getBenchmarkIterationsFromCommandLine.Call(native);
		}

		public int GetBenchmarkPassFromCommandLine()
		{
			if (getBenchmarkPassFromCommandLine == null) getBenchmarkPassFromCommandLine = (Function) native.GetObjectProperty("getBenchmarkPassFromCommandLine");
			return (int) getBenchmarkPassFromCommandLine.Call(native);
		}

		public void RestartGame()
		{
			if (restartGame == null) restartGame = (Function) native.GetObjectProperty("restartGame");
			restartGame.Call(native);
		}

		/// <summary>
		/// Exits the game and downloads a fresh social club update on next restart.
		/// </summary>
		public void ForceSocialClubUpdate()
		{
			if (forceSocialClubUpdate == null) forceSocialClubUpdate = (Function) native.GetObjectProperty("forceSocialClubUpdate");
			forceSocialClubUpdate.Call(native);
		}

		/// <summary>
		/// Hardcoded to always return true.
		/// </summary>
		public bool HasAsyncInstallFinished()
		{
			if (hasAsyncInstallFinished == null) hasAsyncInstallFinished = (Function) native.GetObjectProperty("hasAsyncInstallFinished");
			return (bool) hasAsyncInstallFinished.Call(native);
		}

		public void CleanupAsyncInstall()
		{
			if (cleanupAsyncInstall == null) cleanupAsyncInstall = (Function) native.GetObjectProperty("cleanupAsyncInstall");
			cleanupAsyncInstall.Call(native);
		}

		/// <summary>
		/// aka "constrained"
		/// </summary>
		public bool IsInPowerSavingMode()
		{
			if (isInPowerSavingMode == null) isInPowerSavingMode = (Function) native.GetObjectProperty("isInPowerSavingMode");
			return (bool) isInPowerSavingMode.Call(native);
		}

		public int GetPowerSavingModeDuration()
		{
			if (getPowerSavingModeDuration == null) getPowerSavingModeDuration = (Function) native.GetObjectProperty("getPowerSavingModeDuration");
			return (int) getPowerSavingModeDuration.Call(native);
		}

		/// <summary>
		/// If toggle is true, the ped's head is shown in the pause menu
		/// If toggle is false, the ped's head is not shown in the pause menu
		/// </summary>
		public void SetPlayerIsInAnimalForm(bool toggle)
		{
			if (setPlayerIsInAnimalForm == null) setPlayerIsInAnimalForm = (Function) native.GetObjectProperty("setPlayerIsInAnimalForm");
			setPlayerIsInAnimalForm.Call(native, toggle);
		}

		/// <summary>
		/// Although we don't have a jenkins hash for this one, the name is 100% confirmed.
		/// </summary>
		public bool GetIsPlayerInAnimalForm()
		{
			if (getIsPlayerInAnimalForm == null) getIsPlayerInAnimalForm = (Function) native.GetObjectProperty("getIsPlayerInAnimalForm");
			return (bool) getIsPlayerInAnimalForm.Call(native);
		}

		/// <summary>
		/// SET_PLAYER_*
		/// </summary>
		public void SetPlayerRockstarEditorDisabled(bool toggle)
		{
			if (setPlayerRockstarEditorDisabled == null) setPlayerRockstarEditorDisabled = (Function) native.GetObjectProperty("setPlayerRockstarEditorDisabled");
			setPlayerRockstarEditorDisabled.Call(native, toggle);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0x23227DF0B2115469()
		{
			if (__0x23227DF0B2115469 == null) __0x23227DF0B2115469 = (Function) native.GetObjectProperty("_0x23227DF0B2115469");
			__0x23227DF0B2115469.Call(native);
		}

		public object _0xD10282B6E3751BA0()
		{
			if (__0xD10282B6E3751BA0 == null) __0xD10282B6E3751BA0 = (Function) native.GetObjectProperty("_0xD10282B6E3751BA0");
			return __0xD10282B6E3751BA0.Call(native);
		}

		public void _0x693478ACBD7F18E7()
		{
			if (__0x693478ACBD7F18E7 == null) __0x693478ACBD7F18E7 = (Function) native.GetObjectProperty("_0x693478ACBD7F18E7");
			__0x693478ACBD7F18E7.Call(native);
		}

		/// <summary>
		/// Creates a mobile phone of the specified type.
		/// Possible phone types:
		/// 0 - Default phone / Michael's phone
		/// 1 - Trevor's phone
		/// 2 - Franklin's phone
		/// 4 - Prologue phone
		/// These values represent bit flags, so a value of '3' would toggle Trevor and Franklin's phones together, causing unexpected behavior and most likely crash the game.
		/// </summary>
		public void CreateMobilePhone(int phoneType)
		{
			if (createMobilePhone == null) createMobilePhone = (Function) native.GetObjectProperty("createMobilePhone");
			createMobilePhone.Call(native, phoneType);
		}

		/// <summary>
		/// Destroys the currently active mobile phone.
		/// </summary>
		public void DestroyMobilePhone()
		{
			if (destroyMobilePhone == null) destroyMobilePhone = (Function) native.GetObjectProperty("destroyMobilePhone");
			destroyMobilePhone.Call(native);
		}

		/// <summary>
		/// The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
		/// </summary>
		public void SetMobilePhoneScale(double scale)
		{
			if (setMobilePhoneScale == null) setMobilePhoneScale = (Function) native.GetObjectProperty("setMobilePhoneScale");
			setMobilePhoneScale.Call(native, scale);
		}

		/// <summary>
		/// Last parameter is unknown and always zero.
		/// </summary>
		public void SetMobilePhoneRotation(double rotX, double rotY, double rotZ, object p3)
		{
			if (setMobilePhoneRotation == null) setMobilePhoneRotation = (Function) native.GetObjectProperty("setMobilePhoneRotation");
			setMobilePhoneRotation.Call(native, rotX, rotY, rotZ, p3);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, Vector3></returns>
		public (object, Vector3) GetMobilePhoneRotation(Vector3 rotation, int p1)
		{
			if (getMobilePhoneRotation == null) getMobilePhoneRotation = (Function) native.GetObjectProperty("getMobilePhoneRotation");
			var results = (Array) getMobilePhoneRotation.Call(native, rotation, p1);
			return (results[0], JSObjectToVector3(results[1]));
		}

		public void SetMobilePhonePosition(double posX, double posY, double posZ)
		{
			if (setMobilePhonePosition == null) setMobilePhonePosition = (Function) native.GetObjectProperty("setMobilePhonePosition");
			setMobilePhonePosition.Call(native, posX, posY, posZ);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, Vector3></returns>
		public (object, Vector3) GetMobilePhonePosition(Vector3 position)
		{
			if (getMobilePhonePosition == null) getMobilePhonePosition = (Function) native.GetObjectProperty("getMobilePhonePosition");
			var results = (Array) getMobilePhonePosition.Call(native, position);
			return (results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// If bool Toggle = true so the mobile is hide to screen.
		/// If bool Toggle = false so the mobile is show to screen.
		/// </summary>
		/// <param name="toggle">If bool Toggle = false so the mobile is show to screen.</param>
		public void ScriptIsMovingMobilePhoneOffscreen(bool toggle)
		{
			if (scriptIsMovingMobilePhoneOffscreen == null) scriptIsMovingMobilePhoneOffscreen = (Function) native.GetObjectProperty("scriptIsMovingMobilePhoneOffscreen");
			scriptIsMovingMobilePhoneOffscreen.Call(native, toggle);
		}

		/// <summary>
		/// This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
		/// I can confirm the above. This function is hard-coded to always return 1.
		/// </summary>
		public bool CanPhoneBeSeenOnScreen()
		{
			if (canPhoneBeSeenOnScreen == null) canPhoneBeSeenOnScreen = (Function) native.GetObjectProperty("canPhoneBeSeenOnScreen");
			return (bool) canPhoneBeSeenOnScreen.Call(native);
		}

		public void SetMobilePhoneUnk(bool toggle)
		{
			if (setMobilePhoneUnk == null) setMobilePhoneUnk = (Function) native.GetObjectProperty("setMobilePhoneUnk");
			setMobilePhoneUnk.Call(native, toggle);
		}

		/// <summary>
		/// For move the finger of player, the value of int goes 1 at 5.
		/// </summary>
		public void CellCamMoveFinger(int direction)
		{
			if (cellCamMoveFinger == null) cellCamMoveFinger = (Function) native.GetObjectProperty("cellCamMoveFinger");
			cellCamMoveFinger.Call(native, direction);
		}

		/// <summary>
		/// if the bool "Toggle" is "true" so the phone is lean.
		/// if the bool "Toggle" is "false" so the phone is not lean.
		/// </summary>
		public void CellCamSetLean(bool toggle)
		{
			if (cellCamSetLean == null) cellCamSetLean = (Function) native.GetObjectProperty("cellCamSetLean");
			cellCamSetLean.Call(native, toggle);
		}

		public void CellCamActivate(bool p0, bool p1)
		{
			if (cellCamActivate == null) cellCamActivate = (Function) native.GetObjectProperty("cellCamActivate");
			cellCamActivate.Call(native, p0, p1);
		}

		/// <summary>
		/// Disables the phone up-button, oddly enough.
		/// i.e.: When the phone is out, and this method is called with false as it's parameter, the phone will not be able to scroll up. However, when you use the down arrow key, it's functionality still, works on the phone.
		/// When the phone is not out, and this method is called with false as it's parameter, you will not be able to bring up the phone. Although the up arrow key still works for whatever functionality it's used for, just not for the phone.
		/// This can be used for creating menu's when trying to disable the phone from being used.
		/// You do not have to call the function again with false as a parameter, as soon as the function stops being called, the phone will again be usable.
		/// </summary>
		public void CellCamDisableThisFrame(bool toggle)
		{
			if (cellCamDisableThisFrame == null) cellCamDisableThisFrame = (Function) native.GetObjectProperty("cellCamDisableThisFrame");
			cellCamDisableThisFrame.Call(native, toggle);
		}

		/// <summary>
		/// Needs more research. If the "phone_cam12" filter is applied, this function is called with "TRUE"; otherwise, "FALSE".
		/// Example (XBOX 360):
		/// // check current filter selection
		/// if (GAMEPLAY::ARE_STRINGS_EQUAL(getElem(g_2471024, &l_17, 4), "phone_cam12") != 0)
		/// {
		/// MOBILE::_0xC273BB4D(0); // FALSE
		/// }
		/// else
		/// {
		/// See NativeDB for reference: http://natives.altv.mp/#/0xA2CCBE62CD4C91A4
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) _0xA2CCBE62CD4C91A4(int toggle)
		{
			if (__0xA2CCBE62CD4C91A4 == null) __0xA2CCBE62CD4C91A4 = (Function) native.GetObjectProperty("_0xA2CCBE62CD4C91A4");
			var results = (Array) __0xA2CCBE62CD4C91A4.Call(native, toggle);
			return (results[0], (int) results[1]);
		}

		public void _0x1B0B4AEED5B9B41C(double p0)
		{
			if (__0x1B0B4AEED5B9B41C == null) __0x1B0B4AEED5B9B41C = (Function) native.GetObjectProperty("_0x1B0B4AEED5B9B41C");
			__0x1B0B4AEED5B9B41C.Call(native, p0);
		}

		public void _0x53F4892D18EC90A4(double p0)
		{
			if (__0x53F4892D18EC90A4 == null) __0x53F4892D18EC90A4 = (Function) native.GetObjectProperty("_0x53F4892D18EC90A4");
			__0x53F4892D18EC90A4.Call(native, p0);
		}

		public void _0x3117D84EFA60F77B(double p0)
		{
			if (__0x3117D84EFA60F77B == null) __0x3117D84EFA60F77B = (Function) native.GetObjectProperty("_0x3117D84EFA60F77B");
			__0x3117D84EFA60F77B.Call(native, p0);
		}

		public void _0x15E69E2802C24B8D(double p0)
		{
			if (__0x15E69E2802C24B8D == null) __0x15E69E2802C24B8D = (Function) native.GetObjectProperty("_0x15E69E2802C24B8D");
			__0x15E69E2802C24B8D.Call(native, p0);
		}

		public void _0xAC2890471901861C(double p0)
		{
			if (__0xAC2890471901861C == null) __0xAC2890471901861C = (Function) native.GetObjectProperty("_0xAC2890471901861C");
			__0xAC2890471901861C.Call(native, p0);
		}

		public void _0xD6ADE981781FCA09(double p0)
		{
			if (__0xD6ADE981781FCA09 == null) __0xD6ADE981781FCA09 = (Function) native.GetObjectProperty("_0xD6ADE981781FCA09");
			__0xD6ADE981781FCA09.Call(native, p0);
		}

		public void _0xF1E22DC13F5EEBAD(double p0)
		{
			if (__0xF1E22DC13F5EEBAD == null) __0xF1E22DC13F5EEBAD = (Function) native.GetObjectProperty("_0xF1E22DC13F5EEBAD");
			__0xF1E22DC13F5EEBAD.Call(native, p0);
		}

		public void _0x466DA42C89865553(double p0)
		{
			if (__0x466DA42C89865553 == null) __0x466DA42C89865553 = (Function) native.GetObjectProperty("_0x466DA42C89865553");
			__0x466DA42C89865553.Call(native, p0);
		}

		public bool CellCamIsCharVisibleNoFaceCheck(int entity)
		{
			if (cellCamIsCharVisibleNoFaceCheck == null) cellCamIsCharVisibleNoFaceCheck = (Function) native.GetObjectProperty("cellCamIsCharVisibleNoFaceCheck");
			return (bool) cellCamIsCharVisibleNoFaceCheck.Call(native, entity);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) GetMobilePhoneRenderId(int renderId)
		{
			if (getMobilePhoneRenderId == null) getMobilePhoneRenderId = (Function) native.GetObjectProperty("getMobilePhoneRenderId");
			var results = (Array) getMobilePhoneRenderId.Call(native, renderId);
			return (results[0], (int) results[1]);
		}

		public void NetworkInitializeCash(int wallet, int bank)
		{
			if (networkInitializeCash == null) networkInitializeCash = (Function) native.GetObjectProperty("networkInitializeCash");
			networkInitializeCash.Call(native, wallet, bank);
		}

		/// <summary>
		/// Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
		/// </summary>
		public void NetworkDeleteCharacter(int characterSlot, bool p1, bool p2)
		{
			if (networkDeleteCharacter == null) networkDeleteCharacter = (Function) native.GetObjectProperty("networkDeleteCharacter");
			networkDeleteCharacter.Call(native, characterSlot, p1, p2);
		}

		public void NetworkManualDeleteCharacter(int characterSlot)
		{
			if (networkManualDeleteCharacter == null) networkManualDeleteCharacter = (Function) native.GetObjectProperty("networkManualDeleteCharacter");
			networkManualDeleteCharacter.Call(native, characterSlot);
		}

		public bool NetworkGetIsHighEarner()
		{
			if (networkGetIsHighEarner == null) networkGetIsHighEarner = (Function) native.GetObjectProperty("networkGetIsHighEarner");
			return (bool) networkGetIsHighEarner.Call(native);
		}

		public void NetworkClearCharacterWallet(int characterSlot)
		{
			if (networkClearCharacterWallet == null) networkClearCharacterWallet = (Function) native.GetObjectProperty("networkClearCharacterWallet");
			networkClearCharacterWallet.Call(native, characterSlot);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkGivePlayerJobshareCash(int amount, int networkHandle)
		{
			if (networkGivePlayerJobshareCash == null) networkGivePlayerJobshareCash = (Function) native.GetObjectProperty("networkGivePlayerJobshareCash");
			var results = (Array) networkGivePlayerJobshareCash.Call(native, amount, networkHandle);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkReceivePlayerJobshareCash(int value, int networkHandle)
		{
			if (networkReceivePlayerJobshareCash == null) networkReceivePlayerJobshareCash = (Function) native.GetObjectProperty("networkReceivePlayerJobshareCash");
			var results = (Array) networkReceivePlayerJobshareCash.Call(native, value, networkHandle);
			return (results[0], (int) results[1]);
		}

		public bool NetworkCanShareJobCash()
		{
			if (networkCanShareJobCash == null) networkCanShareJobCash = (Function) native.GetObjectProperty("networkCanShareJobCash");
			return (bool) networkCanShareJobCash.Call(native);
		}

		/// <summary>
		/// index
		/// -------
		/// See function sub_1005 in am_boat_taxi.ysc
		/// context
		/// ----------
		/// "BACKUP_VAGOS"
		/// "BACKUP_LOST"
		/// "BACKUP_FAMILIES"
		/// "HIRE_MUGGER"
		/// See NativeDB for reference: http://natives.altv.mp/#/0xF9C812CD7C46E817
		/// </summary>
		public void NetworkRefundCash(int index, string context, string reason, bool unk)
		{
			if (networkRefundCash == null) networkRefundCash = (Function) native.GetObjectProperty("networkRefundCash");
			networkRefundCash.Call(native, index, context, reason, unk);
		}

		public void NetworkDeductCash(int amount, string p1, string p2, bool p3, bool p4, bool p5)
		{
			if (networkDeductCash == null) networkDeductCash = (Function) native.GetObjectProperty("networkDeductCash");
			networkDeductCash.Call(native, amount, p1, p2, p3, p4, p5);
		}

		public bool NetworkMoneyCanBet(int amount, bool p1, bool p2)
		{
			if (networkMoneyCanBet == null) networkMoneyCanBet = (Function) native.GetObjectProperty("networkMoneyCanBet");
			return (bool) networkMoneyCanBet.Call(native, amount, p1, p2);
		}

		public bool NetworkCanBet(int amount)
		{
			if (networkCanBet == null) networkCanBet = (Function) native.GetObjectProperty("networkCanBet");
			return (bool) networkCanBet.Call(native, amount);
		}

		public bool NetworkCanBuyLotteryTicket(int cost)
		{
			if (networkCanBuyLotteryTicket == null) networkCanBuyLotteryTicket = (Function) native.GetObjectProperty("networkCanBuyLotteryTicket");
			return (bool) networkCanBuyLotteryTicket.Call(native, cost);
		}

		/// <summary>
		/// GTAO_CASINO_HOUSE
		/// GTAO_CASINO_INSIDETRACK
		/// GTAO_CASINO_LUCKYWHEEL
		/// GTAO_CASINO_BLACKJACK
		/// GTAO_CASINO_ROULETTE
		/// GTAO_CASINO_SLOTS
		/// GTAO_CASINO_PURCHASE_CHIPS
		/// NETWORK_C*
		/// </summary>
		public bool NetworkCasinoCanUseGamblingType(int hash)
		{
			if (networkCasinoCanUseGamblingType == null) networkCasinoCanUseGamblingType = (Function) native.GetObjectProperty("networkCasinoCanUseGamblingType");
			return (bool) networkCasinoCanUseGamblingType.Call(native, hash);
		}

		/// <summary>
		/// Same as 0x8968D4D8C6C40C11.
		/// NETWORK_C*
		/// </summary>
		public bool NetworkCasinoCanPurchaseChipsWithPvc()
		{
			if (networkCasinoCanPurchaseChipsWithPvc == null) networkCasinoCanPurchaseChipsWithPvc = (Function) native.GetObjectProperty("networkCasinoCanPurchaseChipsWithPvc");
			return (bool) networkCasinoCanPurchaseChipsWithPvc.Call(native);
		}

		/// <summary>
		/// NETWORK_C*
		/// </summary>
		public bool NetworkCasinoCanGamble(object p0)
		{
			if (networkCasinoCanGamble == null) networkCasinoCanGamble = (Function) native.GetObjectProperty("networkCasinoCanGamble");
			return (bool) networkCasinoCanGamble.Call(native, p0);
		}

		/// <summary>
		/// Same as 0x394DCDB9E836B7A9.
		/// NETWORK_C*
		/// </summary>
		public bool NetworkCasinoCanPurchaseChipsWithPvc2()
		{
			if (networkCasinoCanPurchaseChipsWithPvc2 == null) networkCasinoCanPurchaseChipsWithPvc2 = (Function) native.GetObjectProperty("networkCasinoCanPurchaseChipsWithPvc2");
			return (bool) networkCasinoCanPurchaseChipsWithPvc2.Call(native);
		}

		/// <summary>
		/// NETWORK_C*
		/// </summary>
		public bool NetworkCasinoPurchaseChips(int p0, int p1)
		{
			if (networkCasinoPurchaseChips == null) networkCasinoPurchaseChips = (Function) native.GetObjectProperty("networkCasinoPurchaseChips");
			return (bool) networkCasinoPurchaseChips.Call(native, p0, p1);
		}

		/// <summary>
		/// NETWORK_C*
		/// </summary>
		public bool NetworkCasinoSellChips(int p0, int p1)
		{
			if (networkCasinoSellChips == null) networkCasinoSellChips = (Function) native.GetObjectProperty("networkCasinoSellChips");
			return (bool) networkCasinoSellChips.Call(native, p0, p1);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0xCD0F5B5D932AE473()
		{
			if (__0xCD0F5B5D932AE473 == null) __0xCD0F5B5D932AE473 = (Function) native.GetObjectProperty("_0xCD0F5B5D932AE473");
			__0xCD0F5B5D932AE473.Call(native);
		}

		/// <summary>
		/// CAN_*
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) CanPayGoon(int p0, int p1, int amount, int p3)
		{
			if (canPayGoon == null) canPayGoon = (Function) native.GetObjectProperty("canPayGoon");
			var results = (Array) canPayGoon.Call(native, p0, p1, amount, p3);
			return ((bool) results[0], (int) results[1]);
		}

		public void NetworkEarnFromCashingOut(int amount)
		{
			if (networkEarnFromCashingOut == null) networkEarnFromCashingOut = (Function) native.GetObjectProperty("networkEarnFromCashingOut");
			networkEarnFromCashingOut.Call(native, amount);
		}

		public void NetworkEarnFromPickup(int amount)
		{
			if (networkEarnFromPickup == null) networkEarnFromPickup = (Function) native.GetObjectProperty("networkEarnFromPickup");
			networkEarnFromPickup.Call(native, amount);
		}

		public void NetworkEarnFromGangPickup(int amount)
		{
			if (networkEarnFromGangPickup == null) networkEarnFromGangPickup = (Function) native.GetObjectProperty("networkEarnFromGangPickup");
			networkEarnFromGangPickup.Call(native, amount);
		}

		public void NetworkEarnFromAssassinateTargetKilled(int amount)
		{
			if (networkEarnFromAssassinateTargetKilled == null) networkEarnFromAssassinateTargetKilled = (Function) native.GetObjectProperty("networkEarnFromAssassinateTargetKilled");
			networkEarnFromAssassinateTargetKilled.Call(native, amount);
		}

		/// <summary>
		/// For the money bags that drop a max of $40,000. Often called 40k bags.
		/// Most likely NETWORK_EARN_FROM_ROB***
		/// </summary>
		public void NetworkEarnFromArmourTruck(int amount)
		{
			if (networkEarnFromArmourTruck == null) networkEarnFromArmourTruck = (Function) native.GetObjectProperty("networkEarnFromArmourTruck");
			networkEarnFromArmourTruck.Call(native, amount);
		}

		public void NetworkEarnFromCrateDrop(int amount)
		{
			if (networkEarnFromCrateDrop == null) networkEarnFromCrateDrop = (Function) native.GetObjectProperty("networkEarnFromCrateDrop");
			networkEarnFromCrateDrop.Call(native, amount);
		}

		public void NetworkEarnFromBetting(int amount, string p1)
		{
			if (networkEarnFromBetting == null) networkEarnFromBetting = (Function) native.GetObjectProperty("networkEarnFromBetting");
			networkEarnFromBetting.Call(native, amount, p1);
		}

		public void NetworkEarnFromJob(int amount, string p1)
		{
			if (networkEarnFromJob == null) networkEarnFromJob = (Function) native.GetObjectProperty("networkEarnFromJob");
			networkEarnFromJob.Call(native, amount, p1);
		}

		public void NetworkEarnFromJobX2(int amount, string p1)
		{
			if (networkEarnFromJobX2 == null) networkEarnFromJobX2 = (Function) native.GetObjectProperty("networkEarnFromJobX2");
			networkEarnFromJobX2.Call(native, amount, p1);
		}

		public void NetworkEarnFromPremiumJob(int amount, string p1)
		{
			if (networkEarnFromPremiumJob == null) networkEarnFromPremiumJob = (Function) native.GetObjectProperty("networkEarnFromPremiumJob");
			networkEarnFromPremiumJob.Call(native, amount, p1);
		}

		public void NetworkEarnFromBendJob(int amount, string heistHash)
		{
			if (networkEarnFromBendJob == null) networkEarnFromBendJob = (Function) native.GetObjectProperty("networkEarnFromBendJob");
			networkEarnFromBendJob.Call(native, amount, heistHash);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkEarnFromChallengeWin(object p0, object p1, bool p2)
		{
			if (networkEarnFromChallengeWin == null) networkEarnFromChallengeWin = (Function) native.GetObjectProperty("networkEarnFromChallengeWin");
			var results = (Array) networkEarnFromChallengeWin.Call(native, p0, p1, p2);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, object></returns>
		public (object, int, object) NetworkEarnFromBounty(int amount, int networkHandle, object p2, object p3)
		{
			if (networkEarnFromBounty == null) networkEarnFromBounty = (Function) native.GetObjectProperty("networkEarnFromBounty");
			var results = (Array) networkEarnFromBounty.Call(native, amount, networkHandle, p2, p3);
			return (results[0], (int) results[1], results[2]);
		}

		public void NetworkEarnFromImportExport(int amount, int modelHash)
		{
			if (networkEarnFromImportExport == null) networkEarnFromImportExport = (Function) native.GetObjectProperty("networkEarnFromImportExport");
			networkEarnFromImportExport.Call(native, amount, modelHash);
		}

		public void NetworkEarnFromHoldups(int amount)
		{
			if (networkEarnFromHoldups == null) networkEarnFromHoldups = (Function) native.GetObjectProperty("networkEarnFromHoldups");
			networkEarnFromHoldups.Call(native, amount);
		}

		public void NetworkEarnFromProperty(int amount, int propertyName)
		{
			if (networkEarnFromProperty == null) networkEarnFromProperty = (Function) native.GetObjectProperty("networkEarnFromProperty");
			networkEarnFromProperty.Call(native, amount, propertyName);
		}

		/// <summary>
		/// DSPORT
		/// </summary>
		public void NetworkEarnFromAiTargetKill(object p0, object p1)
		{
			if (networkEarnFromAiTargetKill == null) networkEarnFromAiTargetKill = (Function) native.GetObjectProperty("networkEarnFromAiTargetKill");
			networkEarnFromAiTargetKill.Call(native, p0, p1);
		}

		public void NetworkEarnFromNotBadsport(int amount)
		{
			if (networkEarnFromNotBadsport == null) networkEarnFromNotBadsport = (Function) native.GetObjectProperty("networkEarnFromNotBadsport");
			networkEarnFromNotBadsport.Call(native, amount);
		}

		public void NetworkEarnFromRockstar(int amount)
		{
			if (networkEarnFromRockstar == null) networkEarnFromRockstar = (Function) native.GetObjectProperty("networkEarnFromRockstar");
			networkEarnFromRockstar.Call(native, amount);
		}

		public void NetworkEarnFromVehicle(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7)
		{
			if (networkEarnFromVehicle == null) networkEarnFromVehicle = (Function) native.GetObjectProperty("networkEarnFromVehicle");
			networkEarnFromVehicle.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public void NetworkEarnFromPersonalVehicle(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8)
		{
			if (networkEarnFromPersonalVehicle == null) networkEarnFromPersonalVehicle = (Function) native.GetObjectProperty("networkEarnFromPersonalVehicle");
			networkEarnFromPersonalVehicle.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		public void NetworkEarnFromDailyObjectives(int p0, string p1, int p2)
		{
			if (networkEarnFromDailyObjectives == null) networkEarnFromDailyObjectives = (Function) native.GetObjectProperty("networkEarnFromDailyObjectives");
			networkEarnFromDailyObjectives.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// Example for p1: "AM_DISTRACT_COPS"
		/// </summary>
		/// <param name="p1">Example for "AM_DISTRACT_COPS"</param>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkEarnFromAmbientJob(int p0, string p1, object p2)
		{
			if (networkEarnFromAmbientJob == null) networkEarnFromAmbientJob = (Function) native.GetObjectProperty("networkEarnFromAmbientJob");
			var results = (Array) networkEarnFromAmbientJob.Call(native, p0, p1, p2);
			return (results[0], results[1]);
		}

		public void _0xD20D79671A598594(object p0, object p1, object p2)
		{
			if (__0xD20D79671A598594 == null) __0xD20D79671A598594 = (Function) native.GetObjectProperty("_0xD20D79671A598594");
			__0xD20D79671A598594.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) NetworkEarnFromJobBonus(object p0, object p1, object p2)
		{
			if (networkEarnFromJobBonus == null) networkEarnFromJobBonus = (Function) native.GetObjectProperty("networkEarnFromJobBonus");
			var results = (Array) networkEarnFromJobBonus.Call(native, p0, p1, p2);
			return (results[0], results[1], results[2]);
		}

		public void _0x9D4FDBB035229669(object p0, object p1, object p2)
		{
			if (__0x9D4FDBB035229669 == null) __0x9D4FDBB035229669 = (Function) native.GetObjectProperty("_0x9D4FDBB035229669");
			__0x9D4FDBB035229669.Call(native, p0, p1, p2);
		}

		public void _0x11B0A20C493F7E36(object p0, object p1, object p2)
		{
			if (__0x11B0A20C493F7E36 == null) __0x11B0A20C493F7E36 = (Function) native.GetObjectProperty("_0x11B0A20C493F7E36");
			__0x11B0A20C493F7E36.Call(native, p0, p1, p2);
		}

		public void _0xCDA1C62BE2777802(object p0, object p1, object p2)
		{
			if (__0xCDA1C62BE2777802 == null) __0xCDA1C62BE2777802 = (Function) native.GetObjectProperty("_0xCDA1C62BE2777802");
			__0xCDA1C62BE2777802.Call(native, p0, p1, p2);
		}

		public void _0x08B0CA7A6AB3AC32(object p0, object p1, object p2)
		{
			if (__0x08B0CA7A6AB3AC32 == null) __0x08B0CA7A6AB3AC32 = (Function) native.GetObjectProperty("_0x08B0CA7A6AB3AC32");
			__0x08B0CA7A6AB3AC32.Call(native, p0, p1, p2);
		}

		public void _0x0CB1BE0633C024A8(object p0, object p1, object p2, object p3)
		{
			if (__0x0CB1BE0633C024A8 == null) __0x0CB1BE0633C024A8 = (Function) native.GetObjectProperty("_0x0CB1BE0633C024A8");
			__0x0CB1BE0633C024A8.Call(native, p0, p1, p2, p3);
		}

		public void NetworkEarnFromWarehouse(int amount, int id)
		{
			if (networkEarnFromWarehouse == null) networkEarnFromWarehouse = (Function) native.GetObjectProperty("networkEarnFromWarehouse");
			networkEarnFromWarehouse.Call(native, amount, id);
		}

		public void NetworkEarnFromContraband(int amount, object p1)
		{
			if (networkEarnFromContraband == null) networkEarnFromContraband = (Function) native.GetObjectProperty("networkEarnFromContraband");
			networkEarnFromContraband.Call(native, amount, p1);
		}

		public void _0x84C0116D012E8FC2(object p0)
		{
			if (__0x84C0116D012E8FC2 == null) __0x84C0116D012E8FC2 = (Function) native.GetObjectProperty("_0x84C0116D012E8FC2");
			__0x84C0116D012E8FC2.Call(native, p0);
		}

		public void _0x6B7E4FB50D5F3D65(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0x6B7E4FB50D5F3D65 == null) __0x6B7E4FB50D5F3D65 = (Function) native.GetObjectProperty("_0x6B7E4FB50D5F3D65");
			__0x6B7E4FB50D5F3D65.Call(native, p0, p1, p2, p3, p4);
		}

		public void _0x31BA138F6304FB9F(object p0, object p1)
		{
			if (__0x31BA138F6304FB9F == null) __0x31BA138F6304FB9F = (Function) native.GetObjectProperty("_0x31BA138F6304FB9F");
			__0x31BA138F6304FB9F.Call(native, p0, p1);
		}

		public void _0x55A1E095DB052FA5(object p0, object p1)
		{
			if (__0x55A1E095DB052FA5 == null) __0x55A1E095DB052FA5 = (Function) native.GetObjectProperty("_0x55A1E095DB052FA5");
			__0x55A1E095DB052FA5.Call(native, p0, p1);
		}

		public void NetworkEarnFromBusinessProduct(int amount, object p1, object p2, object p3)
		{
			if (networkEarnFromBusinessProduct == null) networkEarnFromBusinessProduct = (Function) native.GetObjectProperty("networkEarnFromBusinessProduct");
			networkEarnFromBusinessProduct.Call(native, amount, p1, p2, p3);
		}

		public void NetworkEarnFromVehicleExport(int amount, object p1, object p2)
		{
			if (networkEarnFromVehicleExport == null) networkEarnFromVehicleExport = (Function) native.GetObjectProperty("networkEarnFromVehicleExport");
			networkEarnFromVehicleExport.Call(native, amount, p1, p2);
		}

		public void NetworkEarnFromSmuggling(int amount, object p1, object p2, object p3)
		{
			if (networkEarnFromSmuggling == null) networkEarnFromSmuggling = (Function) native.GetObjectProperty("networkEarnFromSmuggling");
			networkEarnFromSmuggling.Call(native, amount, p1, p2, p3);
		}

		public void _0xF6B170F9A02E9E87(object p0)
		{
			if (__0xF6B170F9A02E9E87 == null) __0xF6B170F9A02E9E87 = (Function) native.GetObjectProperty("_0xF6B170F9A02E9E87");
			__0xF6B170F9A02E9E87.Call(native, p0);
		}

		public void _0x42FCE14F50F27291(object p0)
		{
			if (__0x42FCE14F50F27291 == null) __0x42FCE14F50F27291 = (Function) native.GetObjectProperty("_0x42FCE14F50F27291");
			__0x42FCE14F50F27291.Call(native, p0);
		}

		public void _0xA75EAC69F59E96E7(object p0)
		{
			if (__0xA75EAC69F59E96E7 == null) __0xA75EAC69F59E96E7 = (Function) native.GetObjectProperty("_0xA75EAC69F59E96E7");
			__0xA75EAC69F59E96E7.Call(native, p0);
		}

		public void _0xC5156361F26E2212(object p0)
		{
			if (__0xC5156361F26E2212 == null) __0xC5156361F26E2212 = (Function) native.GetObjectProperty("_0xC5156361F26E2212");
			__0xC5156361F26E2212.Call(native, p0);
		}

		public void _0x0B39CF0D53F1C883(object p0, object p1, object p2)
		{
			if (__0x0B39CF0D53F1C883 == null) __0x0B39CF0D53F1C883 = (Function) native.GetObjectProperty("_0x0B39CF0D53F1C883");
			__0x0B39CF0D53F1C883.Call(native, p0, p1, p2);
		}

		public void _0x1FDA0AA679C9919B(object p0)
		{
			if (__0x1FDA0AA679C9919B == null) __0x1FDA0AA679C9919B = (Function) native.GetObjectProperty("_0x1FDA0AA679C9919B");
			__0x1FDA0AA679C9919B.Call(native, p0);
		}

		public void _0xFFFBA1B1F7C0B6F4(object p0)
		{
			if (__0xFFFBA1B1F7C0B6F4 == null) __0xFFFBA1B1F7C0B6F4 = (Function) native.GetObjectProperty("_0xFFFBA1B1F7C0B6F4");
			__0xFFFBA1B1F7C0B6F4.Call(native, p0);
		}

		public bool NetworkCanSpendMoney(object p0, bool p1, bool p2, bool p3, object p4, object p5)
		{
			if (networkCanSpendMoney == null) networkCanSpendMoney = (Function) native.GetObjectProperty("networkCanSpendMoney");
			return (bool) networkCanSpendMoney.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// NETWORK_CAN_R??? or NETWORK_CAN_S???
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkCanSpendMoney2(object p0, bool p1, bool p2, bool p3, object p4, object p5, object p6)
		{
			if (networkCanSpendMoney2 == null) networkCanSpendMoney2 = (Function) native.GetObjectProperty("networkCanSpendMoney2");
			var results = (Array) networkCanSpendMoney2.Call(native, p0, p1, p2, p3, p4, p5, p6);
			return ((bool) results[0], results[1]);
		}

		public void NetworkBuyItem(int amount, int item, object p2, object p3, bool p4, string item_name, object p6, object p7, object p8, bool p9)
		{
			if (networkBuyItem == null) networkBuyItem = (Function) native.GetObjectProperty("networkBuyItem");
			networkBuyItem.Call(native, amount, item, p2, p3, p4, item_name, p6, p7, p8, p9);
		}

		public void NetworkSpentTaxi(int amount, bool p1, bool p2)
		{
			if (networkSpentTaxi == null) networkSpentTaxi = (Function) native.GetObjectProperty("networkSpentTaxi");
			networkSpentTaxi.Call(native, amount, p1, p2);
		}

		public void NetworkPayEmployeeWage(object p0, bool p1, bool p2)
		{
			if (networkPayEmployeeWage == null) networkPayEmployeeWage = (Function) native.GetObjectProperty("networkPayEmployeeWage");
			networkPayEmployeeWage.Call(native, p0, p1, p2);
		}

		public void NetworkPayUtilityBill(int amount, bool p1, bool p2)
		{
			if (networkPayUtilityBill == null) networkPayUtilityBill = (Function) native.GetObjectProperty("networkPayUtilityBill");
			networkPayUtilityBill.Call(native, amount, p1, p2);
		}

		public void NetworkPayMatchEntryFee(int amount, string matchId, bool p2, bool p3)
		{
			if (networkPayMatchEntryFee == null) networkPayMatchEntryFee = (Function) native.GetObjectProperty("networkPayMatchEntryFee");
			networkPayMatchEntryFee.Call(native, amount, matchId, p2, p3);
		}

		public void NetworkSpentBetting(int amount, int p1, string matchId, bool p3, bool p4)
		{
			if (networkSpentBetting == null) networkSpentBetting = (Function) native.GetObjectProperty("networkSpentBetting");
			networkSpentBetting.Call(native, amount, p1, matchId, p3, p4);
		}

		public void NetworkSpentWager(object p0, object p1, int amount)
		{
			if (networkSpentWager == null) networkSpentWager = (Function) native.GetObjectProperty("networkSpentWager");
			networkSpentWager.Call(native, p0, p1, amount);
		}

		public void NetworkSpentInStripclub(object p0, bool p1, object p2, bool p3)
		{
			if (networkSpentInStripclub == null) networkSpentInStripclub = (Function) native.GetObjectProperty("networkSpentInStripclub");
			networkSpentInStripclub.Call(native, p0, p1, p2, p3);
		}

		public void NetworkBuyHealthcare(int cost, bool p1, bool p2)
		{
			if (networkBuyHealthcare == null) networkBuyHealthcare = (Function) native.GetObjectProperty("networkBuyHealthcare");
			networkBuyHealthcare.Call(native, cost, p1, p2);
		}

		/// <summary>
		/// p1 = 0 (always)
		/// p2 = 1 (always)
		/// </summary>
		/// <param name="p1">0 (always)</param>
		/// <param name="p2">1 (always)</param>
		public void NetworkBuyAirstrike(int cost, bool p1, bool p2)
		{
			if (networkBuyAirstrike == null) networkBuyAirstrike = (Function) native.GetObjectProperty("networkBuyAirstrike");
			networkBuyAirstrike.Call(native, cost, p1, p2);
		}

		public void NetworkBuyBackupGang(int p0, int p1, bool p2, bool p3)
		{
			if (networkBuyBackupGang == null) networkBuyBackupGang = (Function) native.GetObjectProperty("networkBuyBackupGang");
			networkBuyBackupGang.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// p1 = 0 (always)
		/// p2 = 1 (always)
		/// </summary>
		/// <param name="p1">0 (always)</param>
		/// <param name="p2">1 (always)</param>
		public void NetworkBuyHeliStrike(int cost, bool p1, bool p2)
		{
			if (networkBuyHeliStrike == null) networkBuyHeliStrike = (Function) native.GetObjectProperty("networkBuyHeliStrike");
			networkBuyHeliStrike.Call(native, cost, p1, p2);
		}

		public void NetworkSpentAmmoDrop(object p0, bool p1, bool p2)
		{
			if (networkSpentAmmoDrop == null) networkSpentAmmoDrop = (Function) native.GetObjectProperty("networkSpentAmmoDrop");
			networkSpentAmmoDrop.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// p1 is just an assumption. p2 was false and p3 was true.
		/// </summary>
		public void NetworkBuyBounty(int amount, int victim, bool p2, bool p3)
		{
			if (networkBuyBounty == null) networkBuyBounty = (Function) native.GetObjectProperty("networkBuyBounty");
			networkBuyBounty.Call(native, amount, victim, p2, p3);
		}

		public void NetworkBuyProperty(int cost, int propertyName, bool p2, bool p3)
		{
			if (networkBuyProperty == null) networkBuyProperty = (Function) native.GetObjectProperty("networkBuyProperty");
			networkBuyProperty.Call(native, cost, propertyName, p2, p3);
		}

		public void NetworkBuySmokes(int p0, bool p1, bool p2)
		{
			if (networkBuySmokes == null) networkBuySmokes = (Function) native.GetObjectProperty("networkBuySmokes");
			networkBuySmokes.Call(native, p0, p1, p2);
		}

		public void NetworkSpentHeliPickup(object p0, bool p1, bool p2)
		{
			if (networkSpentHeliPickup == null) networkSpentHeliPickup = (Function) native.GetObjectProperty("networkSpentHeliPickup");
			networkSpentHeliPickup.Call(native, p0, p1, p2);
		}

		public void NetworkSpentBoatPickup(object p0, bool p1, bool p2)
		{
			if (networkSpentBoatPickup == null) networkSpentBoatPickup = (Function) native.GetObjectProperty("networkSpentBoatPickup");
			networkSpentBoatPickup.Call(native, p0, p1, p2);
		}

		public void NetworkSpentBullShark(object p0, bool p1, bool p2)
		{
			if (networkSpentBullShark == null) networkSpentBullShark = (Function) native.GetObjectProperty("networkSpentBullShark");
			networkSpentBullShark.Call(native, p0, p1, p2);
		}

		public void NetworkSpentCashDrop(int amount, bool p1, bool p2)
		{
			if (networkSpentCashDrop == null) networkSpentCashDrop = (Function) native.GetObjectProperty("networkSpentCashDrop");
			networkSpentCashDrop.Call(native, amount, p1, p2);
		}

		/// <summary>
		/// Only used once in a script (am_contact_requests)
		/// p1 = 0
		/// p2 = 1
		/// </summary>
		/// <param name="p1">0</param>
		/// <param name="p2">1</param>
		public void NetworkSpentHireMugger(object p0, bool p1, bool p2)
		{
			if (networkSpentHireMugger == null) networkSpentHireMugger = (Function) native.GetObjectProperty("networkSpentHireMugger");
			networkSpentHireMugger.Call(native, p0, p1, p2);
		}

		public void NetworkSpentRobbedByMugger(int amount, bool p1, bool p2)
		{
			if (networkSpentRobbedByMugger == null) networkSpentRobbedByMugger = (Function) native.GetObjectProperty("networkSpentRobbedByMugger");
			networkSpentRobbedByMugger.Call(native, amount, p1, p2);
		}

		public void NetworkSpentHireMercenary(object p0, bool p1, bool p2)
		{
			if (networkSpentHireMercenary == null) networkSpentHireMercenary = (Function) native.GetObjectProperty("networkSpentHireMercenary");
			networkSpentHireMercenary.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkSpentBuyWantedlevel(object p0, object p1, bool p2, bool p3)
		{
			if (networkSpentBuyWantedlevel == null) networkSpentBuyWantedlevel = (Function) native.GetObjectProperty("networkSpentBuyWantedlevel");
			var results = (Array) networkSpentBuyWantedlevel.Call(native, p0, p1, p2, p3);
			return (results[0], results[1]);
		}

		public void NetworkSpentBuyOfftheradar(object p0, bool p1, bool p2)
		{
			if (networkSpentBuyOfftheradar == null) networkSpentBuyOfftheradar = (Function) native.GetObjectProperty("networkSpentBuyOfftheradar");
			networkSpentBuyOfftheradar.Call(native, p0, p1, p2);
		}

		public void NetworkSpentBuyRevealPlayers(object p0, bool p1, bool p2)
		{
			if (networkSpentBuyRevealPlayers == null) networkSpentBuyRevealPlayers = (Function) native.GetObjectProperty("networkSpentBuyRevealPlayers");
			networkSpentBuyRevealPlayers.Call(native, p0, p1, p2);
		}

		public void NetworkSpentCarwash(object p0, object p1, object p2, bool p3, bool p4)
		{
			if (networkSpentCarwash == null) networkSpentCarwash = (Function) native.GetObjectProperty("networkSpentCarwash");
			networkSpentCarwash.Call(native, p0, p1, p2, p3, p4);
		}

		public void NetworkSpentCinema(object p0, object p1, bool p2, bool p3)
		{
			if (networkSpentCinema == null) networkSpentCinema = (Function) native.GetObjectProperty("networkSpentCinema");
			networkSpentCinema.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentTelescope(object p0, bool p1, bool p2)
		{
			if (networkSpentTelescope == null) networkSpentTelescope = (Function) native.GetObjectProperty("networkSpentTelescope");
			networkSpentTelescope.Call(native, p0, p1, p2);
		}

		public void NetworkSpentHoldups(object p0, bool p1, bool p2)
		{
			if (networkSpentHoldups == null) networkSpentHoldups = (Function) native.GetObjectProperty("networkSpentHoldups");
			networkSpentHoldups.Call(native, p0, p1, p2);
		}

		public void NetworkSpentBuyPassiveMode(object p0, bool p1, bool p2)
		{
			if (networkSpentBuyPassiveMode == null) networkSpentBuyPassiveMode = (Function) native.GetObjectProperty("networkSpentBuyPassiveMode");
			networkSpentBuyPassiveMode.Call(native, p0, p1, p2);
		}

		public void NetworkSpentBankInterest(int p0, bool p1, bool p2)
		{
			if (networkSpentBankInterest == null) networkSpentBankInterest = (Function) native.GetObjectProperty("networkSpentBankInterest");
			networkSpentBankInterest.Call(native, p0, p1, p2);
		}

		public void NetworkSpentProstitutes(object p0, bool p1, bool p2)
		{
			if (networkSpentProstitutes == null) networkSpentProstitutes = (Function) native.GetObjectProperty("networkSpentProstitutes");
			networkSpentProstitutes.Call(native, p0, p1, p2);
		}

		public void NetworkSpentArrestBail(object p0, bool p1, bool p2)
		{
			if (networkSpentArrestBail == null) networkSpentArrestBail = (Function) native.GetObjectProperty("networkSpentArrestBail");
			networkSpentArrestBail.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// According to how I understood this in the freemode script alone,
		/// The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
		/// The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
		/// The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
		/// The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
		/// bool hasTheMoney = NETWORKCASH::_GET_BANK_BALANCE() < carCost.
		/// </summary>
		/// <param name="hasTheMoney">bool NETWORKCASH::_GET_BANK_BALANCE() < carCost.</param>
		/// <returns>Array<void, int> The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").</returns>
		public (object, int) NetworkSpentPayVehicleInsurancePremium(int amount, int vehicleModel, int networkHandle, bool notBankrupt, bool hasTheMoney)
		{
			if (networkSpentPayVehicleInsurancePremium == null) networkSpentPayVehicleInsurancePremium = (Function) native.GetObjectProperty("networkSpentPayVehicleInsurancePremium");
			var results = (Array) networkSpentPayVehicleInsurancePremium.Call(native, amount, vehicleModel, networkHandle, notBankrupt, hasTheMoney);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkSpentCallPlayer(object p0, object p1, bool p2, bool p3)
		{
			if (networkSpentCallPlayer == null) networkSpentCallPlayer = (Function) native.GetObjectProperty("networkSpentCallPlayer");
			var results = (Array) networkSpentCallPlayer.Call(native, p0, p1, p2, p3);
			return (results[0], results[1]);
		}

		public void NetworkSpentBounty(object p0, bool p1, bool p2)
		{
			if (networkSpentBounty == null) networkSpentBounty = (Function) native.GetObjectProperty("networkSpentBounty");
			networkSpentBounty.Call(native, p0, p1, p2);
		}

		public void NetworkSpentFromRockstar(int p0, bool p1, bool p2)
		{
			if (networkSpentFromRockstar == null) networkSpentFromRockstar = (Function) native.GetObjectProperty("networkSpentFromRockstar");
			networkSpentFromRockstar.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// Hardcoded to return 0.
		/// </summary>
		public object _0x9B5016A6433A68C5()
		{
			if (__0x9B5016A6433A68C5 == null) __0x9B5016A6433A68C5 = (Function) native.GetObjectProperty("_0x9B5016A6433A68C5");
			return __0x9B5016A6433A68C5.Call(native);
		}

		/// <summary>
		/// This isn't a hash collision.
		/// </summary>
		/// <returns>Array<string, int, int></returns>
		public (string, int, int) ProcessCashGift(int p0, int p1, string p2)
		{
			if (processCashGift == null) processCashGift = (Function) native.GetObjectProperty("processCashGift");
			var results = (Array) processCashGift.Call(native, p0, p1, p2);
			return ((string) results[0], (int) results[1], (int) results[2]);
		}

		public void NetworkSpentPlayerHealthcare(int p0, int p1, bool p2, bool p3)
		{
			if (networkSpentPlayerHealthcare == null) networkSpentPlayerHealthcare = (Function) native.GetObjectProperty("networkSpentPlayerHealthcare");
			networkSpentPlayerHealthcare.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentNoCops(object p0, bool p1, bool p2)
		{
			if (networkSpentNoCops == null) networkSpentNoCops = (Function) native.GetObjectProperty("networkSpentNoCops");
			networkSpentNoCops.Call(native, p0, p1, p2);
		}

		public void NetworkSpentRequestJob(object p0, bool p1, bool p2)
		{
			if (networkSpentRequestJob == null) networkSpentRequestJob = (Function) native.GetObjectProperty("networkSpentRequestJob");
			networkSpentRequestJob.Call(native, p0, p1, p2);
		}

		public void NetworkSpentRequestHeist(object p0, bool p1, bool p2)
		{
			if (networkSpentRequestHeist == null) networkSpentRequestHeist = (Function) native.GetObjectProperty("networkSpentRequestHeist");
			networkSpentRequestHeist.Call(native, p0, p1, p2);
		}

		public void NetworkBuyLotteryTicket(int p0, int p1, bool p2, bool p3)
		{
			if (networkBuyLotteryTicket == null) networkBuyLotteryTicket = (Function) native.GetObjectProperty("networkBuyLotteryTicket");
			networkBuyLotteryTicket.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// The last 3 parameters are,
		/// 2,0,1 in the am_ferriswheel.c
		/// 1,0,1 in the am_rollercoaster.c
		/// </summary>
		/// <returns>The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.</returns>
		public void NetworkBuyFairgroundRide(int amount, object p1, bool p2, bool p3)
		{
			if (networkBuyFairgroundRide == null) networkBuyFairgroundRide = (Function) native.GetObjectProperty("networkBuyFairgroundRide");
			networkBuyFairgroundRide.Call(native, amount, p1, p2, p3);
		}

		public bool _0x7C4FCCD2E4DEB394()
		{
			if (__0x7C4FCCD2E4DEB394 == null) __0x7C4FCCD2E4DEB394 = (Function) native.GetObjectProperty("_0x7C4FCCD2E4DEB394");
			return (bool) __0x7C4FCCD2E4DEB394.Call(native);
		}

		public void NetworkSpentJobSkip(int amount, string matchId, bool p2, bool p3)
		{
			if (networkSpentJobSkip == null) networkSpentJobSkip = (Function) native.GetObjectProperty("networkSpentJobSkip");
			networkSpentJobSkip.Call(native, amount, matchId, p2, p3);
		}

		public bool NetworkSpentBoss(int amount, bool p1, bool p2)
		{
			if (networkSpentBoss == null) networkSpentBoss = (Function) native.GetObjectProperty("networkSpentBoss");
			return (bool) networkSpentBoss.Call(native, amount, p1, p2);
		}

		public void NetworkSpentPayGoon(int p0, int p1, int amount)
		{
			if (networkSpentPayGoon == null) networkSpentPayGoon = (Function) native.GetObjectProperty("networkSpentPayGoon");
			networkSpentPayGoon.Call(native, p0, p1, amount);
		}

		public void _0xDBC966A01C02BCA7(object p0, object p1, object p2)
		{
			if (__0xDBC966A01C02BCA7 == null) __0xDBC966A01C02BCA7 = (Function) native.GetObjectProperty("_0xDBC966A01C02BCA7");
			__0xDBC966A01C02BCA7.Call(native, p0, p1, p2);
		}

		public void NetworkSpentMoveYacht(int amount, bool p1, bool p2)
		{
			if (networkSpentMoveYacht == null) networkSpentMoveYacht = (Function) native.GetObjectProperty("networkSpentMoveYacht");
			networkSpentMoveYacht.Call(native, amount, p1, p2);
		}

		public void _0xFC4EE00A7B3BFB76(object p0, object p1, object p2)
		{
			if (__0xFC4EE00A7B3BFB76 == null) __0xFC4EE00A7B3BFB76 = (Function) native.GetObjectProperty("_0xFC4EE00A7B3BFB76");
			__0xFC4EE00A7B3BFB76.Call(native, p0, p1, p2);
		}

		public void NetworkBuyContraband(int p0, int p1, int p2, bool p3, bool p4)
		{
			if (networkBuyContraband == null) networkBuyContraband = (Function) native.GetObjectProperty("networkBuyContraband");
			networkBuyContraband.Call(native, p0, p1, p2, p3, p4);
		}

		public void NetworkSpentVipUtilityCharges(object p0, object p1, object p2)
		{
			if (networkSpentVipUtilityCharges == null) networkSpentVipUtilityCharges = (Function) native.GetObjectProperty("networkSpentVipUtilityCharges");
			networkSpentVipUtilityCharges.Call(native, p0, p1, p2);
		}

		public void _0x112209CE0290C03A(object p0, object p1, object p2, object p3)
		{
			if (__0x112209CE0290C03A == null) __0x112209CE0290C03A = (Function) native.GetObjectProperty("_0x112209CE0290C03A");
			__0x112209CE0290C03A.Call(native, p0, p1, p2, p3);
		}

		public void _0xED5FD7AF10F5E262(object p0, object p1, object p2, object p3)
		{
			if (__0xED5FD7AF10F5E262 == null) __0xED5FD7AF10F5E262 = (Function) native.GetObjectProperty("_0xED5FD7AF10F5E262");
			__0xED5FD7AF10F5E262.Call(native, p0, p1, p2, p3);
		}

		public void _0x0D30EB83668E63C5(object p0, object p1, object p2, object p3)
		{
			if (__0x0D30EB83668E63C5 == null) __0x0D30EB83668E63C5 = (Function) native.GetObjectProperty("_0x0D30EB83668E63C5");
			__0x0D30EB83668E63C5.Call(native, p0, p1, p2, p3);
		}

		public void _0xB49ECA122467D05F(object p0, object p1, object p2, object p3)
		{
			if (__0xB49ECA122467D05F == null) __0xB49ECA122467D05F = (Function) native.GetObjectProperty("_0xB49ECA122467D05F");
			__0xB49ECA122467D05F.Call(native, p0, p1, p2, p3);
		}

		public void _0xE23ADC6FCB1F29AE(object p0, object p1, object p2)
		{
			if (__0xE23ADC6FCB1F29AE == null) __0xE23ADC6FCB1F29AE = (Function) native.GetObjectProperty("_0xE23ADC6FCB1F29AE");
			__0xE23ADC6FCB1F29AE.Call(native, p0, p1, p2);
		}

		public void _0x0FE8E1FCD2B86B33(object p0, object p1, object p2, object p3)
		{
			if (__0x0FE8E1FCD2B86B33 == null) __0x0FE8E1FCD2B86B33 = (Function) native.GetObjectProperty("_0x0FE8E1FCD2B86B33");
			__0x0FE8E1FCD2B86B33.Call(native, p0, p1, p2, p3);
		}

		public void _0x69EF772B192614C1(object p0, object p1, object p2, object p3)
		{
			if (__0x69EF772B192614C1 == null) __0x69EF772B192614C1 = (Function) native.GetObjectProperty("_0x69EF772B192614C1");
			__0x69EF772B192614C1.Call(native, p0, p1, p2, p3);
		}

		public void _0x8E243837643D9583(object p0, object p1, object p2, object p3)
		{
			if (__0x8E243837643D9583 == null) __0x8E243837643D9583 = (Function) native.GetObjectProperty("_0x8E243837643D9583");
			__0x8E243837643D9583.Call(native, p0, p1, p2, p3);
		}

		public void _0xBD0EFB25CCA8F97A(object p0, object p1, object p2, object p3)
		{
			if (__0xBD0EFB25CCA8F97A == null) __0xBD0EFB25CCA8F97A = (Function) native.GetObjectProperty("_0xBD0EFB25CCA8F97A");
			__0xBD0EFB25CCA8F97A.Call(native, p0, p1, p2, p3);
		}

		public void _0xA95F667A755725DA(object p0, object p1, object p2, object p3)
		{
			if (__0xA95F667A755725DA == null) __0xA95F667A755725DA = (Function) native.GetObjectProperty("_0xA95F667A755725DA");
			__0xA95F667A755725DA.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkSpentPurchaseWarehouse(int amount, object data, bool p2, bool p3)
		{
			if (networkSpentPurchaseWarehouse == null) networkSpentPurchaseWarehouse = (Function) native.GetObjectProperty("networkSpentPurchaseWarehouse");
			var results = (Array) networkSpentPurchaseWarehouse.Call(native, amount, data, p2, p3);
			return (results[0], results[1]);
		}

		public void _0x4128464231E3CA0B(object p0, object p1, object p2, object p3)
		{
			if (__0x4128464231E3CA0B == null) __0x4128464231E3CA0B = (Function) native.GetObjectProperty("_0x4128464231E3CA0B");
			__0x4128464231E3CA0B.Call(native, p0, p1, p2, p3);
		}

		public void _0x2FAB6614CE22E196(object p0, object p1, object p2, object p3)
		{
			if (__0x2FAB6614CE22E196 == null) __0x2FAB6614CE22E196 = (Function) native.GetObjectProperty("_0x2FAB6614CE22E196");
			__0x2FAB6614CE22E196.Call(native, p0, p1, p2, p3);
		}

		public void _0x05F04155A226FBBF(object p0, object p1, object p2, object p3)
		{
			if (__0x05F04155A226FBBF == null) __0x05F04155A226FBBF = (Function) native.GetObjectProperty("_0x05F04155A226FBBF");
			__0x05F04155A226FBBF.Call(native, p0, p1, p2, p3);
		}

		public void _0xE8B0B270B6E7C76E(object p0, object p1, object p2, object p3)
		{
			if (__0xE8B0B270B6E7C76E == null) __0xE8B0B270B6E7C76E = (Function) native.GetObjectProperty("_0xE8B0B270B6E7C76E");
			__0xE8B0B270B6E7C76E.Call(native, p0, p1, p2, p3);
		}

		public void _0x5BCDE0F640C773D2(object p0, object p1, object p2, object p3)
		{
			if (__0x5BCDE0F640C773D2 == null) __0x5BCDE0F640C773D2 = (Function) native.GetObjectProperty("_0x5BCDE0F640C773D2");
			__0x5BCDE0F640C773D2.Call(native, p0, p1, p2, p3);
		}

		public void _0x998E18CEB44487FC(object p0, object p1, object p2, object p3)
		{
			if (__0x998E18CEB44487FC == null) __0x998E18CEB44487FC = (Function) native.GetObjectProperty("_0x998E18CEB44487FC");
			__0x998E18CEB44487FC.Call(native, p0, p1, p2, p3);
		}

		public void _0xFA07759E6FDDD7CF(object p0, object p1, object p2, object p3)
		{
			if (__0xFA07759E6FDDD7CF == null) __0xFA07759E6FDDD7CF = (Function) native.GetObjectProperty("_0xFA07759E6FDDD7CF");
			__0xFA07759E6FDDD7CF.Call(native, p0, p1, p2, p3);
		}

		public void _0x6FD97159FE3C971A(object p0, object p1, object p2, object p3)
		{
			if (__0x6FD97159FE3C971A == null) __0x6FD97159FE3C971A = (Function) native.GetObjectProperty("_0x6FD97159FE3C971A");
			__0x6FD97159FE3C971A.Call(native, p0, p1, p2, p3);
		}

		public void _0x675D19C6067CAE08(object p0, object p1, object p2, object p3)
		{
			if (__0x675D19C6067CAE08 == null) __0x675D19C6067CAE08 = (Function) native.GetObjectProperty("_0x675D19C6067CAE08");
			__0x675D19C6067CAE08.Call(native, p0, p1, p2, p3);
		}

		public void _0xA51B086B0B2C0F7A(object p0, object p1, object p2, object p3)
		{
			if (__0xA51B086B0B2C0F7A == null) __0xA51B086B0B2C0F7A = (Function) native.GetObjectProperty("_0xA51B086B0B2C0F7A");
			__0xA51B086B0B2C0F7A.Call(native, p0, p1, p2, p3);
		}

		public void _0xD7CCCBA28C4ECAF0(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0xD7CCCBA28C4ECAF0 == null) __0xD7CCCBA28C4ECAF0 = (Function) native.GetObjectProperty("_0xD7CCCBA28C4ECAF0");
			__0xD7CCCBA28C4ECAF0.Call(native, p0, p1, p2, p3, p4);
		}

		public void _0x0035BB914316F1E3(object p0, object p1, object p2, object p3)
		{
			if (__0x0035BB914316F1E3 == null) __0x0035BB914316F1E3 = (Function) native.GetObjectProperty("_0x0035BB914316F1E3");
			__0x0035BB914316F1E3.Call(native, p0, p1, p2, p3);
		}

		public void _0x5F456788B05FAEAC(object p0, object p1, object p2)
		{
			if (__0x5F456788B05FAEAC == null) __0x5F456788B05FAEAC = (Function) native.GetObjectProperty("_0x5F456788B05FAEAC");
			__0x5F456788B05FAEAC.Call(native, p0, p1, p2);
		}

		public void _0xA75CCF58A60A5FD1(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (__0xA75CCF58A60A5FD1 == null) __0xA75CCF58A60A5FD1 = (Function) native.GetObjectProperty("_0xA75CCF58A60A5FD1");
			__0xA75CCF58A60A5FD1.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		public void _0xB4C2EC463672474E(object p0, object p1, object p2, object p3)
		{
			if (__0xB4C2EC463672474E == null) __0xB4C2EC463672474E = (Function) native.GetObjectProperty("_0xB4C2EC463672474E");
			__0xB4C2EC463672474E.Call(native, p0, p1, p2, p3);
		}

		public void _0x2AFC2D19B50797F2(object p0, object p1, object p2, object p3)
		{
			if (__0x2AFC2D19B50797F2 == null) __0x2AFC2D19B50797F2 = (Function) native.GetObjectProperty("_0x2AFC2D19B50797F2");
			__0x2AFC2D19B50797F2.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentImportExportRepair(object p0, object p1, object p2)
		{
			if (networkSpentImportExportRepair == null) networkSpentImportExportRepair = (Function) native.GetObjectProperty("networkSpentImportExportRepair");
			networkSpentImportExportRepair.Call(native, p0, p1, p2);
		}

		public void NetworkSpentPurchaseHangar(object p0, object p1, object p2, object p3)
		{
			if (networkSpentPurchaseHangar == null) networkSpentPurchaseHangar = (Function) native.GetObjectProperty("networkSpentPurchaseHangar");
			networkSpentPurchaseHangar.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentUpgradeHangar(object p0, object p1, object p2, object p3)
		{
			if (networkSpentUpgradeHangar == null) networkSpentUpgradeHangar = (Function) native.GetObjectProperty("networkSpentUpgradeHangar");
			networkSpentUpgradeHangar.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentHangarUtilityCharges(int amount, bool p1, bool p2)
		{
			if (networkSpentHangarUtilityCharges == null) networkSpentHangarUtilityCharges = (Function) native.GetObjectProperty("networkSpentHangarUtilityCharges");
			networkSpentHangarUtilityCharges.Call(native, amount, p1, p2);
		}

		public void NetworkSpentHangarStaffCharges(int amount, bool p1, bool p2)
		{
			if (networkSpentHangarStaffCharges == null) networkSpentHangarStaffCharges = (Function) native.GetObjectProperty("networkSpentHangarStaffCharges");
			networkSpentHangarStaffCharges.Call(native, amount, p1, p2);
		}

		public void NetworkSpentBuyTruck(object p0, object p1, object p2, object p3)
		{
			if (networkSpentBuyTruck == null) networkSpentBuyTruck = (Function) native.GetObjectProperty("networkSpentBuyTruck");
			networkSpentBuyTruck.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentUpgradeTruck(object p0, object p1, object p2, object p3)
		{
			if (networkSpentUpgradeTruck == null) networkSpentUpgradeTruck = (Function) native.GetObjectProperty("networkSpentUpgradeTruck");
			networkSpentUpgradeTruck.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentBuyBunker(object p0, object p1, object p2, object p3)
		{
			if (networkSpentBuyBunker == null) networkSpentBuyBunker = (Function) native.GetObjectProperty("networkSpentBuyBunker");
			networkSpentBuyBunker.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentUpgradeBunker(object p0, object p1, object p2, object p3)
		{
			if (networkSpentUpgradeBunker == null) networkSpentUpgradeBunker = (Function) native.GetObjectProperty("networkSpentUpgradeBunker");
			networkSpentUpgradeBunker.Call(native, p0, p1, p2, p3);
		}

		public void NetworkEarnFromSellBunker(int amount, int bunkerHash)
		{
			if (networkEarnFromSellBunker == null) networkEarnFromSellBunker = (Function) native.GetObjectProperty("networkEarnFromSellBunker");
			networkEarnFromSellBunker.Call(native, amount, bunkerHash);
		}

		public void NetworkSpentBallisticEquipment(int amount, bool p1, bool p2)
		{
			if (networkSpentBallisticEquipment == null) networkSpentBallisticEquipment = (Function) native.GetObjectProperty("networkSpentBallisticEquipment");
			networkSpentBallisticEquipment.Call(native, amount, p1, p2);
		}

		public void NetworkEarnFromRdrBonus(int amount, object p1)
		{
			if (networkEarnFromRdrBonus == null) networkEarnFromRdrBonus = (Function) native.GetObjectProperty("networkEarnFromRdrBonus");
			networkEarnFromRdrBonus.Call(native, amount, p1);
		}

		public void NetworkEarnFromWagePayment(int amount)
		{
			if (networkEarnFromWagePayment == null) networkEarnFromWagePayment = (Function) native.GetObjectProperty("networkEarnFromWagePayment");
			networkEarnFromWagePayment.Call(native, amount);
		}

		public void NetworkEarnFromWagePaymentBonus(int amount)
		{
			if (networkEarnFromWagePaymentBonus == null) networkEarnFromWagePaymentBonus = (Function) native.GetObjectProperty("networkEarnFromWagePaymentBonus");
			networkEarnFromWagePaymentBonus.Call(native, amount);
		}

		public void NetworkSpentBuyBase(object p0, object p1, object p2, object p3)
		{
			if (networkSpentBuyBase == null) networkSpentBuyBase = (Function) native.GetObjectProperty("networkSpentBuyBase");
			networkSpentBuyBase.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentUpgradeBase(object p0, object p1, object p2, object p3)
		{
			if (networkSpentUpgradeBase == null) networkSpentUpgradeBase = (Function) native.GetObjectProperty("networkSpentUpgradeBase");
			networkSpentUpgradeBase.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentBuyTiltrotor(object p0, object p1, object p2, object p3)
		{
			if (networkSpentBuyTiltrotor == null) networkSpentBuyTiltrotor = (Function) native.GetObjectProperty("networkSpentBuyTiltrotor");
			networkSpentBuyTiltrotor.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentUpgradeTiltrotor(object p0, object p1, object p2, object p3)
		{
			if (networkSpentUpgradeTiltrotor == null) networkSpentUpgradeTiltrotor = (Function) native.GetObjectProperty("networkSpentUpgradeTiltrotor");
			networkSpentUpgradeTiltrotor.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentEmployAssassins(object p0, object p1, object p2, object p3)
		{
			if (networkSpentEmployAssassins == null) networkSpentEmployAssassins = (Function) native.GetObjectProperty("networkSpentEmployAssassins");
			networkSpentEmployAssassins.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentGangopsCannon(object p0, object p1, object p2, object p3)
		{
			if (networkSpentGangopsCannon == null) networkSpentGangopsCannon = (Function) native.GetObjectProperty("networkSpentGangopsCannon");
			networkSpentGangopsCannon.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSpentGangopsStartMission(object p0, object p1, object p2, object p3)
		{
			if (networkSpentGangopsStartMission == null) networkSpentGangopsStartMission = (Function) native.GetObjectProperty("networkSpentGangopsStartMission");
			networkSpentGangopsStartMission.Call(native, p0, p1, p2, p3);
		}

		public void NetworkEarnFromSellBase(int amount, int baseNameHash)
		{
			if (networkEarnFromSellBase == null) networkEarnFromSellBase = (Function) native.GetObjectProperty("networkEarnFromSellBase");
			networkEarnFromSellBase.Call(native, amount, baseNameHash);
		}

		public void NetworkEarnFromTargetRefund(int amount, int p1)
		{
			if (networkEarnFromTargetRefund == null) networkEarnFromTargetRefund = (Function) native.GetObjectProperty("networkEarnFromTargetRefund");
			networkEarnFromTargetRefund.Call(native, amount, p1);
		}

		public void NetworkEarnFromGangopsWages(int amount, int p1)
		{
			if (networkEarnFromGangopsWages == null) networkEarnFromGangopsWages = (Function) native.GetObjectProperty("networkEarnFromGangopsWages");
			networkEarnFromGangopsWages.Call(native, amount, p1);
		}

		public void NetworkEarnFromGangopsWagesBonus(int amount, int p1)
		{
			if (networkEarnFromGangopsWagesBonus == null) networkEarnFromGangopsWagesBonus = (Function) native.GetObjectProperty("networkEarnFromGangopsWagesBonus");
			networkEarnFromGangopsWagesBonus.Call(native, amount, p1);
		}

		public void NetworkEarnFromDarChallenge(int amount, object p1)
		{
			if (networkEarnFromDarChallenge == null) networkEarnFromDarChallenge = (Function) native.GetObjectProperty("networkEarnFromDarChallenge");
			networkEarnFromDarChallenge.Call(native, amount, p1);
		}

		public void NetworkEarnFromDoomsdayFinaleBonus(int amount, int vehicleHash)
		{
			if (networkEarnFromDoomsdayFinaleBonus == null) networkEarnFromDoomsdayFinaleBonus = (Function) native.GetObjectProperty("networkEarnFromDoomsdayFinaleBonus");
			networkEarnFromDoomsdayFinaleBonus.Call(native, amount, vehicleHash);
		}

		public void NetworkEarnFromGangopsAwards(int amount, string unk, object p2)
		{
			if (networkEarnFromGangopsAwards == null) networkEarnFromGangopsAwards = (Function) native.GetObjectProperty("networkEarnFromGangopsAwards");
			networkEarnFromGangopsAwards.Call(native, amount, unk, p2);
		}

		public void NetworkEarnFromGangopsElite(int amount, string unk, int actIndex)
		{
			if (networkEarnFromGangopsElite == null) networkEarnFromGangopsElite = (Function) native.GetObjectProperty("networkEarnFromGangopsElite");
			networkEarnFromGangopsElite.Call(native, amount, unk, actIndex);
		}

		public void NetworkRivalDeliveryCompleted(int earnedMoney)
		{
			if (networkRivalDeliveryCompleted == null) networkRivalDeliveryCompleted = (Function) native.GetObjectProperty("networkRivalDeliveryCompleted");
			networkRivalDeliveryCompleted.Call(native, earnedMoney);
		}

		public void NetworkSpentGangopsStartStrand(int type, int amount, bool p2, bool p3)
		{
			if (networkSpentGangopsStartStrand == null) networkSpentGangopsStartStrand = (Function) native.GetObjectProperty("networkSpentGangopsStartStrand");
			networkSpentGangopsStartStrand.Call(native, type, amount, p2, p3);
		}

		public void NetworkSpentGangopsTripSkip(int amount, bool p1, bool p2)
		{
			if (networkSpentGangopsTripSkip == null) networkSpentGangopsTripSkip = (Function) native.GetObjectProperty("networkSpentGangopsTripSkip");
			networkSpentGangopsTripSkip.Call(native, amount, p1, p2);
		}

		public void NetworkEarnFromGangopsJobsPrepParticipation(int amount)
		{
			if (networkEarnFromGangopsJobsPrepParticipation == null) networkEarnFromGangopsJobsPrepParticipation = (Function) native.GetObjectProperty("networkEarnFromGangopsJobsPrepParticipation");
			networkEarnFromGangopsJobsPrepParticipation.Call(native, amount);
		}

		public void NetworkEarnFromGangopsJobsSetup(int amount, string unk)
		{
			if (networkEarnFromGangopsJobsSetup == null) networkEarnFromGangopsJobsSetup = (Function) native.GetObjectProperty("networkEarnFromGangopsJobsSetup");
			networkEarnFromGangopsJobsSetup.Call(native, amount, unk);
		}

		public void NetworkEarnFromGangopsJobsFinale(int amount, string unk)
		{
			if (networkEarnFromGangopsJobsFinale == null) networkEarnFromGangopsJobsFinale = (Function) native.GetObjectProperty("networkEarnFromGangopsJobsFinale");
			networkEarnFromGangopsJobsFinale.Call(native, amount, unk);
		}

		public void _0x2A7CEC72C3443BCC(object p0, object p1, object p2)
		{
			if (__0x2A7CEC72C3443BCC == null) __0x2A7CEC72C3443BCC = (Function) native.GetObjectProperty("_0x2A7CEC72C3443BCC");
			__0x2A7CEC72C3443BCC.Call(native, p0, p1, p2);
		}

		public void _0xE0F82D68C7039158(object p0)
		{
			if (__0xE0F82D68C7039158 == null) __0xE0F82D68C7039158 = (Function) native.GetObjectProperty("_0xE0F82D68C7039158");
			__0xE0F82D68C7039158.Call(native, p0);
		}

		public void _0xB4DEAE67F35E2ACD(object p0)
		{
			if (__0xB4DEAE67F35E2ACD == null) __0xB4DEAE67F35E2ACD = (Function) native.GetObjectProperty("_0xB4DEAE67F35E2ACD");
			__0xB4DEAE67F35E2ACD.Call(native, p0);
		}

		public void NetworkEarnFromBbEventBonus(int amount)
		{
			if (networkEarnFromBbEventBonus == null) networkEarnFromBbEventBonus = (Function) native.GetObjectProperty("networkEarnFromBbEventBonus");
			networkEarnFromBbEventBonus.Call(native, amount);
		}

		public void _0x2A93C46AAB1EACC9(object p0, object p1, object p2, object p3)
		{
			if (__0x2A93C46AAB1EACC9 == null) __0x2A93C46AAB1EACC9 = (Function) native.GetObjectProperty("_0x2A93C46AAB1EACC9");
			__0x2A93C46AAB1EACC9.Call(native, p0, p1, p2, p3);
		}

		public void _0x226C284C830D0CA8(object p0, object p1, object p2, object p3)
		{
			if (__0x226C284C830D0CA8 == null) __0x226C284C830D0CA8 = (Function) native.GetObjectProperty("_0x226C284C830D0CA8");
			__0x226C284C830D0CA8.Call(native, p0, p1, p2, p3);
		}

		public void NetworkEarnFromHackerTruckMission(object p0, int amount, object p2, object p3)
		{
			if (networkEarnFromHackerTruckMission == null) networkEarnFromHackerTruckMission = (Function) native.GetObjectProperty("networkEarnFromHackerTruckMission");
			networkEarnFromHackerTruckMission.Call(native, p0, amount, p2, p3);
		}

		public void _0xED76D195E6E3BF7F(object p0, object p1, object p2, object p3)
		{
			if (__0xED76D195E6E3BF7F == null) __0xED76D195E6E3BF7F = (Function) native.GetObjectProperty("_0xED76D195E6E3BF7F");
			__0xED76D195E6E3BF7F.Call(native, p0, p1, p2, p3);
		}

		public void _0x1DC9B749E7AE282B(object p0, object p1, object p2, object p3)
		{
			if (__0x1DC9B749E7AE282B == null) __0x1DC9B749E7AE282B = (Function) native.GetObjectProperty("_0x1DC9B749E7AE282B");
			__0x1DC9B749E7AE282B.Call(native, p0, p1, p2, p3);
		}

		public void _0xC6E74CF8C884C880(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0xC6E74CF8C884C880 == null) __0xC6E74CF8C884C880 = (Function) native.GetObjectProperty("_0xC6E74CF8C884C880");
			__0xC6E74CF8C884C880.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public void _0x65482BFD0923C8A1(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (__0x65482BFD0923C8A1 == null) __0x65482BFD0923C8A1 = (Function) native.GetObjectProperty("_0x65482BFD0923C8A1");
			__0x65482BFD0923C8A1.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void NetworkSpentRdrhatchetBonus(int amount, bool p1, bool p2)
		{
			if (networkSpentRdrhatchetBonus == null) networkSpentRdrhatchetBonus = (Function) native.GetObjectProperty("networkSpentRdrhatchetBonus");
			networkSpentRdrhatchetBonus.Call(native, amount, p1, p2);
		}

		public void NetworkSpentNightclubEntryFee(int player, int amount, object p1, bool p2, bool p3)
		{
			if (networkSpentNightclubEntryFee == null) networkSpentNightclubEntryFee = (Function) native.GetObjectProperty("networkSpentNightclubEntryFee");
			networkSpentNightclubEntryFee.Call(native, player, amount, p1, p2, p3);
		}

		public void NetworkSpentNightclubBarDrink(int amount, object p1, bool p2, bool p3)
		{
			if (networkSpentNightclubBarDrink == null) networkSpentNightclubBarDrink = (Function) native.GetObjectProperty("networkSpentNightclubBarDrink");
			networkSpentNightclubBarDrink.Call(native, amount, p1, p2, p3);
		}

		public void NetworkSpentBountyHunterMission(int amount, bool p1, bool p2)
		{
			if (networkSpentBountyHunterMission == null) networkSpentBountyHunterMission = (Function) native.GetObjectProperty("networkSpentBountyHunterMission");
			networkSpentBountyHunterMission.Call(native, amount, p1, p2);
		}

		public void NetworkSpentRehireDj(int amount, object p1, bool p2, bool p3)
		{
			if (networkSpentRehireDj == null) networkSpentRehireDj = (Function) native.GetObjectProperty("networkSpentRehireDj");
			networkSpentRehireDj.Call(native, amount, p1, p2, p3);
		}

		public void NetworkSpentArenaJoinSpectator(int amount, object p1, bool p2, bool p3)
		{
			if (networkSpentArenaJoinSpectator == null) networkSpentArenaJoinSpectator = (Function) native.GetObjectProperty("networkSpentArenaJoinSpectator");
			networkSpentArenaJoinSpectator.Call(native, amount, p1, p2, p3);
		}

		public void NetworkEarnFromArenaSkillLevelProgression(int amount, object p1)
		{
			if (networkEarnFromArenaSkillLevelProgression == null) networkEarnFromArenaSkillLevelProgression = (Function) native.GetObjectProperty("networkEarnFromArenaSkillLevelProgression");
			networkEarnFromArenaSkillLevelProgression.Call(native, amount, p1);
		}

		public void NetworkEarnFromArenaCareerProgression(int amount, object p1)
		{
			if (networkEarnFromArenaCareerProgression == null) networkEarnFromArenaCareerProgression = (Function) native.GetObjectProperty("networkEarnFromArenaCareerProgression");
			networkEarnFromArenaCareerProgression.Call(native, amount, p1);
		}

		public void NetworkSpentMakeItRain(int amount, bool p1, bool p2)
		{
			if (networkSpentMakeItRain == null) networkSpentMakeItRain = (Function) native.GetObjectProperty("networkSpentMakeItRain");
			networkSpentMakeItRain.Call(native, amount, p1, p2);
		}

		public void NetworkSpentBuyArena(int amount, bool p1, bool p2, string p3)
		{
			if (networkSpentBuyArena == null) networkSpentBuyArena = (Function) native.GetObjectProperty("networkSpentBuyArena");
			networkSpentBuyArena.Call(native, amount, p1, p2, p3);
		}

		public void NetworkSpentUpgradeArena(int amount, bool p1, bool p2, string p3)
		{
			if (networkSpentUpgradeArena == null) networkSpentUpgradeArena = (Function) native.GetObjectProperty("networkSpentUpgradeArena");
			networkSpentUpgradeArena.Call(native, amount, p1, p2, p3);
		}

		public void NetworkSpentArenaSpectatorBox(int amount, object p1, bool p2, bool p3)
		{
			if (networkSpentArenaSpectatorBox == null) networkSpentArenaSpectatorBox = (Function) native.GetObjectProperty("networkSpentArenaSpectatorBox");
			networkSpentArenaSpectatorBox.Call(native, amount, p1, p2, p3);
		}

		public void NetworkSpentSpinTheWheelPayment(int amount, object p1, bool p2)
		{
			if (networkSpentSpinTheWheelPayment == null) networkSpentSpinTheWheelPayment = (Function) native.GetObjectProperty("networkSpentSpinTheWheelPayment");
			networkSpentSpinTheWheelPayment.Call(native, amount, p1, p2);
		}

		public void NetworkEarnFromSpinTheWheelCash(int amount)
		{
			if (networkEarnFromSpinTheWheelCash == null) networkEarnFromSpinTheWheelCash = (Function) native.GetObjectProperty("networkEarnFromSpinTheWheelCash");
			networkEarnFromSpinTheWheelCash.Call(native, amount);
		}

		public void NetworkSpentArenaPremium(int amount, bool p1, bool p2)
		{
			if (networkSpentArenaPremium == null) networkSpentArenaPremium = (Function) native.GetObjectProperty("networkSpentArenaPremium");
			networkSpentArenaPremium.Call(native, amount, p1, p2);
		}

		public void NetworkEarnFromArenaWar(int amount, object p1, object p2, object p3)
		{
			if (networkEarnFromArenaWar == null) networkEarnFromArenaWar = (Function) native.GetObjectProperty("networkEarnFromArenaWar");
			networkEarnFromArenaWar.Call(native, amount, p1, p2, p3);
		}

		public void NetworkEarnFromAssassinateTargetKilled2(int amount)
		{
			if (networkEarnFromAssassinateTargetKilled2 == null) networkEarnFromAssassinateTargetKilled2 = (Function) native.GetObjectProperty("networkEarnFromAssassinateTargetKilled2");
			networkEarnFromAssassinateTargetKilled2.Call(native, amount);
		}

		public void NetworkEarnFromBbEventCargo(int amount)
		{
			if (networkEarnFromBbEventCargo == null) networkEarnFromBbEventCargo = (Function) native.GetObjectProperty("networkEarnFromBbEventCargo");
			networkEarnFromBbEventCargo.Call(native, amount);
		}

		public void NetworkEarnFromRcTimeTrial(int amount)
		{
			if (networkEarnFromRcTimeTrial == null) networkEarnFromRcTimeTrial = (Function) native.GetObjectProperty("networkEarnFromRcTimeTrial");
			networkEarnFromRcTimeTrial.Call(native, amount);
		}

		public void NetworkEarnFromDailyObjectiveEvent(int amount)
		{
			if (networkEarnFromDailyObjectiveEvent == null) networkEarnFromDailyObjectiveEvent = (Function) native.GetObjectProperty("networkEarnFromDailyObjectiveEvent");
			networkEarnFromDailyObjectiveEvent.Call(native, amount);
		}

		public void NetworkSpentCasinoMembership(int amount, bool p1, bool p2, int p3)
		{
			if (networkSpentCasinoMembership == null) networkSpentCasinoMembership = (Function) native.GetObjectProperty("networkSpentCasinoMembership");
			networkSpentCasinoMembership.Call(native, amount, p1, p2, p3);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkSpentBuyCasino(int amount, bool p1, bool p2, object data)
		{
			if (networkSpentBuyCasino == null) networkSpentBuyCasino = (Function) native.GetObjectProperty("networkSpentBuyCasino");
			var results = (Array) networkSpentBuyCasino.Call(native, amount, p1, p2, data);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkSpentUpgradeCasino(int amount, bool p1, bool p2, object data)
		{
			if (networkSpentUpgradeCasino == null) networkSpentUpgradeCasino = (Function) native.GetObjectProperty("networkSpentUpgradeCasino");
			var results = (Array) networkSpentUpgradeCasino.Call(native, amount, p1, p2, data);
			return (results[0], results[1]);
		}

		public void NetworkSpentCasinoGeneric(int amount, object p1, object p2, object p3, object p4)
		{
			if (networkSpentCasinoGeneric == null) networkSpentCasinoGeneric = (Function) native.GetObjectProperty("networkSpentCasinoGeneric");
			networkSpentCasinoGeneric.Call(native, amount, p1, p2, p3, p4);
		}

		public void NetworkEarnFromTimeTrialWin(int amount)
		{
			if (networkEarnFromTimeTrialWin == null) networkEarnFromTimeTrialWin = (Function) native.GetObjectProperty("networkEarnFromTimeTrialWin");
			networkEarnFromTimeTrialWin.Call(native, amount);
		}

		public void NetworkEarnFromCollectionItem(int amount)
		{
			if (networkEarnFromCollectionItem == null) networkEarnFromCollectionItem = (Function) native.GetObjectProperty("networkEarnFromCollectionItem");
			networkEarnFromCollectionItem.Call(native, amount);
		}

		public void NetworkEarnFromCollectablesActionFigures(int amount)
		{
			if (networkEarnFromCollectablesActionFigures == null) networkEarnFromCollectablesActionFigures = (Function) native.GetObjectProperty("networkEarnFromCollectablesActionFigures");
			networkEarnFromCollectablesActionFigures.Call(native, amount);
		}

		public void NetworkEarnFromCompleteCollection(int amount)
		{
			if (networkEarnFromCompleteCollection == null) networkEarnFromCompleteCollection = (Function) native.GetObjectProperty("networkEarnFromCompleteCollection");
			networkEarnFromCompleteCollection.Call(native, amount);
		}

		public void NetworkEarnFromSellingVehicle(int amount)
		{
			if (networkEarnFromSellingVehicle == null) networkEarnFromSellingVehicle = (Function) native.GetObjectProperty("networkEarnFromSellingVehicle");
			networkEarnFromSellingVehicle.Call(native, amount);
		}

		public void NetworkEarnFromCasinoMissionReward(int amount)
		{
			if (networkEarnFromCasinoMissionReward == null) networkEarnFromCasinoMissionReward = (Function) native.GetObjectProperty("networkEarnFromCasinoMissionReward");
			networkEarnFromCasinoMissionReward.Call(native, amount);
		}

		public void NetworkEarnFromCasinoStoryMissionReward(int amount)
		{
			if (networkEarnFromCasinoStoryMissionReward == null) networkEarnFromCasinoStoryMissionReward = (Function) native.GetObjectProperty("networkEarnFromCasinoStoryMissionReward");
			networkEarnFromCasinoStoryMissionReward.Call(native, amount);
		}

		public void NetworkEarnFromCasinoMissionParticipation(int amount)
		{
			if (networkEarnFromCasinoMissionParticipation == null) networkEarnFromCasinoMissionParticipation = (Function) native.GetObjectProperty("networkEarnFromCasinoMissionParticipation");
			networkEarnFromCasinoMissionParticipation.Call(native, amount);
		}

		public void NetworkEarnFromCasinoAward(int amount, int hash)
		{
			if (networkEarnFromCasinoAward == null) networkEarnFromCasinoAward = (Function) native.GetObjectProperty("networkEarnFromCasinoAward");
			networkEarnFromCasinoAward.Call(native, amount, hash);
		}

		public int NetworkGetVcBankBalance()
		{
			if (networkGetVcBankBalance == null) networkGetVcBankBalance = (Function) native.GetObjectProperty("networkGetVcBankBalance");
			return (int) networkGetVcBankBalance.Call(native);
		}

		public int NetworkGetVcWalletBalance(int characterSlot)
		{
			if (networkGetVcWalletBalance == null) networkGetVcWalletBalance = (Function) native.GetObjectProperty("networkGetVcWalletBalance");
			return (int) networkGetVcWalletBalance.Call(native, characterSlot);
		}

		public int NetworkGetVcBalance()
		{
			if (networkGetVcBalance == null) networkGetVcBalance = (Function) native.GetObjectProperty("networkGetVcBalance");
			return (int) networkGetVcBalance.Call(native);
		}

		public int NetworkGetEvcBalance()
		{
			if (networkGetEvcBalance == null) networkGetEvcBalance = (Function) native.GetObjectProperty("networkGetEvcBalance");
			return (int) networkGetEvcBalance.Call(native);
		}

		public int NetworkGetPvcBalance()
		{
			if (networkGetPvcBalance == null) networkGetPvcBalance = (Function) native.GetObjectProperty("networkGetPvcBalance");
			return (int) networkGetPvcBalance.Call(native);
		}

		public string NetworkGetStringWalletBalance(int characterSlot)
		{
			if (networkGetStringWalletBalance == null) networkGetStringWalletBalance = (Function) native.GetObjectProperty("networkGetStringWalletBalance");
			return (string) networkGetStringWalletBalance.Call(native, characterSlot);
		}

		public string NetworkGetStringBankBalance()
		{
			if (networkGetStringBankBalance == null) networkGetStringBankBalance = (Function) native.GetObjectProperty("networkGetStringBankBalance");
			return (string) networkGetStringBankBalance.Call(native);
		}

		public string NetworkGetStringBankWalletBalance()
		{
			if (networkGetStringBankWalletBalance == null) networkGetStringBankWalletBalance = (Function) native.GetObjectProperty("networkGetStringBankWalletBalance");
			return (string) networkGetStringBankWalletBalance.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if wallet balance >= amount.</returns>
		public bool NetworkGetVcWalletBalanceIsNotLessThan(int amount, int characterSlot)
		{
			if (networkGetVcWalletBalanceIsNotLessThan == null) networkGetVcWalletBalanceIsNotLessThan = (Function) native.GetObjectProperty("networkGetVcWalletBalanceIsNotLessThan");
			return (bool) networkGetVcWalletBalanceIsNotLessThan.Call(native, amount, characterSlot);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if bank balance >= amount.</returns>
		public bool NetworkGetVcBankBalanceIsNotLessThan(int amount)
		{
			if (networkGetVcBankBalanceIsNotLessThan == null) networkGetVcBankBalanceIsNotLessThan = (Function) native.GetObjectProperty("networkGetVcBankBalanceIsNotLessThan");
			return (bool) networkGetVcBankBalanceIsNotLessThan.Call(native, amount);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if bank balance + wallet balance >= amount.</returns>
		public bool NetworkGetVcBankWalletBalanceIsNotLessThan(int amount, int characterSlot)
		{
			if (networkGetVcBankWalletBalanceIsNotLessThan == null) networkGetVcBankWalletBalanceIsNotLessThan = (Function) native.GetObjectProperty("networkGetVcBankWalletBalanceIsNotLessThan");
			return (bool) networkGetVcBankWalletBalanceIsNotLessThan.Call(native, amount, characterSlot);
		}

		/// <summary>
		/// Same as 0xEA560AC9EEB1E19B.
		/// </summary>
		public int NetworkGetPvcTransferBalance()
		{
			if (networkGetPvcTransferBalance == null) networkGetPvcTransferBalance = (Function) native.GetObjectProperty("networkGetPvcTransferBalance");
			return (int) networkGetPvcTransferBalance.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns false if amount > wallet balance or daily transfer limit has been hit.</returns>
		public bool _0x08E8EEADFD0DC4A0(int amount)
		{
			if (__0x08E8EEADFD0DC4A0 == null) __0x08E8EEADFD0DC4A0 = (Function) native.GetObjectProperty("_0x08E8EEADFD0DC4A0");
			return (bool) __0x08E8EEADFD0DC4A0.Call(native, amount);
		}

		public bool NetworkCanReceivePlayerCash(object p0, object p1, object p2, object p3)
		{
			if (networkCanReceivePlayerCash == null) networkCanReceivePlayerCash = (Function) native.GetObjectProperty("networkCanReceivePlayerCash");
			return (bool) networkCanReceivePlayerCash.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// Same as 0x13A8DE2FD77D04F3.
		/// </summary>
		public int NetworkGetRemainingVcDailyTransfers2()
		{
			if (networkGetRemainingVcDailyTransfers2 == null) networkGetRemainingVcDailyTransfers2 = (Function) native.GetObjectProperty("networkGetRemainingVcDailyTransfers2");
			return (int) networkGetRemainingVcDailyTransfers2.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Does nothing and always returns 0.</returns>
		public int WithdrawVc(int amount)
		{
			if (withdrawVc == null) withdrawVc = (Function) native.GetObjectProperty("withdrawVc");
			return (int) withdrawVc.Call(native, amount);
		}

		/// <summary>
		/// </summary>
		/// <returns>Does nothing and always returns false.</returns>
		public bool DepositVc(int amount)
		{
			if (depositVc == null) depositVc = (Function) native.GetObjectProperty("depositVc");
			return (bool) depositVc.Call(native, amount);
		}

		/// <summary>
		/// This function is hard-coded to always return 1.
		/// </summary>
		public bool _0xE154B48B68EF72BC(object p0)
		{
			if (__0xE154B48B68EF72BC == null) __0xE154B48B68EF72BC = (Function) native.GetObjectProperty("_0xE154B48B68EF72BC");
			return (bool) __0xE154B48B68EF72BC.Call(native, p0);
		}

		/// <summary>
		/// This function is hard-coded to always return 1.
		/// </summary>
		public bool _0x6FCF8DDEA146C45B(object p0)
		{
			if (__0x6FCF8DDEA146C45B == null) __0x6FCF8DDEA146C45B = (Function) native.GetObjectProperty("_0x6FCF8DDEA146C45B");
			return (bool) __0x6FCF8DDEA146C45B.Call(native, p0);
		}

		public bool NetGameserverUseServerTransactions()
		{
			if (netGameserverUseServerTransactions == null) netGameserverUseServerTransactions = (Function) native.GetObjectProperty("netGameserverUseServerTransactions");
			return (bool) netGameserverUseServerTransactions.Call(native);
		}

		public bool NetGameserverCatalogItemExists(string name)
		{
			if (netGameserverCatalogItemExists == null) netGameserverCatalogItemExists = (Function) native.GetObjectProperty("netGameserverCatalogItemExists");
			return (bool) netGameserverCatalogItemExists.Call(native, name);
		}

		public bool NetGameserverCatalogItemExistsHash(int hash)
		{
			if (netGameserverCatalogItemExistsHash == null) netGameserverCatalogItemExistsHash = (Function) native.GetObjectProperty("netGameserverCatalogItemExistsHash");
			return (bool) netGameserverCatalogItemExistsHash.Call(native, hash);
		}

		/// <summary>
		/// bool is always true in game scripts
		/// </summary>
		public int NetGameserverGetPrice(int itemHash, int categoryHash, bool p2)
		{
			if (netGameserverGetPrice == null) netGameserverGetPrice = (Function) native.GetObjectProperty("netGameserverGetPrice");
			return (int) netGameserverGetPrice.Call(native, itemHash, categoryHash, p2);
		}

		public bool NetGameserverCatalogIsReady()
		{
			if (netGameserverCatalogIsReady == null) netGameserverCatalogIsReady = (Function) native.GetObjectProperty("netGameserverCatalogIsReady");
			return (bool) netGameserverCatalogIsReady.Call(native);
		}

		public bool NetGameserverIsCatalogValid()
		{
			if (netGameserverIsCatalogValid == null) netGameserverIsCatalogValid = (Function) native.GetObjectProperty("netGameserverIsCatalogValid");
			return (bool) netGameserverIsCatalogValid.Call(native);
		}

		public object _0x85F6C9ABA1DE2BCF()
		{
			if (__0x85F6C9ABA1DE2BCF == null) __0x85F6C9ABA1DE2BCF = (Function) native.GetObjectProperty("_0x85F6C9ABA1DE2BCF");
			return __0x85F6C9ABA1DE2BCF.Call(native);
		}

		public object _0x357B152EF96C30B6()
		{
			if (__0x357B152EF96C30B6 == null) __0x357B152EF96C30B6 = (Function) native.GetObjectProperty("_0x357B152EF96C30B6");
			return __0x357B152EF96C30B6.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetGameserverGetCatalogState(int state)
		{
			if (netGameserverGetCatalogState == null) netGameserverGetCatalogState = (Function) native.GetObjectProperty("netGameserverGetCatalogState");
			var results = (Array) netGameserverGetCatalogState.Call(native, state);
			return ((bool) results[0], (int) results[1]);
		}

		public object _0xE3E5A7C64CA2C6ED()
		{
			if (__0xE3E5A7C64CA2C6ED == null) __0xE3E5A7C64CA2C6ED = (Function) native.GetObjectProperty("_0xE3E5A7C64CA2C6ED");
			return __0xE3E5A7C64CA2C6ED.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0x0395CB47B022E62C(int p0)
		{
			if (__0x0395CB47B022E62C == null) __0x0395CB47B022E62C = (Function) native.GetObjectProperty("_0x0395CB47B022E62C");
			var results = (Array) __0x0395CB47B022E62C.Call(native, p0);
			return ((bool) results[0], (int) results[1]);
		}

		public bool NetGameserverStartSession(int charSlot)
		{
			if (netGameserverStartSession == null) netGameserverStartSession = (Function) native.GetObjectProperty("netGameserverStartSession");
			return (bool) netGameserverStartSession.Call(native, charSlot);
		}

		public bool _0x72EB7BA9B69BF6AB()
		{
			if (__0x72EB7BA9B69BF6AB == null) __0x72EB7BA9B69BF6AB = (Function) native.GetObjectProperty("_0x72EB7BA9B69BF6AB");
			return (bool) __0x72EB7BA9B69BF6AB.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0x170910093218C8B9(int p0)
		{
			if (__0x170910093218C8B9 == null) __0x170910093218C8B9 = (Function) native.GetObjectProperty("_0x170910093218C8B9");
			var results = (Array) __0x170910093218C8B9.Call(native, p0);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0xC13C38E47EA5DF31(int p0)
		{
			if (__0xC13C38E47EA5DF31 == null) __0xC13C38E47EA5DF31 = (Function) native.GetObjectProperty("_0xC13C38E47EA5DF31");
			var results = (Array) __0xC13C38E47EA5DF31.Call(native, p0);
			return ((bool) results[0], (int) results[1]);
		}

		public bool NetGameserverIsSessionValid(int charSlot)
		{
			if (netGameserverIsSessionValid == null) netGameserverIsSessionValid = (Function) native.GetObjectProperty("netGameserverIsSessionValid");
			return (bool) netGameserverIsSessionValid.Call(native, charSlot);
		}

		/// <summary>
		/// NET_GAMESERVER_*
		/// </summary>
		public int _0x74A0FD0688F1EE45(int p0)
		{
			if (__0x74A0FD0688F1EE45 == null) __0x74A0FD0688F1EE45 = (Function) native.GetObjectProperty("_0x74A0FD0688F1EE45");
			return (int) __0x74A0FD0688F1EE45.Call(native, p0);
		}

		public bool NetGameserverSessionApplyReceivedData(int charSlot)
		{
			if (netGameserverSessionApplyReceivedData == null) netGameserverSessionApplyReceivedData = (Function) native.GetObjectProperty("netGameserverSessionApplyReceivedData");
			return (bool) netGameserverSessionApplyReceivedData.Call(native, charSlot);
		}

		public bool NetGameserverIsSessionRefreshPending()
		{
			if (netGameserverIsSessionRefreshPending == null) netGameserverIsSessionRefreshPending = (Function) native.GetObjectProperty("netGameserverIsSessionRefreshPending");
			return (bool) netGameserverIsSessionRefreshPending.Call(native);
		}

		/// <summary>
		/// Note: only one of the arguments can be set to true at a time
		/// </summary>
		public bool NetGameserverGetBalance(bool inventory, bool playerbalance)
		{
			if (netGameserverGetBalance == null) netGameserverGetBalance = (Function) native.GetObjectProperty("netGameserverGetBalance");
			return (bool) netGameserverGetBalance.Call(native, inventory, playerbalance);
		}

		public bool _0x613F125BA3BD2EB9()
		{
			if (__0x613F125BA3BD2EB9 == null) __0x613F125BA3BD2EB9 = (Function) native.GetObjectProperty("_0x613F125BA3BD2EB9");
			return (bool) __0x613F125BA3BD2EB9.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int, bool></returns>
		public (bool, int, bool) NetGameserverGetTransactionManagerData(int p0, bool p1)
		{
			if (netGameserverGetTransactionManagerData == null) netGameserverGetTransactionManagerData = (Function) native.GetObjectProperty("netGameserverGetTransactionManagerData");
			var results = (Array) netGameserverGetTransactionManagerData.Call(native, p0, p1);
			return ((bool) results[0], (int) results[1], (bool) results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetGameserverBasketStart(int transactionId, int categoryHash, int actionHash, int flags)
		{
			if (netGameserverBasketStart == null) netGameserverBasketStart = (Function) native.GetObjectProperty("netGameserverBasketStart");
			var results = (Array) netGameserverBasketStart.Call(native, transactionId, categoryHash, actionHash, flags);
			return ((bool) results[0], (int) results[1]);
		}

		public bool NetGameserverBasketDelete()
		{
			if (netGameserverBasketDelete == null) netGameserverBasketDelete = (Function) native.GetObjectProperty("netGameserverBasketDelete");
			return (bool) netGameserverBasketDelete.Call(native);
		}

		public bool NetGameserverBasketEnd()
		{
			if (netGameserverBasketEnd == null) netGameserverBasketEnd = (Function) native.GetObjectProperty("netGameserverBasketEnd");
			return (bool) netGameserverBasketEnd.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetGameserverBasketAddItem(object itemData, int quantity)
		{
			if (netGameserverBasketAddItem == null) netGameserverBasketAddItem = (Function) native.GetObjectProperty("netGameserverBasketAddItem");
			var results = (Array) netGameserverBasketAddItem.Call(native, itemData, quantity);
			return ((bool) results[0], results[1]);
		}

		public bool NetGameserverBasketIsFull()
		{
			if (netGameserverBasketIsFull == null) netGameserverBasketIsFull = (Function) native.GetObjectProperty("netGameserverBasketIsFull");
			return (bool) netGameserverBasketIsFull.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetGameserverBasketApplyServerData(object p0, object p1)
		{
			if (netGameserverBasketApplyServerData == null) netGameserverBasketApplyServerData = (Function) native.GetObjectProperty("netGameserverBasketApplyServerData");
			var results = (Array) netGameserverBasketApplyServerData.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public bool NetGameserverCheckoutStart(int transactionId)
		{
			if (netGameserverCheckoutStart == null) netGameserverCheckoutStart = (Function) native.GetObjectProperty("netGameserverCheckoutStart");
			return (bool) netGameserverCheckoutStart.Call(native, transactionId);
		}

		/// <summary>
		/// NET_GAMESERVER_*
		/// Checks if the transaction status is equal to 1.
		/// </summary>
		public bool _0xC830417D630A50F9(int transactionId)
		{
			if (__0xC830417D630A50F9 == null) __0xC830417D630A50F9 = (Function) native.GetObjectProperty("_0xC830417D630A50F9");
			return (bool) __0xC830417D630A50F9.Call(native, transactionId);
		}

		/// <summary>
		/// NET_GAMESERVER_*
		/// Checks if the transaction status is equal to 3.
		/// </summary>
		public bool _0x79EDAC677CA62F81(int transactionId)
		{
			if (__0x79EDAC677CA62F81 == null) __0x79EDAC677CA62F81 = (Function) native.GetObjectProperty("_0x79EDAC677CA62F81");
			return (bool) __0x79EDAC677CA62F81.Call(native, transactionId);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetGameserverBeginService(int transactionId, int categoryHash, int itemHash, int actionTypeHash, int value, int flags)
		{
			if (netGameserverBeginService == null) netGameserverBeginService = (Function) native.GetObjectProperty("netGameserverBeginService");
			var results = (Array) netGameserverBeginService.Call(native, transactionId, categoryHash, itemHash, actionTypeHash, value, flags);
			return ((bool) results[0], (int) results[1]);
		}

		public bool NetGameserverEndService(int transactionId)
		{
			if (netGameserverEndService == null) netGameserverEndService = (Function) native.GetObjectProperty("netGameserverEndService");
			return (bool) netGameserverEndService.Call(native, transactionId);
		}

		public bool NetGameserverDeleteCharacterSlot(int slot, bool transfer, int reason)
		{
			if (netGameserverDeleteCharacterSlot == null) netGameserverDeleteCharacterSlot = (Function) native.GetObjectProperty("netGameserverDeleteCharacterSlot");
			return (bool) netGameserverDeleteCharacterSlot.Call(native, slot, transfer, reason);
		}

		public int NetGameserverDeleteCharacterSlotGetStatus()
		{
			if (netGameserverDeleteCharacterSlotGetStatus == null) netGameserverDeleteCharacterSlotGetStatus = (Function) native.GetObjectProperty("netGameserverDeleteCharacterSlotGetStatus");
			return (int) netGameserverDeleteCharacterSlotGetStatus.Call(native);
		}

		public bool NetGameserverDeleteSetTelemetryNonceSeed()
		{
			if (netGameserverDeleteSetTelemetryNonceSeed == null) netGameserverDeleteSetTelemetryNonceSeed = (Function) native.GetObjectProperty("netGameserverDeleteSetTelemetryNonceSeed");
			return (bool) netGameserverDeleteSetTelemetryNonceSeed.Call(native);
		}

		public bool NetGameserverTransferBankToWallet(int charSlot, int amount)
		{
			if (netGameserverTransferBankToWallet == null) netGameserverTransferBankToWallet = (Function) native.GetObjectProperty("netGameserverTransferBankToWallet");
			return (bool) netGameserverTransferBankToWallet.Call(native, charSlot, amount);
		}

		public bool NetGameserverTransferWalletToBank(int charSlot, int amount)
		{
			if (netGameserverTransferWalletToBank == null) netGameserverTransferWalletToBank = (Function) native.GetObjectProperty("netGameserverTransferWalletToBank");
			return (bool) netGameserverTransferWalletToBank.Call(native, charSlot, amount);
		}

		/// <summary>
		/// Same as 0x350AA5EBC03D3BD2
		/// </summary>
		public int NetGameserverTransferCashGetStatus()
		{
			if (netGameserverTransferCashGetStatus == null) netGameserverTransferCashGetStatus = (Function) native.GetObjectProperty("netGameserverTransferCashGetStatus");
			return (int) netGameserverTransferCashGetStatus.Call(native);
		}

		/// <summary>
		/// Same as 0x23789E777D14CE44
		/// </summary>
		public int NetGameserverTransferCashGetStatus2()
		{
			if (netGameserverTransferCashGetStatus2 == null) netGameserverTransferCashGetStatus2 = (Function) native.GetObjectProperty("netGameserverTransferCashGetStatus2");
			return (int) netGameserverTransferCashGetStatus2.Call(native);
		}

		/// <summary>
		/// Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
		/// </summary>
		public bool NetGameserverTransferCashSetTelemetryNonceSeed()
		{
			if (netGameserverTransferCashSetTelemetryNonceSeed == null) netGameserverTransferCashSetTelemetryNonceSeed = (Function) native.GetObjectProperty("netGameserverTransferCashSetTelemetryNonceSeed");
			return (bool) netGameserverTransferCashSetTelemetryNonceSeed.Call(native);
		}

		public bool NetGameserverSetTelemetryNonceSeed(int p0)
		{
			if (netGameserverSetTelemetryNonceSeed == null) netGameserverSetTelemetryNonceSeed = (Function) native.GetObjectProperty("netGameserverSetTelemetryNonceSeed");
			return (bool) netGameserverSetTelemetryNonceSeed.Call(native, p0);
		}

		/// <summary>
		/// Online version is defined here: update\update.rpf\common\data\version.txt
		/// Example:
		/// [ONLINE_VERSION_NUMBER]
		/// 1.33
		/// _GET_ONLINE_VERSION() will return "1.33"
		/// </summary>
		public string GetOnlineVersion()
		{
			if (getOnlineVersion == null) getOnlineVersion = (Function) native.GetObjectProperty("getOnlineVersion");
			return (string) getOnlineVersion.Call(native);
		}

		public bool NetworkIsSignedIn()
		{
			if (networkIsSignedIn == null) networkIsSignedIn = (Function) native.GetObjectProperty("networkIsSignedIn");
			return (bool) networkIsSignedIn.Call(native);
		}

		/// <summary>
		/// seemed not to work for some ppl
		/// </summary>
		/// <returns>Returns whether the game is not in offline mode.</returns>
		public bool NetworkIsSignedOnline()
		{
			if (networkIsSignedOnline == null) networkIsSignedOnline = (Function) native.GetObjectProperty("networkIsSignedOnline");
			return (bool) networkIsSignedOnline.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 1.
		/// </summary>
		public bool _0xBD545D44CCE70597()
		{
			if (__0xBD545D44CCE70597 == null) __0xBD545D44CCE70597 = (Function) native.GetObjectProperty("_0xBD545D44CCE70597");
			return (bool) __0xBD545D44CCE70597.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 1.
		/// </summary>
		public object _0xEBCAB9E5048434F4()
		{
			if (__0xEBCAB9E5048434F4 == null) __0xEBCAB9E5048434F4 = (Function) native.GetObjectProperty("_0xEBCAB9E5048434F4");
			return __0xEBCAB9E5048434F4.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public object _0x74FB3E29E6D10FA9()
		{
			if (__0x74FB3E29E6D10FA9 == null) __0x74FB3E29E6D10FA9 = (Function) native.GetObjectProperty("_0x74FB3E29E6D10FA9");
			return __0x74FB3E29E6D10FA9.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 1.
		/// </summary>
		public object _0x7808619F31FF22DB()
		{
			if (__0x7808619F31FF22DB == null) __0x7808619F31FF22DB = (Function) native.GetObjectProperty("_0x7808619F31FF22DB");
			return __0x7808619F31FF22DB.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public object _0xA0FA4EC6A05DA44E()
		{
			if (__0xA0FA4EC6A05DA44E == null) __0xA0FA4EC6A05DA44E = (Function) native.GetObjectProperty("_0xA0FA4EC6A05DA44E");
			return __0xA0FA4EC6A05DA44E.Call(native);
		}

		public bool NetworkHaveJustUploadLater()
		{
			if (networkHaveJustUploadLater == null) networkHaveJustUploadLater = (Function) native.GetObjectProperty("networkHaveJustUploadLater");
			return (bool) networkHaveJustUploadLater.Call(native);
		}

		/// <summary>
		/// NETWORK_IS_*
		/// Seems to be related to PlayStation
		/// </summary>
		public bool _0x8D11E61A4ABF49CC()
		{
			if (__0x8D11E61A4ABF49CC == null) __0x8D11E61A4ABF49CC = (Function) native.GetObjectProperty("_0x8D11E61A4ABF49CC");
			return (bool) __0x8D11E61A4ABF49CC.Call(native);
		}

		public bool NetworkIsCloudAvailable()
		{
			if (networkIsCloudAvailable == null) networkIsCloudAvailable = (Function) native.GetObjectProperty("networkIsCloudAvailable");
			return (bool) networkIsCloudAvailable.Call(native);
		}

		public bool NetworkHasSocialClubAccount()
		{
			if (networkHasSocialClubAccount == null) networkHasSocialClubAccount = (Function) native.GetObjectProperty("networkHasSocialClubAccount");
			return (bool) networkHasSocialClubAccount.Call(native);
		}

		public object _0xBA9775570DB788CF()
		{
			if (__0xBA9775570DB788CF == null) __0xBA9775570DB788CF = (Function) native.GetObjectProperty("_0xBA9775570DB788CF");
			return __0xBA9775570DB788CF.Call(native);
		}

		public bool NetworkIsHost()
		{
			if (networkIsHost == null) networkIsHost = (Function) native.GetObjectProperty("networkIsHost");
			return (bool) networkIsHost.Call(native);
		}

		public int NetworkGetHost()
		{
			if (networkGetHost == null) networkGetHost = (Function) native.GetObjectProperty("networkGetHost");
			return (int) networkGetHost.Call(native);
		}

		public bool _0x4237E822315D8BA9()
		{
			if (__0x4237E822315D8BA9 == null) __0x4237E822315D8BA9 = (Function) native.GetObjectProperty("_0x4237E822315D8BA9");
			return (bool) __0x4237E822315D8BA9.Call(native);
		}

		public bool NetworkHaveOnlinePrivileges()
		{
			if (networkHaveOnlinePrivileges == null) networkHaveOnlinePrivileges = (Function) native.GetObjectProperty("networkHaveOnlinePrivileges");
			return (bool) networkHaveOnlinePrivileges.Call(native);
		}

		public bool NetworkHasAgeRestrictedProfile()
		{
			if (networkHasAgeRestrictedProfile == null) networkHasAgeRestrictedProfile = (Function) native.GetObjectProperty("networkHasAgeRestrictedProfile");
			return (bool) networkHasAgeRestrictedProfile.Call(native);
		}

		public bool NetworkHaveUserContentPrivileges(object p0)
		{
			if (networkHaveUserContentPrivileges == null) networkHaveUserContentPrivileges = (Function) native.GetObjectProperty("networkHaveUserContentPrivileges");
			return (bool) networkHaveUserContentPrivileges.Call(native, p0);
		}

		public bool _0xAEEF48CDF5B6CE7C(object p0, object p1)
		{
			if (__0xAEEF48CDF5B6CE7C == null) __0xAEEF48CDF5B6CE7C = (Function) native.GetObjectProperty("_0xAEEF48CDF5B6CE7C");
			return (bool) __0xAEEF48CDF5B6CE7C.Call(native, p0, p1);
		}

		public bool _0x78321BEA235FD8CD(object p0, bool p1)
		{
			if (__0x78321BEA235FD8CD == null) __0x78321BEA235FD8CD = (Function) native.GetObjectProperty("_0x78321BEA235FD8CD");
			return (bool) __0x78321BEA235FD8CD.Call(native, p0, p1);
		}

		public bool _0x595F028698072DD9(object p0, object p1, bool p2)
		{
			if (__0x595F028698072DD9 == null) __0x595F028698072DD9 = (Function) native.GetObjectProperty("_0x595F028698072DD9");
			return (bool) __0x595F028698072DD9.Call(native, p0, p1, p2);
		}

		public bool _0x83F28CE49FBBFFBA(object p0, object p1, bool p2)
		{
			if (__0x83F28CE49FBBFFBA == null) __0x83F28CE49FBBFFBA = (Function) native.GetObjectProperty("_0x83F28CE49FBBFFBA");
			return (bool) __0x83F28CE49FBBFFBA.Call(native, p0, p1, p2);
		}

		public object _0x07EAB372C8841D99(object p0, object p1, object p2)
		{
			if (__0x07EAB372C8841D99 == null) __0x07EAB372C8841D99 = (Function) native.GetObjectProperty("_0x07EAB372C8841D99");
			return __0x07EAB372C8841D99.Call(native, p0, p1, p2);
		}

		public object _0x906CA41A4B74ECA4()
		{
			if (__0x906CA41A4B74ECA4 == null) __0x906CA41A4B74ECA4 = (Function) native.GetObjectProperty("_0x906CA41A4B74ECA4");
			return __0x906CA41A4B74ECA4.Call(native);
		}

		public object _0x023ACAB2DC9DC4A4()
		{
			if (__0x023ACAB2DC9DC4A4 == null) __0x023ACAB2DC9DC4A4 = (Function) native.GetObjectProperty("_0x023ACAB2DC9DC4A4");
			return __0x023ACAB2DC9DC4A4.Call(native);
		}

		public object _0x76BF03FADBF154F5()
		{
			if (__0x76BF03FADBF154F5 == null) __0x76BF03FADBF154F5 = (Function) native.GetObjectProperty("_0x76BF03FADBF154F5");
			return __0x76BF03FADBF154F5.Call(native);
		}

		public int NetworkGetAgeGroup()
		{
			if (networkGetAgeGroup == null) networkGetAgeGroup = (Function) native.GetObjectProperty("networkGetAgeGroup");
			return (int) networkGetAgeGroup.Call(native);
		}

		public object _0x0CF6CC51AA18F0F8(object p0, object p1, object p2)
		{
			if (__0x0CF6CC51AA18F0F8 == null) __0x0CF6CC51AA18F0F8 = (Function) native.GetObjectProperty("_0x0CF6CC51AA18F0F8");
			return __0x0CF6CC51AA18F0F8.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public bool _0x64E5C4CC82847B73()
		{
			if (__0x64E5C4CC82847B73 == null) __0x64E5C4CC82847B73 = (Function) native.GetObjectProperty("_0x64E5C4CC82847B73");
			return (bool) __0x64E5C4CC82847B73.Call(native);
		}

		public void _0x1F7BC3539F9E0224()
		{
			if (__0x1F7BC3539F9E0224 == null) __0x1F7BC3539F9E0224 = (Function) native.GetObjectProperty("_0x1F7BC3539F9E0224");
			__0x1F7BC3539F9E0224.Call(native);
		}

		public bool NetworkHaveOnlinePrivilege2()
		{
			if (networkHaveOnlinePrivilege2 == null) networkHaveOnlinePrivilege2 = (Function) native.GetObjectProperty("networkHaveOnlinePrivilege2");
			return (bool) networkHaveOnlinePrivilege2.Call(native);
		}

		public object _0xA8ACB6459542A8C8()
		{
			if (__0xA8ACB6459542A8C8 == null) __0xA8ACB6459542A8C8 = (Function) native.GetObjectProperty("_0xA8ACB6459542A8C8");
			return __0xA8ACB6459542A8C8.Call(native);
		}

		public void _0x83FE8D7229593017()
		{
			if (__0x83FE8D7229593017 == null) __0x83FE8D7229593017 = (Function) native.GetObjectProperty("_0x83FE8D7229593017");
			__0x83FE8D7229593017.Call(native);
		}

		public object _0x53C10C8BD774F2C9()
		{
			if (__0x53C10C8BD774F2C9 == null) __0x53C10C8BD774F2C9 = (Function) native.GetObjectProperty("_0x53C10C8BD774F2C9");
			return __0x53C10C8BD774F2C9.Call(native);
		}

		public bool NetworkCanBail()
		{
			if (networkCanBail == null) networkCanBail = (Function) native.GetObjectProperty("networkCanBail");
			return (bool) networkCanBail.Call(native);
		}

		public void NetworkBail(int p0, int p1, int p2)
		{
			if (networkBail == null) networkBail = (Function) native.GetObjectProperty("networkBail");
			networkBail.Call(native, p0, p1, p2);
		}

		public void _0x283B6062A2C01E9B()
		{
			if (__0x283B6062A2C01E9B == null) __0x283B6062A2C01E9B = (Function) native.GetObjectProperty("_0x283B6062A2C01E9B");
			__0x283B6062A2C01E9B.Call(native);
		}

		public object _0x8B4FFC790CA131EF(object p0, object p1, object p2, object p3)
		{
			if (__0x8B4FFC790CA131EF == null) __0x8B4FFC790CA131EF = (Function) native.GetObjectProperty("_0x8B4FFC790CA131EF");
			return __0x8B4FFC790CA131EF.Call(native, p0, p1, p2, p3);
		}

		public void NetworkTransitionTrack(int hash, int p1, int p2, int state, int p4)
		{
			if (networkTransitionTrack == null) networkTransitionTrack = (Function) native.GetObjectProperty("networkTransitionTrack");
			networkTransitionTrack.Call(native, hash, p1, p2, state, p4);
		}

		public object _0x04918A41BC9B8157(object p0, object p1, object p2)
		{
			if (__0x04918A41BC9B8157 == null) __0x04918A41BC9B8157 = (Function) native.GetObjectProperty("_0x04918A41BC9B8157");
			return __0x04918A41BC9B8157.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// 11 - Need to download tunables.
		/// 12 - Need to download background script.
		/// </summary>
		/// <returns>Array<bool, int> Returns 1 if the multiplayer is loaded, otherwhise 0.</returns>
		public (bool, int) NetworkCanAccessMultiplayer(int loadingState)
		{
			if (networkCanAccessMultiplayer == null) networkCanAccessMultiplayer = (Function) native.GetObjectProperty("networkCanAccessMultiplayer");
			var results = (Array) networkCanAccessMultiplayer.Call(native, loadingState);
			return ((bool) results[0], (int) results[1]);
		}

		public bool NetworkIsMultiplayerDisabled()
		{
			if (networkIsMultiplayerDisabled == null) networkIsMultiplayerDisabled = (Function) native.GetObjectProperty("networkIsMultiplayerDisabled");
			return (bool) networkIsMultiplayerDisabled.Call(native);
		}

		public bool NetworkCanEnterMultiplayer()
		{
			if (networkCanEnterMultiplayer == null) networkCanEnterMultiplayer = (Function) native.GetObjectProperty("networkCanEnterMultiplayer");
			return (bool) networkCanEnterMultiplayer.Call(native);
		}

		/// <summary>
		/// unknown params
		/// p0 = 0, 2, or 999 (The global is 999 by default.)
		/// p1 = 0 (Always in every script it's found in atleast.)
		/// p2 = 0, 3, or 4 (Based on a var that is determined by a function.)
		/// p3 = maxPlayers (It's obvious in x360 scripts it's always 18)
		/// p4 = 0 (Always in every script it's found in atleast.)
		/// p5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)
		/// p5 is reset to 0 if,
		/// Global_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed.
		/// </summary>
		/// <param name="p0">0, 2, or 999 (The global is 999 by default.)</param>
		/// <param name="p1">0 (Always in every script it's found in atleast.)</param>
		/// <param name="p2">0, 3, or 4 (Based on a var that is determined by a function.)</param>
		/// <param name="p4">0 (Always in every script it's found in atleast.)</param>
		/// <param name="p5">is reset to 0 if,</param>
		public object NetworkSessionEnter(object p0, object p1, object p2, int maxPlayers, object p4, object p5)
		{
			if (networkSessionEnter == null) networkSessionEnter = (Function) native.GetObjectProperty("networkSessionEnter");
			return networkSessionEnter.Call(native, p0, p1, p2, maxPlayers, p4, p5);
		}

		public bool NetworkSessionFriendMatchmaking(int p0, int p1, int maxPlayers, bool p3)
		{
			if (networkSessionFriendMatchmaking == null) networkSessionFriendMatchmaking = (Function) native.GetObjectProperty("networkSessionFriendMatchmaking");
			return (bool) networkSessionFriendMatchmaking.Call(native, p0, p1, maxPlayers, p3);
		}

		public bool NetworkSessionCrewMatchmaking(int p0, int p1, int p2, int maxPlayers, bool p4)
		{
			if (networkSessionCrewMatchmaking == null) networkSessionCrewMatchmaking = (Function) native.GetObjectProperty("networkSessionCrewMatchmaking");
			return (bool) networkSessionCrewMatchmaking.Call(native, p0, p1, p2, maxPlayers, p4);
		}

		public bool NetworkSessionActivityQuickmatch(object p0, object p1, object p2, object p3)
		{
			if (networkSessionActivityQuickmatch == null) networkSessionActivityQuickmatch = (Function) native.GetObjectProperty("networkSessionActivityQuickmatch");
			return (bool) networkSessionActivityQuickmatch.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
		/// </summary>
		public bool NetworkSessionHost(int p0, int maxPlayers, bool p2)
		{
			if (networkSessionHost == null) networkSessionHost = (Function) native.GetObjectProperty("networkSessionHost");
			return (bool) networkSessionHost.Call(native, p0, maxPlayers, p2);
		}

		public bool NetworkSessionHostClosed(int p0, int maxPlayers)
		{
			if (networkSessionHostClosed == null) networkSessionHostClosed = (Function) native.GetObjectProperty("networkSessionHostClosed");
			return (bool) networkSessionHostClosed.Call(native, p0, maxPlayers);
		}

		/// <summary>
		/// Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
		/// </summary>
		public bool NetworkSessionHostFriendsOnly(int p0, int maxPlayers)
		{
			if (networkSessionHostFriendsOnly == null) networkSessionHostFriendsOnly = (Function) native.GetObjectProperty("networkSessionHostFriendsOnly");
			return (bool) networkSessionHostFriendsOnly.Call(native, p0, maxPlayers);
		}

		public bool NetworkSessionIsClosedFriends()
		{
			if (networkSessionIsClosedFriends == null) networkSessionIsClosedFriends = (Function) native.GetObjectProperty("networkSessionIsClosedFriends");
			return (bool) networkSessionIsClosedFriends.Call(native);
		}

		public bool NetworkSessionIsClosedCrew()
		{
			if (networkSessionIsClosedCrew == null) networkSessionIsClosedCrew = (Function) native.GetObjectProperty("networkSessionIsClosedCrew");
			return (bool) networkSessionIsClosedCrew.Call(native);
		}

		public bool NetworkSessionIsSolo()
		{
			if (networkSessionIsSolo == null) networkSessionIsSolo = (Function) native.GetObjectProperty("networkSessionIsSolo");
			return (bool) networkSessionIsSolo.Call(native);
		}

		public bool NetworkSessionIsPrivate()
		{
			if (networkSessionIsPrivate == null) networkSessionIsPrivate = (Function) native.GetObjectProperty("networkSessionIsPrivate");
			return (bool) networkSessionIsPrivate.Call(native);
		}

		/// <summary>
		/// p0 is always false and p1 varies.
		/// NETWORK_SESSION_END(0, 1)
		/// NETWORK_SESSION_END(0, 0)
		/// Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
		/// </summary>
		/// <param name="p0">is always false and p1 varies.</param>
		public bool NetworkSessionEnd(bool p0, bool p1)
		{
			if (networkSessionEnd == null) networkSessionEnd = (Function) native.GetObjectProperty("networkSessionEnd");
			return (bool) networkSessionEnd.Call(native, p0, p1);
		}

		/// <summary>
		/// Only works as host.
		/// </summary>
		public void NetworkSessionKickPlayer(int player)
		{
			if (networkSessionKickPlayer == null) networkSessionKickPlayer = (Function) native.GetObjectProperty("networkSessionKickPlayer");
			networkSessionKickPlayer.Call(native, player);
		}

		public bool NetworkSessionGetKickVote(int player)
		{
			if (networkSessionGetKickVote == null) networkSessionGetKickVote = (Function) native.GetObjectProperty("networkSessionGetKickVote");
			return (bool) networkSessionGetKickVote.Call(native, player);
		}

		public object _0x041C7F2A6C9894E6(object p0, object p1, object p2)
		{
			if (__0x041C7F2A6C9894E6 == null) __0x041C7F2A6C9894E6 = (Function) native.GetObjectProperty("_0x041C7F2A6C9894E6");
			return __0x041C7F2A6C9894E6.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// sfink: related to: NETWORK_BAIL
		/// NETWORK_BAIL_TRANSITION
		/// NETWORK_JOIN_GROUP_ACTIVITY
		/// NETWORK_JOIN_TRANSITION
		/// NETWORK_LAUNCH_TRANSITION
		/// NETWORK_SESSION_HOST
		/// NETWORK_SESSION_HOST_CLOSED
		/// NETWORK_SESSION_HOST_FRIENDS_ONLY
		/// NETWORK_SESSION_HOST_SINGLE_PLAYER
		/// NETWORK_SESSION_VOICE_LEAVE
		/// </summary>
		public object _0x59DF79317F85A7E0()
		{
			if (__0x59DF79317F85A7E0 == null) __0x59DF79317F85A7E0 = (Function) native.GetObjectProperty("_0x59DF79317F85A7E0");
			return __0x59DF79317F85A7E0.Call(native);
		}

		/// <summary>
		/// related to: NETWORK_BAIL
		/// NETWORK_BAIL_TRANSITION
		/// NETWORK_JOIN_GROUP_ACTIVITY
		/// NETWORK_JOIN_TRANSITION
		/// NETWORK_LAUNCH_TRANSITION
		/// NETWORK_SESSION_HOST
		/// NETWORK_SESSION_HOST_CLOSED
		/// NETWORK_SESSION_HOST_FRIENDS_ONLY
		/// NETWORK_SESSION_HOST_SINGLE_PLAYER
		/// NETWORK_SESSION_VOICE_LEAVE
		/// </summary>
		public object _0xFFE1E5B792D92B34()
		{
			if (__0xFFE1E5B792D92B34 == null) __0xFFE1E5B792D92B34 = (Function) native.GetObjectProperty("_0xFFE1E5B792D92B34");
			return __0xFFE1E5B792D92B34.Call(native);
		}

		public void NetworkSessionSetMatchmakingGroup(int matchmakingGroup)
		{
			if (networkSessionSetMatchmakingGroup == null) networkSessionSetMatchmakingGroup = (Function) native.GetObjectProperty("networkSessionSetMatchmakingGroup");
			networkSessionSetMatchmakingGroup.Call(native, matchmakingGroup);
		}

		/// <summary>
		/// playerTypes:
		/// 0 = regular joiner
		/// 4 = spectator
		/// 8 = unknown
		/// </summary>
		public void NetworkSessionSetMatchmakingGroupMax(int playerType, int playerCount)
		{
			if (networkSessionSetMatchmakingGroupMax == null) networkSessionSetMatchmakingGroupMax = (Function) native.GetObjectProperty("networkSessionSetMatchmakingGroupMax");
			networkSessionSetMatchmakingGroupMax.Call(native, playerType, playerCount);
		}

		public int NetworkSessionGetMatchmakingGroupFree(int p0)
		{
			if (networkSessionGetMatchmakingGroupFree == null) networkSessionGetMatchmakingGroupFree = (Function) native.GetObjectProperty("networkSessionGetMatchmakingGroupFree");
			return (int) networkSessionGetMatchmakingGroupFree.Call(native, p0);
		}

		/// <summary>
		/// NETWORK_SESSION_*
		/// p0 must be <= 4
		/// </summary>
		/// <param name="p0">must be <= 4</param>
		public void _0xCAE55F48D3D7875C(int p0)
		{
			if (__0xCAE55F48D3D7875C == null) __0xCAE55F48D3D7875C = (Function) native.GetObjectProperty("_0xCAE55F48D3D7875C");
			__0xCAE55F48D3D7875C.Call(native, p0);
		}

		public void _0xF49ABC20D8552257(object p0)
		{
			if (__0xF49ABC20D8552257 == null) __0xF49ABC20D8552257 = (Function) native.GetObjectProperty("_0xF49ABC20D8552257");
			__0xF49ABC20D8552257.Call(native, p0);
		}

		public void _0x4811BBAC21C5FCD5(object p0)
		{
			if (__0x4811BBAC21C5FCD5 == null) __0x4811BBAC21C5FCD5 = (Function) native.GetObjectProperty("_0x4811BBAC21C5FCD5");
			__0x4811BBAC21C5FCD5.Call(native, p0);
		}

		public void _0x5539C3EBF104A53A(bool p0)
		{
			if (__0x5539C3EBF104A53A == null) __0x5539C3EBF104A53A = (Function) native.GetObjectProperty("_0x5539C3EBF104A53A");
			__0x5539C3EBF104A53A.Call(native, p0);
		}

		public void _0x702BC4D605522539(object p0)
		{
			if (__0x702BC4D605522539 == null) __0x702BC4D605522539 = (Function) native.GetObjectProperty("_0x702BC4D605522539");
			__0x702BC4D605522539.Call(native, p0);
		}

		public void NetworkSessionSetMatchmakingPropertyId(bool p0)
		{
			if (networkSessionSetMatchmakingPropertyId == null) networkSessionSetMatchmakingPropertyId = (Function) native.GetObjectProperty("networkSessionSetMatchmakingPropertyId");
			networkSessionSetMatchmakingPropertyId.Call(native, p0);
		}

		public void NetworkSessionSetMatchmakingMentalState(object p0)
		{
			if (networkSessionSetMatchmakingMentalState == null) networkSessionSetMatchmakingMentalState = (Function) native.GetObjectProperty("networkSessionSetMatchmakingMentalState");
			networkSessionSetMatchmakingMentalState.Call(native, p0);
		}

		public void _0x5ECD378EE64450AB(object p0)
		{
			if (__0x5ECD378EE64450AB == null) __0x5ECD378EE64450AB = (Function) native.GetObjectProperty("_0x5ECD378EE64450AB");
			__0x5ECD378EE64450AB.Call(native, p0);
		}

		public void _0x59D421683D31835A(object p0)
		{
			if (__0x59D421683D31835A == null) __0x59D421683D31835A = (Function) native.GetObjectProperty("_0x59D421683D31835A");
			__0x59D421683D31835A.Call(native, p0);
		}

		public void _0x1153FA02A659051C()
		{
			if (__0x1153FA02A659051C == null) __0x1153FA02A659051C = (Function) native.GetObjectProperty("_0x1153FA02A659051C");
			__0x1153FA02A659051C.Call(native);
		}

		public void NetworkSessionHosted(bool p0)
		{
			if (networkSessionHosted == null) networkSessionHosted = (Function) native.GetObjectProperty("networkSessionHosted");
			networkSessionHosted.Call(native, p0);
		}

		/// <summary>
		/// ..
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkAddFollowers(int p0, int p1)
		{
			if (networkAddFollowers == null) networkAddFollowers = (Function) native.GetObjectProperty("networkAddFollowers");
			var results = (Array) networkAddFollowers.Call(native, p0, p1);
			return (results[0], (int) results[1]);
		}

		public void NetworkClearFollowers()
		{
			if (networkClearFollowers == null) networkClearFollowers = (Function) native.GetObjectProperty("networkClearFollowers");
			networkClearFollowers.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) NetworkGetGlobalMultiplayerClock(int hours, int minutes, int seconds)
		{
			if (networkGetGlobalMultiplayerClock == null) networkGetGlobalMultiplayerClock = (Function) native.GetObjectProperty("networkGetGlobalMultiplayerClock");
			var results = (Array) networkGetGlobalMultiplayerClock.Call(native, hours, minutes, seconds);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		public void _0x600F8CB31C7AAB6E(object p0)
		{
			if (__0x600F8CB31C7AAB6E == null) __0x600F8CB31C7AAB6E = (Function) native.GetObjectProperty("_0x600F8CB31C7AAB6E");
			__0x600F8CB31C7AAB6E.Call(native, p0);
		}

		public int NetworkGetTargetingMode()
		{
			if (networkGetTargetingMode == null) networkGetTargetingMode = (Function) native.GetObjectProperty("networkGetTargetingMode");
			return (int) networkGetTargetingMode.Call(native);
		}

		public bool _0xE532D6811B3A4D2A(object p0)
		{
			if (__0xE532D6811B3A4D2A == null) __0xE532D6811B3A4D2A = (Function) native.GetObjectProperty("_0xE532D6811B3A4D2A");
			return (bool) __0xE532D6811B3A4D2A.Call(native, p0);
		}

		public bool NetworkFindMatchedGamers(object p0, double p1, double p2, double p3)
		{
			if (networkFindMatchedGamers == null) networkFindMatchedGamers = (Function) native.GetObjectProperty("networkFindMatchedGamers");
			return (bool) networkFindMatchedGamers.Call(native, p0, p1, p2, p3);
		}

		public bool NetworkIsFindingGamers()
		{
			if (networkIsFindingGamers == null) networkIsFindingGamers = (Function) native.GetObjectProperty("networkIsFindingGamers");
			return (bool) networkIsFindingGamers.Call(native);
		}

		public object _0xF9B83B77929D8863()
		{
			if (__0xF9B83B77929D8863 == null) __0xF9B83B77929D8863 = (Function) native.GetObjectProperty("_0xF9B83B77929D8863");
			return __0xF9B83B77929D8863.Call(native);
		}

		public int NetworkGetNumFoundGamers()
		{
			if (networkGetNumFoundGamers == null) networkGetNumFoundGamers = (Function) native.GetObjectProperty("networkGetNumFoundGamers");
			return (int) networkGetNumFoundGamers.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkGetFoundGamer(object p0, object p1)
		{
			if (networkGetFoundGamer == null) networkGetFoundGamer = (Function) native.GetObjectProperty("networkGetFoundGamer");
			var results = (Array) networkGetFoundGamer.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public void NetworkClearFoundGamers()
		{
			if (networkClearFoundGamers == null) networkClearFoundGamers = (Function) native.GetObjectProperty("networkClearFoundGamers");
			networkClearFoundGamers.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkGetGamerStatus(object p0)
		{
			if (networkGetGamerStatus == null) networkGetGamerStatus = (Function) native.GetObjectProperty("networkGetGamerStatus");
			var results = (Array) networkGetGamerStatus.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		public object _0x2CC848A861D01493()
		{
			if (__0x2CC848A861D01493 == null) __0x2CC848A861D01493 = (Function) native.GetObjectProperty("_0x2CC848A861D01493");
			return __0x2CC848A861D01493.Call(native);
		}

		/// <summary>
		/// NETWORK_IS_*
		/// </summary>
		public object _0x94A8394D150B013A()
		{
			if (__0x94A8394D150B013A == null) __0x94A8394D150B013A = (Function) native.GetObjectProperty("_0x94A8394D150B013A");
			return __0x94A8394D150B013A.Call(native);
		}

		public object _0x5AE17C6B0134B7F1()
		{
			if (__0x5AE17C6B0134B7F1 == null) __0x5AE17C6B0134B7F1 = (Function) native.GetObjectProperty("_0x5AE17C6B0134B7F1");
			return __0x5AE17C6B0134B7F1.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkGetGamerStatusResult(object p0, object p1)
		{
			if (networkGetGamerStatusResult == null) networkGetGamerStatusResult = (Function) native.GetObjectProperty("networkGetGamerStatusResult");
			var results = (Array) networkGetGamerStatusResult.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public void NetworkClearGetGamerStatus()
		{
			if (networkClearGetGamerStatus == null) networkClearGetGamerStatus = (Function) native.GetObjectProperty("networkClearGetGamerStatus");
			networkClearGetGamerStatus.Call(native);
		}

		public void NetworkSessionJoinInvite()
		{
			if (networkSessionJoinInvite == null) networkSessionJoinInvite = (Function) native.GetObjectProperty("networkSessionJoinInvite");
			networkSessionJoinInvite.Call(native);
		}

		public void NetworkSessionCancelInvite()
		{
			if (networkSessionCancelInvite == null) networkSessionCancelInvite = (Function) native.GetObjectProperty("networkSessionCancelInvite");
			networkSessionCancelInvite.Call(native);
		}

		public void NetworkSessionForceCancelInvite()
		{
			if (networkSessionForceCancelInvite == null) networkSessionForceCancelInvite = (Function) native.GetObjectProperty("networkSessionForceCancelInvite");
			networkSessionForceCancelInvite.Call(native);
		}

		public bool NetworkHasPendingInvite()
		{
			if (networkHasPendingInvite == null) networkHasPendingInvite = (Function) native.GetObjectProperty("networkHasPendingInvite");
			return (bool) networkHasPendingInvite.Call(native);
		}

		public bool _0xC42DD763159F3461()
		{
			if (__0xC42DD763159F3461 == null) __0xC42DD763159F3461 = (Function) native.GetObjectProperty("_0xC42DD763159F3461");
			return (bool) __0xC42DD763159F3461.Call(native);
		}

		/// <summary>
		/// NETWORK_RE*
		/// Triggers a CEventNetworkInviteConfirmed event
		/// </summary>
		public bool NetworkAcceptInvite()
		{
			if (networkAcceptInvite == null) networkAcceptInvite = (Function) native.GetObjectProperty("networkAcceptInvite");
			return (bool) networkAcceptInvite.Call(native);
		}

		public bool NetworkSessionWasInvited()
		{
			if (networkSessionWasInvited == null) networkSessionWasInvited = (Function) native.GetObjectProperty("networkSessionWasInvited");
			return (bool) networkSessionWasInvited.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkSessionGetInviter(int networkHandle)
		{
			if (networkSessionGetInviter == null) networkSessionGetInviter = (Function) native.GetObjectProperty("networkSessionGetInviter");
			var results = (Array) networkSessionGetInviter.Call(native, networkHandle);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// NETWORK_SESSION_IS_*
		/// </summary>
		public bool _0xD313DE83394AF134()
		{
			if (__0xD313DE83394AF134 == null) __0xD313DE83394AF134 = (Function) native.GetObjectProperty("_0xD313DE83394AF134");
			return (bool) __0xD313DE83394AF134.Call(native);
		}

		/// <summary>
		/// NETWORK_SESSION_IS_*
		/// </summary>
		public bool _0xBDB6F89C729CF388()
		{
			if (__0xBDB6F89C729CF388 == null) __0xBDB6F89C729CF388 = (Function) native.GetObjectProperty("_0xBDB6F89C729CF388");
			return (bool) __0xBDB6F89C729CF388.Call(native);
		}

		public void NetworkSuppressInvite(bool toggle)
		{
			if (networkSuppressInvite == null) networkSuppressInvite = (Function) native.GetObjectProperty("networkSuppressInvite");
			networkSuppressInvite.Call(native, toggle);
		}

		public void NetworkBlockInvites(bool toggle)
		{
			if (networkBlockInvites == null) networkBlockInvites = (Function) native.GetObjectProperty("networkBlockInvites");
			networkBlockInvites.Call(native, toggle);
		}

		public void NetworkBlockInvites2(bool toggle)
		{
			if (networkBlockInvites2 == null) networkBlockInvites2 = (Function) native.GetObjectProperty("networkBlockInvites2");
			networkBlockInvites2.Call(native, toggle);
		}

		public void _0xF814FEC6A19FD6E0()
		{
			if (__0xF814FEC6A19FD6E0 == null) __0xF814FEC6A19FD6E0 = (Function) native.GetObjectProperty("_0xF814FEC6A19FD6E0");
			__0xF814FEC6A19FD6E0.Call(native);
		}

		public void NetworkBlockKickedPlayers(bool p0)
		{
			if (networkBlockKickedPlayers == null) networkBlockKickedPlayers = (Function) native.GetObjectProperty("networkBlockKickedPlayers");
			networkBlockKickedPlayers.Call(native, p0);
		}

		public void _0x7AC752103856FB20(bool p0)
		{
			if (__0x7AC752103856FB20 == null) __0x7AC752103856FB20 = (Function) native.GetObjectProperty("_0x7AC752103856FB20");
			__0x7AC752103856FB20.Call(native, p0);
		}

		public bool NetworkIsOfflineInvitePending()
		{
			if (networkIsOfflineInvitePending == null) networkIsOfflineInvitePending = (Function) native.GetObjectProperty("networkIsOfflineInvitePending");
			return (bool) networkIsOfflineInvitePending.Call(native);
		}

		public void _0x140E6A44870A11CE()
		{
			if (__0x140E6A44870A11CE == null) __0x140E6A44870A11CE = (Function) native.GetObjectProperty("_0x140E6A44870A11CE");
			__0x140E6A44870A11CE.Call(native);
		}

		/// <summary>
		/// Loads up the map that is loaded when beeing in mission creator
		/// Player gets placed in a mix between online/offline mode
		/// p0 is always 2 in R* scripts.
		/// Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
		/// </summary>
		/// <param name="p0">is always 2 in R* scripts.</param>
		public void NetworkSessionHostSinglePlayer(int p0)
		{
			if (networkSessionHostSinglePlayer == null) networkSessionHostSinglePlayer = (Function) native.GetObjectProperty("networkSessionHostSinglePlayer");
			networkSessionHostSinglePlayer.Call(native, p0);
		}

		public void NetworkSessionLeaveSinglePlayer()
		{
			if (networkSessionLeaveSinglePlayer == null) networkSessionLeaveSinglePlayer = (Function) native.GetObjectProperty("networkSessionLeaveSinglePlayer");
			networkSessionLeaveSinglePlayer.Call(native);
		}

		public bool NetworkIsGameInProgress()
		{
			if (networkIsGameInProgress == null) networkIsGameInProgress = (Function) native.GetObjectProperty("networkIsGameInProgress");
			return (bool) networkIsGameInProgress.Call(native);
		}

		public bool NetworkIsSessionActive()
		{
			if (networkIsSessionActive == null) networkIsSessionActive = (Function) native.GetObjectProperty("networkIsSessionActive");
			return (bool) networkIsSessionActive.Call(native);
		}

		public bool NetworkIsInSession()
		{
			if (networkIsInSession == null) networkIsInSession = (Function) native.GetObjectProperty("networkIsInSession");
			return (bool) networkIsInSession.Call(native);
		}

		/// <summary>
		/// This checks if player is playing on gta online or not.
		/// Please add an if and block your mod if this is "true".
		/// </summary>
		public bool NetworkIsSessionStarted()
		{
			if (networkIsSessionStarted == null) networkIsSessionStarted = (Function) native.GetObjectProperty("networkIsSessionStarted");
			return (bool) networkIsSessionStarted.Call(native);
		}

		public bool NetworkIsSessionBusy()
		{
			if (networkIsSessionBusy == null) networkIsSessionBusy = (Function) native.GetObjectProperty("networkIsSessionBusy");
			return (bool) networkIsSessionBusy.Call(native);
		}

		public bool NetworkCanSessionEnd()
		{
			if (networkCanSessionEnd == null) networkCanSessionEnd = (Function) native.GetObjectProperty("networkCanSessionEnd");
			return (bool) networkCanSessionEnd.Call(native);
		}

		public void NetworkSessionMarkVisible(bool toggle)
		{
			if (networkSessionMarkVisible == null) networkSessionMarkVisible = (Function) native.GetObjectProperty("networkSessionMarkVisible");
			networkSessionMarkVisible.Call(native, toggle);
		}

		public bool NetworkSessionIsVisible()
		{
			if (networkSessionIsVisible == null) networkSessionIsVisible = (Function) native.GetObjectProperty("networkSessionIsVisible");
			return (bool) networkSessionIsVisible.Call(native);
		}

		public void NetworkSessionBlockJoinRequests(bool toggle)
		{
			if (networkSessionBlockJoinRequests == null) networkSessionBlockJoinRequests = (Function) native.GetObjectProperty("networkSessionBlockJoinRequests");
			networkSessionBlockJoinRequests.Call(native, toggle);
		}

		public void NetworkSessionChangeSlots(int p0, bool p1)
		{
			if (networkSessionChangeSlots == null) networkSessionChangeSlots = (Function) native.GetObjectProperty("networkSessionChangeSlots");
			networkSessionChangeSlots.Call(native, p0, p1);
		}

		public int NetworkSessionGetPrivateSlots()
		{
			if (networkSessionGetPrivateSlots == null) networkSessionGetPrivateSlots = (Function) native.GetObjectProperty("networkSessionGetPrivateSlots");
			return (int) networkSessionGetPrivateSlots.Call(native);
		}

		public void NetworkSessionVoiceHost()
		{
			if (networkSessionVoiceHost == null) networkSessionVoiceHost = (Function) native.GetObjectProperty("networkSessionVoiceHost");
			networkSessionVoiceHost.Call(native);
		}

		public void NetworkSessionVoiceLeave()
		{
			if (networkSessionVoiceLeave == null) networkSessionVoiceLeave = (Function) native.GetObjectProperty("networkSessionVoiceLeave");
			networkSessionVoiceLeave.Call(native);
		}

		/// <summary>
		/// Only one occurence in the scripts:
		/// auto sub_cb43(auto a_0, auto a_1) {
		/// if (g_2594CB._f1) {
		/// if (NETWORK::_855BC38818F6F684()) {
		/// NETWORK::_ABD5E88B8A2D3DB2(&a_0._fB93);
		/// g_2594CB._f14{13} = a_0._fB93;
		/// g_2594CB._f4"64" = a_1;
		/// return 1;
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0xABD5E88B8A2D3DB2
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkSessionVoiceConnectToPlayer(object p0)
		{
			if (networkSessionVoiceConnectToPlayer == null) networkSessionVoiceConnectToPlayer = (Function) native.GetObjectProperty("networkSessionVoiceConnectToPlayer");
			var results = (Array) networkSessionVoiceConnectToPlayer.Call(native, p0);
			return (results[0], results[1]);
		}

		/// <summary>
		/// hash collision???
		/// </summary>
		public void NetworkSetKeepFocuspoint(bool p0, object p1)
		{
			if (networkSetKeepFocuspoint == null) networkSetKeepFocuspoint = (Function) native.GetObjectProperty("networkSetKeepFocuspoint");
			networkSetKeepFocuspoint.Call(native, p0, p1);
		}

		public void _0x5B8ED3DB018927B1(object p0)
		{
			if (__0x5B8ED3DB018927B1 == null) __0x5B8ED3DB018927B1 = (Function) native.GetObjectProperty("_0x5B8ED3DB018927B1");
			__0x5B8ED3DB018927B1.Call(native, p0);
		}

		public bool NetworkSessionIsInVoiceSession()
		{
			if (networkSessionIsInVoiceSession == null) networkSessionIsInVoiceSession = (Function) native.GetObjectProperty("networkSessionIsInVoiceSession");
			return (bool) networkSessionIsInVoiceSession.Call(native);
		}

		public object _0xB5D3453C98456528()
		{
			if (__0xB5D3453C98456528 == null) __0xB5D3453C98456528 = (Function) native.GetObjectProperty("_0xB5D3453C98456528");
			return __0xB5D3453C98456528.Call(native);
		}

		public bool NetworkSessionIsVoiceSessionBusy()
		{
			if (networkSessionIsVoiceSessionBusy == null) networkSessionIsVoiceSessionBusy = (Function) native.GetObjectProperty("networkSessionIsVoiceSessionBusy");
			return (bool) networkSessionIsVoiceSessionBusy.Call(native);
		}

		/// <summary>
		/// Message is limited to 64 characters.
		/// </summary>
		/// <param name="message">Message is limited to 64 characters.</param>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkSendTextMessage(string message, int networkHandle)
		{
			if (networkSendTextMessage == null) networkSendTextMessage = (Function) native.GetObjectProperty("networkSendTextMessage");
			var results = (Array) networkSendTextMessage.Call(native, message, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		public void NetworkSetActivitySpectator(bool toggle)
		{
			if (networkSetActivitySpectator == null) networkSetActivitySpectator = (Function) native.GetObjectProperty("networkSetActivitySpectator");
			networkSetActivitySpectator.Call(native, toggle);
		}

		public bool NetworkIsActivitySpectator()
		{
			if (networkIsActivitySpectator == null) networkIsActivitySpectator = (Function) native.GetObjectProperty("networkIsActivitySpectator");
			return (bool) networkIsActivitySpectator.Call(native);
		}

		public void _0x0E4F77F7B9D74D84(object p0)
		{
			if (__0x0E4F77F7B9D74D84 == null) __0x0E4F77F7B9D74D84 = (Function) native.GetObjectProperty("_0x0E4F77F7B9D74D84");
			__0x0E4F77F7B9D74D84.Call(native, p0);
		}

		public void NetworkSetActivitySpectatorMax(int maxSpectators)
		{
			if (networkSetActivitySpectatorMax == null) networkSetActivitySpectatorMax = (Function) native.GetObjectProperty("networkSetActivitySpectatorMax");
			networkSetActivitySpectatorMax.Call(native, maxSpectators);
		}

		public int NetworkGetActivityPlayerNum(bool p0)
		{
			if (networkGetActivityPlayerNum == null) networkGetActivityPlayerNum = (Function) native.GetObjectProperty("networkGetActivityPlayerNum");
			return (int) networkGetActivityPlayerNum.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkIsActivitySpectatorFromHandle(int networkHandle)
		{
			if (networkIsActivitySpectatorFromHandle == null) networkIsActivitySpectatorFromHandle = (Function) native.GetObjectProperty("networkIsActivitySpectatorFromHandle");
			var results = (Array) networkIsActivitySpectatorFromHandle.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		public object NetworkHostTransition(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (networkHostTransition == null) networkHostTransition = (Function) native.GetObjectProperty("networkHostTransition");
			return networkHostTransition.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		public bool NetworkDoTransitionQuickmatch(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (networkDoTransitionQuickmatch == null) networkDoTransitionQuickmatch = (Function) native.GetObjectProperty("networkDoTransitionQuickmatch");
			return (bool) networkDoTransitionQuickmatch.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public bool NetworkDoTransitionQuickmatchAsync(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (networkDoTransitionQuickmatchAsync == null) networkDoTransitionQuickmatchAsync = (Function) native.GetObjectProperty("networkDoTransitionQuickmatchAsync");
			return (bool) networkDoTransitionQuickmatchAsync.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkDoTransitionQuickmatchWithGroup(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7)
		{
			if (networkDoTransitionQuickmatchWithGroup == null) networkDoTransitionQuickmatchWithGroup = (Function) native.GetObjectProperty("networkDoTransitionQuickmatchWithGroup");
			var results = (Array) networkDoTransitionQuickmatchWithGroup.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
			return ((bool) results[0], results[1]);
		}

		public object NetworkJoinGroupActivity()
		{
			if (networkJoinGroupActivity == null) networkJoinGroupActivity = (Function) native.GetObjectProperty("networkJoinGroupActivity");
			return networkJoinGroupActivity.Call(native);
		}

		public void _0x1888694923EF4591()
		{
			if (__0x1888694923EF4591 == null) __0x1888694923EF4591 = (Function) native.GetObjectProperty("_0x1888694923EF4591");
			__0x1888694923EF4591.Call(native);
		}

		public void _0xB13E88E655E5A3BC()
		{
			if (__0xB13E88E655E5A3BC == null) __0xB13E88E655E5A3BC = (Function) native.GetObjectProperty("_0xB13E88E655E5A3BC");
			__0xB13E88E655E5A3BC.Call(native);
		}

		public bool NetworkIsTransitionClosedFriends()
		{
			if (networkIsTransitionClosedFriends == null) networkIsTransitionClosedFriends = (Function) native.GetObjectProperty("networkIsTransitionClosedFriends");
			return (bool) networkIsTransitionClosedFriends.Call(native);
		}

		public bool NetworkIsTransitionClosedCrew()
		{
			if (networkIsTransitionClosedCrew == null) networkIsTransitionClosedCrew = (Function) native.GetObjectProperty("networkIsTransitionClosedCrew");
			return (bool) networkIsTransitionClosedCrew.Call(native);
		}

		public bool NetworkIsTransitionSolo()
		{
			if (networkIsTransitionSolo == null) networkIsTransitionSolo = (Function) native.GetObjectProperty("networkIsTransitionSolo");
			return (bool) networkIsTransitionSolo.Call(native);
		}

		public bool NetworkIsTransitionPrivate()
		{
			if (networkIsTransitionPrivate == null) networkIsTransitionPrivate = (Function) native.GetObjectProperty("networkIsTransitionPrivate");
			return (bool) networkIsTransitionPrivate.Call(native);
		}

		/// <summary>
		/// NETWORK_GET_NUM_*
		/// </summary>
		public int _0x617F49C2668E6155()
		{
			if (__0x617F49C2668E6155 == null) __0x617F49C2668E6155 = (Function) native.GetObjectProperty("_0x617F49C2668E6155");
			return (int) __0x617F49C2668E6155.Call(native);
		}

		public void _0x261E97AD7BCF3D40(bool p0)
		{
			if (__0x261E97AD7BCF3D40 == null) __0x261E97AD7BCF3D40 = (Function) native.GetObjectProperty("_0x261E97AD7BCF3D40");
			__0x261E97AD7BCF3D40.Call(native, p0);
		}

		public void _0x39917E1B4CB0F911(bool p0)
		{
			if (__0x39917E1B4CB0F911 == null) __0x39917E1B4CB0F911 = (Function) native.GetObjectProperty("_0x39917E1B4CB0F911");
			__0x39917E1B4CB0F911.Call(native, p0);
		}

		public void _0x2CE9D95E4051AECD(object p0)
		{
			if (__0x2CE9D95E4051AECD == null) __0x2CE9D95E4051AECD = (Function) native.GetObjectProperty("_0x2CE9D95E4051AECD");
			__0x2CE9D95E4051AECD.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkSetTransitionCreatorHandle(object p0)
		{
			if (networkSetTransitionCreatorHandle == null) networkSetTransitionCreatorHandle = (Function) native.GetObjectProperty("networkSetTransitionCreatorHandle");
			var results = (Array) networkSetTransitionCreatorHandle.Call(native, p0);
			return (results[0], results[1]);
		}

		public void NetworkClearTransitionCreatorHandle()
		{
			if (networkClearTransitionCreatorHandle == null) networkClearTransitionCreatorHandle = (Function) native.GetObjectProperty("networkClearTransitionCreatorHandle");
			networkClearTransitionCreatorHandle.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkInviteGamersToTransition(object p0, object p1)
		{
			if (networkInviteGamersToTransition == null) networkInviteGamersToTransition = (Function) native.GetObjectProperty("networkInviteGamersToTransition");
			var results = (Array) networkInviteGamersToTransition.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkSetGamerInvitedToTransition(int networkHandle)
		{
			if (networkSetGamerInvitedToTransition == null) networkSetGamerInvitedToTransition = (Function) native.GetObjectProperty("networkSetGamerInvitedToTransition");
			var results = (Array) networkSetGamerInvitedToTransition.Call(native, networkHandle);
			return (results[0], (int) results[1]);
		}

		public bool NetworkLeaveTransition()
		{
			if (networkLeaveTransition == null) networkLeaveTransition = (Function) native.GetObjectProperty("networkLeaveTransition");
			return (bool) networkLeaveTransition.Call(native);
		}

		public bool NetworkLaunchTransition()
		{
			if (networkLaunchTransition == null) networkLaunchTransition = (Function) native.GetObjectProperty("networkLaunchTransition");
			return (bool) networkLaunchTransition.Call(native);
		}

		/// <summary>
		/// Appears to set whether a transition should be started when the session is migrating.
		/// NETWORK_SET_*
		/// </summary>
		public void _0xA2E9C1AB8A92E8CD(bool toggle)
		{
			if (__0xA2E9C1AB8A92E8CD == null) __0xA2E9C1AB8A92E8CD = (Function) native.GetObjectProperty("_0xA2E9C1AB8A92E8CD");
			__0xA2E9C1AB8A92E8CD.Call(native, toggle);
		}

		public void NetworkBailTransition(int p0, int p1, int p2)
		{
			if (networkBailTransition == null) networkBailTransition = (Function) native.GetObjectProperty("networkBailTransition");
			networkBailTransition.Call(native, p0, p1, p2);
		}

		public bool NetworkDoTransitionToGame(bool p0, int maxPlayers)
		{
			if (networkDoTransitionToGame == null) networkDoTransitionToGame = (Function) native.GetObjectProperty("networkDoTransitionToGame");
			return (bool) networkDoTransitionToGame.Call(native, p0, maxPlayers);
		}

		public bool NetworkDoTransitionToNewGame(bool p0, int maxPlayers, bool p2)
		{
			if (networkDoTransitionToNewGame == null) networkDoTransitionToNewGame = (Function) native.GetObjectProperty("networkDoTransitionToNewGame");
			return (bool) networkDoTransitionToNewGame.Call(native, p0, maxPlayers, p2);
		}

		/// <summary>
		/// p2 is true 3/4 of the occurrences I found.
		/// 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
		/// </summary>
		/// <param name="p2">is true 3/4 of the occurrences I found.</param>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkDoTransitionToFreemode(object p0, object p1, bool p2, int players, bool p4)
		{
			if (networkDoTransitionToFreemode == null) networkDoTransitionToFreemode = (Function) native.GetObjectProperty("networkDoTransitionToFreemode");
			var results = (Array) networkDoTransitionToFreemode.Call(native, p0, p1, p2, players, p4);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) NetworkDoTransitionToNewFreemode(object p0, object p1, int players, bool p3, bool p4, bool p5)
		{
			if (networkDoTransitionToNewFreemode == null) networkDoTransitionToNewFreemode = (Function) native.GetObjectProperty("networkDoTransitionToNewFreemode");
			var results = (Array) networkDoTransitionToNewFreemode.Call(native, p0, p1, players, p3, p4, p5);
			return ((bool) results[0], results[1], results[2]);
		}

		public bool NetworkIsTransitionToGame()
		{
			if (networkIsTransitionToGame == null) networkIsTransitionToGame = (Function) native.GetObjectProperty("networkIsTransitionToGame");
			return (bool) networkIsTransitionToGame.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object> Returns count.</returns>
		public (int, object) NetworkGetTransitionMembers(object data, int dataCount)
		{
			if (networkGetTransitionMembers == null) networkGetTransitionMembers = (Function) native.GetObjectProperty("networkGetTransitionMembers");
			var results = (Array) networkGetTransitionMembers.Call(native, data, dataCount);
			return ((int) results[0], results[1]);
		}

		public void NetworkApplyTransitionParameter(int p0, int p1)
		{
			if (networkApplyTransitionParameter == null) networkApplyTransitionParameter = (Function) native.GetObjectProperty("networkApplyTransitionParameter");
			networkApplyTransitionParameter.Call(native, p0, p1);
		}

		public void NetworkApplyTransitionParameterString(int p0, string @string, bool p2)
		{
			if (networkApplyTransitionParameterString == null) networkApplyTransitionParameterString = (Function) native.GetObjectProperty("networkApplyTransitionParameterString");
			networkApplyTransitionParameterString.Call(native, p0, @string, p2);
		}

		/// <summary>
		/// the first arg seems to be the network player handle (&handle) and the second var is pretty much always "" and the third seems to be a number between 0 and ~10 and the 4th is is something like 0 to 5 and I guess the 5th is a bool cuz it is always 0 or 1
		/// does this send an invite to a player?
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkSendTransitionGamerInstruction(int networkHandle, string p1, int p2, int p3, bool p4)
		{
			if (networkSendTransitionGamerInstruction == null) networkSendTransitionGamerInstruction = (Function) native.GetObjectProperty("networkSendTransitionGamerInstruction");
			var results = (Array) networkSendTransitionGamerInstruction.Call(native, networkHandle, p1, p2, p3, p4);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkMarkTransitionGamerAsFullyJoined(object p0)
		{
			if (networkMarkTransitionGamerAsFullyJoined == null) networkMarkTransitionGamerAsFullyJoined = (Function) native.GetObjectProperty("networkMarkTransitionGamerAsFullyJoined");
			var results = (Array) networkMarkTransitionGamerAsFullyJoined.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		public bool NetworkIsTransitionHost()
		{
			if (networkIsTransitionHost == null) networkIsTransitionHost = (Function) native.GetObjectProperty("networkIsTransitionHost");
			return (bool) networkIsTransitionHost.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkIsTransitionHostFromHandle(int networkHandle)
		{
			if (networkIsTransitionHostFromHandle == null) networkIsTransitionHostFromHandle = (Function) native.GetObjectProperty("networkIsTransitionHostFromHandle");
			var results = (Array) networkIsTransitionHostFromHandle.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkGetTransitionHost(int networkHandle)
		{
			if (networkGetTransitionHost == null) networkGetTransitionHost = (Function) native.GetObjectProperty("networkGetTransitionHost");
			var results = (Array) networkGetTransitionHost.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		public bool NetworkIsInTransition()
		{
			if (networkIsInTransition == null) networkIsInTransition = (Function) native.GetObjectProperty("networkIsInTransition");
			return (bool) networkIsInTransition.Call(native);
		}

		public bool NetworkIsTransitionStarted()
		{
			if (networkIsTransitionStarted == null) networkIsTransitionStarted = (Function) native.GetObjectProperty("networkIsTransitionStarted");
			return (bool) networkIsTransitionStarted.Call(native);
		}

		public bool NetworkIsTransitionBusy()
		{
			if (networkIsTransitionBusy == null) networkIsTransitionBusy = (Function) native.GetObjectProperty("networkIsTransitionBusy");
			return (bool) networkIsTransitionBusy.Call(native);
		}

		public bool NetworkIsTransitionMatchmaking()
		{
			if (networkIsTransitionMatchmaking == null) networkIsTransitionMatchmaking = (Function) native.GetObjectProperty("networkIsTransitionMatchmaking");
			return (bool) networkIsTransitionMatchmaking.Call(native);
		}

		/// <summary>
		/// NETWORK_IS_TRANSITION_*
		/// </summary>
		public bool _0xC571D0E77D8BBC29()
		{
			if (__0xC571D0E77D8BBC29 == null) __0xC571D0E77D8BBC29 = (Function) native.GetObjectProperty("_0xC571D0E77D8BBC29");
			return (bool) __0xC571D0E77D8BBC29.Call(native);
		}

		public void _0x1398582B7F72B3ED(object p0)
		{
			if (__0x1398582B7F72B3ED == null) __0x1398582B7F72B3ED = (Function) native.GetObjectProperty("_0x1398582B7F72B3ED");
			__0x1398582B7F72B3ED.Call(native, p0);
		}

		public void _0x1F8E00FB18239600(object p0)
		{
			if (__0x1F8E00FB18239600 == null) __0x1F8E00FB18239600 = (Function) native.GetObjectProperty("_0x1F8E00FB18239600");
			__0x1F8E00FB18239600.Call(native, p0);
		}

		public void _0xF6F4383B7C92F11A(object p0)
		{
			if (__0xF6F4383B7C92F11A == null) __0xF6F4383B7C92F11A = (Function) native.GetObjectProperty("_0xF6F4383B7C92F11A");
			__0xF6F4383B7C92F11A.Call(native, p0);
		}

		public void NetworkOpenTransitionMatchmaking()
		{
			if (networkOpenTransitionMatchmaking == null) networkOpenTransitionMatchmaking = (Function) native.GetObjectProperty("networkOpenTransitionMatchmaking");
			networkOpenTransitionMatchmaking.Call(native);
		}

		public void NetworkCloseTransitionMatchmaking()
		{
			if (networkCloseTransitionMatchmaking == null) networkCloseTransitionMatchmaking = (Function) native.GetObjectProperty("networkCloseTransitionMatchmaking");
			networkCloseTransitionMatchmaking.Call(native);
		}

		public bool NetworkIsTransitionOpenToMatchmaking()
		{
			if (networkIsTransitionOpenToMatchmaking == null) networkIsTransitionOpenToMatchmaking = (Function) native.GetObjectProperty("networkIsTransitionOpenToMatchmaking");
			return (bool) networkIsTransitionOpenToMatchmaking.Call(native);
		}

		public void NetworkSetTransitionVisibilityLock(bool p0, bool p1)
		{
			if (networkSetTransitionVisibilityLock == null) networkSetTransitionVisibilityLock = (Function) native.GetObjectProperty("networkSetTransitionVisibilityLock");
			networkSetTransitionVisibilityLock.Call(native, p0, p1);
		}

		public bool NetworkIsTransitionVisibilityLocked()
		{
			if (networkIsTransitionVisibilityLocked == null) networkIsTransitionVisibilityLocked = (Function) native.GetObjectProperty("networkIsTransitionVisibilityLocked");
			return (bool) networkIsTransitionVisibilityLocked.Call(native);
		}

		public void NetworkSetTransitionActivityId(object p0)
		{
			if (networkSetTransitionActivityId == null) networkSetTransitionActivityId = (Function) native.GetObjectProperty("networkSetTransitionActivityId");
			networkSetTransitionActivityId.Call(native, p0);
		}

		public void NetworkChangeTransitionSlots(object p0, object p1)
		{
			if (networkChangeTransitionSlots == null) networkChangeTransitionSlots = (Function) native.GetObjectProperty("networkChangeTransitionSlots");
			networkChangeTransitionSlots.Call(native, p0, p1);
		}

		public void _0x973D76AA760A6CB6(bool p0)
		{
			if (__0x973D76AA760A6CB6 == null) __0x973D76AA760A6CB6 = (Function) native.GetObjectProperty("_0x973D76AA760A6CB6");
			__0x973D76AA760A6CB6.Call(native, p0);
		}

		public bool NetworkHasPlayerStartedTransition(int player)
		{
			if (networkHasPlayerStartedTransition == null) networkHasPlayerStartedTransition = (Function) native.GetObjectProperty("networkHasPlayerStartedTransition");
			return (bool) networkHasPlayerStartedTransition.Call(native, player);
		}

		public bool NetworkAreTransitionDetailsValid(object p0)
		{
			if (networkAreTransitionDetailsValid == null) networkAreTransitionDetailsValid = (Function) native.GetObjectProperty("networkAreTransitionDetailsValid");
			return (bool) networkAreTransitionDetailsValid.Call(native, p0);
		}

		/// <summary>
		/// int handle[76];
		/// NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
		/// Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
		/// NETWORK_JOIN_TRANSITION(uVar2);
		/// nothing doin.
		/// </summary>
		public bool NetworkJoinTransition(int player)
		{
			if (networkJoinTransition == null) networkJoinTransition = (Function) native.GetObjectProperty("networkJoinTransition");
			return (bool) networkJoinTransition.Call(native, player);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkHasInvitedGamerToTransition(object p0)
		{
			if (networkHasInvitedGamerToTransition == null) networkHasInvitedGamerToTransition = (Function) native.GetObjectProperty("networkHasInvitedGamerToTransition");
			var results = (Array) networkHasInvitedGamerToTransition.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x3F9990BF5F22759C(object p0)
		{
			if (__0x3F9990BF5F22759C == null) __0x3F9990BF5F22759C = (Function) native.GetObjectProperty("_0x3F9990BF5F22759C");
			var results = (Array) __0x3F9990BF5F22759C.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		public bool NetworkIsActivitySession()
		{
			if (networkIsActivitySession == null) networkIsActivitySession = (Function) native.GetObjectProperty("networkIsActivitySession");
			return (bool) networkIsActivitySession.Call(native);
		}

		/// <summary>
		/// Does nothing. It's just a nullsub.
		/// </summary>
		public void _0x4A9FDE3A5A6D0437(bool toggle)
		{
			if (__0x4A9FDE3A5A6D0437 == null) __0x4A9FDE3A5A6D0437 = (Function) native.GetObjectProperty("_0x4A9FDE3A5A6D0437");
			__0x4A9FDE3A5A6D0437.Call(native, toggle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int, object></returns>
		public (bool, int, object) NetworkSendPresenceInvite(int networkHandle, object p1, object p2, object p3)
		{
			if (networkSendPresenceInvite == null) networkSendPresenceInvite = (Function) native.GetObjectProperty("networkSendPresenceInvite");
			var results = (Array) networkSendPresenceInvite.Call(native, networkHandle, p1, p2, p3);
			return ((bool) results[0], (int) results[1], results[2]);
		}

		/// <summary>
		/// String "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" is contained in the function in ida so this one is correct.
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) NetworkSendPresenceTransitionInvite(object p0, object p1, object p2, object p3)
		{
			if (networkSendPresenceTransitionInvite == null) networkSendPresenceTransitionInvite = (Function) native.GetObjectProperty("networkSendPresenceTransitionInvite");
			var results = (Array) networkSendPresenceTransitionInvite.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) _0x1171A97A3D3981B6(object p0, object p1, object p2, object p3)
		{
			if (__0x1171A97A3D3981B6 == null) __0x1171A97A3D3981B6 = (Function) native.GetObjectProperty("_0x1171A97A3D3981B6");
			var results = (Array) __0x1171A97A3D3981B6.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		public object _0x742B58F723233ED9(object p0)
		{
			if (__0x742B58F723233ED9 == null) __0x742B58F723233ED9 = (Function) native.GetObjectProperty("_0x742B58F723233ED9");
			return __0x742B58F723233ED9.Call(native, p0);
		}

		public int NetworkGetNumPresenceInvites()
		{
			if (networkGetNumPresenceInvites == null) networkGetNumPresenceInvites = (Function) native.GetObjectProperty("networkGetNumPresenceInvites");
			return (int) networkGetNumPresenceInvites.Call(native);
		}

		public bool NetworkAcceptPresenceInvite(object p0)
		{
			if (networkAcceptPresenceInvite == null) networkAcceptPresenceInvite = (Function) native.GetObjectProperty("networkAcceptPresenceInvite");
			return (bool) networkAcceptPresenceInvite.Call(native, p0);
		}

		public bool NetworkRemovePresenceInvite(object p0)
		{
			if (networkRemovePresenceInvite == null) networkRemovePresenceInvite = (Function) native.GetObjectProperty("networkRemovePresenceInvite");
			return (bool) networkRemovePresenceInvite.Call(native, p0);
		}

		public object NetworkGetPresenceInviteId(object p0)
		{
			if (networkGetPresenceInviteId == null) networkGetPresenceInviteId = (Function) native.GetObjectProperty("networkGetPresenceInviteId");
			return networkGetPresenceInviteId.Call(native, p0);
		}

		public object NetworkGetPresenceInviteInviter(object p0)
		{
			if (networkGetPresenceInviteInviter == null) networkGetPresenceInviteInviter = (Function) native.GetObjectProperty("networkGetPresenceInviteInviter");
			return networkGetPresenceInviteInviter.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkGetPresenceInviteHandle(object p0, object p1)
		{
			if (networkGetPresenceInviteHandle == null) networkGetPresenceInviteHandle = (Function) native.GetObjectProperty("networkGetPresenceInviteHandle");
			var results = (Array) networkGetPresenceInviteHandle.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public object NetworkGetPresenceInviteSessionId(object p0)
		{
			if (networkGetPresenceInviteSessionId == null) networkGetPresenceInviteSessionId = (Function) native.GetObjectProperty("networkGetPresenceInviteSessionId");
			return networkGetPresenceInviteSessionId.Call(native, p0);
		}

		public object NetworkGetPresenceInviteContentId(object p0)
		{
			if (networkGetPresenceInviteContentId == null) networkGetPresenceInviteContentId = (Function) native.GetObjectProperty("networkGetPresenceInviteContentId");
			return networkGetPresenceInviteContentId.Call(native, p0);
		}

		public object _0xD39B3FFF8FFDD5BF(object p0)
		{
			if (__0xD39B3FFF8FFDD5BF == null) __0xD39B3FFF8FFDD5BF = (Function) native.GetObjectProperty("_0xD39B3FFF8FFDD5BF");
			return __0xD39B3FFF8FFDD5BF.Call(native, p0);
		}

		public object _0x728C4CC7920CD102(object p0)
		{
			if (__0x728C4CC7920CD102 == null) __0x728C4CC7920CD102 = (Function) native.GetObjectProperty("_0x728C4CC7920CD102");
			return __0x728C4CC7920CD102.Call(native, p0);
		}

		public bool NetworkGetPresenceInviteFromAdmin(object p0)
		{
			if (networkGetPresenceInviteFromAdmin == null) networkGetPresenceInviteFromAdmin = (Function) native.GetObjectProperty("networkGetPresenceInviteFromAdmin");
			return (bool) networkGetPresenceInviteFromAdmin.Call(native, p0);
		}

		public bool _0x8806CEBFABD3CE05(object p0)
		{
			if (__0x8806CEBFABD3CE05 == null) __0x8806CEBFABD3CE05 = (Function) native.GetObjectProperty("_0x8806CEBFABD3CE05");
			return (bool) __0x8806CEBFABD3CE05.Call(native, p0);
		}

		public bool NetworkHasFollowInvite()
		{
			if (networkHasFollowInvite == null) networkHasFollowInvite = (Function) native.GetObjectProperty("networkHasFollowInvite");
			return (bool) networkHasFollowInvite.Call(native);
		}

		public object NetworkActionFollowInvite()
		{
			if (networkActionFollowInvite == null) networkActionFollowInvite = (Function) native.GetObjectProperty("networkActionFollowInvite");
			return networkActionFollowInvite.Call(native);
		}

		public object NetworkClearFollowInvite()
		{
			if (networkClearFollowInvite == null) networkClearFollowInvite = (Function) native.GetObjectProperty("networkClearFollowInvite");
			return networkClearFollowInvite.Call(native);
		}

		public void _0xEBF8284D8CADEB53()
		{
			if (__0xEBF8284D8CADEB53 == null) __0xEBF8284D8CADEB53 = (Function) native.GetObjectProperty("_0xEBF8284D8CADEB53");
			__0xEBF8284D8CADEB53.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkRemoveTransitionInvite(object p0)
		{
			if (networkRemoveTransitionInvite == null) networkRemoveTransitionInvite = (Function) native.GetObjectProperty("networkRemoveTransitionInvite");
			var results = (Array) networkRemoveTransitionInvite.Call(native, p0);
			return (results[0], results[1]);
		}

		public void NetworkRemoveAllTransitionInvite()
		{
			if (networkRemoveAllTransitionInvite == null) networkRemoveAllTransitionInvite = (Function) native.GetObjectProperty("networkRemoveAllTransitionInvite");
			networkRemoveAllTransitionInvite.Call(native);
		}

		/// <summary>
		/// NETWORK_RE*
		/// </summary>
		public void _0xF083835B70BA9BFE()
		{
			if (__0xF083835B70BA9BFE == null) __0xF083835B70BA9BFE = (Function) native.GetObjectProperty("_0xF083835B70BA9BFE");
			__0xF083835B70BA9BFE.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object, object></returns>
		public (bool, object, object, object) NetworkInviteGamers(object p0, object p1, object p2, object p3)
		{
			if (networkInviteGamers == null) networkInviteGamers = (Function) native.GetObjectProperty("networkInviteGamers");
			var results = (Array) networkInviteGamers.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2], results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkHasInvitedGamer(object p0)
		{
			if (networkHasInvitedGamer == null) networkHasInvitedGamer = (Function) native.GetObjectProperty("networkHasInvitedGamer");
			var results = (Array) networkHasInvitedGamer.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// NETWORK_HAS_*
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x71DC455F5CD1C2B1(object networkHandle)
		{
			if (__0x71DC455F5CD1C2B1 == null) __0x71DC455F5CD1C2B1 = (Function) native.GetObjectProperty("_0x71DC455F5CD1C2B1");
			var results = (Array) __0x71DC455F5CD1C2B1.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		public object _0x3855FB5EB2C5E8B2(object p0)
		{
			if (__0x3855FB5EB2C5E8B2 == null) __0x3855FB5EB2C5E8B2 = (Function) native.GetObjectProperty("_0x3855FB5EB2C5E8B2");
			return __0x3855FB5EB2C5E8B2.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkGetCurrentlySelectedGamerHandleFromInviteMenu(object p0)
		{
			if (networkGetCurrentlySelectedGamerHandleFromInviteMenu == null) networkGetCurrentlySelectedGamerHandleFromInviteMenu = (Function) native.GetObjectProperty("networkGetCurrentlySelectedGamerHandleFromInviteMenu");
			var results = (Array) networkGetCurrentlySelectedGamerHandleFromInviteMenu.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkSetCurrentlySelectedGamerHandleFromInviteMenu(object p0)
		{
			if (networkSetCurrentlySelectedGamerHandleFromInviteMenu == null) networkSetCurrentlySelectedGamerHandleFromInviteMenu = (Function) native.GetObjectProperty("networkSetCurrentlySelectedGamerHandleFromInviteMenu");
			var results = (Array) networkSetCurrentlySelectedGamerHandleFromInviteMenu.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) NetworkSetInviteOnCallForInviteMenu(object p0)
		{
			if (networkSetInviteOnCallForInviteMenu == null) networkSetInviteOnCallForInviteMenu = (Function) native.GetObjectProperty("networkSetInviteOnCallForInviteMenu");
			var results = (Array) networkSetInviteOnCallForInviteMenu.Call(native, p0);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkCheckDataManagerSucceededForHandle(object p0, object p1)
		{
			if (networkCheckDataManagerSucceededForHandle == null) networkCheckDataManagerSucceededForHandle = (Function) native.GetObjectProperty("networkCheckDataManagerSucceededForHandle");
			var results = (Array) networkCheckDataManagerSucceededForHandle.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public object _0x4AD490AE1536933B(object p0, object p1)
		{
			if (__0x4AD490AE1536933B == null) __0x4AD490AE1536933B = (Function) native.GetObjectProperty("_0x4AD490AE1536933B");
			return __0x4AD490AE1536933B.Call(native, p0, p1);
		}

		/// <summary>
		/// NETWORK_SET_*
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) _0x0D77A82DC2D0DA59(object p0, object p1)
		{
			if (__0x0D77A82DC2D0DA59 == null) __0x0D77A82DC2D0DA59 = (Function) native.GetObjectProperty("_0x0D77A82DC2D0DA59");
			var results = (Array) __0x0D77A82DC2D0DA59.Call(native, p0, p1);
			return (results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) FilloutPmPlayerList(int networkHandle, object p1, object p2)
		{
			if (filloutPmPlayerList == null) filloutPmPlayerList = (Function) native.GetObjectProperty("filloutPmPlayerList");
			var results = (Array) filloutPmPlayerList.Call(native, networkHandle, p1, p2);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) FilloutPmPlayerListWithNames(object p0, object p1, object p2, object p3)
		{
			if (filloutPmPlayerListWithNames == null) filloutPmPlayerListWithNames = (Function) native.GetObjectProperty("filloutPmPlayerListWithNames");
			var results = (Array) filloutPmPlayerListWithNames.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		public bool _0xE26CCFF8094D8C74(int p0)
		{
			if (__0xE26CCFF8094D8C74 == null) __0xE26CCFF8094D8C74 = (Function) native.GetObjectProperty("_0xE26CCFF8094D8C74");
			return (bool) __0xE26CCFF8094D8C74.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkSetCurrentDataManagerHandle(object p0)
		{
			if (networkSetCurrentDataManagerHandle == null) networkSetCurrentDataManagerHandle = (Function) native.GetObjectProperty("networkSetCurrentDataManagerHandle");
			var results = (Array) networkSetCurrentDataManagerHandle.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public bool NetworkIsInPlatformParty()
		{
			if (networkIsInPlatformParty == null) networkIsInPlatformParty = (Function) native.GetObjectProperty("networkIsInPlatformParty");
			return (bool) networkIsInPlatformParty.Call(native);
		}

		public int NetworkGetPlatformPartyUnk()
		{
			if (networkGetPlatformPartyUnk == null) networkGetPlatformPartyUnk = (Function) native.GetObjectProperty("networkGetPlatformPartyUnk");
			return (int) networkGetPlatformPartyUnk.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) NetworkGetPlatformPartyMembers(object data, int dataSize)
		{
			if (networkGetPlatformPartyMembers == null) networkGetPlatformPartyMembers = (Function) native.GetObjectProperty("networkGetPlatformPartyMembers");
			var results = (Array) networkGetPlatformPartyMembers.Call(native, data, dataSize);
			return ((int) results[0], results[1]);
		}

		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public bool NetworkIsInPlatformPartyChat()
		{
			if (networkIsInPlatformPartyChat == null) networkIsInPlatformPartyChat = (Function) native.GetObjectProperty("networkIsInPlatformPartyChat");
			return (bool) networkIsInPlatformPartyChat.Call(native);
		}

		/// <summary>
		/// This would be nice to see if someone is in party chat, but 2 sad notes.
		/// 1) It only becomes true if said person is speaking in that party at the time.
		/// 2) It will never, become true unless you are in that party with said person.
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkIsChattingInPlatformParty(int networkHandle)
		{
			if (networkIsChattingInPlatformParty == null) networkIsChattingInPlatformParty = (Function) native.GetObjectProperty("networkIsChattingInPlatformParty");
			var results = (Array) networkIsChattingInPlatformParty.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		public object _0x2BF66D2E7414F686()
		{
			if (__0x2BF66D2E7414F686 == null) __0x2BF66D2E7414F686 = (Function) native.GetObjectProperty("_0x2BF66D2E7414F686");
			return __0x2BF66D2E7414F686.Call(native);
		}

		/// <summary>
		/// NETWORK_IS_*
		/// </summary>
		public bool _0x14922ED3E38761F0()
		{
			if (__0x14922ED3E38761F0 == null) __0x14922ED3E38761F0 = (Function) native.GetObjectProperty("_0x14922ED3E38761F0");
			return (bool) __0x14922ED3E38761F0.Call(native);
		}

		public void _0x6CE50E47F5543D0C()
		{
			if (__0x6CE50E47F5543D0C == null) __0x6CE50E47F5543D0C = (Function) native.GetObjectProperty("_0x6CE50E47F5543D0C");
			__0x6CE50E47F5543D0C.Call(native);
		}

		public void _0xFA2888E3833C8E96()
		{
			if (__0xFA2888E3833C8E96 == null) __0xFA2888E3833C8E96 = (Function) native.GetObjectProperty("_0xFA2888E3833C8E96");
			__0xFA2888E3833C8E96.Call(native);
		}

		public void _0x25D990F8E0E3F13C()
		{
			if (__0x25D990F8E0E3F13C == null) __0x25D990F8E0E3F13C = (Function) native.GetObjectProperty("_0x25D990F8E0E3F13C");
			__0x25D990F8E0E3F13C.Call(native);
		}

		public void _0xF1B84178F8674195(object p0)
		{
			if (__0xF1B84178F8674195 == null) __0xF1B84178F8674195 = (Function) native.GetObjectProperty("_0xF1B84178F8674195");
			__0xF1B84178F8674195.Call(native, p0);
		}

		public int NetworkGetRandomInt()
		{
			if (networkGetRandomInt == null) networkGetRandomInt = (Function) native.GetObjectProperty("networkGetRandomInt");
			return (int) networkGetRandomInt.Call(native);
		}

		/// <summary>
		/// Same as GET_RANDOM_INT_IN_RANGE
		/// </summary>
		public int NetworkGetRandomIntRanged(int rangeStart, int rangeEnd)
		{
			if (networkGetRandomIntRanged == null) networkGetRandomIntRanged = (Function) native.GetObjectProperty("networkGetRandomIntRanged");
			return (int) networkGetRandomIntRanged.Call(native, rangeStart, rangeEnd);
		}

		public bool NetworkPlayerIsCheater()
		{
			if (networkPlayerIsCheater == null) networkPlayerIsCheater = (Function) native.GetObjectProperty("networkPlayerIsCheater");
			return (bool) networkPlayerIsCheater.Call(native);
		}

		public int NetworkPlayerGetCheaterReason()
		{
			if (networkPlayerGetCheaterReason == null) networkPlayerGetCheaterReason = (Function) native.GetObjectProperty("networkPlayerGetCheaterReason");
			return (int) networkPlayerGetCheaterReason.Call(native);
		}

		public bool NetworkPlayerIsBadsport()
		{
			if (networkPlayerIsBadsport == null) networkPlayerIsBadsport = (Function) native.GetObjectProperty("networkPlayerIsBadsport");
			return (bool) networkPlayerIsBadsport.Call(native);
		}

		/// <summary>
		/// p1 = 6
		/// </summary>
		/// <param name="p1">6</param>
		public bool TriggerScriptCrcCheckOnPlayer(int player, int p1, int scriptHash)
		{
			if (triggerScriptCrcCheckOnPlayer == null) triggerScriptCrcCheckOnPlayer = (Function) native.GetObjectProperty("triggerScriptCrcCheckOnPlayer");
			return (bool) triggerScriptCrcCheckOnPlayer.Call(native, player, p1, scriptHash);
		}

		public object _0xA12D3A5A3753CC23()
		{
			if (__0xA12D3A5A3753CC23 == null) __0xA12D3A5A3753CC23 = (Function) native.GetObjectProperty("_0xA12D3A5A3753CC23");
			return __0xA12D3A5A3753CC23.Call(native);
		}

		public object _0xF287F506767CC8A9()
		{
			if (__0xF287F506767CC8A9 == null) __0xF287F506767CC8A9 = (Function) native.GetObjectProperty("_0xF287F506767CC8A9");
			return __0xF287F506767CC8A9.Call(native);
		}

		public bool RemoteCheatDetected(int player, int a, int b)
		{
			if (remoteCheatDetected == null) remoteCheatDetected = (Function) native.GetObjectProperty("remoteCheatDetected");
			return (bool) remoteCheatDetected.Call(native, player, a, b);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) BadSportPlayerLeftDetected(int networkHandle, int @event, int amountReceived)
		{
			if (badSportPlayerLeftDetected == null) badSportPlayerLeftDetected = (Function) native.GetObjectProperty("badSportPlayerLeftDetected");
			var results = (Array) badSportPlayerLeftDetected.Call(native, networkHandle, @event, amountReceived);
			return ((bool) results[0], (int) results[1]);
		}

		public void NetworkApplyPedScarData(int ped, int p1)
		{
			if (networkApplyPedScarData == null) networkApplyPedScarData = (Function) native.GetObjectProperty("networkApplyPedScarData");
			networkApplyPedScarData.Call(native, ped, p1);
		}

		/// <summary>
		/// p1 is always 0
		/// </summary>
		/// <param name="p1">is always 0</param>
		public void NetworkSetThisScriptIsNetworkScript(int lobbySize, bool p1, int playerId)
		{
			if (networkSetThisScriptIsNetworkScript == null) networkSetThisScriptIsNetworkScript = (Function) native.GetObjectProperty("networkSetThisScriptIsNetworkScript");
			networkSetThisScriptIsNetworkScript.Call(native, lobbySize, p1, playerId);
		}

		public bool NetworkIsThisScriptMarked(object p0, bool p1, object p2)
		{
			if (networkIsThisScriptMarked == null) networkIsThisScriptMarked = (Function) native.GetObjectProperty("networkIsThisScriptMarked");
			return (bool) networkIsThisScriptMarked.Call(native, p0, p1, p2);
		}

		public bool NetworkGetThisScriptIsNetworkScript()
		{
			if (networkGetThisScriptIsNetworkScript == null) networkGetThisScriptIsNetworkScript = (Function) native.GetObjectProperty("networkGetThisScriptIsNetworkScript");
			return (bool) networkGetThisScriptIsNetworkScript.Call(native);
		}

		/// <summary>
		/// Seems to always return 0, but it's used in quite a few loops.
		/// for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)
		/// {
		/// if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)
		/// {
		/// var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
		/// </summary>
		public int NetworkGetMaxNumParticipants()
		{
			if (networkGetMaxNumParticipants == null) networkGetMaxNumParticipants = (Function) native.GetObjectProperty("networkGetMaxNumParticipants");
			return (int) networkGetMaxNumParticipants.Call(native);
		}

		public int NetworkGetNumParticipants()
		{
			if (networkGetNumParticipants == null) networkGetNumParticipants = (Function) native.GetObjectProperty("networkGetNumParticipants");
			return (int) networkGetNumParticipants.Call(native);
		}

		public int NetworkGetScriptStatus()
		{
			if (networkGetScriptStatus == null) networkGetScriptStatus = (Function) native.GetObjectProperty("networkGetScriptStatus");
			return (int) networkGetScriptStatus.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkRegisterHostBroadcastVariables(int vars, int numVars)
		{
			if (networkRegisterHostBroadcastVariables == null) networkRegisterHostBroadcastVariables = (Function) native.GetObjectProperty("networkRegisterHostBroadcastVariables");
			var results = (Array) networkRegisterHostBroadcastVariables.Call(native, vars, numVars);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkRegisterPlayerBroadcastVariables(int vars, int numVars)
		{
			if (networkRegisterPlayerBroadcastVariables == null) networkRegisterPlayerBroadcastVariables = (Function) native.GetObjectProperty("networkRegisterPlayerBroadcastVariables");
			var results = (Array) networkRegisterPlayerBroadcastVariables.Call(native, vars, numVars);
			return (results[0], (int) results[1]);
		}

		public void NetworkFinishBroadcastingData()
		{
			if (networkFinishBroadcastingData == null) networkFinishBroadcastingData = (Function) native.GetObjectProperty("networkFinishBroadcastingData");
			networkFinishBroadcastingData.Call(native);
		}

		/// <summary>
		/// NETWORK_HAS_*
		/// </summary>
		public bool _0x5D10B3795F3FC886()
		{
			if (__0x5D10B3795F3FC886 == null) __0x5D10B3795F3FC886 = (Function) native.GetObjectProperty("_0x5D10B3795F3FC886");
			return (bool) __0x5D10B3795F3FC886.Call(native);
		}

		public int NetworkGetPlayerIndex(int player)
		{
			if (networkGetPlayerIndex == null) networkGetPlayerIndex = (Function) native.GetObjectProperty("networkGetPlayerIndex");
			return (int) networkGetPlayerIndex.Call(native, player);
		}

		public int NetworkGetParticipantIndex(int index)
		{
			if (networkGetParticipantIndex == null) networkGetParticipantIndex = (Function) native.GetObjectProperty("networkGetParticipantIndex");
			return (int) networkGetParticipantIndex.Call(native, index);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the Player associated to a given Ped when in an online session.</returns>
		public int NetworkGetPlayerIndexFromPed(int ped)
		{
			if (networkGetPlayerIndexFromPed == null) networkGetPlayerIndexFromPed = (Function) native.GetObjectProperty("networkGetPlayerIndexFromPed");
			return (int) networkGetPlayerIndexFromPed.Call(native, ped);
		}

		public int NetworkGetNumConnectedPlayers()
		{
			if (networkGetNumConnectedPlayers == null) networkGetNumConnectedPlayers = (Function) native.GetObjectProperty("networkGetNumConnectedPlayers");
			return (int) networkGetNumConnectedPlayers.Call(native);
		}

		public bool NetworkIsPlayerConnected(int player)
		{
			if (networkIsPlayerConnected == null) networkIsPlayerConnected = (Function) native.GetObjectProperty("networkIsPlayerConnected");
			return (bool) networkIsPlayerConnected.Call(native, player);
		}

		public int NetworkGetTotalNumPlayers()
		{
			if (networkGetTotalNumPlayers == null) networkGetTotalNumPlayers = (Function) native.GetObjectProperty("networkGetTotalNumPlayers");
			return (int) networkGetTotalNumPlayers.Call(native);
		}

		public bool NetworkIsParticipantActive(int p0)
		{
			if (networkIsParticipantActive == null) networkIsParticipantActive = (Function) native.GetObjectProperty("networkIsParticipantActive");
			return (bool) networkIsParticipantActive.Call(native, p0);
		}

		public bool NetworkIsPlayerActive(int player)
		{
			if (networkIsPlayerActive == null) networkIsPlayerActive = (Function) native.GetObjectProperty("networkIsPlayerActive");
			return (bool) networkIsPlayerActive.Call(native, player);
		}

		public bool NetworkIsPlayerAParticipant(int player)
		{
			if (networkIsPlayerAParticipant == null) networkIsPlayerAParticipant = (Function) native.GetObjectProperty("networkIsPlayerAParticipant");
			return (bool) networkIsPlayerAParticipant.Call(native, player);
		}

		public bool NetworkIsHostOfThisScript()
		{
			if (networkIsHostOfThisScript == null) networkIsHostOfThisScript = (Function) native.GetObjectProperty("networkIsHostOfThisScript");
			return (bool) networkIsHostOfThisScript.Call(native);
		}

		public int NetworkGetHostOfThisScript()
		{
			if (networkGetHostOfThisScript == null) networkGetHostOfThisScript = (Function) native.GetObjectProperty("networkGetHostOfThisScript");
			return (int) networkGetHostOfThisScript.Call(native);
		}

		/// <summary>
		/// scriptName examples:
		/// "freemode", "AM_CR_SecurityVan", ...
		/// Most of the time, these values are used:
		/// p1 = -1
		/// p2 = 0
		/// </summary>
		/// <param name="scriptName">examples:</param>
		/// <param name="p1">-1</param>
		/// <param name="p2">0</param>
		public int NetworkGetHostOfScript(string scriptName, int p1, int p2)
		{
			if (networkGetHostOfScript == null) networkGetHostOfScript = (Function) native.GetObjectProperty("networkGetHostOfScript");
			return (int) networkGetHostOfScript.Call(native, scriptName, p1, p2);
		}

		public void NetworkSetMissionFinished()
		{
			if (networkSetMissionFinished == null) networkSetMissionFinished = (Function) native.GetObjectProperty("networkSetMissionFinished");
			networkSetMissionFinished.Call(native);
		}

		public bool NetworkIsScriptActive(string scriptName, int player, bool p2, object p3)
		{
			if (networkIsScriptActive == null) networkIsScriptActive = (Function) native.GetObjectProperty("networkIsScriptActive");
			return (bool) networkIsScriptActive.Call(native, scriptName, player, p2, p3);
		}

		public object _0x560B423D73015E77(object p0)
		{
			if (__0x560B423D73015E77 == null) __0x560B423D73015E77 = (Function) native.GetObjectProperty("_0x560B423D73015E77");
			return __0x560B423D73015E77.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) NetworkGetNumScriptParticipants(object p0, object p1, object p2)
		{
			if (networkGetNumScriptParticipants == null) networkGetNumScriptParticipants = (Function) native.GetObjectProperty("networkGetNumScriptParticipants");
			var results = (Array) networkGetNumScriptParticipants.Call(native, p0, p1, p2);
			return ((int) results[0], results[1]);
		}

		public object _0x638A3A81733086DB()
		{
			if (__0x638A3A81733086DB == null) __0x638A3A81733086DB = (Function) native.GetObjectProperty("_0x638A3A81733086DB");
			return __0x638A3A81733086DB.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkIsPlayerAParticipantOnScript(int p0, object p1, object p2)
		{
			if (networkIsPlayerAParticipantOnScript == null) networkIsPlayerAParticipantOnScript = (Function) native.GetObjectProperty("networkIsPlayerAParticipantOnScript");
			var results = (Array) networkIsPlayerAParticipantOnScript.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		public void _0x2302C0264EA58D31()
		{
			if (__0x2302C0264EA58D31 == null) __0x2302C0264EA58D31 = (Function) native.GetObjectProperty("_0x2302C0264EA58D31");
			__0x2302C0264EA58D31.Call(native);
		}

		/// <summary>
		/// Has something to do with a host request.
		/// NETWORK_RE*
		/// </summary>
		public void _0x741A3D8380319A81()
		{
			if (__0x741A3D8380319A81 == null) __0x741A3D8380319A81 = (Function) native.GetObjectProperty("_0x741A3D8380319A81");
			__0x741A3D8380319A81.Call(native);
		}

		/// <summary>
		/// Return the local Participant ID
		/// </summary>
		public int ParticipantId()
		{
			if (participantId == null) participantId = (Function) native.GetObjectProperty("participantId");
			return (int) participantId.Call(native);
		}

		/// <summary>
		/// Return the local Participant ID.
		/// This native is exactly the same as 'PARTICIPANT_ID' native.
		/// </summary>
		public int ParticipantIdToInt()
		{
			if (participantIdToInt == null) participantIdToInt = (Function) native.GetObjectProperty("participantIdToInt");
			return (int) participantIdToInt.Call(native);
		}

		public object _0x2DA41ED6E1FCD7A5(object p0, object p1)
		{
			if (__0x2DA41ED6E1FCD7A5 == null) __0x2DA41ED6E1FCD7A5 = (Function) native.GetObjectProperty("_0x2DA41ED6E1FCD7A5");
			return __0x2DA41ED6E1FCD7A5.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) NetworkGetDestroyerOfNetworkId(int netId, int weaponHash)
		{
			if (networkGetDestroyerOfNetworkId == null) networkGetDestroyerOfNetworkId = (Function) native.GetObjectProperty("networkGetDestroyerOfNetworkId");
			var results = (Array) networkGetDestroyerOfNetworkId.Call(native, netId, weaponHash);
			return ((int) results[0], (int) results[1]);
		}

		public object _0xC434133D9BA52777(object p0, object p1)
		{
			if (__0xC434133D9BA52777 == null) __0xC434133D9BA52777 = (Function) native.GetObjectProperty("_0xC434133D9BA52777");
			return __0xC434133D9BA52777.Call(native, p0, p1);
		}

		public object _0x83660B734994124D(object p0, object p1, object p2)
		{
			if (__0x83660B734994124D == null) __0x83660B734994124D = (Function) native.GetObjectProperty("_0x83660B734994124D");
			return __0x83660B734994124D.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkGetDestroyerOfEntity(object p0, object p1, int weaponHash)
		{
			if (networkGetDestroyerOfEntity == null) networkGetDestroyerOfEntity = (Function) native.GetObjectProperty("networkGetDestroyerOfEntity");
			var results = (Array) networkGetDestroyerOfEntity.Call(native, p0, p1, weaponHash);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) NetworkGetEntityKillerOfPlayer(int player, int weaponHash)
		{
			if (networkGetEntityKillerOfPlayer == null) networkGetEntityKillerOfPlayer = (Function) native.GetObjectProperty("networkGetEntityKillerOfPlayer");
			var results = (Array) networkGetEntityKillerOfPlayer.Call(native, player, weaponHash);
			return ((int) results[0], (int) results[1]);
		}

		public void NetworkResurrectLocalPlayer(double x, double y, double z, double heading, bool unk, bool changetime, object p6)
		{
			if (networkResurrectLocalPlayer == null) networkResurrectLocalPlayer = (Function) native.GetObjectProperty("networkResurrectLocalPlayer");
			networkResurrectLocalPlayer.Call(native, x, y, z, heading, unk, changetime, p6);
		}

		public void NetworkSetLocalPlayerInvincibleTime(int time)
		{
			if (networkSetLocalPlayerInvincibleTime == null) networkSetLocalPlayerInvincibleTime = (Function) native.GetObjectProperty("networkSetLocalPlayerInvincibleTime");
			networkSetLocalPlayerInvincibleTime.Call(native, time);
		}

		public bool NetworkIsLocalPlayerInvincible()
		{
			if (networkIsLocalPlayerInvincible == null) networkIsLocalPlayerInvincible = (Function) native.GetObjectProperty("networkIsLocalPlayerInvincible");
			return (bool) networkIsLocalPlayerInvincible.Call(native);
		}

		public void NetworkDisableInvincibleFlashing(int player, bool toggle)
		{
			if (networkDisableInvincibleFlashing == null) networkDisableInvincibleFlashing = (Function) native.GetObjectProperty("networkDisableInvincibleFlashing");
			networkDisableInvincibleFlashing.Call(native, player, toggle);
		}

		public void NetworkSetLocalPlayerSyncLookAt(bool toggle)
		{
			if (networkSetLocalPlayerSyncLookAt == null) networkSetLocalPlayerSyncLookAt = (Function) native.GetObjectProperty("networkSetLocalPlayerSyncLookAt");
			networkSetLocalPlayerSyncLookAt.Call(native, toggle);
		}

		/// <summary>
		/// NETWORK_HAS_*
		/// </summary>
		public bool _0xB07D3185E11657A5(int entity)
		{
			if (__0xB07D3185E11657A5 == null) __0xB07D3185E11657A5 = (Function) native.GetObjectProperty("_0xB07D3185E11657A5");
			return (bool) __0xB07D3185E11657A5.Call(native, entity);
		}

		public int NetworkGetNetworkIdFromEntity(int entity)
		{
			if (networkGetNetworkIdFromEntity == null) networkGetNetworkIdFromEntity = (Function) native.GetObjectProperty("networkGetNetworkIdFromEntity");
			return (int) networkGetNetworkIdFromEntity.Call(native, entity);
		}

		public int NetworkGetEntityFromNetworkId(int netId)
		{
			if (networkGetEntityFromNetworkId == null) networkGetEntityFromNetworkId = (Function) native.GetObjectProperty("networkGetEntityFromNetworkId");
			return (int) networkGetEntityFromNetworkId.Call(native, netId);
		}

		public bool NetworkGetEntityIsNetworked(int entity)
		{
			if (networkGetEntityIsNetworked == null) networkGetEntityIsNetworked = (Function) native.GetObjectProperty("networkGetEntityIsNetworked");
			return (bool) networkGetEntityIsNetworked.Call(native, entity);
		}

		public bool NetworkGetEntityIsLocal(int entity)
		{
			if (networkGetEntityIsLocal == null) networkGetEntityIsLocal = (Function) native.GetObjectProperty("networkGetEntityIsLocal");
			return (bool) networkGetEntityIsLocal.Call(native, entity);
		}

		public void NetworkRegisterEntityAsNetworked(int entity)
		{
			if (networkRegisterEntityAsNetworked == null) networkRegisterEntityAsNetworked = (Function) native.GetObjectProperty("networkRegisterEntityAsNetworked");
			networkRegisterEntityAsNetworked.Call(native, entity);
		}

		public void NetworkUnregisterNetworkedEntity(int entity)
		{
			if (networkUnregisterNetworkedEntity == null) networkUnregisterNetworkedEntity = (Function) native.GetObjectProperty("networkUnregisterNetworkedEntity");
			networkUnregisterNetworkedEntity.Call(native, entity);
		}

		public bool NetworkDoesNetworkIdExist(int netID)
		{
			if (networkDoesNetworkIdExist == null) networkDoesNetworkIdExist = (Function) native.GetObjectProperty("networkDoesNetworkIdExist");
			return (bool) networkDoesNetworkIdExist.Call(native, netID);
		}

		public bool NetworkDoesEntityExistWithNetworkId(int entity)
		{
			if (networkDoesEntityExistWithNetworkId == null) networkDoesEntityExistWithNetworkId = (Function) native.GetObjectProperty("networkDoesEntityExistWithNetworkId");
			return (bool) networkDoesEntityExistWithNetworkId.Call(native, entity);
		}

		public bool NetworkRequestControlOfNetworkId(int netId)
		{
			if (networkRequestControlOfNetworkId == null) networkRequestControlOfNetworkId = (Function) native.GetObjectProperty("networkRequestControlOfNetworkId");
			return (bool) networkRequestControlOfNetworkId.Call(native, netId);
		}

		public bool NetworkHasControlOfNetworkId(int netId)
		{
			if (networkHasControlOfNetworkId == null) networkHasControlOfNetworkId = (Function) native.GetObjectProperty("networkHasControlOfNetworkId");
			return (bool) networkHasControlOfNetworkId.Call(native, netId);
		}

		/// <summary>
		/// NETWORK_IS_*
		/// </summary>
		public bool _0x7242F8B741CE1086(int netId)
		{
			if (__0x7242F8B741CE1086 == null) __0x7242F8B741CE1086 = (Function) native.GetObjectProperty("_0x7242F8B741CE1086");
			return (bool) __0x7242F8B741CE1086.Call(native, netId);
		}

		public bool NetworkRequestControlOfEntity(int entity)
		{
			if (networkRequestControlOfEntity == null) networkRequestControlOfEntity = (Function) native.GetObjectProperty("networkRequestControlOfEntity");
			return (bool) networkRequestControlOfEntity.Call(native, entity);
		}

		public bool NetworkRequestControlOfDoor(int doorID)
		{
			if (networkRequestControlOfDoor == null) networkRequestControlOfDoor = (Function) native.GetObjectProperty("networkRequestControlOfDoor");
			return (bool) networkRequestControlOfDoor.Call(native, doorID);
		}

		public bool NetworkHasControlOfEntity(int entity)
		{
			if (networkHasControlOfEntity == null) networkHasControlOfEntity = (Function) native.GetObjectProperty("networkHasControlOfEntity");
			return (bool) networkHasControlOfEntity.Call(native, entity);
		}

		public bool NetworkHasControlOfPickup(int pickup)
		{
			if (networkHasControlOfPickup == null) networkHasControlOfPickup = (Function) native.GetObjectProperty("networkHasControlOfPickup");
			return (bool) networkHasControlOfPickup.Call(native, pickup);
		}

		public bool NetworkHasControlOfDoor(int doorHash)
		{
			if (networkHasControlOfDoor == null) networkHasControlOfDoor = (Function) native.GetObjectProperty("networkHasControlOfDoor");
			return (bool) networkHasControlOfDoor.Call(native, doorHash);
		}

		public bool NetworkIsDoorNetworked(int doorHash)
		{
			if (networkIsDoorNetworked == null) networkIsDoorNetworked = (Function) native.GetObjectProperty("networkIsDoorNetworked");
			return (bool) networkIsDoorNetworked.Call(native, doorHash);
		}

		/// <summary>
		/// calls from vehicle to net.
		/// </summary>
		public int VehToNet(int vehicle)
		{
			if (vehToNet == null) vehToNet = (Function) native.GetObjectProperty("vehToNet");
			return (int) vehToNet.Call(native, vehicle);
		}

		/// <summary>
		/// gets the network id of a ped
		/// </summary>
		public int PedToNet(int ped)
		{
			if (pedToNet == null) pedToNet = (Function) native.GetObjectProperty("pedToNet");
			return (int) pedToNet.Call(native, ped);
		}

		/// <summary>
		/// Lets objects spawn online simply do it like this:
		/// int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
		/// </summary>
		/// <param name="@object">int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));</param>
		public int ObjToNet(int @object)
		{
			if (objToNet == null) objToNet = (Function) native.GetObjectProperty("objToNet");
			return (int) objToNet.Call(native, @object);
		}

		public int NetToVeh(int netHandle)
		{
			if (netToVeh == null) netToVeh = (Function) native.GetObjectProperty("netToVeh");
			return (int) netToVeh.Call(native, netHandle);
		}

		/// <summary>
		/// gets the ped id of a network id
		/// </summary>
		public int NetToPed(int netHandle)
		{
			if (netToPed == null) netToPed = (Function) native.GetObjectProperty("netToPed");
			return (int) netToPed.Call(native, netHandle);
		}

		/// <summary>
		/// gets the object id of a network id
		/// </summary>
		public int NetToObj(int netHandle)
		{
			if (netToObj == null) netToObj = (Function) native.GetObjectProperty("netToObj");
			return (int) netToObj.Call(native, netHandle);
		}

		/// <summary>
		/// gets the entity id of a network id
		/// </summary>
		public int NetToEnt(int netHandle)
		{
			if (netToEnt == null) netToEnt = (Function) native.GetObjectProperty("netToEnt");
			return (int) netToEnt.Call(native, netHandle);
		}

		/// <summary>
		/// Retrieves the local player's NetworkHandle* and stores it in the given buffer.
		/// Currently unknown struct
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkGetLocalHandle(int networkHandle, int bufferSize)
		{
			if (networkGetLocalHandle == null) networkGetLocalHandle = (Function) native.GetObjectProperty("networkGetLocalHandle");
			var results = (Array) networkGetLocalHandle.Call(native, networkHandle, bufferSize);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// Currently unknown struct
		/// </summary>
		/// <returns>Array<void, int> Returns a NetworkHandle* from the specified user ID and stores it in a given buffer.</returns>
		public (object, int) NetworkHandleFromUserId(string userId, int networkHandle, int bufferSize)
		{
			if (networkHandleFromUserId == null) networkHandleFromUserId = (Function) native.GetObjectProperty("networkHandleFromUserId");
			var results = (Array) networkHandleFromUserId.Call(native, userId, networkHandle, bufferSize);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// Currently unknown struct
		/// </summary>
		/// <returns>Array<void, int> Returns a NetworkHandle* from the specified member ID and stores it in a given buffer.</returns>
		public (object, int) NetworkHandleFromMemberId(string memberId, int networkHandle, int bufferSize)
		{
			if (networkHandleFromMemberId == null) networkHandleFromMemberId = (Function) native.GetObjectProperty("networkHandleFromMemberId");
			var results = (Array) networkHandleFromMemberId.Call(native, memberId, networkHandle, bufferSize);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// Currently unknown struct
		/// Example:
		/// std::vector<UINT64> GetPlayerNetworkHandle(Player player) {
		/// const int size = 13;
		/// uint64_t *buffer = std::make_unique<uint64_t[]>(size).get();
		/// NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, reinterpret_cast<int *>(buffer), 13);
		/// for (int i = 0; i < size; i++) {
		/// Log::Msg("networkhandle[%i]: %llx", i, buffer[i]);
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0x388EB2B86C73B6B3
		/// </summary>
		/// <returns>Array<void, int> Returns a handle to networkHandle* from the specified player handle and stores it in a given buffer.</returns>
		public (object, int) NetworkHandleFromPlayer(int player, int networkHandle, int bufferSize)
		{
			if (networkHandleFromPlayer == null) networkHandleFromPlayer = (Function) native.GetObjectProperty("networkHandleFromPlayer");
			var results = (Array) networkHandleFromPlayer.Call(native, player, networkHandle, bufferSize);
			return (results[0], (int) results[1]);
		}

		public int NetworkHashFromPlayerHandle(int player)
		{
			if (networkHashFromPlayerHandle == null) networkHashFromPlayerHandle = (Function) native.GetObjectProperty("networkHashFromPlayerHandle");
			return (int) networkHashFromPlayerHandle.Call(native, player);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) NetworkHashFromGamerHandle(int networkHandle)
		{
			if (networkHashFromGamerHandle == null) networkHashFromGamerHandle = (Function) native.GetObjectProperty("networkHashFromGamerHandle");
			var results = (Array) networkHashFromGamerHandle.Call(native, networkHandle);
			return ((int) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkHandleFromFriend(int friendIndex, int networkHandle, int bufferSize)
		{
			if (networkHandleFromFriend == null) networkHandleFromFriend = (Function) native.GetObjectProperty("networkHandleFromFriend");
			var results = (Array) networkHandleFromFriend.Call(native, friendIndex, networkHandle, bufferSize);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkGamertagFromHandleStart(int networkHandle)
		{
			if (networkGamertagFromHandleStart == null) networkGamertagFromHandleStart = (Function) native.GetObjectProperty("networkGamertagFromHandleStart");
			var results = (Array) networkGamertagFromHandleStart.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		public bool NetworkGamertagFromHandlePending()
		{
			if (networkGamertagFromHandlePending == null) networkGamertagFromHandlePending = (Function) native.GetObjectProperty("networkGamertagFromHandlePending");
			return (bool) networkGamertagFromHandlePending.Call(native);
		}

		public bool NetworkGamertagFromHandleSucceeded()
		{
			if (networkGamertagFromHandleSucceeded == null) networkGamertagFromHandleSucceeded = (Function) native.GetObjectProperty("networkGamertagFromHandleSucceeded");
			return (bool) networkGamertagFromHandleSucceeded.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<string, int></returns>
		public (string, int) NetworkGetGamertagFromHandle(int networkHandle)
		{
			if (networkGetGamertagFromHandle == null) networkGetGamertagFromHandle = (Function) native.GetObjectProperty("networkGetGamertagFromHandle");
			var results = (Array) networkGetGamertagFromHandle.Call(native, networkHandle);
			return ((string) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) _0xD66C9E72B3CC4982(object p0, object p1)
		{
			if (__0xD66C9E72B3CC4982 == null) __0xD66C9E72B3CC4982 = (Function) native.GetObjectProperty("_0xD66C9E72B3CC4982");
			var results = (Array) __0xD66C9E72B3CC4982.Call(native, p0, p1);
			return ((int) results[0], results[1]);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public object _0x58CC181719256197(object p0, object p1, object p2)
		{
			if (__0x58CC181719256197 == null) __0x58CC181719256197 = (Function) native.GetObjectProperty("_0x58CC181719256197");
			return __0x58CC181719256197.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int, int></returns>
		public (bool, int, int) NetworkAreHandlesTheSame(int netHandle1, int netHandle2)
		{
			if (networkAreHandlesTheSame == null) networkAreHandlesTheSame = (Function) native.GetObjectProperty("networkAreHandlesTheSame");
			var results = (Array) networkAreHandlesTheSame.Call(native, netHandle1, netHandle2);
			return ((bool) results[0], (int) results[1], (int) results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkIsHandleValid(int networkHandle, int bufferSize)
		{
			if (networkIsHandleValid == null) networkIsHandleValid = (Function) native.GetObjectProperty("networkIsHandleValid");
			var results = (Array) networkIsHandleValid.Call(native, networkHandle, bufferSize);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) NetworkGetPlayerFromGamerHandle(int networkHandle)
		{
			if (networkGetPlayerFromGamerHandle == null) networkGetPlayerFromGamerHandle = (Function) native.GetObjectProperty("networkGetPlayerFromGamerHandle");
			var results = (Array) networkGetPlayerFromGamerHandle.Call(native, networkHandle);
			return ((int) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<string, int></returns>
		public (string, int) NetworkMemberIdFromGamerHandle(int networkHandle)
		{
			if (networkMemberIdFromGamerHandle == null) networkMemberIdFromGamerHandle = (Function) native.GetObjectProperty("networkMemberIdFromGamerHandle");
			var results = (Array) networkMemberIdFromGamerHandle.Call(native, networkHandle);
			return ((string) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkIsGamerInMySession(int networkHandle)
		{
			if (networkIsGamerInMySession == null) networkIsGamerInMySession = (Function) native.GetObjectProperty("networkIsGamerInMySession");
			var results = (Array) networkIsGamerInMySession.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// Example:
		/// int playerHandle;
		/// NETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &playerHandle, 13);
		/// NETWORK_SHOW_PROFILE_UI(&playerHandle);
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkShowProfileUi(int networkHandle)
		{
			if (networkShowProfileUi == null) networkShowProfileUi = (Function) native.GetObjectProperty("networkShowProfileUi");
			var results = (Array) networkShowProfileUi.Call(native, networkHandle);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the name of a given player. Returns "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.</returns>
		public string NetworkPlayerGetName(int player)
		{
			if (networkPlayerGetName == null) networkPlayerGetName = (Function) native.GetObjectProperty("networkPlayerGetName");
			return (string) networkPlayerGetName.Call(native, player);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<string, int> Takes a 24 char buffer. Returns the buffer or "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.</returns>
		public (string, int) NetworkPlayerGetUserid(int player, int userID)
		{
			if (networkPlayerGetUserid == null) networkPlayerGetUserid = (Function) native.GetObjectProperty("networkPlayerGetUserid");
			var results = (Array) networkPlayerGetUserid.Call(native, player, userID);
			return ((string) results[0], (int) results[1]);
		}

		/// <summary>
		/// Checks if a specific value (BYTE) in CPlayerInfo is nonzero.
		/// No longer used for dev checks since first mods were released on PS3 & 360.
		/// R* now checks with the is_dlc_present native for the dlc hash 2532323046,
		/// if that is present it will unlock dev stuff.
		/// </summary>
		/// <returns>Returns always false in Singleplayer.</returns>
		public bool NetworkPlayerIsRockstarDev(int player)
		{
			if (networkPlayerIsRockstarDev == null) networkPlayerIsRockstarDev = (Function) native.GetObjectProperty("networkPlayerIsRockstarDev");
			return (bool) networkPlayerIsRockstarDev.Call(native, player);
		}

		public bool NetworkPlayerIndexIsCheater(int player)
		{
			if (networkPlayerIndexIsCheater == null) networkPlayerIndexIsCheater = (Function) native.GetObjectProperty("networkPlayerIndexIsCheater");
			return (bool) networkPlayerIndexIsCheater.Call(native, player);
		}

		public int NetworkGetEntityNetScriptId(int entity)
		{
			if (networkGetEntityNetScriptId == null) networkGetEntityNetScriptId = (Function) native.GetObjectProperty("networkGetEntityNetScriptId");
			return (int) networkGetEntityNetScriptId.Call(native, entity);
		}

		public object _0x37D5F739FD494675(object p0)
		{
			if (__0x37D5F739FD494675 == null) __0x37D5F739FD494675 = (Function) native.GetObjectProperty("_0x37D5F739FD494675");
			return __0x37D5F739FD494675.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkIsInactiveProfile(object p0)
		{
			if (networkIsInactiveProfile == null) networkIsInactiveProfile = (Function) native.GetObjectProperty("networkIsInactiveProfile");
			var results = (Array) networkIsInactiveProfile.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		public int NetworkGetMaxFriends()
		{
			if (networkGetMaxFriends == null) networkGetMaxFriends = (Function) native.GetObjectProperty("networkGetMaxFriends");
			return (int) networkGetMaxFriends.Call(native);
		}

		public int NetworkGetFriendCount()
		{
			if (networkGetFriendCount == null) networkGetFriendCount = (Function) native.GetObjectProperty("networkGetFriendCount");
			return (int) networkGetFriendCount.Call(native);
		}

		public string NetworkGetFriendName(int friendIndex)
		{
			if (networkGetFriendName == null) networkGetFriendName = (Function) native.GetObjectProperty("networkGetFriendName");
			return (string) networkGetFriendName.Call(native, friendIndex);
		}

		public string NetworkGetFriendNameFromIndex(int friendIndex)
		{
			if (networkGetFriendNameFromIndex == null) networkGetFriendNameFromIndex = (Function) native.GetObjectProperty("networkGetFriendNameFromIndex");
			return (string) networkGetFriendNameFromIndex.Call(native, friendIndex);
		}

		public bool NetworkIsFriendOnline(string name)
		{
			if (networkIsFriendOnline == null) networkIsFriendOnline = (Function) native.GetObjectProperty("networkIsFriendOnline");
			return (bool) networkIsFriendOnline.Call(native, name);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkIsFriendHandleOnline(int networkHandle)
		{
			if (networkIsFriendHandleOnline == null) networkIsFriendHandleOnline = (Function) native.GetObjectProperty("networkIsFriendHandleOnline");
			var results = (Array) networkIsFriendHandleOnline.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
		/// </summary>
		public bool NetworkIsFriendInSameTitle(string friendName)
		{
			if (networkIsFriendInSameTitle == null) networkIsFriendInSameTitle = (Function) native.GetObjectProperty("networkIsFriendInSameTitle");
			return (bool) networkIsFriendInSameTitle.Call(native, friendName);
		}

		public bool NetworkIsFriendInMultiplayer(string friendName)
		{
			if (networkIsFriendInMultiplayer == null) networkIsFriendInMultiplayer = (Function) native.GetObjectProperty("networkIsFriendInMultiplayer");
			return (bool) networkIsFriendInMultiplayer.Call(native, friendName);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkIsFriend(int networkHandle)
		{
			if (networkIsFriend == null) networkIsFriend = (Function) native.GetObjectProperty("networkIsFriend");
			var results = (Array) networkIsFriend.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public object NetworkIsPendingFriend(object p0)
		{
			if (networkIsPendingFriend == null) networkIsPendingFriend = (Function) native.GetObjectProperty("networkIsPendingFriend");
			return networkIsPendingFriend.Call(native, p0);
		}

		public object NetworkIsAddingFriend()
		{
			if (networkIsAddingFriend == null) networkIsAddingFriend = (Function) native.GetObjectProperty("networkIsAddingFriend");
			return networkIsAddingFriend.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkAddFriend(int networkHandle, string message)
		{
			if (networkAddFriend == null) networkAddFriend = (Function) native.GetObjectProperty("networkAddFriend");
			var results = (Array) networkAddFriend.Call(native, networkHandle, message);
			return ((bool) results[0], (int) results[1]);
		}

		public bool NetworkIsFriendIndexOnline(int friendIndex)
		{
			if (networkIsFriendIndexOnline == null) networkIsFriendIndexOnline = (Function) native.GetObjectProperty("networkIsFriendIndexOnline");
			return (bool) networkIsFriendIndexOnline.Call(native, friendIndex);
		}

		public void NetworkSetPlayerIsPassive(bool toggle)
		{
			if (networkSetPlayerIsPassive == null) networkSetPlayerIsPassive = (Function) native.GetObjectProperty("networkSetPlayerIsPassive");
			networkSetPlayerIsPassive.Call(native, toggle);
		}

		public bool NetworkGetPlayerOwnsWaypoint(int player)
		{
			if (networkGetPlayerOwnsWaypoint == null) networkGetPlayerOwnsWaypoint = (Function) native.GetObjectProperty("networkGetPlayerOwnsWaypoint");
			return (bool) networkGetPlayerOwnsWaypoint.Call(native, player);
		}

		public bool NetworkCanSetWaypoint()
		{
			if (networkCanSetWaypoint == null) networkCanSetWaypoint = (Function) native.GetObjectProperty("networkCanSetWaypoint");
			return (bool) networkCanSetWaypoint.Call(native);
		}

		public void _0x4C2A9FDC22377075()
		{
			if (__0x4C2A9FDC22377075 == null) __0x4C2A9FDC22377075 = (Function) native.GetObjectProperty("_0x4C2A9FDC22377075");
			__0x4C2A9FDC22377075.Call(native);
		}

		public object _0xB309EBEA797E001F(object p0)
		{
			if (__0xB309EBEA797E001F == null) __0xB309EBEA797E001F = (Function) native.GetObjectProperty("_0xB309EBEA797E001F");
			return __0xB309EBEA797E001F.Call(native, p0);
		}

		public object _0x26F07DD83A5F7F98()
		{
			if (__0x26F07DD83A5F7F98 == null) __0x26F07DD83A5F7F98 = (Function) native.GetObjectProperty("_0x26F07DD83A5F7F98");
			return __0x26F07DD83A5F7F98.Call(native);
		}

		public bool NetworkHasHeadset()
		{
			if (networkHasHeadset == null) networkHasHeadset = (Function) native.GetObjectProperty("networkHasHeadset");
			return (bool) networkHasHeadset.Call(native);
		}

		public void _0x7D395EA61622E116(bool p0)
		{
			if (__0x7D395EA61622E116 == null) __0x7D395EA61622E116 = (Function) native.GetObjectProperty("_0x7D395EA61622E116");
			__0x7D395EA61622E116.Call(native, p0);
		}

		public bool NetworkIsLocalTalking()
		{
			if (networkIsLocalTalking == null) networkIsLocalTalking = (Function) native.GetObjectProperty("networkIsLocalTalking");
			return (bool) networkIsLocalTalking.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkGamerHasHeadset(object networkHandle)
		{
			if (networkGamerHasHeadset == null) networkGamerHasHeadset = (Function) native.GetObjectProperty("networkGamerHasHeadset");
			var results = (Array) networkGamerHasHeadset.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkIsGamerTalking(object networkHandle)
		{
			if (networkIsGamerTalking == null) networkIsGamerTalking = (Function) native.GetObjectProperty("networkIsGamerTalking");
			var results = (Array) networkIsGamerTalking.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// Same as NETWORK_CAN_COMMUNICATE_WITH_GAMER
		/// NETWORK_CAN_*
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkCanCommunicateWithGamer2(object networkHandle)
		{
			if (networkCanCommunicateWithGamer2 == null) networkCanCommunicateWithGamer2 = (Function) native.GetObjectProperty("networkCanCommunicateWithGamer2");
			var results = (Array) networkCanCommunicateWithGamer2.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkCanCommunicateWithGamer(object networkHandle)
		{
			if (networkCanCommunicateWithGamer == null) networkCanCommunicateWithGamer = (Function) native.GetObjectProperty("networkCanCommunicateWithGamer");
			var results = (Array) networkCanCommunicateWithGamer.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkIsGamerMutedByMe(object networkHandle)
		{
			if (networkIsGamerMutedByMe == null) networkIsGamerMutedByMe = (Function) native.GetObjectProperty("networkIsGamerMutedByMe");
			var results = (Array) networkIsGamerMutedByMe.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkAmIMutedByGamer(object networkHandle)
		{
			if (networkAmIMutedByGamer == null) networkAmIMutedByGamer = (Function) native.GetObjectProperty("networkAmIMutedByGamer");
			var results = (Array) networkAmIMutedByGamer.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkIsGamerBlockedByMe(object networkHandle)
		{
			if (networkIsGamerBlockedByMe == null) networkIsGamerBlockedByMe = (Function) native.GetObjectProperty("networkIsGamerBlockedByMe");
			var results = (Array) networkIsGamerBlockedByMe.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkAmIBlockedByGamer(object networkHandle)
		{
			if (networkAmIBlockedByGamer == null) networkAmIBlockedByGamer = (Function) native.GetObjectProperty("networkAmIBlockedByGamer");
			var results = (Array) networkAmIBlockedByGamer.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkCanViewGamerUserContent(object networkHandle)
		{
			if (networkCanViewGamerUserContent == null) networkCanViewGamerUserContent = (Function) native.GetObjectProperty("networkCanViewGamerUserContent");
			var results = (Array) networkCanViewGamerUserContent.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkHasViewGamerUserContentResult(object networkHandle)
		{
			if (networkHasViewGamerUserContentResult == null) networkHasViewGamerUserContentResult = (Function) native.GetObjectProperty("networkHasViewGamerUserContentResult");
			var results = (Array) networkHasViewGamerUserContentResult.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkCanPlayMultiplayerWithGamer(object networkHandle)
		{
			if (networkCanPlayMultiplayerWithGamer == null) networkCanPlayMultiplayerWithGamer = (Function) native.GetObjectProperty("networkCanPlayMultiplayerWithGamer");
			var results = (Array) networkCanPlayMultiplayerWithGamer.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkCanGamerPlayMultiplayerWithMe(object networkHandle)
		{
			if (networkCanGamerPlayMultiplayerWithMe == null) networkCanGamerPlayMultiplayerWithMe = (Function) native.GetObjectProperty("networkCanGamerPlayMultiplayerWithMe");
			var results = (Array) networkCanGamerPlayMultiplayerWithMe.Call(native, networkHandle);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>returns true if someone is screaming or talking in a microphone</returns>
		public bool NetworkIsPlayerTalking(int player)
		{
			if (networkIsPlayerTalking == null) networkIsPlayerTalking = (Function) native.GetObjectProperty("networkIsPlayerTalking");
			return (bool) networkIsPlayerTalking.Call(native, player);
		}

		public bool NetworkPlayerHasHeadset(int player)
		{
			if (networkPlayerHasHeadset == null) networkPlayerHasHeadset = (Function) native.GetObjectProperty("networkPlayerHasHeadset");
			return (bool) networkPlayerHasHeadset.Call(native, player);
		}

		public bool NetworkIsPlayerMutedByMe(int player)
		{
			if (networkIsPlayerMutedByMe == null) networkIsPlayerMutedByMe = (Function) native.GetObjectProperty("networkIsPlayerMutedByMe");
			return (bool) networkIsPlayerMutedByMe.Call(native, player);
		}

		public bool NetworkAmIMutedByPlayer(int player)
		{
			if (networkAmIMutedByPlayer == null) networkAmIMutedByPlayer = (Function) native.GetObjectProperty("networkAmIMutedByPlayer");
			return (bool) networkAmIMutedByPlayer.Call(native, player);
		}

		public bool NetworkIsPlayerBlockedByMe(int player)
		{
			if (networkIsPlayerBlockedByMe == null) networkIsPlayerBlockedByMe = (Function) native.GetObjectProperty("networkIsPlayerBlockedByMe");
			return (bool) networkIsPlayerBlockedByMe.Call(native, player);
		}

		public bool NetworkAmIBlockedByPlayer(int player)
		{
			if (networkAmIBlockedByPlayer == null) networkAmIBlockedByPlayer = (Function) native.GetObjectProperty("networkAmIBlockedByPlayer");
			return (bool) networkAmIBlockedByPlayer.Call(native, player);
		}

		public double NetworkGetPlayerLoudness(int player)
		{
			if (networkGetPlayerLoudness == null) networkGetPlayerLoudness = (Function) native.GetObjectProperty("networkGetPlayerLoudness");
			return (double) networkGetPlayerLoudness.Call(native, player);
		}

		public void NetworkSetTalkerProximity(double value)
		{
			if (networkSetTalkerProximity == null) networkSetTalkerProximity = (Function) native.GetObjectProperty("networkSetTalkerProximity");
			networkSetTalkerProximity.Call(native, value);
		}

		public double NetworkGetTalkerProximity()
		{
			if (networkGetTalkerProximity == null) networkGetTalkerProximity = (Function) native.GetObjectProperty("networkGetTalkerProximity");
			return (double) networkGetTalkerProximity.Call(native);
		}

		public void NetworkSetVoiceActive(bool toggle)
		{
			if (networkSetVoiceActive == null) networkSetVoiceActive = (Function) native.GetObjectProperty("networkSetVoiceActive");
			networkSetVoiceActive.Call(native, toggle);
		}

		public void _0xCFEB46DCD7D8D5EB(bool p0)
		{
			if (__0xCFEB46DCD7D8D5EB == null) __0xCFEB46DCD7D8D5EB = (Function) native.GetObjectProperty("_0xCFEB46DCD7D8D5EB");
			__0xCFEB46DCD7D8D5EB.Call(native, p0);
		}

		public void NetworkOverrideTransitionChat(bool p0)
		{
			if (networkOverrideTransitionChat == null) networkOverrideTransitionChat = (Function) native.GetObjectProperty("networkOverrideTransitionChat");
			networkOverrideTransitionChat.Call(native, p0);
		}

		public void NetworkSetTeamOnlyChat(bool toggle)
		{
			if (networkSetTeamOnlyChat == null) networkSetTeamOnlyChat = (Function) native.GetObjectProperty("networkSetTeamOnlyChat");
			networkSetTeamOnlyChat.Call(native, toggle);
		}

		public void _0x265559DA40B3F327(object p0)
		{
			if (__0x265559DA40B3F327 == null) __0x265559DA40B3F327 = (Function) native.GetObjectProperty("_0x265559DA40B3F327");
			__0x265559DA40B3F327.Call(native, p0);
		}

		public object _0x4348BFDA56023A2F(object p0, object p1)
		{
			if (__0x4348BFDA56023A2F == null) __0x4348BFDA56023A2F = (Function) native.GetObjectProperty("_0x4348BFDA56023A2F");
			return __0x4348BFDA56023A2F.Call(native, p0, p1);
		}

		public void NetworkOverrideTeamRestrictions(int team, bool toggle)
		{
			if (networkOverrideTeamRestrictions == null) networkOverrideTeamRestrictions = (Function) native.GetObjectProperty("networkOverrideTeamRestrictions");
			networkOverrideTeamRestrictions.Call(native, team, toggle);
		}

		public void NetworkSetOverrideSpectatorMode(bool toggle)
		{
			if (networkSetOverrideSpectatorMode == null) networkSetOverrideSpectatorMode = (Function) native.GetObjectProperty("networkSetOverrideSpectatorMode");
			networkSetOverrideSpectatorMode.Call(native, toggle);
		}

		/// <summary>
		/// Sets some voice chat related value.
		/// NETWORK_SET_*
		/// </summary>
		public void _0x3C5C1E2C2FF814B1(bool toggle)
		{
			if (__0x3C5C1E2C2FF814B1 == null) __0x3C5C1E2C2FF814B1 = (Function) native.GetObjectProperty("_0x3C5C1E2C2FF814B1");
			__0x3C5C1E2C2FF814B1.Call(native, toggle);
		}

		/// <summary>
		/// Sets some voice chat related value.
		/// NETWORK_SET_*
		/// </summary>
		public void _0x9D7AFCBF21C51712(bool toggle)
		{
			if (__0x9D7AFCBF21C51712 == null) __0x9D7AFCBF21C51712 = (Function) native.GetObjectProperty("_0x9D7AFCBF21C51712");
			__0x9D7AFCBF21C51712.Call(native, toggle);
		}

		public void NetworkSetNoSpectatorChat(bool toggle)
		{
			if (networkSetNoSpectatorChat == null) networkSetNoSpectatorChat = (Function) native.GetObjectProperty("networkSetNoSpectatorChat");
			networkSetNoSpectatorChat.Call(native, toggle);
		}

		/// <summary>
		/// Sets some voice chat related value.
		/// NETWORK_SET_*
		/// </summary>
		public void _0x6A5D89D7769A40D8(bool toggle)
		{
			if (__0x6A5D89D7769A40D8 == null) __0x6A5D89D7769A40D8 = (Function) native.GetObjectProperty("_0x6A5D89D7769A40D8");
			__0x6A5D89D7769A40D8.Call(native, toggle);
		}

		/// <summary>
		/// Could possibly bypass being muted or automatically muted
		/// </summary>
		public void NetworkOverrideChatRestrictions(int player, bool toggle)
		{
			if (networkOverrideChatRestrictions == null) networkOverrideChatRestrictions = (Function) native.GetObjectProperty("networkOverrideChatRestrictions");
			networkOverrideChatRestrictions.Call(native, player, toggle);
		}

		/// <summary>
		/// This is used alongside the native,
		/// 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
		/// </summary>
		public void NetworkOverrideSendRestrictions(int player, bool toggle)
		{
			if (networkOverrideSendRestrictions == null) networkOverrideSendRestrictions = (Function) native.GetObjectProperty("networkOverrideSendRestrictions");
			networkOverrideSendRestrictions.Call(native, player, toggle);
		}

		public void NetworkOverrideSendRestrictionsAll(bool toggle)
		{
			if (networkOverrideSendRestrictionsAll == null) networkOverrideSendRestrictionsAll = (Function) native.GetObjectProperty("networkOverrideSendRestrictionsAll");
			networkOverrideSendRestrictionsAll.Call(native, toggle);
		}

		/// <summary>
		/// R* uses this to hear all player when spectating.
		/// It allows you to hear other online players when their chat is on none, crew and or friends
		/// </summary>
		public void NetworkOverrideReceiveRestrictions(int player, bool toggle)
		{
			if (networkOverrideReceiveRestrictions == null) networkOverrideReceiveRestrictions = (Function) native.GetObjectProperty("networkOverrideReceiveRestrictions");
			networkOverrideReceiveRestrictions.Call(native, player, toggle);
		}

		public void NetworkOverrideReceiveRestrictionsAll(bool toggle)
		{
			if (networkOverrideReceiveRestrictionsAll == null) networkOverrideReceiveRestrictionsAll = (Function) native.GetObjectProperty("networkOverrideReceiveRestrictionsAll");
			networkOverrideReceiveRestrictionsAll.Call(native, toggle);
		}

		public void NetworkSetVoiceChannel(int channel)
		{
			if (networkSetVoiceChannel == null) networkSetVoiceChannel = (Function) native.GetObjectProperty("networkSetVoiceChannel");
			networkSetVoiceChannel.Call(native, channel);
		}

		public void NetworkClearVoiceChannel()
		{
			if (networkClearVoiceChannel == null) networkClearVoiceChannel = (Function) native.GetObjectProperty("networkClearVoiceChannel");
			networkClearVoiceChannel.Call(native);
		}

		public void NetworkApplyVoiceProximityOverride(double x, double y, double z)
		{
			if (networkApplyVoiceProximityOverride == null) networkApplyVoiceProximityOverride = (Function) native.GetObjectProperty("networkApplyVoiceProximityOverride");
			networkApplyVoiceProximityOverride.Call(native, x, y, z);
		}

		public void NetworkClearVoiceProximityOverride()
		{
			if (networkClearVoiceProximityOverride == null) networkClearVoiceProximityOverride = (Function) native.GetObjectProperty("networkClearVoiceProximityOverride");
			networkClearVoiceProximityOverride.Call(native);
		}

		public void _0x5E3AA4CA2B6FB0EE(object p0)
		{
			if (__0x5E3AA4CA2B6FB0EE == null) __0x5E3AA4CA2B6FB0EE = (Function) native.GetObjectProperty("_0x5E3AA4CA2B6FB0EE");
			__0x5E3AA4CA2B6FB0EE.Call(native, p0);
		}

		public void _0xCA575C391FEA25CC(object p0)
		{
			if (__0xCA575C391FEA25CC == null) __0xCA575C391FEA25CC = (Function) native.GetObjectProperty("_0xCA575C391FEA25CC");
			__0xCA575C391FEA25CC.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, double, double></returns>
		public (object, double, double) _0xADB57E5B663CCA8B(int p0, double p1, double p2)
		{
			if (__0xADB57E5B663CCA8B == null) __0xADB57E5B663CCA8B = (Function) native.GetObjectProperty("_0xADB57E5B663CCA8B");
			var results = (Array) __0xADB57E5B663CCA8B.Call(native, p0, p1, p2);
			return (results[0], (double) results[1], (double) results[2]);
		}

		/// <summary>
		/// NETWORK_SET_*
		/// </summary>
		public void _0x8EF52ACAECC51D9C(bool toggle)
		{
			if (__0x8EF52ACAECC51D9C == null) __0x8EF52ACAECC51D9C = (Function) native.GetObjectProperty("_0x8EF52ACAECC51D9C");
			__0x8EF52ACAECC51D9C.Call(native, toggle);
		}

		/// <summary>
		/// Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
		/// -(http://fivem.net)
		/// </summary>
		public bool NetworkIsTextChatActive()
		{
			if (networkIsTextChatActive == null) networkIsTextChatActive = (Function) native.GetObjectProperty("networkIsTextChatActive");
			return (bool) networkIsTextChatActive.Call(native);
		}

		/// <summary>
		/// Starts a new singleplayer game (at the prologue).
		/// </summary>
		public void ShutdownAndLaunchSinglePlayerGame()
		{
			if (shutdownAndLaunchSinglePlayerGame == null) shutdownAndLaunchSinglePlayerGame = (Function) native.GetObjectProperty("shutdownAndLaunchSinglePlayerGame");
			shutdownAndLaunchSinglePlayerGame.Call(native);
		}

		public bool ShutdownAndLoadMostRecentSave()
		{
			if (shutdownAndLoadMostRecentSave == null) shutdownAndLoadMostRecentSave = (Function) native.GetObjectProperty("shutdownAndLoadMostRecentSave");
			return (bool) shutdownAndLoadMostRecentSave.Call(native);
		}

		public void NetworkSetFriendlyFireOption(bool toggle)
		{
			if (networkSetFriendlyFireOption == null) networkSetFriendlyFireOption = (Function) native.GetObjectProperty("networkSetFriendlyFireOption");
			networkSetFriendlyFireOption.Call(native, toggle);
		}

		public void NetworkSetRichPresence(object p0, object p1, object p2, object p3)
		{
			if (networkSetRichPresence == null) networkSetRichPresence = (Function) native.GetObjectProperty("networkSetRichPresence");
			networkSetRichPresence.Call(native, p0, p1, p2, p3);
		}

		public void NetworkSetRichPresenceString(object p0, string @string)
		{
			if (networkSetRichPresenceString == null) networkSetRichPresenceString = (Function) native.GetObjectProperty("networkSetRichPresenceString");
			networkSetRichPresenceString.Call(native, p0, @string);
		}

		public int NetworkGetTimeoutTime()
		{
			if (networkGetTimeoutTime == null) networkGetTimeoutTime = (Function) native.GetObjectProperty("networkGetTimeoutTime");
			return (int) networkGetTimeoutTime.Call(native);
		}

		/// <summary>
		/// p4 and p5 are always 0 in scripts
		/// </summary>
		/// <param name="p4">and p5 are always 0 in scripts</param>
		public void NetworkRespawnCoords(int player, double x, double y, double z, bool p4, bool p5)
		{
			if (networkRespawnCoords == null) networkRespawnCoords = (Function) native.GetObjectProperty("networkRespawnCoords");
			networkRespawnCoords.Call(native, player, x, y, z, p4, p5);
		}

		public void _0xBF22E0F32968E967(int player, bool p1)
		{
			if (__0xBF22E0F32968E967 == null) __0xBF22E0F32968E967 = (Function) native.GetObjectProperty("_0xBF22E0F32968E967");
			__0xBF22E0F32968E967.Call(native, player, p1);
		}

		/// <summary>
		/// entity must be a valid entity; ped can be NULL
		/// </summary>
		/// <param name="entity">must be a valid entity; ped can be NULL</param>
		public void RemoveAllStickyBombsFromEntity(int entity, int ped)
		{
			if (removeAllStickyBombsFromEntity == null) removeAllStickyBombsFromEntity = (Function) native.GetObjectProperty("removeAllStickyBombsFromEntity");
			removeAllStickyBombsFromEntity.Call(native, entity, ped);
		}

		public object _0x2E4C123D1C8A710E(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0x2E4C123D1C8A710E == null) __0x2E4C123D1C8A710E = (Function) native.GetObjectProperty("_0x2E4C123D1C8A710E");
			return __0x2E4C123D1C8A710E.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public bool NetworkClanServiceIsValid()
		{
			if (networkClanServiceIsValid == null) networkClanServiceIsValid = (Function) native.GetObjectProperty("networkClanServiceIsValid");
			return (bool) networkClanServiceIsValid.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkClanPlayerIsActive(int networkHandle)
		{
			if (networkClanPlayerIsActive == null) networkClanPlayerIsActive = (Function) native.GetObjectProperty("networkClanPlayerIsActive");
			var results = (Array) networkClanPlayerIsActive.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// bufferSize is 35 in the scripts.
		/// bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.
		/// the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
		/// pastebin.com/cSZniHak
		/// </summary>
		/// <param name="bufferSize">is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.</param>
		/// <returns>Array<bool, int, int></returns>
		public (bool, int, int) NetworkClanPlayerGetDesc(int clanDesc, int bufferSize, int networkHandle)
		{
			if (networkClanPlayerGetDesc == null) networkClanPlayerGetDesc = (Function) native.GetObjectProperty("networkClanPlayerGetDesc");
			var results = (Array) networkClanPlayerGetDesc.Call(native, clanDesc, bufferSize, networkHandle);
			return ((bool) results[0], (int) results[1], (int) results[2]);
		}

		/// <summary>
		/// bufferSize is 35 in the scripts.
		/// </summary>
		/// <param name="bufferSize">is 35 in the scripts.</param>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkClanIsRockstarClan(int clanDesc, int bufferSize)
		{
			if (networkClanIsRockstarClan == null) networkClanIsRockstarClan = (Function) native.GetObjectProperty("networkClanIsRockstarClan");
			var results = (Array) networkClanIsRockstarClan.Call(native, clanDesc, bufferSize);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// bufferSize is 35 in the scripts.
		/// </summary>
		/// <param name="bufferSize">is 35 in the scripts.</param>
		/// <returns>Array<void, int></returns>
		public (object, int) NetworkClanGetUiFormattedTag(int clanDesc, int bufferSize, string formattedTag)
		{
			if (networkClanGetUiFormattedTag == null) networkClanGetUiFormattedTag = (Function) native.GetObjectProperty("networkClanGetUiFormattedTag");
			var results = (Array) networkClanGetUiFormattedTag.Call(native, clanDesc, bufferSize, formattedTag);
			return (results[0], (int) results[1]);
		}

		public int NetworkClanGetLocalMembershipsCount()
		{
			if (networkClanGetLocalMembershipsCount == null) networkClanGetLocalMembershipsCount = (Function) native.GetObjectProperty("networkClanGetLocalMembershipsCount");
			return (int) networkClanGetLocalMembershipsCount.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkClanGetMembershipDesc(int memberDesc, int p1)
		{
			if (networkClanGetMembershipDesc == null) networkClanGetMembershipDesc = (Function) native.GetObjectProperty("networkClanGetMembershipDesc");
			var results = (Array) networkClanGetMembershipDesc.Call(native, memberDesc, p1);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkClanDownloadMembership(int networkHandle)
		{
			if (networkClanDownloadMembership == null) networkClanDownloadMembership = (Function) native.GetObjectProperty("networkClanDownloadMembership");
			var results = (Array) networkClanDownloadMembership.Call(native, networkHandle);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkClanDownloadMembershipPending(object p0)
		{
			if (networkClanDownloadMembershipPending == null) networkClanDownloadMembershipPending = (Function) native.GetObjectProperty("networkClanDownloadMembershipPending");
			var results = (Array) networkClanDownloadMembershipPending.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		public bool NetworkIsClanMembershipFinishedDownloading()
		{
			if (networkIsClanMembershipFinishedDownloading == null) networkIsClanMembershipFinishedDownloading = (Function) native.GetObjectProperty("networkIsClanMembershipFinishedDownloading");
			return (bool) networkIsClanMembershipFinishedDownloading.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkClanRemoteMembershipsAreInCache(int p0)
		{
			if (networkClanRemoteMembershipsAreInCache == null) networkClanRemoteMembershipsAreInCache = (Function) native.GetObjectProperty("networkClanRemoteMembershipsAreInCache");
			var results = (Array) networkClanRemoteMembershipsAreInCache.Call(native, p0);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) NetworkClanGetMembershipCount(int p0)
		{
			if (networkClanGetMembershipCount == null) networkClanGetMembershipCount = (Function) native.GetObjectProperty("networkClanGetMembershipCount");
			var results = (Array) networkClanGetMembershipCount.Call(native, p0);
			return ((int) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkClanGetMembershipValid(int p0, object p1)
		{
			if (networkClanGetMembershipValid == null) networkClanGetMembershipValid = (Function) native.GetObjectProperty("networkClanGetMembershipValid");
			var results = (Array) networkClanGetMembershipValid.Call(native, p0, p1);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// BOOL DEBUG_MEMBRESHIP(int Param)
		/// {
		/// int membership;
		/// networkHandleMgr handle;
		/// NETWORK_HANDLE_FROM_PLAYER(iSelectedPlayer, &handle.netHandle, 13);
		/// if (!_NETWORK_IS_CLAN_MEMBERSHIP_FINISHED_DOWNLOADING())
		/// {
		/// if (NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(&Param))
		/// {
		/// See NativeDB for reference: http://natives.altv.mp/#/0xC8BC2011F67B3411
		/// </summary>
		/// <returns>Array<bool, int, int></returns>
		public (bool, int, int) NetworkClanGetMembership(int p0, int clanMembership, int p2)
		{
			if (networkClanGetMembership == null) networkClanGetMembership = (Function) native.GetObjectProperty("networkClanGetMembership");
			var results = (Array) networkClanGetMembership.Call(native, p0, clanMembership, p2);
			return ((bool) results[0], (int) results[1], (int) results[2]);
		}

		public bool NetworkClanJoin(int clanDesc)
		{
			if (networkClanJoin == null) networkClanJoin = (Function) native.GetObjectProperty("networkClanJoin");
			return (bool) networkClanJoin.Call(native, clanDesc);
		}

		/// <summary>
		/// Only documented...
		/// </summary>
		public bool NetworkClanAnimation(string animDict, string animName)
		{
			if (networkClanAnimation == null) networkClanAnimation = (Function) native.GetObjectProperty("networkClanAnimation");
			return (bool) networkClanAnimation.Call(native, animDict, animName);
		}

		public bool _0x2B51EDBEFC301339(int p0, string p1)
		{
			if (__0x2B51EDBEFC301339 == null) __0x2B51EDBEFC301339 = (Function) native.GetObjectProperty("_0x2B51EDBEFC301339");
			return (bool) __0x2B51EDBEFC301339.Call(native, p0, p1);
		}

		public object _0xC32EA7A2F6CA7557()
		{
			if (__0xC32EA7A2F6CA7557 == null) __0xC32EA7A2F6CA7557 = (Function) native.GetObjectProperty("_0xC32EA7A2F6CA7557");
			return __0xC32EA7A2F6CA7557.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkClanGetEmblemTxdName(object netHandle, string txdName)
		{
			if (networkClanGetEmblemTxdName == null) networkClanGetEmblemTxdName = (Function) native.GetObjectProperty("networkClanGetEmblemTxdName");
			var results = (Array) networkClanGetEmblemTxdName.Call(native, netHandle, txdName);
			return ((bool) results[0], results[1]);
		}

		public bool NetworkClanRequestEmblem(object p0)
		{
			if (networkClanRequestEmblem == null) networkClanRequestEmblem = (Function) native.GetObjectProperty("networkClanRequestEmblem");
			return (bool) networkClanRequestEmblem.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkClanIsEmblemReady(object p0, object p1)
		{
			if (networkClanIsEmblemReady == null) networkClanIsEmblemReady = (Function) native.GetObjectProperty("networkClanIsEmblemReady");
			var results = (Array) networkClanIsEmblemReady.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public void NetworkClanReleaseEmblem(object p0)
		{
			if (networkClanReleaseEmblem == null) networkClanReleaseEmblem = (Function) native.GetObjectProperty("networkClanReleaseEmblem");
			networkClanReleaseEmblem.Call(native, p0);
		}

		public object NetworkGetPrimaryClanDataClear()
		{
			if (networkGetPrimaryClanDataClear == null) networkGetPrimaryClanDataClear = (Function) native.GetObjectProperty("networkGetPrimaryClanDataClear");
			return networkGetPrimaryClanDataClear.Call(native);
		}

		public void NetworkGetPrimaryClanDataCancel()
		{
			if (networkGetPrimaryClanDataCancel == null) networkGetPrimaryClanDataCancel = (Function) native.GetObjectProperty("networkGetPrimaryClanDataCancel");
			networkGetPrimaryClanDataCancel.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) NetworkGetPrimaryClanDataStart(object p0, object p1)
		{
			if (networkGetPrimaryClanDataStart == null) networkGetPrimaryClanDataStart = (Function) native.GetObjectProperty("networkGetPrimaryClanDataStart");
			var results = (Array) networkGetPrimaryClanDataStart.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public object NetworkGetPrimaryClanDataPending()
		{
			if (networkGetPrimaryClanDataPending == null) networkGetPrimaryClanDataPending = (Function) native.GetObjectProperty("networkGetPrimaryClanDataPending");
			return networkGetPrimaryClanDataPending.Call(native);
		}

		public object NetworkGetPrimaryClanDataSuccess()
		{
			if (networkGetPrimaryClanDataSuccess == null) networkGetPrimaryClanDataSuccess = (Function) native.GetObjectProperty("networkGetPrimaryClanDataSuccess");
			return networkGetPrimaryClanDataSuccess.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) NetworkGetPrimaryClanDataNew(object p0, object p1)
		{
			if (networkGetPrimaryClanDataNew == null) networkGetPrimaryClanDataNew = (Function) native.GetObjectProperty("networkGetPrimaryClanDataNew");
			var results = (Array) networkGetPrimaryClanDataNew.Call(native, p0, p1);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// Whether or not another player is allowed to take control of the entity
		/// </summary>
		public void SetNetworkIdCanMigrate(int netId, bool toggle)
		{
			if (setNetworkIdCanMigrate == null) setNetworkIdCanMigrate = (Function) native.GetObjectProperty("setNetworkIdCanMigrate");
			setNetworkIdCanMigrate.Call(native, netId, toggle);
		}

		public void SetNetworkIdExistsOnAllMachines(int netId, bool toggle)
		{
			if (setNetworkIdExistsOnAllMachines == null) setNetworkIdExistsOnAllMachines = (Function) native.GetObjectProperty("setNetworkIdExistsOnAllMachines");
			setNetworkIdExistsOnAllMachines.Call(native, netId, toggle);
		}

		/// <summary>
		/// not tested....
		/// </summary>
		public void SetNetworkIdSyncToPlayer(int netId, int player, bool toggle)
		{
			if (setNetworkIdSyncToPlayer == null) setNetworkIdSyncToPlayer = (Function) native.GetObjectProperty("setNetworkIdSyncToPlayer");
			setNetworkIdSyncToPlayer.Call(native, netId, player, toggle);
		}

		public void NetworkSetEntityCanBlend(int entity, bool toggle)
		{
			if (networkSetEntityCanBlend == null) networkSetEntityCanBlend = (Function) native.GetObjectProperty("networkSetEntityCanBlend");
			networkSetEntityCanBlend.Call(native, entity, toggle);
		}

		public void _0x0379DAF89BA09AA5(object p0, object p1)
		{
			if (__0x0379DAF89BA09AA5 == null) __0x0379DAF89BA09AA5 = (Function) native.GetObjectProperty("_0x0379DAF89BA09AA5");
			__0x0379DAF89BA09AA5.Call(native, p0, p1);
		}

		/// <summary>
		/// if set to true other network players can't see it
		/// if set to false other network player can see it
		/// =========================================
		/// ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
		/// pc or last gen?
		/// ^^ last-gen
		/// </summary>
		public void NetworkSetEntityInvisibleToNetwork(int entity, bool toggle)
		{
			if (networkSetEntityInvisibleToNetwork == null) networkSetEntityInvisibleToNetwork = (Function) native.GetObjectProperty("networkSetEntityInvisibleToNetwork");
			networkSetEntityInvisibleToNetwork.Call(native, entity, toggle);
		}

		public void SetNetworkIdVisibleInCutscene(int netId, bool p1, bool p2)
		{
			if (setNetworkIdVisibleInCutscene == null) setNetworkIdVisibleInCutscene = (Function) native.GetObjectProperty("setNetworkIdVisibleInCutscene");
			setNetworkIdVisibleInCutscene.Call(native, netId, p1, p2);
		}

		public void _0x32EBD154CB6B8B99(object p0, object p1, object p2)
		{
			if (__0x32EBD154CB6B8B99 == null) __0x32EBD154CB6B8B99 = (Function) native.GetObjectProperty("_0x32EBD154CB6B8B99");
			__0x32EBD154CB6B8B99.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// SET_PLAYER_*
		/// </summary>
		public void _0x6540EDC4F45DA089(int player)
		{
			if (__0x6540EDC4F45DA089 == null) __0x6540EDC4F45DA089 = (Function) native.GetObjectProperty("_0x6540EDC4F45DA089");
			__0x6540EDC4F45DA089.Call(native, player);
		}

		public void SetNetworkCutsceneEntities(bool toggle)
		{
			if (setNetworkCutsceneEntities == null) setNetworkCutsceneEntities = (Function) native.GetObjectProperty("setNetworkCutsceneEntities");
			setNetworkCutsceneEntities.Call(native, toggle);
		}

		public void _0x3FA36981311FA4FF(int netId, bool state)
		{
			if (__0x3FA36981311FA4FF == null) __0x3FA36981311FA4FF = (Function) native.GetObjectProperty("_0x3FA36981311FA4FF");
			__0x3FA36981311FA4FF.Call(native, netId, state);
		}

		public bool IsNetworkIdOwnedByParticipant(int netId)
		{
			if (isNetworkIdOwnedByParticipant == null) isNetworkIdOwnedByParticipant = (Function) native.GetObjectProperty("isNetworkIdOwnedByParticipant");
			return (bool) isNetworkIdOwnedByParticipant.Call(native, netId);
		}

		public void SetLocalPlayerVisibleInCutscene(bool p0, bool p1)
		{
			if (setLocalPlayerVisibleInCutscene == null) setLocalPlayerVisibleInCutscene = (Function) native.GetObjectProperty("setLocalPlayerVisibleInCutscene");
			setLocalPlayerVisibleInCutscene.Call(native, p0, p1);
		}

		public void SetLocalPlayerInvisibleLocally(bool p0)
		{
			if (setLocalPlayerInvisibleLocally == null) setLocalPlayerInvisibleLocally = (Function) native.GetObjectProperty("setLocalPlayerInvisibleLocally");
			setLocalPlayerInvisibleLocally.Call(native, p0);
		}

		public void SetLocalPlayerVisibleLocally(bool p0)
		{
			if (setLocalPlayerVisibleLocally == null) setLocalPlayerVisibleLocally = (Function) native.GetObjectProperty("setLocalPlayerVisibleLocally");
			setLocalPlayerVisibleLocally.Call(native, p0);
		}

		public void SetPlayerInvisibleLocally(int player, bool toggle)
		{
			if (setPlayerInvisibleLocally == null) setPlayerInvisibleLocally = (Function) native.GetObjectProperty("setPlayerInvisibleLocally");
			setPlayerInvisibleLocally.Call(native, player, toggle);
		}

		public void SetPlayerVisibleLocally(int player, bool toggle)
		{
			if (setPlayerVisibleLocally == null) setPlayerVisibleLocally = (Function) native.GetObjectProperty("setPlayerVisibleLocally");
			setPlayerVisibleLocally.Call(native, player, toggle);
		}

		/// <summary>
		/// Hardcoded to not work in SP.
		/// </summary>
		public void FadeOutLocalPlayer(bool p0)
		{
			if (fadeOutLocalPlayer == null) fadeOutLocalPlayer = (Function) native.GetObjectProperty("fadeOutLocalPlayer");
			fadeOutLocalPlayer.Call(native, p0);
		}

		/// <summary>
		/// normal - transition like when your coming out of LSC
		/// slow - transition like when you walk into a mission
		/// </summary>
		/// <param name="normal">transition like when your coming out of LSC</param>
		/// <param name="slow">transition like when you walk into a mission</param>
		public void NetworkFadeOutEntity(int entity, bool normal, bool slow)
		{
			if (networkFadeOutEntity == null) networkFadeOutEntity = (Function) native.GetObjectProperty("networkFadeOutEntity");
			networkFadeOutEntity.Call(native, entity, normal, slow);
		}

		/// <summary>
		/// state - 0 does 5 fades
		/// state - 1 does 6 fades
		/// p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
		/// </summary>
		/// <param name="state">1 does 6 fades</param>
		public void NetworkFadeInEntity(int entity, bool state, object p2)
		{
			if (networkFadeInEntity == null) networkFadeInEntity = (Function) native.GetObjectProperty("networkFadeInEntity");
			networkFadeInEntity.Call(native, entity, state, p2);
		}

		public bool NetworkIsPlayerFading(int player)
		{
			if (networkIsPlayerFading == null) networkIsPlayerFading = (Function) native.GetObjectProperty("networkIsPlayerFading");
			return (bool) networkIsPlayerFading.Call(native, player);
		}

		public bool NetworkIsEntityFading(int entity)
		{
			if (networkIsEntityFading == null) networkIsEntityFading = (Function) native.GetObjectProperty("networkIsEntityFading");
			return (bool) networkIsEntityFading.Call(native, entity);
		}

		public bool IsPlayerInCutscene(int player)
		{
			if (isPlayerInCutscene == null) isPlayerInCutscene = (Function) native.GetObjectProperty("isPlayerInCutscene");
			return (bool) isPlayerInCutscene.Call(native, player);
		}

		public void SetEntityVisibleInCutscene(object p0, bool p1, bool p2)
		{
			if (setEntityVisibleInCutscene == null) setEntityVisibleInCutscene = (Function) native.GetObjectProperty("setEntityVisibleInCutscene");
			setEntityVisibleInCutscene.Call(native, p0, p1, p2);
		}

		public void SetEntityLocallyInvisible(int entity)
		{
			if (setEntityLocallyInvisible == null) setEntityLocallyInvisible = (Function) native.GetObjectProperty("setEntityLocallyInvisible");
			setEntityLocallyInvisible.Call(native, entity);
		}

		public void SetEntityLocallyVisible(int entity)
		{
			if (setEntityLocallyVisible == null) setEntityLocallyVisible = (Function) native.GetObjectProperty("setEntityLocallyVisible");
			setEntityLocallyVisible.Call(native, entity);
		}

		public bool IsDamageTrackerActiveOnNetworkId(int netID)
		{
			if (isDamageTrackerActiveOnNetworkId == null) isDamageTrackerActiveOnNetworkId = (Function) native.GetObjectProperty("isDamageTrackerActiveOnNetworkId");
			return (bool) isDamageTrackerActiveOnNetworkId.Call(native, netID);
		}

		public void ActivateDamageTrackerOnNetworkId(int netID, bool toggle)
		{
			if (activateDamageTrackerOnNetworkId == null) activateDamageTrackerOnNetworkId = (Function) native.GetObjectProperty("activateDamageTrackerOnNetworkId");
			activateDamageTrackerOnNetworkId.Call(native, netID, toggle);
		}

		public bool IsDamageTrackerActiveOnPlayer(int player)
		{
			if (isDamageTrackerActiveOnPlayer == null) isDamageTrackerActiveOnPlayer = (Function) native.GetObjectProperty("isDamageTrackerActiveOnPlayer");
			return (bool) isDamageTrackerActiveOnPlayer.Call(native, player);
		}

		public void ActivateDamageTrackerOnPlayer(int player, bool toggle)
		{
			if (activateDamageTrackerOnPlayer == null) activateDamageTrackerOnPlayer = (Function) native.GetObjectProperty("activateDamageTrackerOnPlayer");
			activateDamageTrackerOnPlayer.Call(native, player, toggle);
		}

		public bool IsSphereVisibleToAnotherMachine(double p0, double p1, double p2, double p3)
		{
			if (isSphereVisibleToAnotherMachine == null) isSphereVisibleToAnotherMachine = (Function) native.GetObjectProperty("isSphereVisibleToAnotherMachine");
			return (bool) isSphereVisibleToAnotherMachine.Call(native, p0, p1, p2, p3);
		}

		public bool IsSphereVisibleToPlayer(object p0, double p1, double p2, double p3, double p4)
		{
			if (isSphereVisibleToPlayer == null) isSphereVisibleToPlayer = (Function) native.GetObjectProperty("isSphereVisibleToPlayer");
			return (bool) isSphereVisibleToPlayer.Call(native, p0, p1, p2, p3, p4);
		}

		public void ReserveNetworkMissionObjects(int amount)
		{
			if (reserveNetworkMissionObjects == null) reserveNetworkMissionObjects = (Function) native.GetObjectProperty("reserveNetworkMissionObjects");
			reserveNetworkMissionObjects.Call(native, amount);
		}

		public void ReserveNetworkMissionPeds(int amount)
		{
			if (reserveNetworkMissionPeds == null) reserveNetworkMissionPeds = (Function) native.GetObjectProperty("reserveNetworkMissionPeds");
			reserveNetworkMissionPeds.Call(native, amount);
		}

		public void ReserveNetworkMissionVehicles(int amount)
		{
			if (reserveNetworkMissionVehicles == null) reserveNetworkMissionVehicles = (Function) native.GetObjectProperty("reserveNetworkMissionVehicles");
			reserveNetworkMissionVehicles.Call(native, amount);
		}

		public void ReserveNetworkLocalObjects(object p0)
		{
			if (reserveNetworkLocalObjects == null) reserveNetworkLocalObjects = (Function) native.GetObjectProperty("reserveNetworkLocalObjects");
			reserveNetworkLocalObjects.Call(native, p0);
		}

		public void ReserveNetworkLocalPeds(object p0)
		{
			if (reserveNetworkLocalPeds == null) reserveNetworkLocalPeds = (Function) native.GetObjectProperty("reserveNetworkLocalPeds");
			reserveNetworkLocalPeds.Call(native, p0);
		}

		public void ReserveNetworkLocalVehicles(object p0)
		{
			if (reserveNetworkLocalVehicles == null) reserveNetworkLocalVehicles = (Function) native.GetObjectProperty("reserveNetworkLocalVehicles");
			reserveNetworkLocalVehicles.Call(native, p0);
		}

		public bool CanRegisterMissionObjects(int amount)
		{
			if (canRegisterMissionObjects == null) canRegisterMissionObjects = (Function) native.GetObjectProperty("canRegisterMissionObjects");
			return (bool) canRegisterMissionObjects.Call(native, amount);
		}

		public bool CanRegisterMissionPeds(int amount)
		{
			if (canRegisterMissionPeds == null) canRegisterMissionPeds = (Function) native.GetObjectProperty("canRegisterMissionPeds");
			return (bool) canRegisterMissionPeds.Call(native, amount);
		}

		public bool CanRegisterMissionVehicles(int amount)
		{
			if (canRegisterMissionVehicles == null) canRegisterMissionVehicles = (Function) native.GetObjectProperty("canRegisterMissionVehicles");
			return (bool) canRegisterMissionVehicles.Call(native, amount);
		}

		public bool CanRegisterMissionPickups(int amount)
		{
			if (canRegisterMissionPickups == null) canRegisterMissionPickups = (Function) native.GetObjectProperty("canRegisterMissionPickups");
			return (bool) canRegisterMissionPickups.Call(native, amount);
		}

		public object _0xE16AA70CE9BEEDC3(object p0)
		{
			if (__0xE16AA70CE9BEEDC3 == null) __0xE16AA70CE9BEEDC3 = (Function) native.GetObjectProperty("_0xE16AA70CE9BEEDC3");
			return __0xE16AA70CE9BEEDC3.Call(native, p0);
		}

		public bool CanRegisterMissionEntities(int ped_amt, int vehicle_amt, int object_amt, int pickup_amt)
		{
			if (canRegisterMissionEntities == null) canRegisterMissionEntities = (Function) native.GetObjectProperty("canRegisterMissionEntities");
			return (bool) canRegisterMissionEntities.Call(native, ped_amt, vehicle_amt, object_amt, pickup_amt);
		}

		/// <summary>
		/// p0 appears to be for MP
		/// </summary>
		/// <param name="p0">appears to be for MP</param>
		public int GetNumReservedMissionObjects(bool p0, object p1)
		{
			if (getNumReservedMissionObjects == null) getNumReservedMissionObjects = (Function) native.GetObjectProperty("getNumReservedMissionObjects");
			return (int) getNumReservedMissionObjects.Call(native, p0, p1);
		}

		/// <summary>
		/// p0 appears to be for MP
		/// </summary>
		/// <param name="p0">appears to be for MP</param>
		public int GetNumReservedMissionPeds(bool p0, object p1)
		{
			if (getNumReservedMissionPeds == null) getNumReservedMissionPeds = (Function) native.GetObjectProperty("getNumReservedMissionPeds");
			return (int) getNumReservedMissionPeds.Call(native, p0, p1);
		}

		/// <summary>
		/// p0 appears to be for MP
		/// </summary>
		/// <param name="p0">appears to be for MP</param>
		public int GetNumReservedMissionVehicles(bool p0, object p1)
		{
			if (getNumReservedMissionVehicles == null) getNumReservedMissionVehicles = (Function) native.GetObjectProperty("getNumReservedMissionVehicles");
			return (int) getNumReservedMissionVehicles.Call(native, p0, p1);
		}

		public int GetNumCreatedMissionObjects(bool p0)
		{
			if (getNumCreatedMissionObjects == null) getNumCreatedMissionObjects = (Function) native.GetObjectProperty("getNumCreatedMissionObjects");
			return (int) getNumCreatedMissionObjects.Call(native, p0);
		}

		public int GetNumCreatedMissionPeds(bool p0)
		{
			if (getNumCreatedMissionPeds == null) getNumCreatedMissionPeds = (Function) native.GetObjectProperty("getNumCreatedMissionPeds");
			return (int) getNumCreatedMissionPeds.Call(native, p0);
		}

		public int GetNumCreatedMissionVehicles(bool p0)
		{
			if (getNumCreatedMissionVehicles == null) getNumCreatedMissionVehicles = (Function) native.GetObjectProperty("getNumCreatedMissionVehicles");
			return (int) getNumCreatedMissionVehicles.Call(native, p0);
		}

		public void _0xE42D626EEC94E5D9(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0xE42D626EEC94E5D9 == null) __0xE42D626EEC94E5D9 = (Function) native.GetObjectProperty("_0xE42D626EEC94E5D9");
			__0xE42D626EEC94E5D9.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public int GetMaxNumNetworkObjects()
		{
			if (getMaxNumNetworkObjects == null) getMaxNumNetworkObjects = (Function) native.GetObjectProperty("getMaxNumNetworkObjects");
			return (int) getMaxNumNetworkObjects.Call(native);
		}

		public int GetMaxNumNetworkPeds()
		{
			if (getMaxNumNetworkPeds == null) getMaxNumNetworkPeds = (Function) native.GetObjectProperty("getMaxNumNetworkPeds");
			return (int) getMaxNumNetworkPeds.Call(native);
		}

		public int GetMaxNumNetworkVehicles()
		{
			if (getMaxNumNetworkVehicles == null) getMaxNumNetworkVehicles = (Function) native.GetObjectProperty("getMaxNumNetworkVehicles");
			return (int) getMaxNumNetworkVehicles.Call(native);
		}

		public int GetMaxNumNetworkPickups()
		{
			if (getMaxNumNetworkPickups == null) getMaxNumNetworkPickups = (Function) native.GetObjectProperty("getMaxNumNetworkPickups");
			return (int) getMaxNumNetworkPickups.Call(native);
		}

		public void _0xBA7F0B77D80A4EB7(object p0, object p1)
		{
			if (__0xBA7F0B77D80A4EB7 == null) __0xBA7F0B77D80A4EB7 = (Function) native.GetObjectProperty("_0xBA7F0B77D80A4EB7");
			__0xBA7F0B77D80A4EB7.Call(native, p0, p1);
		}

		public int GetNetworkTime()
		{
			if (getNetworkTime == null) getNetworkTime = (Function) native.GetObjectProperty("getNetworkTime");
			return (int) getNetworkTime.Call(native);
		}

		public int GetNetworkTimeAccurate()
		{
			if (getNetworkTimeAccurate == null) getNetworkTimeAccurate = (Function) native.GetObjectProperty("getNetworkTimeAccurate");
			return (int) getNetworkTimeAccurate.Call(native);
		}

		public bool HasNetworkTimeStarted()
		{
			if (hasNetworkTimeStarted == null) hasNetworkTimeStarted = (Function) native.GetObjectProperty("hasNetworkTimeStarted");
			return (bool) hasNetworkTimeStarted.Call(native);
		}

		/// <summary>
		/// Adds the first argument to the second.
		/// </summary>
		public int GetTimeOffset(int timeA, int timeB)
		{
			if (getTimeOffset == null) getTimeOffset = (Function) native.GetObjectProperty("getTimeOffset");
			return (int) getTimeOffset.Call(native, timeA, timeB);
		}

		/// <summary>
		/// </summary>
		/// <returns>Subtracts the second argument from the first, then returns whether the result is negative.</returns>
		public bool IsTimeLessThan(int timeA, int timeB)
		{
			if (isTimeLessThan == null) isTimeLessThan = (Function) native.GetObjectProperty("isTimeLessThan");
			return (bool) isTimeLessThan.Call(native, timeA, timeB);
		}

		/// <summary>
		/// </summary>
		/// <returns>Subtracts the first argument from the second, then returns whether the result is negative.</returns>
		public bool IsTimeMoreThan(int timeA, int timeB)
		{
			if (isTimeMoreThan == null) isTimeMoreThan = (Function) native.GetObjectProperty("isTimeMoreThan");
			return (bool) isTimeMoreThan.Call(native, timeA, timeB);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the two times are equal; otherwise returns false.</returns>
		public bool IsTimeEqualTo(int timeA, int timeB)
		{
			if (isTimeEqualTo == null) isTimeEqualTo = (Function) native.GetObjectProperty("isTimeEqualTo");
			return (bool) isTimeEqualTo.Call(native, timeA, timeB);
		}

		/// <summary>
		/// Subtracts the second argument from the first.
		/// </summary>
		public int GetTimeDifference(int timeA, int timeB)
		{
			if (getTimeDifference == null) getTimeDifference = (Function) native.GetObjectProperty("getTimeDifference");
			return (int) getTimeDifference.Call(native, timeA, timeB);
		}

		public string GetTimeAsString(int time)
		{
			if (getTimeAsString == null) getTimeAsString = (Function) native.GetObjectProperty("getTimeAsString");
			return (string) getTimeAsString.Call(native, time);
		}

		public object _0xF12E6CD06C73D69E()
		{
			if (__0xF12E6CD06C73D69E == null) __0xF12E6CD06C73D69E = (Function) native.GetObjectProperty("_0xF12E6CD06C73D69E");
			return __0xF12E6CD06C73D69E.Call(native);
		}

		public int GetCloudTimeAsInt()
		{
			if (getCloudTimeAsInt == null) getCloudTimeAsInt = (Function) native.GetObjectProperty("getCloudTimeAsInt");
			return (int) getCloudTimeAsInt.Call(native);
		}

		/// <summary>
		/// Takes the specified time and writes it to the structure specified in the second argument.
		/// struct date_time
		/// {
		/// int year;
		/// int PADDING1;
		/// int month;
		/// int PADDING2;
		/// int day;
		/// int PADDING3;
		/// See NativeDB for reference: http://natives.altv.mp/#/0xAC97AF97FA68E5D5
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) GetDateAndTimeFromUnixEpoch(int unixEpoch, object timeStructure)
		{
			if (getDateAndTimeFromUnixEpoch == null) getDateAndTimeFromUnixEpoch = (Function) native.GetObjectProperty("getDateAndTimeFromUnixEpoch");
			var results = (Array) getDateAndTimeFromUnixEpoch.Call(native, unixEpoch, timeStructure);
			return (results[0], results[1]);
		}

		public void NetworkSetInSpectatorMode(bool toggle, int playerPed)
		{
			if (networkSetInSpectatorMode == null) networkSetInSpectatorMode = (Function) native.GetObjectProperty("networkSetInSpectatorMode");
			networkSetInSpectatorMode.Call(native, toggle, playerPed);
		}

		public void NetworkSetInSpectatorModeExtended(bool toggle, int playerPed, bool p2)
		{
			if (networkSetInSpectatorModeExtended == null) networkSetInSpectatorModeExtended = (Function) native.GetObjectProperty("networkSetInSpectatorModeExtended");
			networkSetInSpectatorModeExtended.Call(native, toggle, playerPed, p2);
		}

		public void NetworkSetInFreeCamMode(bool toggle)
		{
			if (networkSetInFreeCamMode == null) networkSetInFreeCamMode = (Function) native.GetObjectProperty("networkSetInFreeCamMode");
			networkSetInFreeCamMode.Call(native, toggle);
		}

		/// <summary>
		/// NETWORK_SET_*
		/// </summary>
		public void _0x5C707A667DF8B9FA(bool toggle, int player)
		{
			if (__0x5C707A667DF8B9FA == null) __0x5C707A667DF8B9FA = (Function) native.GetObjectProperty("_0x5C707A667DF8B9FA");
			__0x5C707A667DF8B9FA.Call(native, toggle, player);
		}

		public bool NetworkIsInSpectatorMode()
		{
			if (networkIsInSpectatorMode == null) networkIsInSpectatorMode = (Function) native.GetObjectProperty("networkIsInSpectatorMode");
			return (bool) networkIsInSpectatorMode.Call(native);
		}

		public void NetworkSetInMpCutscene(bool p0, bool p1)
		{
			if (networkSetInMpCutscene == null) networkSetInMpCutscene = (Function) native.GetObjectProperty("networkSetInMpCutscene");
			networkSetInMpCutscene.Call(native, p0, p1);
		}

		public bool NetworkIsInMpCutscene()
		{
			if (networkIsInMpCutscene == null) networkIsInMpCutscene = (Function) native.GetObjectProperty("networkIsInMpCutscene");
			return (bool) networkIsInMpCutscene.Call(native);
		}

		public bool NetworkIsPlayerInMpCutscene(int player)
		{
			if (networkIsPlayerInMpCutscene == null) networkIsPlayerInMpCutscene = (Function) native.GetObjectProperty("networkIsPlayerInMpCutscene");
			return (bool) networkIsPlayerInMpCutscene.Call(native, player);
		}

		public void _0xFAC18E7356BD3210()
		{
			if (__0xFAC18E7356BD3210 == null) __0xFAC18E7356BD3210 = (Function) native.GetObjectProperty("_0xFAC18E7356BD3210");
			__0xFAC18E7356BD3210.Call(native);
		}

		public void SetNetworkVehicleRespotTimer(int netId, int time, object p2, object p3)
		{
			if (setNetworkVehicleRespotTimer == null) setNetworkVehicleRespotTimer = (Function) native.GetObjectProperty("setNetworkVehicleRespotTimer");
			setNetworkVehicleRespotTimer.Call(native, netId, time, p2, p3);
		}

		public void SetNetworkVehicleAsGhost(int vehicle, bool toggle)
		{
			if (setNetworkVehicleAsGhost == null) setNetworkVehicleAsGhost = (Function) native.GetObjectProperty("setNetworkVehicleAsGhost");
			setNetworkVehicleAsGhost.Call(native, vehicle, toggle);
		}

		public void _0xA2A707979FE754DC(object p0, object p1)
		{
			if (__0xA2A707979FE754DC == null) __0xA2A707979FE754DC = (Function) native.GetObjectProperty("_0xA2A707979FE754DC");
			__0xA2A707979FE754DC.Call(native, p0, p1);
		}

		public void _0x838DA0936A24ED4D(object p0, object p1)
		{
			if (__0x838DA0936A24ED4D == null) __0x838DA0936A24ED4D = (Function) native.GetObjectProperty("_0x838DA0936A24ED4D");
			__0x838DA0936A24ED4D.Call(native, p0, p1);
		}

		public void UsePlayerColourInsteadOfTeamColour(bool toggle, bool p1)
		{
			if (usePlayerColourInsteadOfTeamColour == null) usePlayerColourInsteadOfTeamColour = (Function) native.GetObjectProperty("usePlayerColourInsteadOfTeamColour");
			usePlayerColourInsteadOfTeamColour.Call(native, toggle, p1);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool _0x21D04D7BC538C146(int entity)
		{
			if (__0x21D04D7BC538C146 == null) __0x21D04D7BC538C146 = (Function) native.GetObjectProperty("_0x21D04D7BC538C146");
			return (bool) __0x21D04D7BC538C146.Call(native, entity);
		}

		/// <summary>
		/// SET_NETWORK_*
		/// </summary>
		public void _0x13F1FCB111B820B0(bool p0)
		{
			if (__0x13F1FCB111B820B0 == null) __0x13F1FCB111B820B0 = (Function) native.GetObjectProperty("_0x13F1FCB111B820B0");
			__0x13F1FCB111B820B0.Call(native, p0);
		}

		public void _0xA7C511FA1C5BDA38(object p0, object p1)
		{
			if (__0xA7C511FA1C5BDA38 == null) __0xA7C511FA1C5BDA38 = (Function) native.GetObjectProperty("_0xA7C511FA1C5BDA38");
			__0xA7C511FA1C5BDA38.Call(native, p0, p1);
		}

		public void _0x658500AE6D723A7E(object p0)
		{
			if (__0x658500AE6D723A7E == null) __0x658500AE6D723A7E = (Function) native.GetObjectProperty("_0x658500AE6D723A7E");
			__0x658500AE6D723A7E.Call(native, p0);
		}

		public void _0x17330EBF2F2124A8()
		{
			if (__0x17330EBF2F2124A8 == null) __0x17330EBF2F2124A8 = (Function) native.GetObjectProperty("_0x17330EBF2F2124A8");
			__0x17330EBF2F2124A8.Call(native);
		}

		public void _0x4BA166079D658ED4(object p0, object p1)
		{
			if (__0x4BA166079D658ED4 == null) __0x4BA166079D658ED4 = (Function) native.GetObjectProperty("_0x4BA166079D658ED4");
			__0x4BA166079D658ED4.Call(native, p0, p1);
		}

		public void _0xD7B6C73CAD419BCF(bool p0)
		{
			if (__0xD7B6C73CAD419BCF == null) __0xD7B6C73CAD419BCF = (Function) native.GetObjectProperty("_0xD7B6C73CAD419BCF");
			__0xD7B6C73CAD419BCF.Call(native, p0);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool _0x7EF7649B64D7FF10(int entity)
		{
			if (__0x7EF7649B64D7FF10 == null) __0x7EF7649B64D7FF10 = (Function) native.GetObjectProperty("_0x7EF7649B64D7FF10");
			return (bool) __0x7EF7649B64D7FF10.Call(native, entity);
		}

		public void _0x77758139EC9B66C7(bool p0)
		{
			if (__0x77758139EC9B66C7 == null) __0x77758139EC9B66C7 = (Function) native.GetObjectProperty("_0x77758139EC9B66C7");
			__0x77758139EC9B66C7.Call(native, p0);
		}

		public int NetworkCreateSynchronisedScene(double x, double y, double z, double xRot, double yRot, double zRot, int p6, bool p7, bool p8, double p9, double p10, double p11)
		{
			if (networkCreateSynchronisedScene == null) networkCreateSynchronisedScene = (Function) native.GetObjectProperty("networkCreateSynchronisedScene");
			return (int) networkCreateSynchronisedScene.Call(native, x, y, z, xRot, yRot, zRot, p6, p7, p8, p9, p10, p11);
		}

		public void NetworkAddPedToSynchronisedScene(int ped, int netScene, string animDict, string animnName, double speed, double speedMultiplier, int duration, int flag, double playbackRate, object p9)
		{
			if (networkAddPedToSynchronisedScene == null) networkAddPedToSynchronisedScene = (Function) native.GetObjectProperty("networkAddPedToSynchronisedScene");
			networkAddPedToSynchronisedScene.Call(native, ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9);
		}

		public void _0xA5EAFE473E45C442(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (__0xA5EAFE473E45C442 == null) __0xA5EAFE473E45C442 = (Function) native.GetObjectProperty("_0xA5EAFE473E45C442");
			__0xA5EAFE473E45C442.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		public void NetworkAddEntityToSynchronisedScene(int entity, int netScene, string animDict, string animName, double speed, double speedMulitiplier, int flag)
		{
			if (networkAddEntityToSynchronisedScene == null) networkAddEntityToSynchronisedScene = (Function) native.GetObjectProperty("networkAddEntityToSynchronisedScene");
			networkAddEntityToSynchronisedScene.Call(native, entity, netScene, animDict, animName, speed, speedMulitiplier, flag);
		}

		/// <summary>
		/// NETWORK_A*
		/// </summary>
		public void _0x45F35C0EDC33B03B(int netScene, int modelHash, double x, double y, double z, double p5, string p6, double p7, double p8, int flags)
		{
			if (__0x45F35C0EDC33B03B == null) __0x45F35C0EDC33B03B = (Function) native.GetObjectProperty("_0x45F35C0EDC33B03B");
			__0x45F35C0EDC33B03B.Call(native, netScene, modelHash, x, y, z, p5, p6, p7, p8, flags);
		}

		public void NetworkForceLocalUseOfSyncedSceneCamera(int netScene, string animDict, string animName)
		{
			if (networkForceLocalUseOfSyncedSceneCamera == null) networkForceLocalUseOfSyncedSceneCamera = (Function) native.GetObjectProperty("networkForceLocalUseOfSyncedSceneCamera");
			networkForceLocalUseOfSyncedSceneCamera.Call(native, netScene, animDict, animName);
		}

		public void NetworkAttachSynchronisedSceneToEntity(int netScene, int entity, int bone)
		{
			if (networkAttachSynchronisedSceneToEntity == null) networkAttachSynchronisedSceneToEntity = (Function) native.GetObjectProperty("networkAttachSynchronisedSceneToEntity");
			networkAttachSynchronisedSceneToEntity.Call(native, netScene, entity, bone);
		}

		public void NetworkStartSynchronisedScene(int netScene)
		{
			if (networkStartSynchronisedScene == null) networkStartSynchronisedScene = (Function) native.GetObjectProperty("networkStartSynchronisedScene");
			networkStartSynchronisedScene.Call(native, netScene);
		}

		public void NetworkStopSynchronisedScene(int netScene)
		{
			if (networkStopSynchronisedScene == null) networkStopSynchronisedScene = (Function) native.GetObjectProperty("networkStopSynchronisedScene");
			networkStopSynchronisedScene.Call(native, netScene);
		}

		/// <summary>
		/// netScene to scene
		/// </summary>
		/// <param name="netScene">to scene</param>
		public int NetworkConvertSynchronisedSceneToSynchronizedScene(int netScene)
		{
			if (networkConvertSynchronisedSceneToSynchronizedScene == null) networkConvertSynchronisedSceneToSynchronizedScene = (Function) native.GetObjectProperty("networkConvertSynchronisedSceneToSynchronizedScene");
			return (int) networkConvertSynchronisedSceneToSynchronizedScene.Call(native, netScene);
		}

		public void _0xC9B43A33D09CADA7(object p0)
		{
			if (__0xC9B43A33D09CADA7 == null) __0xC9B43A33D09CADA7 = (Function) native.GetObjectProperty("_0xC9B43A33D09CADA7");
			__0xC9B43A33D09CADA7.Call(native, p0);
		}

		public void _0x144DA052257AE7D8(object p0)
		{
			if (__0x144DA052257AE7D8 == null) __0x144DA052257AE7D8 = (Function) native.GetObjectProperty("_0x144DA052257AE7D8");
			__0x144DA052257AE7D8.Call(native, p0);
		}

		/// <summary>
		/// p0 is always 0. p1 is pointing to a global.
		/// </summary>
		/// <param name="p0">is always 0. p1 is pointing to a global.</param>
		public object _0xFB1F9381E80FA13F(int p0, object p1)
		{
			if (__0xFB1F9381E80FA13F == null) __0xFB1F9381E80FA13F = (Function) native.GetObjectProperty("_0xFB1F9381E80FA13F");
			return __0xFB1F9381E80FA13F.Call(native, p0, p1);
		}

		public bool NetworkStartRespawnSearchForPlayer(int player, double p1, double p2, double p3, double p4, double p5, double p6, double p7, int flags)
		{
			if (networkStartRespawnSearchForPlayer == null) networkStartRespawnSearchForPlayer = (Function) native.GetObjectProperty("networkStartRespawnSearchForPlayer");
			return (bool) networkStartRespawnSearchForPlayer.Call(native, player, p1, p2, p3, p4, p5, p6, p7, flags);
		}

		public bool NetworkStartRespawnSearchInAngledAreaForPlayer(int player, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, int flags)
		{
			if (networkStartRespawnSearchInAngledAreaForPlayer == null) networkStartRespawnSearchInAngledAreaForPlayer = (Function) native.GetObjectProperty("networkStartRespawnSearchInAngledAreaForPlayer");
			return (bool) networkStartRespawnSearchInAngledAreaForPlayer.Call(native, player, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, flags);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) NetworkQueryRespawnResults(object p0)
		{
			if (networkQueryRespawnResults == null) networkQueryRespawnResults = (Function) native.GetObjectProperty("networkQueryRespawnResults");
			var results = (Array) networkQueryRespawnResults.Call(native, p0);
			return (results[0], results[1]);
		}

		public void NetworkCancelRespawnSearch()
		{
			if (networkCancelRespawnSearch == null) networkCancelRespawnSearch = (Function) native.GetObjectProperty("networkCancelRespawnSearch");
			networkCancelRespawnSearch.Call(native);
		}

		/// <summary>
		/// Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
		/// </summary>
		/// <returns>Array<void, Vector3, double></returns>
		public (object, Vector3, double) NetworkGetRespawnResult(int randomInt, Vector3 coordinates, double heading)
		{
			if (networkGetRespawnResult == null) networkGetRespawnResult = (Function) native.GetObjectProperty("networkGetRespawnResult");
			var results = (Array) networkGetRespawnResult.Call(native, randomInt, coordinates, heading);
			return (results[0], JSObjectToVector3(results[1]), (double) results[2]);
		}

		public object NetworkGetRespawnResultFlags(object p0)
		{
			if (networkGetRespawnResultFlags == null) networkGetRespawnResultFlags = (Function) native.GetObjectProperty("networkGetRespawnResultFlags");
			return networkGetRespawnResultFlags.Call(native, p0);
		}

		public void NetworkStartSoloTutorialSession()
		{
			if (networkStartSoloTutorialSession == null) networkStartSoloTutorialSession = (Function) native.GetObjectProperty("networkStartSoloTutorialSession");
			networkStartSoloTutorialSession.Call(native);
		}

		public void _0xFB680D403909DC70(object p0, object p1)
		{
			if (__0xFB680D403909DC70 == null) __0xFB680D403909DC70 = (Function) native.GetObjectProperty("_0xFB680D403909DC70");
			__0xFB680D403909DC70.Call(native, p0, p1);
		}

		public void NetworkEndTutorialSession()
		{
			if (networkEndTutorialSession == null) networkEndTutorialSession = (Function) native.GetObjectProperty("networkEndTutorialSession");
			networkEndTutorialSession.Call(native);
		}

		public bool NetworkIsInTutorialSession()
		{
			if (networkIsInTutorialSession == null) networkIsInTutorialSession = (Function) native.GetObjectProperty("networkIsInTutorialSession");
			return (bool) networkIsInTutorialSession.Call(native);
		}

		public bool _0xB37E4E6A2388CA7B()
		{
			if (__0xB37E4E6A2388CA7B == null) __0xB37E4E6A2388CA7B = (Function) native.GetObjectProperty("_0xB37E4E6A2388CA7B");
			return (bool) __0xB37E4E6A2388CA7B.Call(native);
		}

		public bool NetworkIsTutorialSessionChangePending()
		{
			if (networkIsTutorialSessionChangePending == null) networkIsTutorialSessionChangePending = (Function) native.GetObjectProperty("networkIsTutorialSessionChangePending");
			return (bool) networkIsTutorialSessionChangePending.Call(native);
		}

		public int NetworkGetPlayerTutorialSessionInstance(int player)
		{
			if (networkGetPlayerTutorialSessionInstance == null) networkGetPlayerTutorialSessionInstance = (Function) native.GetObjectProperty("networkGetPlayerTutorialSessionInstance");
			return (int) networkGetPlayerTutorialSessionInstance.Call(native, player);
		}

		/// <summary>
		/// NETWORK_ARE_*
		/// </summary>
		public bool NetworkIsPlayerEqualToIndex(int player, int index)
		{
			if (networkIsPlayerEqualToIndex == null) networkIsPlayerEqualToIndex = (Function) native.GetObjectProperty("networkIsPlayerEqualToIndex");
			return (bool) networkIsPlayerEqualToIndex.Call(native, player, index);
		}

		public void NetworkConcealPlayer(int player, bool toggle, bool p2)
		{
			if (networkConcealPlayer == null) networkConcealPlayer = (Function) native.GetObjectProperty("networkConcealPlayer");
			networkConcealPlayer.Call(native, player, toggle, p2);
		}

		public bool NetworkIsPlayerConcealed(int player)
		{
			if (networkIsPlayerConcealed == null) networkIsPlayerConcealed = (Function) native.GetObjectProperty("networkIsPlayerConcealed");
			return (bool) networkIsPlayerConcealed.Call(native, player);
		}

		public void NetworkConcealEntity(int entity, bool toggle)
		{
			if (networkConcealEntity == null) networkConcealEntity = (Function) native.GetObjectProperty("networkConcealEntity");
			networkConcealEntity.Call(native, entity, toggle);
		}

		/// <summary>
		/// Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
		/// </summary>
		public bool NetworkIsEntityConcealed(int entity)
		{
			if (networkIsEntityConcealed == null) networkIsEntityConcealed = (Function) native.GetObjectProperty("networkIsEntityConcealed");
			return (bool) networkIsEntityConcealed.Call(native, entity);
		}

		/// <summary>
		/// Works in Singleplayer too.
		/// </summary>
		public void NetworkOverrideClockTime(int Hours, int Minutes, int Seconds)
		{
			if (networkOverrideClockTime == null) networkOverrideClockTime = (Function) native.GetObjectProperty("networkOverrideClockTime");
			networkOverrideClockTime.Call(native, Hours, Minutes, Seconds);
		}

		public void NetworkClearClockTimeOverride()
		{
			if (networkClearClockTimeOverride == null) networkClearClockTimeOverride = (Function) native.GetObjectProperty("networkClearClockTimeOverride");
			networkClearClockTimeOverride.Call(native);
		}

		public bool NetworkIsClockTimeOverridden()
		{
			if (networkIsClockTimeOverridden == null) networkIsClockTimeOverridden = (Function) native.GetObjectProperty("networkIsClockTimeOverridden");
			return (bool) networkIsClockTimeOverridden.Call(native);
		}

		public object NetworkAddEntityArea(double p0, double p1, double p2, double p3, double p4, double p5)
		{
			if (networkAddEntityArea == null) networkAddEntityArea = (Function) native.GetObjectProperty("networkAddEntityArea");
			return networkAddEntityArea.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public object NetworkAddEntityAngledArea(double p0, double p1, double p2, double p3, double p4, double p5, double p6)
		{
			if (networkAddEntityAngledArea == null) networkAddEntityAngledArea = (Function) native.GetObjectProperty("networkAddEntityAngledArea");
			return networkAddEntityAngledArea.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public object NetworkAddEntityDisplayedBoundaries(double p0, double p1, double p2, double p3, double p4, double p5)
		{
			if (networkAddEntityDisplayedBoundaries == null) networkAddEntityDisplayedBoundaries = (Function) native.GetObjectProperty("networkAddEntityDisplayedBoundaries");
			return networkAddEntityDisplayedBoundaries.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public object _0x2B1C623823DB0D9D(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0x2B1C623823DB0D9D == null) __0x2B1C623823DB0D9D = (Function) native.GetObjectProperty("_0x2B1C623823DB0D9D");
			return __0x2B1C623823DB0D9D.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public bool NetworkRemoveEntityArea(object p0)
		{
			if (networkRemoveEntityArea == null) networkRemoveEntityArea = (Function) native.GetObjectProperty("networkRemoveEntityArea");
			return (bool) networkRemoveEntityArea.Call(native, p0);
		}

		public bool NetworkEntityAreaDoesExist(object p0)
		{
			if (networkEntityAreaDoesExist == null) networkEntityAreaDoesExist = (Function) native.GetObjectProperty("networkEntityAreaDoesExist");
			return (bool) networkEntityAreaDoesExist.Call(native, p0);
		}

		public bool _0x4DF7CFFF471A7FB1(object p0)
		{
			if (__0x4DF7CFFF471A7FB1 == null) __0x4DF7CFFF471A7FB1 = (Function) native.GetObjectProperty("_0x4DF7CFFF471A7FB1");
			return (bool) __0x4DF7CFFF471A7FB1.Call(native, p0);
		}

		public bool NetworkEntityAreaIsOccupied(object p0)
		{
			if (networkEntityAreaIsOccupied == null) networkEntityAreaIsOccupied = (Function) native.GetObjectProperty("networkEntityAreaIsOccupied");
			return (bool) networkEntityAreaIsOccupied.Call(native, p0);
		}

		public void NetworkSetNetworkIdDynamic(int netID, bool toggle)
		{
			if (networkSetNetworkIdDynamic == null) networkSetNetworkIdDynamic = (Function) native.GetObjectProperty("networkSetNetworkIdDynamic");
			networkSetNetworkIdDynamic.Call(native, netID, toggle);
		}

		public void _0xA6FCECCF4721D679(object p0)
		{
			if (__0xA6FCECCF4721D679 == null) __0xA6FCECCF4721D679 = (Function) native.GetObjectProperty("_0xA6FCECCF4721D679");
			__0xA6FCECCF4721D679.Call(native, p0);
		}

		public void _0x95BAF97C82464629(object p0, object p1)
		{
			if (__0x95BAF97C82464629 == null) __0x95BAF97C82464629 = (Function) native.GetObjectProperty("_0x95BAF97C82464629");
			__0x95BAF97C82464629.Call(native, p0, p1);
		}

		public bool NetworkRequestCloudBackgroundScripts()
		{
			if (networkRequestCloudBackgroundScripts == null) networkRequestCloudBackgroundScripts = (Function) native.GetObjectProperty("networkRequestCloudBackgroundScripts");
			return (bool) networkRequestCloudBackgroundScripts.Call(native);
		}

		public bool NetworkIsCloudBackgroundScriptsRequestPending()
		{
			if (networkIsCloudBackgroundScriptsRequestPending == null) networkIsCloudBackgroundScriptsRequestPending = (Function) native.GetObjectProperty("networkIsCloudBackgroundScriptsRequestPending");
			return (bool) networkIsCloudBackgroundScriptsRequestPending.Call(native);
		}

		public void NetworkRequestCloudTunables()
		{
			if (networkRequestCloudTunables == null) networkRequestCloudTunables = (Function) native.GetObjectProperty("networkRequestCloudTunables");
			networkRequestCloudTunables.Call(native);
		}

		public bool NetworkIsTunableCloudRequestPending()
		{
			if (networkIsTunableCloudRequestPending == null) networkIsTunableCloudRequestPending = (Function) native.GetObjectProperty("networkIsTunableCloudRequestPending");
			return (bool) networkIsTunableCloudRequestPending.Call(native);
		}

		public int NetworkGetTunableCloudCrc()
		{
			if (networkGetTunableCloudCrc == null) networkGetTunableCloudCrc = (Function) native.GetObjectProperty("networkGetTunableCloudCrc");
			return (int) networkGetTunableCloudCrc.Call(native);
		}

		public bool NetworkDoesTunableExist(string tunableContext, string tunableName)
		{
			if (networkDoesTunableExist == null) networkDoesTunableExist = (Function) native.GetObjectProperty("networkDoesTunableExist");
			return (bool) networkDoesTunableExist.Call(native, tunableContext, tunableName);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkAccessTunableInt(string tunableContext, string tunableName, int value)
		{
			if (networkAccessTunableInt == null) networkAccessTunableInt = (Function) native.GetObjectProperty("networkAccessTunableInt");
			var results = (Array) networkAccessTunableInt.Call(native, tunableContext, tunableName, value);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) NetworkAccessTunableFloat(string tunableContext, string tunableName, double value)
		{
			if (networkAccessTunableFloat == null) networkAccessTunableFloat = (Function) native.GetObjectProperty("networkAccessTunableFloat");
			var results = (Array) networkAccessTunableFloat.Call(native, tunableContext, tunableName, value);
			return ((bool) results[0], (double) results[1]);
		}

		public bool NetworkAccessTunableBool(string tunableContext, string tunableName)
		{
			if (networkAccessTunableBool == null) networkAccessTunableBool = (Function) native.GetObjectProperty("networkAccessTunableBool");
			return (bool) networkAccessTunableBool.Call(native, tunableContext, tunableName);
		}

		public bool NetworkDoesTunableExistHash(int tunableContext, int tunableName)
		{
			if (networkDoesTunableExistHash == null) networkDoesTunableExistHash = (Function) native.GetObjectProperty("networkDoesTunableExistHash");
			return (bool) networkDoesTunableExistHash.Call(native, tunableContext, tunableName);
		}

		public bool NetworkAllocateTunablesRegistrationDataMap()
		{
			if (networkAllocateTunablesRegistrationDataMap == null) networkAllocateTunablesRegistrationDataMap = (Function) native.GetObjectProperty("networkAllocateTunablesRegistrationDataMap");
			return (bool) networkAllocateTunablesRegistrationDataMap.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkAccessTunableIntHash(int tunableContext, int tunableName, int value)
		{
			if (networkAccessTunableIntHash == null) networkAccessTunableIntHash = (Function) native.GetObjectProperty("networkAccessTunableIntHash");
			var results = (Array) networkAccessTunableIntHash.Call(native, tunableContext, tunableName, value);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) NetworkRegisterTunableIntHash(int contextHash, int nameHash, int value)
		{
			if (networkRegisterTunableIntHash == null) networkRegisterTunableIntHash = (Function) native.GetObjectProperty("networkRegisterTunableIntHash");
			var results = (Array) networkRegisterTunableIntHash.Call(native, contextHash, nameHash, value);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) NetworkAccessTunableFloatHash(int tunableContext, int tunableName, double value)
		{
			if (networkAccessTunableFloatHash == null) networkAccessTunableFloatHash = (Function) native.GetObjectProperty("networkAccessTunableFloatHash");
			var results = (Array) networkAccessTunableFloatHash.Call(native, tunableContext, tunableName, value);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) NetworkRegisterTunableFloatHash(int contextHash, int nameHash, double value)
		{
			if (networkRegisterTunableFloatHash == null) networkRegisterTunableFloatHash = (Function) native.GetObjectProperty("networkRegisterTunableFloatHash");
			var results = (Array) networkRegisterTunableFloatHash.Call(native, contextHash, nameHash, value);
			return ((bool) results[0], (double) results[1]);
		}

		public bool NetworkAccessTunableBoolHash(int tunableContext, int tunableName)
		{
			if (networkAccessTunableBoolHash == null) networkAccessTunableBoolHash = (Function) native.GetObjectProperty("networkAccessTunableBoolHash");
			return (bool) networkAccessTunableBoolHash.Call(native, tunableContext, tunableName);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, bool></returns>
		public (bool, bool) NetworkRegisterTunableBoolHash(int contextHash, int nameHash, bool value)
		{
			if (networkRegisterTunableBoolHash == null) networkRegisterTunableBoolHash = (Function) native.GetObjectProperty("networkRegisterTunableBoolHash");
			var results = (Array) networkRegisterTunableBoolHash.Call(native, contextHash, nameHash, value);
			return ((bool) results[0], (bool) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns defaultValue if the tunable doesn't exist.</returns>
		public bool NetworkTryAccessTunableBoolHash(int tunableContext, int tunableName, bool defaultValue)
		{
			if (networkTryAccessTunableBoolHash == null) networkTryAccessTunableBoolHash = (Function) native.GetObjectProperty("networkTryAccessTunableBoolHash");
			return (bool) networkTryAccessTunableBoolHash.Call(native, tunableContext, tunableName, defaultValue);
		}

		/// <summary>
		/// Return the content modifier id (the tunables context if you want) of a specific content.
		/// It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
		/// The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
		/// 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
		/// </summary>
		public int NetworkGetContentModifierListId(int contentHash)
		{
			if (networkGetContentModifierListId == null) networkGetContentModifierListId = (Function) native.GetObjectProperty("networkGetContentModifierListId");
			return (int) networkGetContentModifierListId.Call(native, contentHash);
		}

		public int _0x7DB53B37A2F211A0()
		{
			if (__0x7DB53B37A2F211A0 == null) __0x7DB53B37A2F211A0 = (Function) native.GetObjectProperty("_0x7DB53B37A2F211A0");
			return (int) __0x7DB53B37A2F211A0.Call(native);
		}

		public void NetworkResetBodyTracker()
		{
			if (networkResetBodyTracker == null) networkResetBodyTracker = (Function) native.GetObjectProperty("networkResetBodyTracker");
			networkResetBodyTracker.Call(native);
		}

		public int NetworkGetNumBodyTrackers()
		{
			if (networkGetNumBodyTrackers == null) networkGetNumBodyTrackers = (Function) native.GetObjectProperty("networkGetNumBodyTrackers");
			return (int) networkGetNumBodyTrackers.Call(native);
		}

		public bool _0x2E0BF682CC778D49(object p0)
		{
			if (__0x2E0BF682CC778D49 == null) __0x2E0BF682CC778D49 = (Function) native.GetObjectProperty("_0x2E0BF682CC778D49");
			return (bool) __0x2E0BF682CC778D49.Call(native, p0);
		}

		public bool _0x0EDE326D47CD0F3E(int ped, int player)
		{
			if (__0x0EDE326D47CD0F3E == null) __0x0EDE326D47CD0F3E = (Function) native.GetObjectProperty("_0x0EDE326D47CD0F3E");
			return (bool) __0x0EDE326D47CD0F3E.Call(native, ped, player);
		}

		public void NetworkSetVehicleWheelsDestructible(object p0, object p1)
		{
			if (networkSetVehicleWheelsDestructible == null) networkSetVehicleWheelsDestructible = (Function) native.GetObjectProperty("networkSetVehicleWheelsDestructible");
			networkSetVehicleWheelsDestructible.Call(native, p0, p1);
		}

		public void _0x38B7C51AB1EDC7D8(int entity, bool toggle)
		{
			if (__0x38B7C51AB1EDC7D8 == null) __0x38B7C51AB1EDC7D8 = (Function) native.GetObjectProperty("_0x38B7C51AB1EDC7D8");
			__0x38B7C51AB1EDC7D8.Call(native, entity, toggle);
		}

		/// <summary>
		/// In the console script dumps, this is only referenced once.
		/// NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);
		/// ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
		/// Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
		/// am_plane_takedown.c
		/// network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
		/// armenian2.c
		/// network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
		/// fm_horde_controler.c
		/// See NativeDB for reference: http://natives.altv.mp/#/0x301A42153C9AD707
		/// </summary>
		public void NetworkExplodeVehicle(int vehicle, bool isAudible, bool isInvisible, bool p3)
		{
			if (networkExplodeVehicle == null) networkExplodeVehicle = (Function) native.GetObjectProperty("networkExplodeVehicle");
			networkExplodeVehicle.Call(native, vehicle, isAudible, isInvisible, p3);
		}

		public void _0x2A5E0621DD815A9A(object p0, object p1, object p2, object p3)
		{
			if (__0x2A5E0621DD815A9A == null) __0x2A5E0621DD815A9A = (Function) native.GetObjectProperty("_0x2A5E0621DD815A9A");
			__0x2A5E0621DD815A9A.Call(native, p0, p1, p2, p3);
		}

		public void _0xCD71A4ECAB22709E(int entity)
		{
			if (__0xCD71A4ECAB22709E == null) __0xCD71A4ECAB22709E = (Function) native.GetObjectProperty("_0xCD71A4ECAB22709E");
			__0xCD71A4ECAB22709E.Call(native, entity);
		}

		public void NetworkOverrideCoordsAndHeading(int ped, double x, double y, double z, double heading)
		{
			if (networkOverrideCoordsAndHeading == null) networkOverrideCoordsAndHeading = (Function) native.GetObjectProperty("networkOverrideCoordsAndHeading");
			networkOverrideCoordsAndHeading.Call(native, ped, x, y, z, heading);
		}

		public void _0xE6717E652B8C8D8A(object p0, object p1)
		{
			if (__0xE6717E652B8C8D8A == null) __0xE6717E652B8C8D8A = (Function) native.GetObjectProperty("_0xE6717E652B8C8D8A");
			__0xE6717E652B8C8D8A.Call(native, p0, p1);
		}

		public void NetworkDisableProximityMigration(int netID)
		{
			if (networkDisableProximityMigration == null) networkDisableProximityMigration = (Function) native.GetObjectProperty("networkDisableProximityMigration");
			networkDisableProximityMigration.Call(native, netID);
		}

		/// <summary>
		/// value must be < 255
		/// </summary>
		public void NetworkSetPropertyId(int id)
		{
			if (networkSetPropertyId == null) networkSetPropertyId = (Function) native.GetObjectProperty("networkSetPropertyId");
			networkSetPropertyId.Call(native, id);
		}

		public void NetworkClearPropertyId()
		{
			if (networkClearPropertyId == null) networkClearPropertyId = (Function) native.GetObjectProperty("networkClearPropertyId");
			networkClearPropertyId.Call(native);
		}

		public void _0x367EF5E2F439B4C6(int p0)
		{
			if (__0x367EF5E2F439B4C6 == null) __0x367EF5E2F439B4C6 = (Function) native.GetObjectProperty("_0x367EF5E2F439B4C6");
			__0x367EF5E2F439B4C6.Call(native, p0);
		}

		public void _0x94538037EE44F5CF(bool p0)
		{
			if (__0x94538037EE44F5CF == null) __0x94538037EE44F5CF = (Function) native.GetObjectProperty("_0x94538037EE44F5CF");
			__0x94538037EE44F5CF.Call(native, p0);
		}

		public void NetworkCacheLocalPlayerHeadBlendData()
		{
			if (networkCacheLocalPlayerHeadBlendData == null) networkCacheLocalPlayerHeadBlendData = (Function) native.GetObjectProperty("networkCacheLocalPlayerHeadBlendData");
			networkCacheLocalPlayerHeadBlendData.Call(native);
		}

		public bool NetworkHasCachedPlayerHeadBlendData(int player)
		{
			if (networkHasCachedPlayerHeadBlendData == null) networkHasCachedPlayerHeadBlendData = (Function) native.GetObjectProperty("networkHasCachedPlayerHeadBlendData");
			return (bool) networkHasCachedPlayerHeadBlendData.Call(native, player);
		}

		public bool NetworkApplyCachedPlayerHeadBlendData(int ped, int player)
		{
			if (networkApplyCachedPlayerHeadBlendData == null) networkApplyCachedPlayerHeadBlendData = (Function) native.GetObjectProperty("networkApplyCachedPlayerHeadBlendData");
			return (bool) networkApplyCachedPlayerHeadBlendData.Call(native, ped, player);
		}

		public int GetNumCommerceItems()
		{
			if (getNumCommerceItems == null) getNumCommerceItems = (Function) native.GetObjectProperty("getNumCommerceItems");
			return (int) getNumCommerceItems.Call(native);
		}

		public bool IsCommerceDataValid()
		{
			if (isCommerceDataValid == null) isCommerceDataValid = (Function) native.GetObjectProperty("isCommerceDataValid");
			return (bool) isCommerceDataValid.Call(native);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0xB606E6CC59664972(object p0)
		{
			if (__0xB606E6CC59664972 == null) __0xB606E6CC59664972 = (Function) native.GetObjectProperty("_0xB606E6CC59664972");
			__0xB606E6CC59664972.Call(native, p0);
		}

		/// <summary>
		/// IS_COMMERCE_*
		/// </summary>
		public bool _0x1D4DC17C38FEAFF0()
		{
			if (__0x1D4DC17C38FEAFF0 == null) __0x1D4DC17C38FEAFF0 = (Function) native.GetObjectProperty("_0x1D4DC17C38FEAFF0");
			return (bool) __0x1D4DC17C38FEAFF0.Call(native);
		}

		public string GetCommerceItemId(int index)
		{
			if (getCommerceItemId == null) getCommerceItemId = (Function) native.GetObjectProperty("getCommerceItemId");
			return (string) getCommerceItemId.Call(native, index);
		}

		public string GetCommerceItemName(int index)
		{
			if (getCommerceItemName == null) getCommerceItemName = (Function) native.GetObjectProperty("getCommerceItemName");
			return (string) getCommerceItemName.Call(native, index);
		}

		public string GetCommerceProductPrice(int index)
		{
			if (getCommerceProductPrice == null) getCommerceProductPrice = (Function) native.GetObjectProperty("getCommerceProductPrice");
			return (string) getCommerceProductPrice.Call(native, index);
		}

		public int GetCommerceItemNumCats(int index)
		{
			if (getCommerceItemNumCats == null) getCommerceItemNumCats = (Function) native.GetObjectProperty("getCommerceItemNumCats");
			return (int) getCommerceItemNumCats.Call(native, index);
		}

		/// <summary>
		/// index2 is unused
		/// </summary>
		/// <param name="index2">is unused</param>
		public string GetCommerceItemCat(int index, int index2)
		{
			if (getCommerceItemCat == null) getCommerceItemCat = (Function) native.GetObjectProperty("getCommerceItemCat");
			return (string) getCommerceItemCat.Call(native, index, index2);
		}

		public void _0x58C21165F6545892(string p0, string p1, int p2)
		{
			if (__0x58C21165F6545892 == null) __0x58C21165F6545892 = (Function) native.GetObjectProperty("_0x58C21165F6545892");
			__0x58C21165F6545892.Call(native, p0, p1, p2);
		}

		public bool IsCommerceStoreOpen()
		{
			if (isCommerceStoreOpen == null) isCommerceStoreOpen = (Function) native.GetObjectProperty("isCommerceStoreOpen");
			return (bool) isCommerceStoreOpen.Call(native);
		}

		/// <summary>
		/// Access to the store for shark cards etc...
		/// </summary>
		public void SetStoreEnabled(bool toggle)
		{
			if (setStoreEnabled == null) setStoreEnabled = (Function) native.GetObjectProperty("setStoreEnabled");
			setStoreEnabled.Call(native, toggle);
		}

		public bool RequestCommerceItemImage(int index)
		{
			if (requestCommerceItemImage == null) requestCommerceItemImage = (Function) native.GetObjectProperty("requestCommerceItemImage");
			return (bool) requestCommerceItemImage.Call(native, index);
		}

		public void ReleaseAllCommerceItemImages()
		{
			if (releaseAllCommerceItemImages == null) releaseAllCommerceItemImages = (Function) native.GetObjectProperty("releaseAllCommerceItemImages");
			releaseAllCommerceItemImages.Call(native);
		}

		public object _0x722F5D28B61C5EA8(object p0)
		{
			if (__0x722F5D28B61C5EA8 == null) __0x722F5D28B61C5EA8 = (Function) native.GetObjectProperty("_0x722F5D28B61C5EA8");
			return __0x722F5D28B61C5EA8.Call(native, p0);
		}

		public bool IsStoreAvailableToUser()
		{
			if (isStoreAvailableToUser == null) isStoreAvailableToUser = (Function) native.GetObjectProperty("isStoreAvailableToUser");
			return (bool) isStoreAvailableToUser.Call(native);
		}

		public void _0x265635150FB0D82E()
		{
			if (__0x265635150FB0D82E == null) __0x265635150FB0D82E = (Function) native.GetObjectProperty("_0x265635150FB0D82E");
			__0x265635150FB0D82E.Call(native);
		}

		/// <summary>
		/// RESET_*
		/// sfink: related to: NETWORK_BAIL
		/// NETWORK_BAIL_TRANSITION
		/// NETWORK_JOIN_GROUP_ACTIVITY
		/// NETWORK_JOIN_TRANSITION
		/// NETWORK_LAUNCH_TRANSITION
		/// NETWORK_SESSION_HOST
		/// NETWORK_SESSION_HOST_CLOSED
		/// NETWORK_SESSION_HOST_FRIENDS_ONLY
		/// See NativeDB for reference: http://natives.altv.mp/#/0x444C4525ECE0A4B9
		/// </summary>
		public void _0x444C4525ECE0A4B9()
		{
			if (__0x444C4525ECE0A4B9 == null) __0x444C4525ECE0A4B9 = (Function) native.GetObjectProperty("_0x444C4525ECE0A4B9");
			__0x444C4525ECE0A4B9.Call(native);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool _0x59328EB08C5CEB2B()
		{
			if (__0x59328EB08C5CEB2B == null) __0x59328EB08C5CEB2B = (Function) native.GetObjectProperty("_0x59328EB08C5CEB2B");
			return (bool) __0x59328EB08C5CEB2B.Call(native);
		}

		public void _0xFAE628F1E9ADB239(int p0, int p1, int p2)
		{
			if (__0xFAE628F1E9ADB239 == null) __0xFAE628F1E9ADB239 = (Function) native.GetObjectProperty("_0xFAE628F1E9ADB239");
			__0xFAE628F1E9ADB239.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// Checks some commerce stuff
		/// </summary>
		public int _0x754615490A029508()
		{
			if (__0x754615490A029508 == null) __0x754615490A029508 = (Function) native.GetObjectProperty("_0x754615490A029508");
			return (int) __0x754615490A029508.Call(native);
		}

		/// <summary>
		/// Checks some commerce stuff
		/// </summary>
		public int _0x155467ACA0F55705()
		{
			if (__0x155467ACA0F55705 == null) __0x155467ACA0F55705 = (Function) native.GetObjectProperty("_0x155467ACA0F55705");
			return (int) __0x155467ACA0F55705.Call(native);
		}

		public int CloudDeleteMemberFile(string p0)
		{
			if (cloudDeleteMemberFile == null) cloudDeleteMemberFile = (Function) native.GetObjectProperty("cloudDeleteMemberFile");
			return (int) cloudDeleteMemberFile.Call(native, p0);
		}

		public bool CloudHasRequestCompleted(object p0)
		{
			if (cloudHasRequestCompleted == null) cloudHasRequestCompleted = (Function) native.GetObjectProperty("cloudHasRequestCompleted");
			return (bool) cloudHasRequestCompleted.Call(native, p0);
		}

		public bool _0x3A3D5568AF297CD5(object p0)
		{
			if (__0x3A3D5568AF297CD5 == null) __0x3A3D5568AF297CD5 = (Function) native.GetObjectProperty("_0x3A3D5568AF297CD5");
			return (bool) __0x3A3D5568AF297CD5.Call(native, p0);
		}

		/// <summary>
		/// Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
		/// </summary>
		public void CloudCheckAvailability()
		{
			if (cloudCheckAvailability == null) cloudCheckAvailability = (Function) native.GetObjectProperty("cloudCheckAvailability");
			cloudCheckAvailability.Call(native);
		}

		public object _0xC7ABAC5DE675EE3B()
		{
			if (__0xC7ABAC5DE675EE3B == null) __0xC7ABAC5DE675EE3B = (Function) native.GetObjectProperty("_0xC7ABAC5DE675EE3B");
			return __0xC7ABAC5DE675EE3B.Call(native);
		}

		public object CloudGetAvailabilityCheckResult()
		{
			if (cloudGetAvailabilityCheckResult == null) cloudGetAvailabilityCheckResult = (Function) native.GetObjectProperty("cloudGetAvailabilityCheckResult");
			return cloudGetAvailabilityCheckResult.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public object _0x8B0C2964BA471961()
		{
			if (__0x8B0C2964BA471961 == null) __0x8B0C2964BA471961 = (Function) native.GetObjectProperty("_0x8B0C2964BA471961");
			return __0x8B0C2964BA471961.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public object _0x88B588B41FF7868E()
		{
			if (__0x88B588B41FF7868E == null) __0x88B588B41FF7868E = (Function) native.GetObjectProperty("_0x88B588B41FF7868E");
			return __0x88B588B41FF7868E.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public object _0x67FC09BC554A75E5()
		{
			if (__0x67FC09BC554A75E5 == null) __0x67FC09BC554A75E5 = (Function) native.GetObjectProperty("_0x67FC09BC554A75E5");
			return __0x67FC09BC554A75E5.Call(native);
		}

		public void _0x966DD84FB6A46017()
		{
			if (__0x966DD84FB6A46017 == null) __0x966DD84FB6A46017 = (Function) native.GetObjectProperty("_0x966DD84FB6A46017");
			__0x966DD84FB6A46017.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) UgcCopyContent(object p0, object p1)
		{
			if (ugcCopyContent == null) ugcCopyContent = (Function) native.GetObjectProperty("ugcCopyContent");
			var results = (Array) ugcCopyContent.Call(native, p0, p1);
			return ((bool) results[0], results[1], results[2]);
		}

		public object _0x9FEDF86898F100E9()
		{
			if (__0x9FEDF86898F100E9 == null) __0x9FEDF86898F100E9 = (Function) native.GetObjectProperty("_0x9FEDF86898F100E9");
			return __0x9FEDF86898F100E9.Call(native);
		}

		public bool UgcHasCreateFinished()
		{
			if (ugcHasCreateFinished == null) ugcHasCreateFinished = (Function) native.GetObjectProperty("ugcHasCreateFinished");
			return (bool) ugcHasCreateFinished.Call(native);
		}

		public object _0x24E4E51FC16305F9()
		{
			if (__0x24E4E51FC16305F9 == null) __0x24E4E51FC16305F9 = (Function) native.GetObjectProperty("_0x24E4E51FC16305F9");
			return __0x24E4E51FC16305F9.Call(native);
		}

		public object UgcGetCreateResult()
		{
			if (ugcGetCreateResult == null) ugcGetCreateResult = (Function) native.GetObjectProperty("ugcGetCreateResult");
			return ugcGetCreateResult.Call(native);
		}

		public object UgcGetCreateContentId()
		{
			if (ugcGetCreateContentId == null) ugcGetCreateContentId = (Function) native.GetObjectProperty("ugcGetCreateContentId");
			return ugcGetCreateContentId.Call(native);
		}

		public void UgcClearCreateResult()
		{
			if (ugcClearCreateResult == null) ugcClearCreateResult = (Function) native.GetObjectProperty("ugcClearCreateResult");
			ugcClearCreateResult.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) UgcQueryMyContent(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (ugcQueryMyContent == null) ugcQueryMyContent = (Function) native.GetObjectProperty("ugcQueryMyContent");
			var results = (Array) ugcQueryMyContent.Call(native, p0, p1, p2, p3, p4, p5);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x692D58DF40657E8C(object p0, object p1, object p2, object p3, object p4, bool p5)
		{
			if (__0x692D58DF40657E8C == null) __0x692D58DF40657E8C = (Function) native.GetObjectProperty("_0x692D58DF40657E8C");
			var results = (Array) __0x692D58DF40657E8C.Call(native, p0, p1, p2, p3, p4, p5);
			return ((bool) results[0], results[1]);
		}

		public bool UgcQueryByContentId(string contentId, bool latestVersion, string contentTypeName)
		{
			if (ugcQueryByContentId == null) ugcQueryByContentId = (Function) native.GetObjectProperty("ugcQueryByContentId");
			return (bool) ugcQueryByContentId.Call(native, contentId, latestVersion, contentTypeName);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) UgcQueryByContentIds(object data, int count, bool latestVersion, string contentTypeName)
		{
			if (ugcQueryByContentIds == null) ugcQueryByContentIds = (Function) native.GetObjectProperty("ugcQueryByContentIds");
			var results = (Array) ugcQueryByContentIds.Call(native, data, count, latestVersion, contentTypeName);
			return ((bool) results[0], results[1]);
		}

		public bool UgcQueryRecentlyCreatedContent(int offset, int count, string contentTypeName, int p3)
		{
			if (ugcQueryRecentlyCreatedContent == null) ugcQueryRecentlyCreatedContent = (Function) native.GetObjectProperty("ugcQueryRecentlyCreatedContent");
			return (bool) ugcQueryRecentlyCreatedContent.Call(native, offset, count, contentTypeName, p3);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) UgcGetBookmarkedContent(object p0, object p1, object p2, object p3)
		{
			if (ugcGetBookmarkedContent == null) ugcGetBookmarkedContent = (Function) native.GetObjectProperty("ugcGetBookmarkedContent");
			var results = (Array) ugcGetBookmarkedContent.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) UgcGetMyContent(object p0, object p1, object p2, object p3)
		{
			if (ugcGetMyContent == null) ugcGetMyContent = (Function) native.GetObjectProperty("ugcGetMyContent");
			var results = (Array) ugcGetMyContent.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) UgcGetFriendContent(object p0, object p1, object p2, object p3)
		{
			if (ugcGetFriendContent == null) ugcGetFriendContent = (Function) native.GetObjectProperty("ugcGetFriendContent");
			var results = (Array) ugcGetFriendContent.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) UgcGetCrewContent(object p0, object p1, object p2, object p3, object p4)
		{
			if (ugcGetCrewContent == null) ugcGetCrewContent = (Function) native.GetObjectProperty("ugcGetCrewContent");
			var results = (Array) ugcGetCrewContent.Call(native, p0, p1, p2, p3, p4);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) UgcGetGetByCategory(object p0, object p1, object p2, object p3, object p4)
		{
			if (ugcGetGetByCategory == null) ugcGetGetByCategory = (Function) native.GetObjectProperty("ugcGetGetByCategory");
			var results = (Array) ugcGetGetByCategory.Call(native, p0, p1, p2, p3, p4);
			return ((bool) results[0], results[1], results[2]);
		}

		public bool SetBalanceAddMachine(string contentId, string contentTypeName)
		{
			if (setBalanceAddMachine == null) setBalanceAddMachine = (Function) native.GetObjectProperty("setBalanceAddMachine");
			return (bool) setBalanceAddMachine.Call(native, contentId, contentTypeName);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) SetBalanceAddMachines(object data, int dataCount, string contentTypeName)
		{
			if (setBalanceAddMachines == null) setBalanceAddMachines = (Function) native.GetObjectProperty("setBalanceAddMachines");
			var results = (Array) setBalanceAddMachines.Call(native, data, dataCount, contentTypeName);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) _0xA7862BC5ED1DFD7E(object p0, object p1, object p2, object p3)
		{
			if (__0xA7862BC5ED1DFD7E == null) __0xA7862BC5ED1DFD7E = (Function) native.GetObjectProperty("_0xA7862BC5ED1DFD7E");
			var results = (Array) __0xA7862BC5ED1DFD7E.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) _0x97A770BEEF227E2B(object p0, object p1, object p2, object p3)
		{
			if (__0x97A770BEEF227E2B == null) __0x97A770BEEF227E2B = (Function) native.GetObjectProperty("_0x97A770BEEF227E2B");
			var results = (Array) __0x97A770BEEF227E2B.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) _0x5324A0E3E4CE3570(object p0, object p1, object p2, object p3)
		{
			if (__0x5324A0E3E4CE3570 == null) __0x5324A0E3E4CE3570 = (Function) native.GetObjectProperty("_0x5324A0E3E4CE3570");
			var results = (Array) __0x5324A0E3E4CE3570.Call(native, p0, p1, p2, p3);
			return ((bool) results[0], results[1], results[2]);
		}

		public void UgcCancelQuery()
		{
			if (ugcCancelQuery == null) ugcCancelQuery = (Function) native.GetObjectProperty("ugcCancelQuery");
			ugcCancelQuery.Call(native);
		}

		public bool UgcIsGetting()
		{
			if (ugcIsGetting == null) ugcIsGetting = (Function) native.GetObjectProperty("ugcIsGetting");
			return (bool) ugcIsGetting.Call(native);
		}

		public bool UgcHasGetFinished()
		{
			if (ugcHasGetFinished == null) ugcHasGetFinished = (Function) native.GetObjectProperty("ugcHasGetFinished");
			return (bool) ugcHasGetFinished.Call(native);
		}

		public object _0x941E5306BCD7C2C7()
		{
			if (__0x941E5306BCD7C2C7 == null) __0x941E5306BCD7C2C7 = (Function) native.GetObjectProperty("_0x941E5306BCD7C2C7");
			return __0x941E5306BCD7C2C7.Call(native);
		}

		public object _0xC87E740D9F3872CC()
		{
			if (__0xC87E740D9F3872CC == null) __0xC87E740D9F3872CC = (Function) native.GetObjectProperty("_0xC87E740D9F3872CC");
			return __0xC87E740D9F3872CC.Call(native);
		}

		public object UgcGetQueryResult()
		{
			if (ugcGetQueryResult == null) ugcGetQueryResult = (Function) native.GetObjectProperty("ugcGetQueryResult");
			return ugcGetQueryResult.Call(native);
		}

		public object UgcGetContentNum()
		{
			if (ugcGetContentNum == null) ugcGetContentNum = (Function) native.GetObjectProperty("ugcGetContentNum");
			return ugcGetContentNum.Call(native);
		}

		public object UgcGetContentTotal()
		{
			if (ugcGetContentTotal == null) ugcGetContentTotal = (Function) native.GetObjectProperty("ugcGetContentTotal");
			return ugcGetContentTotal.Call(native);
		}

		public int UgcGetContentHash()
		{
			if (ugcGetContentHash == null) ugcGetContentHash = (Function) native.GetObjectProperty("ugcGetContentHash");
			return (int) ugcGetContentHash.Call(native);
		}

		public void UgcClearQueryResults()
		{
			if (ugcClearQueryResults == null) ugcClearQueryResults = (Function) native.GetObjectProperty("ugcClearQueryResults");
			ugcClearQueryResults.Call(native);
		}

		public string UgcGetContentUserId(int p0)
		{
			if (ugcGetContentUserId == null) ugcGetContentUserId = (Function) native.GetObjectProperty("ugcGetContentUserId");
			return (string) ugcGetContentUserId.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x584770794D758C18(object p0, object p1)
		{
			if (__0x584770794D758C18 == null) __0x584770794D758C18 = (Function) native.GetObjectProperty("_0x584770794D758C18");
			var results = (Array) __0x584770794D758C18.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public bool _0x8C8D2739BA44AF0F(object p0)
		{
			if (__0x8C8D2739BA44AF0F == null) __0x8C8D2739BA44AF0F = (Function) native.GetObjectProperty("_0x8C8D2739BA44AF0F");
			return (bool) __0x8C8D2739BA44AF0F.Call(native, p0);
		}

		public object UgcGetContentUserName(object p0)
		{
			if (ugcGetContentUserName == null) ugcGetContentUserName = (Function) native.GetObjectProperty("ugcGetContentUserName");
			return ugcGetContentUserName.Call(native, p0);
		}

		public bool _0xAEAB987727C5A8A4(object p0)
		{
			if (__0xAEAB987727C5A8A4 == null) __0xAEAB987727C5A8A4 = (Function) native.GetObjectProperty("_0xAEAB987727C5A8A4");
			return (bool) __0xAEAB987727C5A8A4.Call(native, p0);
		}

		public int GetContentCategory(int p0)
		{
			if (getContentCategory == null) getContentCategory = (Function) native.GetObjectProperty("getContentCategory");
			return (int) getContentCategory.Call(native, p0);
		}

		/// <summary>
		/// Return the mission id of a job.
		/// </summary>
		public string UgcGetContentId(int p0)
		{
			if (ugcGetContentId == null) ugcGetContentId = (Function) native.GetObjectProperty("ugcGetContentId");
			return (string) ugcGetContentId.Call(native, p0);
		}

		/// <summary>
		/// Return the root content id of a job.
		/// </summary>
		public string UgcGetRootContentId(int p0)
		{
			if (ugcGetRootContentId == null) ugcGetRootContentId = (Function) native.GetObjectProperty("ugcGetRootContentId");
			return (string) ugcGetRootContentId.Call(native, p0);
		}

		public object UgcGetContentName(object p0)
		{
			if (ugcGetContentName == null) ugcGetContentName = (Function) native.GetObjectProperty("ugcGetContentName");
			return ugcGetContentName.Call(native, p0);
		}

		public int UgcGetContentDescriptionHash(object p0)
		{
			if (ugcGetContentDescriptionHash == null) ugcGetContentDescriptionHash = (Function) native.GetObjectProperty("ugcGetContentDescriptionHash");
			return (int) ugcGetContentDescriptionHash.Call(native, p0);
		}

		public string UgcGetContentPath(int p0, int p1)
		{
			if (ugcGetContentPath == null) ugcGetContentPath = (Function) native.GetObjectProperty("ugcGetContentPath");
			return (string) ugcGetContentPath.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) UgcGetContentUpdatedDate(object p0, object p1)
		{
			if (ugcGetContentUpdatedDate == null) ugcGetContentUpdatedDate = (Function) native.GetObjectProperty("ugcGetContentUpdatedDate");
			var results = (Array) ugcGetContentUpdatedDate.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		public object UgcGetContentFileVersion(object p0, object p1)
		{
			if (ugcGetContentFileVersion == null) ugcGetContentFileVersion = (Function) native.GetObjectProperty("ugcGetContentFileVersion");
			return ugcGetContentFileVersion.Call(native, p0, p1);
		}

		public bool _0x1D610EB0FEA716D9(int p0)
		{
			if (__0x1D610EB0FEA716D9 == null) __0x1D610EB0FEA716D9 = (Function) native.GetObjectProperty("_0x1D610EB0FEA716D9");
			return (bool) __0x1D610EB0FEA716D9.Call(native, p0);
		}

		public bool _0x7FCC39C46C3C03BD(int p0)
		{
			if (__0x7FCC39C46C3C03BD == null) __0x7FCC39C46C3C03BD = (Function) native.GetObjectProperty("_0x7FCC39C46C3C03BD");
			return (bool) __0x7FCC39C46C3C03BD.Call(native, p0);
		}

		public object UgcGetContentLanguage(object p0)
		{
			if (ugcGetContentLanguage == null) ugcGetContentLanguage = (Function) native.GetObjectProperty("ugcGetContentLanguage");
			return ugcGetContentLanguage.Call(native, p0);
		}

		public bool UgcGetContentIsPublished(object p0)
		{
			if (ugcGetContentIsPublished == null) ugcGetContentIsPublished = (Function) native.GetObjectProperty("ugcGetContentIsPublished");
			return (bool) ugcGetContentIsPublished.Call(native, p0);
		}

		public bool UgcGetContentIsVerified(object p0)
		{
			if (ugcGetContentIsVerified == null) ugcGetContentIsVerified = (Function) native.GetObjectProperty("ugcGetContentIsVerified");
			return (bool) ugcGetContentIsVerified.Call(native, p0);
		}

		public object UgcGetContentRating(object p0, object p1)
		{
			if (ugcGetContentRating == null) ugcGetContentRating = (Function) native.GetObjectProperty("ugcGetContentRating");
			return ugcGetContentRating.Call(native, p0, p1);
		}

		public object UgcGetContentRatingCount(object p0, object p1)
		{
			if (ugcGetContentRatingCount == null) ugcGetContentRatingCount = (Function) native.GetObjectProperty("ugcGetContentRatingCount");
			return ugcGetContentRatingCount.Call(native, p0, p1);
		}

		public object UgcGetContentRatingPositiveCount(object p0, object p1)
		{
			if (ugcGetContentRatingPositiveCount == null) ugcGetContentRatingPositiveCount = (Function) native.GetObjectProperty("ugcGetContentRatingPositiveCount");
			return ugcGetContentRatingPositiveCount.Call(native, p0, p1);
		}

		public object UgcGetContentRatingNegativeCount(object p0, object p1)
		{
			if (ugcGetContentRatingNegativeCount == null) ugcGetContentRatingNegativeCount = (Function) native.GetObjectProperty("ugcGetContentRatingNegativeCount");
			return ugcGetContentRatingNegativeCount.Call(native, p0, p1);
		}

		public bool UgcGetContentHasPlayerRecord(object p0)
		{
			if (ugcGetContentHasPlayerRecord == null) ugcGetContentHasPlayerRecord = (Function) native.GetObjectProperty("ugcGetContentHasPlayerRecord");
			return (bool) ugcGetContentHasPlayerRecord.Call(native, p0);
		}

		public bool UgcGetContentHasPlayerBookmarked(object p0)
		{
			if (ugcGetContentHasPlayerBookmarked == null) ugcGetContentHasPlayerBookmarked = (Function) native.GetObjectProperty("ugcGetContentHasPlayerBookmarked");
			return (bool) ugcGetContentHasPlayerBookmarked.Call(native, p0);
		}

		public int UgcRequestContentDataFromIndex(int p0, int p1)
		{
			if (ugcRequestContentDataFromIndex == null) ugcRequestContentDataFromIndex = (Function) native.GetObjectProperty("ugcRequestContentDataFromIndex");
			return (int) ugcRequestContentDataFromIndex.Call(native, p0, p1);
		}

		public int UgcRequestContentDataFromParams(string contentTypeName, string contentId, int p2, int p3, int p4)
		{
			if (ugcRequestContentDataFromParams == null) ugcRequestContentDataFromParams = (Function) native.GetObjectProperty("ugcRequestContentDataFromParams");
			return (int) ugcRequestContentDataFromParams.Call(native, contentTypeName, contentId, p2, p3, p4);
		}

		public int UgcRequestCachedDescription(int p0)
		{
			if (ugcRequestCachedDescription == null) ugcRequestCachedDescription = (Function) native.GetObjectProperty("ugcRequestCachedDescription");
			return (int) ugcRequestCachedDescription.Call(native, p0);
		}

		public bool _0x2D5DC831176D0114(object p0)
		{
			if (__0x2D5DC831176D0114 == null) __0x2D5DC831176D0114 = (Function) native.GetObjectProperty("_0x2D5DC831176D0114");
			return (bool) __0x2D5DC831176D0114.Call(native, p0);
		}

		public bool _0xEBFA8D50ADDC54C4(object p0)
		{
			if (__0xEBFA8D50ADDC54C4 == null) __0xEBFA8D50ADDC54C4 = (Function) native.GetObjectProperty("_0xEBFA8D50ADDC54C4");
			return (bool) __0xEBFA8D50ADDC54C4.Call(native, p0);
		}

		public bool _0x162C23CA83ED0A62(object p0)
		{
			if (__0x162C23CA83ED0A62 == null) __0x162C23CA83ED0A62 = (Function) native.GetObjectProperty("_0x162C23CA83ED0A62");
			return (bool) __0x162C23CA83ED0A62.Call(native, p0);
		}

		public object UgcGetCachedDescription(object p0, object p1)
		{
			if (ugcGetCachedDescription == null) ugcGetCachedDescription = (Function) native.GetObjectProperty("ugcGetCachedDescription");
			return ugcGetCachedDescription.Call(native, p0, p1);
		}

		public bool _0x5A34CD9C3C5BEC44(object p0)
		{
			if (__0x5A34CD9C3C5BEC44 == null) __0x5A34CD9C3C5BEC44 = (Function) native.GetObjectProperty("_0x5A34CD9C3C5BEC44");
			return (bool) __0x5A34CD9C3C5BEC44.Call(native, p0);
		}

		public void _0x68103E2247887242()
		{
			if (__0x68103E2247887242 == null) __0x68103E2247887242 = (Function) native.GetObjectProperty("_0x68103E2247887242");
			__0x68103E2247887242.Call(native);
		}

		public bool UgcPublish(string contentId, string baseContentId, string contentTypeName)
		{
			if (ugcPublish == null) ugcPublish = (Function) native.GetObjectProperty("ugcPublish");
			return (bool) ugcPublish.Call(native, contentId, baseContentId, contentTypeName);
		}

		public bool UgcSetBookmarked(string contentId, bool bookmarked, string contentTypeName)
		{
			if (ugcSetBookmarked == null) ugcSetBookmarked = (Function) native.GetObjectProperty("ugcSetBookmarked");
			return (bool) ugcSetBookmarked.Call(native, contentId, bookmarked, contentTypeName);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) UgcSetDeleted(object p0, bool p1, object p2)
		{
			if (ugcSetDeleted == null) ugcSetDeleted = (Function) native.GetObjectProperty("ugcSetDeleted");
			var results = (Array) ugcSetDeleted.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1], results[2]);
		}

		public object _0x45E816772E93A9DB()
		{
			if (__0x45E816772E93A9DB == null) __0x45E816772E93A9DB = (Function) native.GetObjectProperty("_0x45E816772E93A9DB");
			return __0x45E816772E93A9DB.Call(native);
		}

		public bool UgcHasModifyFinished()
		{
			if (ugcHasModifyFinished == null) ugcHasModifyFinished = (Function) native.GetObjectProperty("ugcHasModifyFinished");
			return (bool) ugcHasModifyFinished.Call(native);
		}

		public object _0x793FF272D5B365F4()
		{
			if (__0x793FF272D5B365F4 == null) __0x793FF272D5B365F4 = (Function) native.GetObjectProperty("_0x793FF272D5B365F4");
			return __0x793FF272D5B365F4.Call(native);
		}

		public object UgcGetModifyResult()
		{
			if (ugcGetModifyResult == null) ugcGetModifyResult = (Function) native.GetObjectProperty("ugcGetModifyResult");
			return ugcGetModifyResult.Call(native);
		}

		public void UgcClearModifyResult()
		{
			if (ugcClearModifyResult == null) ugcClearModifyResult = (Function) native.GetObjectProperty("ugcClearModifyResult");
			ugcClearModifyResult.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) _0xB746D20B17F2A229(object p0, object p1)
		{
			if (__0xB746D20B17F2A229 == null) __0xB746D20B17F2A229 = (Function) native.GetObjectProperty("_0xB746D20B17F2A229");
			var results = (Array) __0xB746D20B17F2A229.Call(native, p0, p1);
			return ((bool) results[0], results[1], results[2]);
		}

		public object _0x63B406D7884BFA95()
		{
			if (__0x63B406D7884BFA95 == null) __0x63B406D7884BFA95 = (Function) native.GetObjectProperty("_0x63B406D7884BFA95");
			return __0x63B406D7884BFA95.Call(native);
		}

		public object _0x4D02279C83BE69FE()
		{
			if (__0x4D02279C83BE69FE == null) __0x4D02279C83BE69FE = (Function) native.GetObjectProperty("_0x4D02279C83BE69FE");
			return __0x4D02279C83BE69FE.Call(native);
		}

		public object UgcGetCreatorNum()
		{
			if (ugcGetCreatorNum == null) ugcGetCreatorNum = (Function) native.GetObjectProperty("ugcGetCreatorNum");
			return ugcGetCreatorNum.Call(native);
		}

		public bool UgcPoliciesMakePrivate(object p0)
		{
			if (ugcPoliciesMakePrivate == null) ugcPoliciesMakePrivate = (Function) native.GetObjectProperty("ugcPoliciesMakePrivate");
			return (bool) ugcPoliciesMakePrivate.Call(native, p0);
		}

		public void UgcClearOfflineQuery()
		{
			if (ugcClearOfflineQuery == null) ugcClearOfflineQuery = (Function) native.GetObjectProperty("ugcClearOfflineQuery");
			ugcClearOfflineQuery.Call(native);
		}

		public void _0xF98DDE0A8ED09323(bool p0)
		{
			if (__0xF98DDE0A8ED09323 == null) __0xF98DDE0A8ED09323 = (Function) native.GetObjectProperty("_0xF98DDE0A8ED09323");
			__0xF98DDE0A8ED09323.Call(native, p0);
		}

		public void _0xFD75DABC0957BF33(bool p0)
		{
			if (__0xFD75DABC0957BF33 == null) __0xFD75DABC0957BF33 = (Function) native.GetObjectProperty("_0xFD75DABC0957BF33");
			__0xFD75DABC0957BF33.Call(native, p0);
		}

		public bool UgcIsLanguageSupported(object p0)
		{
			if (ugcIsLanguageSupported == null) ugcIsLanguageSupported = (Function) native.GetObjectProperty("ugcIsLanguageSupported");
			return (bool) ugcIsLanguageSupported.Call(native, p0);
		}

		public bool FacebookSetHeistComplete(string heistName, int cashEarned, int xpEarned)
		{
			if (facebookSetHeistComplete == null) facebookSetHeistComplete = (Function) native.GetObjectProperty("facebookSetHeistComplete");
			return (bool) facebookSetHeistComplete.Call(native, heistName, cashEarned, xpEarned);
		}

		public bool FacebookSetCreateCharacterComplete()
		{
			if (facebookSetCreateCharacterComplete == null) facebookSetCreateCharacterComplete = (Function) native.GetObjectProperty("facebookSetCreateCharacterComplete");
			return (bool) facebookSetCreateCharacterComplete.Call(native);
		}

		public bool FacebookSetMilestoneComplete(int milestoneId)
		{
			if (facebookSetMilestoneComplete == null) facebookSetMilestoneComplete = (Function) native.GetObjectProperty("facebookSetMilestoneComplete");
			return (bool) facebookSetMilestoneComplete.Call(native, milestoneId);
		}

		public bool FacebookIsSendingData()
		{
			if (facebookIsSendingData == null) facebookIsSendingData = (Function) native.GetObjectProperty("facebookIsSendingData");
			return (bool) facebookIsSendingData.Call(native);
		}

		public bool FacebookDoUnkCheck()
		{
			if (facebookDoUnkCheck == null) facebookDoUnkCheck = (Function) native.GetObjectProperty("facebookDoUnkCheck");
			return (bool) facebookDoUnkCheck.Call(native);
		}

		public bool FacebookIsAvailable()
		{
			if (facebookIsAvailable == null) facebookIsAvailable = (Function) native.GetObjectProperty("facebookIsAvailable");
			return (bool) facebookIsAvailable.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) TextureDownloadRequest(int PlayerHandle, string FilePath, string Name, bool p3)
		{
			if (textureDownloadRequest == null) textureDownloadRequest = (Function) native.GetObjectProperty("textureDownloadRequest");
			var results = (Array) textureDownloadRequest.Call(native, PlayerHandle, FilePath, Name, p3);
			return ((int) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object, object></returns>
		public (object, object, object) _0x0B203B4AFDE53A4F(object p0, object p1, bool p2)
		{
			if (__0x0B203B4AFDE53A4F == null) __0x0B203B4AFDE53A4F = (Function) native.GetObjectProperty("_0x0B203B4AFDE53A4F");
			var results = (Array) __0x0B203B4AFDE53A4F.Call(native, p0, p1, p2);
			return (results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object, object></returns>
		public (object, object, object) UgcTextureDownloadRequest(object p0, object p1, object p2, object p3, object p4, bool p5)
		{
			if (ugcTextureDownloadRequest == null) ugcTextureDownloadRequest = (Function) native.GetObjectProperty("ugcTextureDownloadRequest");
			var results = (Array) ugcTextureDownloadRequest.Call(native, p0, p1, p2, p3, p4, p5);
			return (results[0], results[1], results[2]);
		}

		public void TextureDownloadRelease(int p0)
		{
			if (textureDownloadRelease == null) textureDownloadRelease = (Function) native.GetObjectProperty("textureDownloadRelease");
			textureDownloadRelease.Call(native, p0);
		}

		public bool TextureDownloadHasFailed(int p0)
		{
			if (textureDownloadHasFailed == null) textureDownloadHasFailed = (Function) native.GetObjectProperty("textureDownloadHasFailed");
			return (bool) textureDownloadHasFailed.Call(native, p0);
		}

		public string TextureDownloadGetName(int p0)
		{
			if (textureDownloadGetName == null) textureDownloadGetName = (Function) native.GetObjectProperty("textureDownloadGetName");
			return (string) textureDownloadGetName.Call(native, p0);
		}

		/// <summary>
		/// 0 = succeeded
		/// 1 = pending
		/// 2 = failed
		/// GET_ST*
		/// </summary>
		public int GetStatusOfTextureDownload(int p0)
		{
			if (getStatusOfTextureDownload == null) getStatusOfTextureDownload = (Function) native.GetObjectProperty("getStatusOfTextureDownload");
			return (int) getStatusOfTextureDownload.Call(native, p0);
		}

		/// <summary>
		/// NETWORK_C*
		/// </summary>
		/// <returns>Returns true if profile setting 901 is set to true and sets it to false.</returns>
		public bool _0x60EDD13EB3AC1FF3()
		{
			if (__0x60EDD13EB3AC1FF3 == null) __0x60EDD13EB3AC1FF3 = (Function) native.GetObjectProperty("_0x60EDD13EB3AC1FF3");
			return (bool) __0x60EDD13EB3AC1FF3.Call(native);
		}

		public bool NetworkShouldShowConnectivityTroubleshooting()
		{
			if (networkShouldShowConnectivityTroubleshooting == null) networkShouldShowConnectivityTroubleshooting = (Function) native.GetObjectProperty("networkShouldShowConnectivityTroubleshooting");
			return (bool) networkShouldShowConnectivityTroubleshooting.Call(native);
		}

		public bool NetworkIsCableConnected()
		{
			if (networkIsCableConnected == null) networkIsCableConnected = (Function) native.GetObjectProperty("networkIsCableConnected");
			return (bool) networkIsCableConnected.Call(native);
		}

		public bool NetworkGetRosPrivilege9()
		{
			if (networkGetRosPrivilege9 == null) networkGetRosPrivilege9 = (Function) native.GetObjectProperty("networkGetRosPrivilege9");
			return (bool) networkGetRosPrivilege9.Call(native);
		}

		public bool NetworkGetRosPrivilege10()
		{
			if (networkGetRosPrivilege10 == null) networkGetRosPrivilege10 = (Function) native.GetObjectProperty("networkGetRosPrivilege10");
			return (bool) networkGetRosPrivilege10.Call(native);
		}

		/// <summary>
		/// NETWORK_HAVE_*
		/// </summary>
		/// <returns>Returns ROS privilege 7 ("Has player been banned").</returns>
		public bool NetworkHasPlayerBeenBanned()
		{
			if (networkHasPlayerBeenBanned == null) networkHasPlayerBeenBanned = (Function) native.GetObjectProperty("networkHasPlayerBeenBanned");
			return (bool) networkHasPlayerBeenBanned.Call(native);
		}

		/// <summary>
		/// NETWORK_HAVE_*
		/// </summary>
		public bool NetworkHaveSocialClubPrivilege()
		{
			if (networkHaveSocialClubPrivilege == null) networkHaveSocialClubPrivilege = (Function) native.GetObjectProperty("networkHaveSocialClubPrivilege");
			return (bool) networkHaveSocialClubPrivilege.Call(native);
		}

		public bool NetworkGetRosPrivilege3()
		{
			if (networkGetRosPrivilege3 == null) networkGetRosPrivilege3 = (Function) native.GetObjectProperty("networkGetRosPrivilege3");
			return (bool) networkGetRosPrivilege3.Call(native);
		}

		/// <summary>
		/// NETWORK_HAVE_*
		/// </summary>
		public bool NetworkGetRosPrivilege4()
		{
			if (networkGetRosPrivilege4 == null) networkGetRosPrivilege4 = (Function) native.GetObjectProperty("networkGetRosPrivilege4");
			return (bool) networkGetRosPrivilege4.Call(native);
		}

		/// <summary>
		/// index is always 18 in scripts
		/// </summary>
		/// <param name="index">is always 18 in scripts</param>
		public bool NetworkHasRosPrivilege(int index)
		{
			if (networkHasRosPrivilege == null) networkHasRosPrivilege = (Function) native.GetObjectProperty("networkHasRosPrivilege");
			return (bool) networkHasRosPrivilege.Call(native, index);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int, object></returns>
		public (bool, int, object) NetworkHasRosPrivilegeEndDate(int privilege, int type, object endData)
		{
			if (networkHasRosPrivilegeEndDate == null) networkHasRosPrivilegeEndDate = (Function) native.GetObjectProperty("networkHasRosPrivilegeEndDate");
			var results = (Array) networkHasRosPrivilegeEndDate.Call(native, privilege, type, endData);
			return ((bool) results[0], (int) results[1], results[2]);
		}

		public bool NetworkGetRosPrivilege24()
		{
			if (networkGetRosPrivilege24 == null) networkGetRosPrivilege24 = (Function) native.GetObjectProperty("networkGetRosPrivilege24");
			return (bool) networkGetRosPrivilege24.Call(native);
		}

		public bool NetworkGetRosPrivilege25()
		{
			if (networkGetRosPrivilege25 == null) networkGetRosPrivilege25 = (Function) native.GetObjectProperty("networkGetRosPrivilege25");
			return (bool) networkGetRosPrivilege25.Call(native);
		}

		public object _0x36391F397731595D(object p0)
		{
			if (__0x36391F397731595D == null) __0x36391F397731595D = (Function) native.GetObjectProperty("_0x36391F397731595D");
			return __0x36391F397731595D.Call(native, p0);
		}

		public object _0xDEB2B99A1AF1A2A6(object p0)
		{
			if (__0xDEB2B99A1AF1A2A6 == null) __0xDEB2B99A1AF1A2A6 = (Function) native.GetObjectProperty("_0xDEB2B99A1AF1A2A6");
			return __0xDEB2B99A1AF1A2A6.Call(native, p0);
		}

		public void _0x9465E683B12D3F6B()
		{
			if (__0x9465E683B12D3F6B == null) __0x9465E683B12D3F6B = (Function) native.GetObjectProperty("_0x9465E683B12D3F6B");
			__0x9465E683B12D3F6B.Call(native);
		}

		/// <summary>
		/// NETWORK_S*
		/// </summary>
		public void _0xCA59CCAE5D01E4CE()
		{
			if (__0xCA59CCAE5D01E4CE == null) __0xCA59CCAE5D01E4CE = (Function) native.GetObjectProperty("_0xCA59CCAE5D01E4CE");
			__0xCA59CCAE5D01E4CE.Call(native);
		}

		/// <summary>
		/// You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
		/// </summary>
		/// <returns>Returns true if dinput8.dll is present in the game directory.</returns>
		public bool NetworkHasGameBeenAltered()
		{
			if (networkHasGameBeenAltered == null) networkHasGameBeenAltered = (Function) native.GetObjectProperty("networkHasGameBeenAltered");
			return (bool) networkHasGameBeenAltered.Call(native);
		}

		public void NetworkUpdatePlayerScars()
		{
			if (networkUpdatePlayerScars == null) networkUpdatePlayerScars = (Function) native.GetObjectProperty("networkUpdatePlayerScars");
			networkUpdatePlayerScars.Call(native);
		}

		/// <summary>
		/// NETWORK_D*
		/// Probably NETWORK_DISABLE_*
		/// </summary>
		public void _0xC505036A35AFD01B(bool toggle)
		{
			if (__0xC505036A35AFD01B == null) __0xC505036A35AFD01B = (Function) native.GetObjectProperty("_0xC505036A35AFD01B");
			__0xC505036A35AFD01B.Call(native, toggle);
		}

		public void _0x267C78C60E806B9A(object p0, bool p1)
		{
			if (__0x267C78C60E806B9A == null) __0x267C78C60E806B9A = (Function) native.GetObjectProperty("_0x267C78C60E806B9A");
			__0x267C78C60E806B9A.Call(native, p0, p1);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0x6BFF5F84102DF80A(int player)
		{
			if (__0x6BFF5F84102DF80A == null) __0x6BFF5F84102DF80A = (Function) native.GetObjectProperty("_0x6BFF5F84102DF80A");
			__0x6BFF5F84102DF80A.Call(native, player);
		}

		public void _0x5C497525F803486B()
		{
			if (__0x5C497525F803486B == null) __0x5C497525F803486B = (Function) native.GetObjectProperty("_0x5C497525F803486B");
			__0x5C497525F803486B.Call(native);
		}

		/// <summary>
		/// MulleDK19: This function is hard-coded to always return 0.
		/// </summary>
		public object _0x6FB7BB3607D27FA2()
		{
			if (__0x6FB7BB3607D27FA2 == null) __0x6FB7BB3607D27FA2 = (Function) native.GetObjectProperty("_0x6FB7BB3607D27FA2");
			return __0x6FB7BB3607D27FA2.Call(native);
		}

		public void _0x45A83257ED02D9BC()
		{
			if (__0x45A83257ED02D9BC == null) __0x45A83257ED02D9BC = (Function) native.GetObjectProperty("_0x45A83257ED02D9BC");
			__0x45A83257ED02D9BC.Call(native);
		}

		/// <summary>
		/// NETWORK_IS_*
		/// </summary>
		public bool _0x16D3D49902F697BB(int player)
		{
			if (__0x16D3D49902F697BB == null) __0x16D3D49902F697BB = (Function) native.GetObjectProperty("_0x16D3D49902F697BB");
			return (bool) __0x16D3D49902F697BB.Call(native, player);
		}

		public double _0xD414BE129BB81B32(int player)
		{
			if (__0xD414BE129BB81B32 == null) __0xD414BE129BB81B32 = (Function) native.GetObjectProperty("_0xD414BE129BB81B32");
			return (double) __0xD414BE129BB81B32.Call(native, player);
		}

		public double _0x0E3A041ED6AC2B45(int player)
		{
			if (__0x0E3A041ED6AC2B45 == null) __0x0E3A041ED6AC2B45 = (Function) native.GetObjectProperty("_0x0E3A041ED6AC2B45");
			return (double) __0x0E3A041ED6AC2B45.Call(native, player);
		}

		/// <summary>
		/// NETWORK_GET_*
		/// </summary>
		public double _0x350C23949E43686C(int player)
		{
			if (__0x350C23949E43686C == null) __0x350C23949E43686C = (Function) native.GetObjectProperty("_0x350C23949E43686C");
			return (double) __0x350C23949E43686C.Call(native, player);
		}

		public int NetworkGetNumUnackedForPlayer(int player)
		{
			if (networkGetNumUnackedForPlayer == null) networkGetNumUnackedForPlayer = (Function) native.GetObjectProperty("networkGetNumUnackedForPlayer");
			return (int) networkGetNumUnackedForPlayer.Call(native, player);
		}

		/// <summary>
		/// NETWORK_*
		/// </summary>
		public int _0x3765C3A3E8192E10(int player)
		{
			if (__0x3765C3A3E8192E10 == null) __0x3765C3A3E8192E10 = (Function) native.GetObjectProperty("_0x3765C3A3E8192E10");
			return (int) __0x3765C3A3E8192E10.Call(native, player);
		}

		/// <summary>
		/// NETWORK_GET_*
		/// </summary>
		public int NetworkGetOldestResendCountForPlayer(int player)
		{
			if (networkGetOldestResendCountForPlayer == null) networkGetOldestResendCountForPlayer = (Function) native.GetObjectProperty("networkGetOldestResendCountForPlayer");
			return (int) networkGetOldestResendCountForPlayer.Call(native, player);
		}

		public void NetworkReportMyself()
		{
			if (networkReportMyself == null) networkReportMyself = (Function) native.GetObjectProperty("networkReportMyself");
			networkReportMyself.Call(native);
		}

		/// <summary>
		/// NETWORK_GET_*
		/// </summary>
		public Vector3 _0x64D779659BC37B19(int entity)
		{
			if (__0x64D779659BC37B19 == null) __0x64D779659BC37B19 = (Function) native.GetObjectProperty("_0x64D779659BC37B19");
			return JSObjectToVector3(__0x64D779659BC37B19.Call(native, entity));
		}

		/// <summary>
		/// NETWORK_GET_*
		/// </summary>
		public Vector3 NetworkGetPlayerCoords(int player)
		{
			if (networkGetPlayerCoords == null) networkGetPlayerCoords = (Function) native.GetObjectProperty("networkGetPlayerCoords");
			return JSObjectToVector3(networkGetPlayerCoords.Call(native, player));
		}

		/// <summary>
		/// NETWORK_GET_*
		/// </summary>
		public Vector3 _0x33DE49EDF4DDE77A(int entity)
		{
			if (__0x33DE49EDF4DDE77A == null) __0x33DE49EDF4DDE77A = (Function) native.GetObjectProperty("_0x33DE49EDF4DDE77A");
			return JSObjectToVector3(__0x33DE49EDF4DDE77A.Call(native, entity));
		}

		/// <summary>
		/// NETWORK_GET_P*
		/// </summary>
		public Vector3 _0xAA5FAFCD2C5F5E47(int entity)
		{
			if (__0xAA5FAFCD2C5F5E47 == null) __0xAA5FAFCD2C5F5E47 = (Function) native.GetObjectProperty("_0xAA5FAFCD2C5F5E47");
			return JSObjectToVector3(__0xAA5FAFCD2C5F5E47.Call(native, entity));
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public object _0xAEDF1BC1C133D6E3()
		{
			if (__0xAEDF1BC1C133D6E3 == null) __0xAEDF1BC1C133D6E3 = (Function) native.GetObjectProperty("_0xAEDF1BC1C133D6E3");
			return __0xAEDF1BC1C133D6E3.Call(native);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public object _0x2555CF7DA5473794()
		{
			if (__0x2555CF7DA5473794 == null) __0x2555CF7DA5473794 = (Function) native.GetObjectProperty("_0x2555CF7DA5473794");
			return __0x2555CF7DA5473794.Call(native);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public object _0x6FD992C4A1C1B986()
		{
			if (__0x6FD992C4A1C1B986 == null) __0x6FD992C4A1C1B986 = (Function) native.GetObjectProperty("_0x6FD992C4A1C1B986");
			return __0x6FD992C4A1C1B986.Call(native);
		}

		public int _0xDB663CC9FF3407A9(int player)
		{
			if (__0xDB663CC9FF3407A9 == null) __0xDB663CC9FF3407A9 = (Function) native.GetObjectProperty("_0xDB663CC9FF3407A9");
			return (int) __0xDB663CC9FF3407A9.Call(native, player);
		}

		/// <summary>
		/// p5 - last parameter does not mean object handle is returned
		/// maybe a quick view in disassembly will tell us what is actually does
		/// ----------
		/// prop_tt_screenstatic (0xE2E039BC) is handled different. Not sure how yet but it I know it is.
		/// thx fr Xenus.oida
		/// </summary>
		public int CreateObject(int modelHash, double x, double y, double z, bool isNetwork, bool thisScriptCheck, bool dynamic)
		{
			if (createObject == null) createObject = (Function) native.GetObjectProperty("createObject");
			return (int) createObject.Call(native, modelHash, x, y, z, isNetwork, thisScriptCheck, dynamic);
		}

		/// <summary>
		/// p5 - does not mean object handle is returned
		/// maybe a quick view in disassembly will tell us what is actually does
		/// </summary>
		public int CreateObjectNoOffset(int modelHash, double x, double y, double z, bool isNetwork, bool thisScriptCheck, bool dynamic)
		{
			if (createObjectNoOffset == null) createObjectNoOffset = (Function) native.GetObjectProperty("createObjectNoOffset");
			return (int) createObjectNoOffset.Call(native, modelHash, x, y, z, isNetwork, thisScriptCheck, dynamic);
		}

		/// <summary>
		/// Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) DeleteObject(int @object)
		{
			if (deleteObject == null) deleteObject = (Function) native.GetObjectProperty("deleteObject");
			var results = (Array) deleteObject.Call(native, @object);
			return (results[0], (int) results[1]);
		}

		public bool PlaceObjectOnGroundProperly(int @object)
		{
			if (placeObjectOnGroundProperly == null) placeObjectOnGroundProperly = (Function) native.GetObjectProperty("placeObjectOnGroundProperly");
			return (bool) placeObjectOnGroundProperly.Call(native, @object);
		}

		public bool PlaceObjectOnGroundProperly2(int @object)
		{
			if (placeObjectOnGroundProperly2 == null) placeObjectOnGroundProperly2 = (Function) native.GetObjectProperty("placeObjectOnGroundProperly2");
			return (bool) placeObjectOnGroundProperly2.Call(native, @object);
		}

		public bool _0xAFE24E4D29249E4A(int @object, double p1, double p2, bool p3)
		{
			if (__0xAFE24E4D29249E4A == null) __0xAFE24E4D29249E4A = (Function) native.GetObjectProperty("_0xAFE24E4D29249E4A");
			return (bool) __0xAFE24E4D29249E4A.Call(native, @object, p1, p2, p3);
		}

		/// <summary>
		/// If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
		/// See also: gtag.gtagaming.com/opcode-database/opcode/034E/
		/// -- also see (fivem.net/)
		/// </summary>
		/// <returns>Returns true if the object has finished moving.</returns>
		public bool SlideObject(int @object, double toX, double toY, double toZ, double speedX, double speedY, double speedZ, bool collision)
		{
			if (slideObject == null) slideObject = (Function) native.GetObjectProperty("slideObject");
			return (bool) slideObject.Call(native, @object, toX, toY, toZ, speedX, speedY, speedZ, collision);
		}

		public void SetObjectTargettable(int @object, bool targettable)
		{
			if (setObjectTargettable == null) setObjectTargettable = (Function) native.GetObjectProperty("setObjectTargettable");
			setObjectTargettable.Call(native, @object, targettable);
		}

		public void SetObjectSomething(int @object, bool p1)
		{
			if (setObjectSomething == null) setObjectSomething = (Function) native.GetObjectProperty("setObjectSomething");
			setObjectSomething.Call(native, @object, p1);
		}

		/// <summary>
		/// Has 8 params in the latest patches.
		/// isMission - if true doesn't return mission objects
		/// </summary>
		/// <param name="isMission">if true doesn't return mission objects</param>
		public int GetClosestObjectOfType(double x, double y, double z, double radius, int modelHash, bool isMission, bool p6, bool p7)
		{
			if (getClosestObjectOfType == null) getClosestObjectOfType = (Function) native.GetObjectProperty("getClosestObjectOfType");
			return (int) getClosestObjectOfType.Call(native, x, y, z, radius, modelHash, isMission, p6, p7);
		}

		public bool HasObjectBeenBroken(int @object, object p1)
		{
			if (hasObjectBeenBroken == null) hasObjectBeenBroken = (Function) native.GetObjectProperty("hasObjectBeenBroken");
			return (bool) hasObjectBeenBroken.Call(native, @object, p1);
		}

		public bool HasClosestObjectOfTypeBeenBroken(double p0, double p1, double p2, double p3, int modelHash, object p5)
		{
			if (hasClosestObjectOfTypeBeenBroken == null) hasClosestObjectOfTypeBeenBroken = (Function) native.GetObjectProperty("hasClosestObjectOfTypeBeenBroken");
			return (bool) hasClosestObjectOfTypeBeenBroken.Call(native, p0, p1, p2, p3, modelHash, p5);
		}

		public bool HasClosestObjectOfTypeBeenCompletelyDestroyed(double p0, double p1, double p2, double p3, int modelHash, bool p5)
		{
			if (hasClosestObjectOfTypeBeenCompletelyDestroyed == null) hasClosestObjectOfTypeBeenCompletelyDestroyed = (Function) native.GetObjectProperty("hasClosestObjectOfTypeBeenCompletelyDestroyed");
			return (bool) hasClosestObjectOfTypeBeenCompletelyDestroyed.Call(native, p0, p1, p2, p3, modelHash, p5);
		}

		public object _0x2542269291C6AC84(object p0)
		{
			if (__0x2542269291C6AC84 == null) __0x2542269291C6AC84 = (Function) native.GetObjectProperty("_0x2542269291C6AC84");
			return __0x2542269291C6AC84.Call(native, p0);
		}

		public Vector3 GetObjectOffsetFromCoords(double xPos, double yPos, double zPos, double heading, double xOffset, double yOffset, double zOffset)
		{
			if (getObjectOffsetFromCoords == null) getObjectOffsetFromCoords = (Function) native.GetObjectProperty("getObjectOffsetFromCoords");
			return JSObjectToVector3(getObjectOffsetFromCoords.Call(native, xPos, yPos, zPos, heading, xOffset, yOffset, zOffset));
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, Vector3></returns>
		public (object, Vector3) GetCoordsAndRotationOfClosestObjectOfType(int @object, double radius, int modelHash, double x, double y, double z, Vector3 p6, int p7)
		{
			if (getCoordsAndRotationOfClosestObjectOfType == null) getCoordsAndRotationOfClosestObjectOfType = (Function) native.GetObjectProperty("getCoordsAndRotationOfClosestObjectOfType");
			var results = (Array) getCoordsAndRotationOfClosestObjectOfType.Call(native, @object, radius, modelHash, x, y, z, p6, p7);
			return (results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// Hardcoded to not work in multiplayer.
		/// Used to lock/unlock doors to interior areas of the game.
		/// (Possible) Door Types:
		/// pastebin.com/9S2m3qA4
		/// Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
		/// Locked means that the heading is locked.
		/// p6 is always 0.
		/// 225 door types, model names and coords found in stripclub.c4:
		/// pastebin.com/gywnbzsH
		/// get door info: pastebin.com/i14rbekD
		/// </summary>
		/// <param name="locked">Locked means that the heading is locked.  </param>
		/// <param name="heading">Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.</param>
		/// <param name="p6">is always 0. </param>
		public void SetStateOfClosestDoorOfType(int type, double x, double y, double z, bool locked, double heading, bool p6)
		{
			if (setStateOfClosestDoorOfType == null) setStateOfClosestDoorOfType = (Function) native.GetObjectProperty("setStateOfClosestDoorOfType");
			setStateOfClosestDoorOfType.Call(native, type, x, y, z, locked, heading, p6);
		}

		/// <summary>
		/// locked is 0 if no door is found
		/// locked is 0 if door is unlocked
		/// locked is 1 if door is found and unlocked.
		/// -------------
		/// the locked bool is either 0(unlocked)(false) or 1(locked)(true)
		/// </summary>
		/// <param name="locked">is 1 if door is found and unlocked.</param>
		/// <returns>Array<void, bool, double></returns>
		public (object, bool, double) GetStateOfClosestDoorOfType(int type, double x, double y, double z, bool locked, double heading)
		{
			if (getStateOfClosestDoorOfType == null) getStateOfClosestDoorOfType = (Function) native.GetObjectProperty("getStateOfClosestDoorOfType");
			var results = (Array) getStateOfClosestDoorOfType.Call(native, type, x, y, z, locked, heading);
			return (results[0], (bool) results[1], (double) results[2]);
		}

		/// <summary>
		/// when you set locked to 0 the door open and to 1 the door close
		/// OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open
		/// OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close
		/// p5-7 - Rot?
		/// SET_*
		/// </summary>
		public void DoorControl(int doorHash, double x, double y, double z, bool locked, double xRotMult, double yRotMult, double zRotMult)
		{
			if (doorControl == null) doorControl = (Function) native.GetObjectProperty("doorControl");
			doorControl.Call(native, doorHash, x, y, z, locked, xRotMult, yRotMult, zRotMult);
		}

		public void AddDoorToSystem(int doorHash, int modelHash, double x, double y, double z, bool p5, bool p6, bool p7)
		{
			if (addDoorToSystem == null) addDoorToSystem = (Function) native.GetObjectProperty("addDoorToSystem");
			addDoorToSystem.Call(native, doorHash, modelHash, x, y, z, p5, p6, p7);
		}

		public void RemoveDoorFromSystem(int doorHash)
		{
			if (removeDoorFromSystem == null) removeDoorFromSystem = (Function) native.GetObjectProperty("removeDoorFromSystem");
			removeDoorFromSystem.Call(native, doorHash);
		}

		/// <summary>
		/// Sets the acceleration limit of a door.
		/// How fast it can open, or the inverse hinge resistance.
		/// A limit of 0 seems to lock doors.
		/// p2 is always 0, p3 is always 1.
		/// </summary>
		/// <param name="p2">is always 0, p3 is always 1.</param>
		public void DoorSystemSetDoorState(int doorHash, int limit, bool p2, bool p3)
		{
			if (doorSystemSetDoorState == null) doorSystemSetDoorState = (Function) native.GetObjectProperty("doorSystemSetDoorState");
			doorSystemSetDoorState.Call(native, doorHash, limit, p2, p3);
		}

		public int DoorSystemGetDoorState(int doorHash)
		{
			if (doorSystemGetDoorState == null) doorSystemGetDoorState = (Function) native.GetObjectProperty("doorSystemGetDoorState");
			return (int) doorSystemGetDoorState.Call(native, doorHash);
		}

		public int DoorSystemGetDoorPendingState(int doorHash)
		{
			if (doorSystemGetDoorPendingState == null) doorSystemGetDoorPendingState = (Function) native.GetObjectProperty("doorSystemGetDoorPendingState");
			return (int) doorSystemGetDoorPendingState.Call(native, doorHash);
		}

		public void DoorSystemSetAutomaticRate(int doorHash, double p1, bool p2, bool p3)
		{
			if (doorSystemSetAutomaticRate == null) doorSystemSetAutomaticRate = (Function) native.GetObjectProperty("doorSystemSetAutomaticRate");
			doorSystemSetAutomaticRate.Call(native, doorHash, p1, p2, p3);
		}

		public void DoorSystemSetAutomaticDistance(int doorHash, double heading, bool p2, bool p3)
		{
			if (doorSystemSetAutomaticDistance == null) doorSystemSetAutomaticDistance = (Function) native.GetObjectProperty("doorSystemSetAutomaticDistance");
			doorSystemSetAutomaticDistance.Call(native, doorHash, heading, p2, p3);
		}

		/// <summary>
		/// Sets the ajar angle of a door.
		/// Ranges from -1.0 to 1.0, and 0.0 is closed / default.
		/// p2 is always 0, p3 is always 1.
		/// </summary>
		/// <param name="p2">is always 0, p3 is always 1.</param>
		public void DoorSystemSetOpenRatio(int doorHash, double ajar, bool p2, bool p3)
		{
			if (doorSystemSetOpenRatio == null) doorSystemSetOpenRatio = (Function) native.GetObjectProperty("doorSystemSetOpenRatio");
			doorSystemSetOpenRatio.Call(native, doorHash, ajar, p2, p3);
		}

		public double DoorSystemGetOpenRatio(int doorHash)
		{
			if (doorSystemGetOpenRatio == null) doorSystemGetOpenRatio = (Function) native.GetObjectProperty("doorSystemGetOpenRatio");
			return (double) doorSystemGetOpenRatio.Call(native, doorHash);
		}

		public void DoorSystemSetSpringRemoved(int doorHash, bool p1, bool p2, bool p3)
		{
			if (doorSystemSetSpringRemoved == null) doorSystemSetSpringRemoved = (Function) native.GetObjectProperty("doorSystemSetSpringRemoved");
			doorSystemSetSpringRemoved.Call(native, doorHash, p1, p2, p3);
		}

		public void DoorSystemSetHoldOpen(int doorHash, bool toggle)
		{
			if (doorSystemSetHoldOpen == null) doorSystemSetHoldOpen = (Function) native.GetObjectProperty("doorSystemSetHoldOpen");
			doorSystemSetHoldOpen.Call(native, doorHash, toggle);
		}

		public void _0xA85A21582451E951(int doorHash, bool p1)
		{
			if (__0xA85A21582451E951 == null) __0xA85A21582451E951 = (Function) native.GetObjectProperty("_0xA85A21582451E951");
			__0xA85A21582451E951.Call(native, doorHash, p1);
		}

		/// <summary>
		/// if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))
		/// {
		/// OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
		/// }
		/// </summary>
		public bool IsDoorRegisteredWithSystem(int doorHash)
		{
			if (isDoorRegisteredWithSystem == null) isDoorRegisteredWithSystem = (Function) native.GetObjectProperty("isDoorRegisteredWithSystem");
			return (bool) isDoorRegisteredWithSystem.Call(native, doorHash);
		}

		public bool IsDoorClosed(int doorHash)
		{
			if (isDoorClosed == null) isDoorClosed = (Function) native.GetObjectProperty("isDoorClosed");
			return (bool) isDoorClosed.Call(native, doorHash);
		}

		public void _0xC7F29CA00F46350E(bool p0)
		{
			if (__0xC7F29CA00F46350E == null) __0xC7F29CA00F46350E = (Function) native.GetObjectProperty("_0xC7F29CA00F46350E");
			__0xC7F29CA00F46350E.Call(native, p0);
		}

		public void _0x701FDA1E82076BA4()
		{
			if (__0x701FDA1E82076BA4 == null) __0x701FDA1E82076BA4 = (Function) native.GetObjectProperty("_0x701FDA1E82076BA4");
			__0x701FDA1E82076BA4.Call(native);
		}

		public bool DoorSystemGetIsPhysicsLoaded(object p0)
		{
			if (doorSystemGetIsPhysicsLoaded == null) doorSystemGetIsPhysicsLoaded = (Function) native.GetObjectProperty("doorSystemGetIsPhysicsLoaded");
			return (bool) doorSystemGetIsPhysicsLoaded.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) DoorSystemFindExistingDoor(double p0, double p1, double p2, object p3, double height)
		{
			if (doorSystemFindExistingDoor == null) doorSystemFindExistingDoor = (Function) native.GetObjectProperty("doorSystemFindExistingDoor");
			var results = (Array) doorSystemFindExistingDoor.Call(native, p0, p1, p2, p3, height);
			return ((bool) results[0], (double) results[1]);
		}

		public bool IsGarageEmpty(int garageHash, bool p1, int p2)
		{
			if (isGarageEmpty == null) isGarageEmpty = (Function) native.GetObjectProperty("isGarageEmpty");
			return (bool) isGarageEmpty.Call(native, garageHash, p1, p2);
		}

		public bool IsPlayerEntirelyInsideGarage(int garageHash, int player, double p2, int p3)
		{
			if (isPlayerEntirelyInsideGarage == null) isPlayerEntirelyInsideGarage = (Function) native.GetObjectProperty("isPlayerEntirelyInsideGarage");
			return (bool) isPlayerEntirelyInsideGarage.Call(native, garageHash, player, p2, p3);
		}

		public bool IsPlayerPartiallyInsideGarage(int garageHash, int player, int p2)
		{
			if (isPlayerPartiallyInsideGarage == null) isPlayerPartiallyInsideGarage = (Function) native.GetObjectProperty("isPlayerPartiallyInsideGarage");
			return (bool) isPlayerPartiallyInsideGarage.Call(native, garageHash, player, p2);
		}

		public bool AreEntitiesEntirelyInsideGarage(int garageHash, bool p1, bool p2, bool p3, object p4)
		{
			if (areEntitiesEntirelyInsideGarage == null) areEntitiesEntirelyInsideGarage = (Function) native.GetObjectProperty("areEntitiesEntirelyInsideGarage");
			return (bool) areEntitiesEntirelyInsideGarage.Call(native, garageHash, p1, p2, p3, p4);
		}

		public bool IsAnyEntityEntirelyInsideGarage(int garageHash, bool p1, bool p2, bool p3, object p4)
		{
			if (isAnyEntityEntirelyInsideGarage == null) isAnyEntityEntirelyInsideGarage = (Function) native.GetObjectProperty("isAnyEntityEntirelyInsideGarage");
			return (bool) isAnyEntityEntirelyInsideGarage.Call(native, garageHash, p1, p2, p3, p4);
		}

		/// <summary>
		/// Despite the name, it does work for any entity type.
		/// </summary>
		public bool IsObjectEntirelyInsideGarage(int garageHash, int entity, double p2, int p3)
		{
			if (isObjectEntirelyInsideGarage == null) isObjectEntirelyInsideGarage = (Function) native.GetObjectProperty("isObjectEntirelyInsideGarage");
			return (bool) isObjectEntirelyInsideGarage.Call(native, garageHash, entity, p2, p3);
		}

		/// <summary>
		/// Despite the name, it does work for any entity type.
		/// </summary>
		public bool IsObjectPartiallyInsideGarage(int garageHash, int entity, int p2)
		{
			if (isObjectPartiallyInsideGarage == null) isObjectPartiallyInsideGarage = (Function) native.GetObjectProperty("isObjectPartiallyInsideGarage");
			return (bool) isObjectPartiallyInsideGarage.Call(native, garageHash, entity, p2);
		}

		/// <summary>
		/// CLEAR_*
		/// </summary>
		public void ClearGarageArea(int garageHash, bool isNetwork)
		{
			if (clearGarageArea == null) clearGarageArea = (Function) native.GetObjectProperty("clearGarageArea");
			clearGarageArea.Call(native, garageHash, isNetwork);
		}

		/// <summary>
		/// CLEAR_*
		/// </summary>
		public void _0x190428512B240692(int garageHash, bool vehicles, bool peds, bool objects, bool isNetwork)
		{
			if (__0x190428512B240692 == null) __0x190428512B240692 = (Function) native.GetObjectProperty("_0x190428512B240692");
			__0x190428512B240692.Call(native, garageHash, vehicles, peds, objects, isNetwork);
		}

		public void _0x659F9D71F52843F8(object p0, object p1)
		{
			if (__0x659F9D71F52843F8 == null) __0x659F9D71F52843F8 = (Function) native.GetObjectProperty("_0x659F9D71F52843F8");
			__0x659F9D71F52843F8.Call(native, p0, p1);
		}

		public void EnableSavingInGarage(int garageHash, bool toggle)
		{
			if (enableSavingInGarage == null) enableSavingInGarage = (Function) native.GetObjectProperty("enableSavingInGarage");
			enableSavingInGarage.Call(native, garageHash, toggle);
		}

		public void _0x66A49D021870FE88()
		{
			if (__0x66A49D021870FE88 == null) __0x66A49D021870FE88 = (Function) native.GetObjectProperty("_0x66A49D021870FE88");
			__0x66A49D021870FE88.Call(native);
		}

		/// <summary>
		/// p5 is usually 0.
		/// </summary>
		/// <param name="p5">is usually 0.</param>
		public bool DoesObjectOfTypeExistAtCoords(double x, double y, double z, double radius, int hash, bool p5)
		{
			if (doesObjectOfTypeExistAtCoords == null) doesObjectOfTypeExistAtCoords = (Function) native.GetObjectProperty("doesObjectOfTypeExistAtCoords");
			return (bool) doesObjectOfTypeExistAtCoords.Call(native, x, y, z, radius, hash, p5);
		}

		public bool IsPointInAngledArea(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, bool p10, bool p11)
		{
			if (isPointInAngledArea == null) isPointInAngledArea = (Function) native.GetObjectProperty("isPointInAngledArea");
			return (bool) isPointInAngledArea.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		}

		public void SetObjectCanClimbOn(int @object, bool toggle)
		{
			if (setObjectCanClimbOn == null) setObjectCanClimbOn = (Function) native.GetObjectProperty("setObjectCanClimbOn");
			setObjectCanClimbOn.Call(native, @object, toggle);
		}

		/// <summary>
		/// Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
		/// Other parameters seem to be unknown.
		/// p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
		/// p3: seems similar to p2
		/// p4: makes obj fall slower the higher the value
		/// p5: similar to p4
		/// </summary>
		/// <param name="p2">seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?</param>
		/// <param name="p3">seems similar to p2</param>
		/// <param name="p4">makes obj fall slower the higher the value</param>
		/// <param name="p5">similar to p4</param>
		public void SetObjectPhysicsParams(int @object, double weight, double p2, double p3, double p4, double p5, double gravity, double p7, double p8, double p9, double p10, double buoyancy)
		{
			if (setObjectPhysicsParams == null) setObjectPhysicsParams = (Function) native.GetObjectProperty("setObjectPhysicsParams");
			setObjectPhysicsParams.Call(native, @object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
		}

		public double GetObjectFragmentDamageHealth(object p0, bool p1)
		{
			if (getObjectFragmentDamageHealth == null) getObjectFragmentDamageHealth = (Function) native.GetObjectProperty("getObjectFragmentDamageHealth");
			return (double) getObjectFragmentDamageHealth.Call(native, p0, p1);
		}

		public void SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(int @object, bool toggle)
		{
			if (setActivateObjectPhysicsAsSoonAsItIsUnfrozen == null) setActivateObjectPhysicsAsSoonAsItIsUnfrozen = (Function) native.GetObjectProperty("setActivateObjectPhysicsAsSoonAsItIsUnfrozen");
			setActivateObjectPhysicsAsSoonAsItIsUnfrozen.Call(native, @object, toggle);
		}

		public bool IsAnyObjectNearPoint(double x, double y, double z, double range, bool p4)
		{
			if (isAnyObjectNearPoint == null) isAnyObjectNearPoint = (Function) native.GetObjectProperty("isAnyObjectNearPoint");
			return (bool) isAnyObjectNearPoint.Call(native, x, y, z, range, p4);
		}

		public bool IsObjectNearPoint(int objectHash, double x, double y, double z, double range)
		{
			if (isObjectNearPoint == null) isObjectNearPoint = (Function) native.GetObjectProperty("isObjectNearPoint");
			return (bool) isObjectNearPoint.Call(native, objectHash, x, y, z, range);
		}

		public void RemoveObjectHighDetailModel(int @object)
		{
			if (removeObjectHighDetailModel == null) removeObjectHighDetailModel = (Function) native.GetObjectProperty("removeObjectHighDetailModel");
			removeObjectHighDetailModel.Call(native, @object);
		}

		public void _0xE7E4C198B0185900(int p0, object p1, bool p2)
		{
			if (__0xE7E4C198B0185900 == null) __0xE7E4C198B0185900 = (Function) native.GetObjectProperty("_0xE7E4C198B0185900");
			__0xE7E4C198B0185900.Call(native, p0, p1, p2);
		}

		public void _0xE05F6AEEFEB0BB02(object p0, object p1, object p2)
		{
			if (__0xE05F6AEEFEB0BB02 == null) __0xE05F6AEEFEB0BB02 = (Function) native.GetObjectProperty("_0xE05F6AEEFEB0BB02");
			__0xE05F6AEEFEB0BB02.Call(native, p0, p1, p2);
		}

		public void _0xF9C1681347C8BD15(int @object)
		{
			if (__0xF9C1681347C8BD15 == null) __0xF9C1681347C8BD15 = (Function) native.GetObjectProperty("_0xF9C1681347C8BD15");
			__0xF9C1681347C8BD15.Call(native, @object);
		}

		public void TrackObjectVisibility(int @object)
		{
			if (trackObjectVisibility == null) trackObjectVisibility = (Function) native.GetObjectProperty("trackObjectVisibility");
			trackObjectVisibility.Call(native, @object);
		}

		public bool IsObjectVisible(int @object)
		{
			if (isObjectVisible == null) isObjectVisible = (Function) native.GetObjectProperty("isObjectVisible");
			return (bool) isObjectVisible.Call(native, @object);
		}

		public void _0xC6033D32241F6FB5(int @object, bool toggle)
		{
			if (__0xC6033D32241F6FB5 == null) __0xC6033D32241F6FB5 = (Function) native.GetObjectProperty("_0xC6033D32241F6FB5");
			__0xC6033D32241F6FB5.Call(native, @object, toggle);
		}

		public void _0xEB6F1A9B5510A5D2(object p0, bool p1)
		{
			if (__0xEB6F1A9B5510A5D2 == null) __0xEB6F1A9B5510A5D2 = (Function) native.GetObjectProperty("_0xEB6F1A9B5510A5D2");
			__0xEB6F1A9B5510A5D2.Call(native, p0, p1);
		}

		public void SetUnkGlobalBoolRelatedToDamage(bool value)
		{
			if (setUnkGlobalBoolRelatedToDamage == null) setUnkGlobalBoolRelatedToDamage = (Function) native.GetObjectProperty("setUnkGlobalBoolRelatedToDamage");
			setUnkGlobalBoolRelatedToDamage.Call(native, value);
		}

		public void SetCreateWeaponObjectLightSource(object p0, bool p1)
		{
			if (setCreateWeaponObjectLightSource == null) setCreateWeaponObjectLightSource = (Function) native.GetObjectProperty("setCreateWeaponObjectLightSource");
			setCreateWeaponObjectLightSource.Call(native, p0, p1);
		}

		/// <summary>
		/// Example:
		/// OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
		/// </summary>
		public int GetRayfireMapObject(double x, double y, double z, double radius, string name)
		{
			if (getRayfireMapObject == null) getRayfireMapObject = (Function) native.GetObjectProperty("getRayfireMapObject");
			return (int) getRayfireMapObject.Call(native, x, y, z, radius, name);
		}

		public void SetStateOfRayfireMapObject(int @object, int state)
		{
			if (setStateOfRayfireMapObject == null) setStateOfRayfireMapObject = (Function) native.GetObjectProperty("setStateOfRayfireMapObject");
			setStateOfRayfireMapObject.Call(native, @object, state);
		}

		public int GetStateOfRayfireMapObject(int @object)
		{
			if (getStateOfRayfireMapObject == null) getStateOfRayfireMapObject = (Function) native.GetObjectProperty("getStateOfRayfireMapObject");
			return (int) getStateOfRayfireMapObject.Call(native, @object);
		}

		public bool DoesRayfireMapObjectExist(int @object)
		{
			if (doesRayfireMapObjectExist == null) doesRayfireMapObjectExist = (Function) native.GetObjectProperty("doesRayfireMapObjectExist");
			return (bool) doesRayfireMapObjectExist.Call(native, @object);
		}

		public double GetRayfireMapObjectAnimPhase(int @object)
		{
			if (getRayfireMapObjectAnimPhase == null) getRayfireMapObjectAnimPhase = (Function) native.GetObjectProperty("getRayfireMapObjectAnimPhase");
			return (double) getRayfireMapObjectAnimPhase.Call(native, @object);
		}

		/// <summary>
		/// Pickup hashes: pastebin.com/8EuSv2r1
		/// </summary>
		public int CreatePickup(int pickupHash, double posX, double posY, double posZ, int p4, int value, bool p6, int modelHash)
		{
			if (createPickup == null) createPickup = (Function) native.GetObjectProperty("createPickup");
			return (int) createPickup.Call(native, pickupHash, posX, posY, posZ, p4, value, p6, modelHash);
		}

		/// <summary>
		/// Pickup hashes: pastebin.com/8EuSv2r1
		/// flags:
		/// 8 (1 << 3): place on ground
		/// 512 (1 << 9): spin around
		/// </summary>
		public int CreatePickupRotate(int pickupHash, double posX, double posY, double posZ, double rotX, double rotY, double rotZ, int flag, int amount, object p9, bool p10, int modelHash)
		{
			if (createPickupRotate == null) createPickupRotate = (Function) native.GetObjectProperty("createPickupRotate");
			return (int) createPickupRotate.Call(native, pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash);
		}

		public void _0x394CD08E31313C28()
		{
			if (__0x394CD08E31313C28 == null) __0x394CD08E31313C28 = (Function) native.GetObjectProperty("_0x394CD08E31313C28");
			__0x394CD08E31313C28.Call(native);
		}

		public void _0x826D1EE4D1CAFC78(object p0, object p1)
		{
			if (__0x826D1EE4D1CAFC78 == null) __0x826D1EE4D1CAFC78 = (Function) native.GetObjectProperty("_0x826D1EE4D1CAFC78");
			__0x826D1EE4D1CAFC78.Call(native, p0, p1);
		}

		/// <summary>
		/// Used for doing money drop
		/// Pickup hashes: pastebin.com/8EuSv2r1
		/// </summary>
		public int CreateAmbientPickup(int pickupHash, double posX, double posY, double posZ, int flags, int value, int modelHash, bool p7, bool p8)
		{
			if (createAmbientPickup == null) createAmbientPickup = (Function) native.GetObjectProperty("createAmbientPickup");
			return (int) createAmbientPickup.Call(native, pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);
		}

		public void _0x1E3F1B1B891A2AAA(object p0, object p1)
		{
			if (__0x1E3F1B1B891A2AAA == null) __0x1E3F1B1B891A2AAA = (Function) native.GetObjectProperty("_0x1E3F1B1B891A2AAA");
			__0x1E3F1B1B891A2AAA.Call(native, p0, p1);
		}

		/// <summary>
		/// Pickup hashes: pastebin.com/8EuSv2r1
		/// </summary>
		public int CreatePortablePickup(int pickupHash, double x, double y, double z, bool placeOnGround, int modelHash)
		{
			if (createPortablePickup == null) createPortablePickup = (Function) native.GetObjectProperty("createPortablePickup");
			return (int) createPortablePickup.Call(native, pickupHash, x, y, z, placeOnGround, modelHash);
		}

		/// <summary>
		/// CREATE_*
		/// </summary>
		public int CreatePortablePickup2(int pickupHash, double x, double y, double z, bool placeOnGround, int modelHash)
		{
			if (createPortablePickup2 == null) createPortablePickup2 = (Function) native.GetObjectProperty("createPortablePickup2");
			return (int) createPortablePickup2.Call(native, pickupHash, x, y, z, placeOnGround, modelHash);
		}

		public void AttachPortablePickupToPed(int pickupObject, int ped)
		{
			if (attachPortablePickupToPed == null) attachPortablePickupToPed = (Function) native.GetObjectProperty("attachPortablePickupToPed");
			attachPortablePickupToPed.Call(native, pickupObject, ped);
		}

		public void DetachPortablePickupFromPed(int pickupObject)
		{
			if (detachPortablePickupFromPed == null) detachPortablePickupFromPed = (Function) native.GetObjectProperty("detachPortablePickupFromPed");
			detachPortablePickupFromPed.Call(native, pickupObject);
		}

		public void HidePickup(int pickupObject, bool toggle)
		{
			if (hidePickup == null) hidePickup = (Function) native.GetObjectProperty("hidePickup");
			hidePickup.Call(native, pickupObject, toggle);
		}

		public void _0x0BF3B3BD47D79C08(int modelHash, int p1)
		{
			if (__0x0BF3B3BD47D79C08 == null) __0x0BF3B3BD47D79C08 = (Function) native.GetObjectProperty("_0x0BF3B3BD47D79C08");
			__0x0BF3B3BD47D79C08.Call(native, modelHash, p1);
		}

		public void _0x78857FC65CADB909(bool p0)
		{
			if (__0x78857FC65CADB909 == null) __0x78857FC65CADB909 = (Function) native.GetObjectProperty("_0x78857FC65CADB909");
			__0x78857FC65CADB909.Call(native, p0);
		}

		public Vector3 GetSafePickupCoords(double x, double y, double z, double p3, double p4)
		{
			if (getSafePickupCoords == null) getSafePickupCoords = (Function) native.GetObjectProperty("getSafePickupCoords");
			return JSObjectToVector3(getSafePickupCoords.Call(native, x, y, z, p3, p4));
		}

		/// <summary>
		/// Adds an area that seems to be related to pickup physics behavior.
		/// Max amount of areas is 10. Only works in multiplayer.
		/// ADD_*
		/// </summary>
		public void _0xD4A7A435B3710D05(double x, double y, double z, double radius)
		{
			if (__0xD4A7A435B3710D05 == null) __0xD4A7A435B3710D05 = (Function) native.GetObjectProperty("_0xD4A7A435B3710D05");
			__0xD4A7A435B3710D05.Call(native, x, y, z, radius);
		}

		/// <summary>
		/// Clears all areas created by 0xD4A7A435B3710D05
		/// CLEAR_*
		/// </summary>
		public void _0xB7C6D80FB371659A()
		{
			if (__0xB7C6D80FB371659A == null) __0xB7C6D80FB371659A = (Function) native.GetObjectProperty("_0xB7C6D80FB371659A");
			__0xB7C6D80FB371659A.Call(native);
		}

		public Vector3 GetPickupCoords(int pickup)
		{
			if (getPickupCoords == null) getPickupCoords = (Function) native.GetObjectProperty("getPickupCoords");
			return JSObjectToVector3(getPickupCoords.Call(native, pickup));
		}

		public void _0x8DCA505A5C196F05(object p0, object p1)
		{
			if (__0x8DCA505A5C196F05 == null) __0x8DCA505A5C196F05 = (Function) native.GetObjectProperty("_0x8DCA505A5C196F05");
			__0x8DCA505A5C196F05.Call(native, p0, p1);
		}

		/// <summary>
		/// Pickup hashes: pastebin.com/8EuSv2r1
		/// </summary>
		public void RemoveAllPickupsOfType(int pickupHash)
		{
			if (removeAllPickupsOfType == null) removeAllPickupsOfType = (Function) native.GetObjectProperty("removeAllPickupsOfType");
			removeAllPickupsOfType.Call(native, pickupHash);
		}

		public bool HasPickupBeenCollected(int pickup)
		{
			if (hasPickupBeenCollected == null) hasPickupBeenCollected = (Function) native.GetObjectProperty("hasPickupBeenCollected");
			return (bool) hasPickupBeenCollected.Call(native, pickup);
		}

		public void RemovePickup(int pickup)
		{
			if (removePickup == null) removePickup = (Function) native.GetObjectProperty("removePickup");
			removePickup.Call(native, pickup);
		}

		/// <summary>
		/// Spawns one or more money pickups.
		/// x: The X-component of the world position to spawn the money pickups at.
		/// y: The Y-component of the world position to spawn the money pickups at.
		/// z: The Z-component of the world position to spawn the money pickups at.
		/// value: The combined value of the pickups (in dollars).
		/// amount: The number of pickups to spawn.
		/// model: The model to use, or 0 for default money model.
		/// Example:
		/// CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x0589B5E791CE9B2B
		/// </summary>
		/// <param name="x">The X-component of the world position to spawn the money pickups at.</param>
		/// <param name="y">The Y-component of the world position to spawn the money pickups at.</param>
		/// <param name="z">The Z-component of the world position to spawn the money pickups at.</param>
		/// <param name="value">The combined value of the pickups (in dollars).</param>
		/// <param name="amount">The number of pickups to spawn.</param>
		/// <param name="model">The model to use, or 0 for default money model.</param>
		public void CreateMoneyPickups(double x, double y, double z, int value, int amount, int model)
		{
			if (createMoneyPickups == null) createMoneyPickups = (Function) native.GetObjectProperty("createMoneyPickups");
			createMoneyPickups.Call(native, x, y, z, value, amount, model);
		}

		public bool DoesPickupExist(int pickup)
		{
			if (doesPickupExist == null) doesPickupExist = (Function) native.GetObjectProperty("doesPickupExist");
			return (bool) doesPickupExist.Call(native, pickup);
		}

		public bool DoesPickupObjectExist(int pickupObject)
		{
			if (doesPickupObjectExist == null) doesPickupObjectExist = (Function) native.GetObjectProperty("doesPickupObjectExist");
			return (bool) doesPickupObjectExist.Call(native, pickupObject);
		}

		public int GetPickupObject(int pickup)
		{
			if (getPickupObject == null) getPickupObject = (Function) native.GetObjectProperty("getPickupObject");
			return (int) getPickupObject.Call(native, pickup);
		}

		public object _0xFC481C641EBBD27D(object p0)
		{
			if (__0xFC481C641EBBD27D == null) __0xFC481C641EBBD27D = (Function) native.GetObjectProperty("_0xFC481C641EBBD27D");
			return __0xFC481C641EBBD27D.Call(native, p0);
		}

		public bool _0x0378C08504160D0D(object p0)
		{
			if (__0x0378C08504160D0D == null) __0x0378C08504160D0D = (Function) native.GetObjectProperty("_0x0378C08504160D0D");
			return (bool) __0x0378C08504160D0D.Call(native, p0);
		}

		/// <summary>
		/// Pickup hashes: pastebin.com/8EuSv2r1
		/// </summary>
		public bool DoesPickupOfTypeExistInArea(int pickupHash, double x, double y, double z, double radius)
		{
			if (doesPickupOfTypeExistInArea == null) doesPickupOfTypeExistInArea = (Function) native.GetObjectProperty("doesPickupOfTypeExistInArea");
			return (bool) doesPickupOfTypeExistInArea.Call(native, pickupHash, x, y, z, radius);
		}

		public void SetPickupRegenerationTime(int pickup, int duration)
		{
			if (setPickupRegenerationTime == null) setPickupRegenerationTime = (Function) native.GetObjectProperty("setPickupRegenerationTime");
			setPickupRegenerationTime.Call(native, pickup, duration);
		}

		public void _0x758A5C1B3B1E1990(object p0)
		{
			if (__0x758A5C1B3B1E1990 == null) __0x758A5C1B3B1E1990 = (Function) native.GetObjectProperty("_0x758A5C1B3B1E1990");
			__0x758A5C1B3B1E1990.Call(native, p0);
		}

		/// <summary>
		/// From the scripts:
		/// OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
		/// OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
		/// OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
		/// OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
		/// OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
		/// OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);
		/// SET_PLAYER_*
		/// </summary>
		public void _0x616093EC6B139DD9(int player, int pickupHash, bool toggle)
		{
			if (__0x616093EC6B139DD9 == null) __0x616093EC6B139DD9 = (Function) native.GetObjectProperty("_0x616093EC6B139DD9");
			__0x616093EC6B139DD9.Call(native, player, pickupHash, toggle);
		}

		/// <summary>
		/// Maximum amount of pickup models that can be disallowed is 30.
		/// SET_LOCAL_PLAYER_*
		/// </summary>
		public void SetLocalPlayerCanUsePickupsWithThisModel(int modelHash, bool toggle)
		{
			if (setLocalPlayerCanUsePickupsWithThisModel == null) setLocalPlayerCanUsePickupsWithThisModel = (Function) native.GetObjectProperty("setLocalPlayerCanUsePickupsWithThisModel");
			setLocalPlayerCanUsePickupsWithThisModel.Call(native, modelHash, toggle);
		}

		/// <summary>
		/// A*
		/// </summary>
		public void _0xFDC07C58E8AAB715(int pickupHash)
		{
			if (__0xFDC07C58E8AAB715 == null) __0xFDC07C58E8AAB715 = (Function) native.GetObjectProperty("_0xFDC07C58E8AAB715");
			__0xFDC07C58E8AAB715.Call(native, pickupHash);
		}

		public void SetTeamPickupObject(int @object, object p1, bool p2)
		{
			if (setTeamPickupObject == null) setTeamPickupObject = (Function) native.GetObjectProperty("setTeamPickupObject");
			setTeamPickupObject.Call(native, @object, p1, p2);
		}

		public void _0x92AEFB5F6E294023(int @object, bool p1, bool p2)
		{
			if (__0x92AEFB5F6E294023 == null) __0x92AEFB5F6E294023 = (Function) native.GetObjectProperty("_0x92AEFB5F6E294023");
			__0x92AEFB5F6E294023.Call(native, @object, p1, p2);
		}

		public void _0x0596843B34B95CE5(object p0, object p1)
		{
			if (__0x0596843B34B95CE5 == null) __0x0596843B34B95CE5 = (Function) native.GetObjectProperty("_0x0596843B34B95CE5");
			__0x0596843B34B95CE5.Call(native, p0, p1);
		}

		public void _0xA08FE5E49BDC39DD(object p0, double p1, bool p2)
		{
			if (__0xA08FE5E49BDC39DD == null) __0xA08FE5E49BDC39DD = (Function) native.GetObjectProperty("_0xA08FE5E49BDC39DD");
			__0xA08FE5E49BDC39DD.Call(native, p0, p1, p2);
		}

		public void _0x62454A641B41F3C5(object p0)
		{
			if (__0x62454A641B41F3C5 == null) __0x62454A641B41F3C5 = (Function) native.GetObjectProperty("_0x62454A641B41F3C5");
			__0x62454A641B41F3C5.Call(native, p0);
		}

		public void _0x39A5FB7EAF150840(object p0, object p1)
		{
			if (__0x39A5FB7EAF150840 == null) __0x39A5FB7EAF150840 = (Function) native.GetObjectProperty("_0x39A5FB7EAF150840");
			__0x39A5FB7EAF150840.Call(native, p0, p1);
		}

		public object _0xDB41D07A45A6D4B7(object p0)
		{
			if (__0xDB41D07A45A6D4B7 == null) __0xDB41D07A45A6D4B7 = (Function) native.GetObjectProperty("_0xDB41D07A45A6D4B7");
			return __0xDB41D07A45A6D4B7.Call(native, p0);
		}

		public void SetPickupGenerationRangeMultiplier(double multiplier)
		{
			if (setPickupGenerationRangeMultiplier == null) setPickupGenerationRangeMultiplier = (Function) native.GetObjectProperty("setPickupGenerationRangeMultiplier");
			setPickupGenerationRangeMultiplier.Call(native, multiplier);
		}

		public double GetPickupGenerationRangeMultiplier()
		{
			if (getPickupGenerationRangeMultiplier == null) getPickupGenerationRangeMultiplier = (Function) native.GetObjectProperty("getPickupGenerationRangeMultiplier");
			return (double) getPickupGenerationRangeMultiplier.Call(native);
		}

		public void _0x31F924B53EADDF65(bool p0)
		{
			if (__0x31F924B53EADDF65 == null) __0x31F924B53EADDF65 = (Function) native.GetObjectProperty("_0x31F924B53EADDF65");
			__0x31F924B53EADDF65.Call(native, p0);
		}

		public void _0x1C1B69FAE509BA97(object p0, object p1)
		{
			if (__0x1C1B69FAE509BA97 == null) __0x1C1B69FAE509BA97 = (Function) native.GetObjectProperty("_0x1C1B69FAE509BA97");
			__0x1C1B69FAE509BA97.Call(native, p0, p1);
		}

		public void _0x858EC9FD25DE04AA(object p0, object p1)
		{
			if (__0x858EC9FD25DE04AA == null) __0x858EC9FD25DE04AA = (Function) native.GetObjectProperty("_0x858EC9FD25DE04AA");
			__0x858EC9FD25DE04AA.Call(native, p0, p1);
		}

		public void _0x3ED2B83AB2E82799(object p0, object p1)
		{
			if (__0x3ED2B83AB2E82799 == null) __0x3ED2B83AB2E82799 = (Function) native.GetObjectProperty("_0x3ED2B83AB2E82799");
			__0x3ED2B83AB2E82799.Call(native, p0, p1);
		}

		public void _0x8881C98A31117998(object p0, object p1)
		{
			if (__0x8881C98A31117998 == null) __0x8881C98A31117998 = (Function) native.GetObjectProperty("_0x8881C98A31117998");
			__0x8881C98A31117998.Call(native, p0, p1);
		}

		public void _0x8CFF648FBD7330F1(object p0)
		{
			if (__0x8CFF648FBD7330F1 == null) __0x8CFF648FBD7330F1 = (Function) native.GetObjectProperty("_0x8CFF648FBD7330F1");
			__0x8CFF648FBD7330F1.Call(native, p0);
		}

		public void _0x46F3ADD1E2D5BAF2(object p0, object p1)
		{
			if (__0x46F3ADD1E2D5BAF2 == null) __0x46F3ADD1E2D5BAF2 = (Function) native.GetObjectProperty("_0x46F3ADD1E2D5BAF2");
			__0x46F3ADD1E2D5BAF2.Call(native, p0, p1);
		}

		public void _0x641F272B52E2F0F8(object p0, object p1)
		{
			if (__0x641F272B52E2F0F8 == null) __0x641F272B52E2F0F8 = (Function) native.GetObjectProperty("_0x641F272B52E2F0F8");
			__0x641F272B52E2F0F8.Call(native, p0, p1);
		}

		public void _0x4C134B4DF76025D0(object p0, object p1)
		{
			if (__0x4C134B4DF76025D0 == null) __0x4C134B4DF76025D0 = (Function) native.GetObjectProperty("_0x4C134B4DF76025D0");
			__0x4C134B4DF76025D0.Call(native, p0, p1);
		}

		public void _0xAA059C615DE9DD03(object p0, object p1)
		{
			if (__0xAA059C615DE9DD03 == null) __0xAA059C615DE9DD03 = (Function) native.GetObjectProperty("_0xAA059C615DE9DD03");
			__0xAA059C615DE9DD03.Call(native, p0, p1);
		}

		public void _0xF92099527DB8E2A7(object p0, object p1)
		{
			if (__0xF92099527DB8E2A7 == null) __0xF92099527DB8E2A7 = (Function) native.GetObjectProperty("_0xF92099527DB8E2A7");
			__0xF92099527DB8E2A7.Call(native, p0, p1);
		}

		/// <summary>
		/// CLEAR_*
		/// </summary>
		public void _0xA2C1F5E92AFE49ED()
		{
			if (__0xA2C1F5E92AFE49ED == null) __0xA2C1F5E92AFE49ED = (Function) native.GetObjectProperty("_0xA2C1F5E92AFE49ED");
			__0xA2C1F5E92AFE49ED.Call(native);
		}

		public void _0x762DB2D380B48D04(object p0)
		{
			if (__0x762DB2D380B48D04 == null) __0x762DB2D380B48D04 = (Function) native.GetObjectProperty("_0x762DB2D380B48D04");
			__0x762DB2D380B48D04.Call(native, p0);
		}

		/// <summary>
		/// draws circular marker at pos
		/// -1 = none
		/// 0 = red
		/// 1 = green
		/// 2 = blue
		/// 3 = green larger
		/// 4 = nothing
		/// 5 = green small
		/// </summary>
		public void HighlightPlacementCoords(double x, double y, double z, int colorIndex)
		{
			if (highlightPlacementCoords == null) highlightPlacementCoords = (Function) native.GetObjectProperty("highlightPlacementCoords");
			highlightPlacementCoords.Call(native, x, y, z, colorIndex);
		}

		/// <summary>
		/// SET_PICKUP_*
		/// </summary>
		public void _0x7813E8B8C4AE4799(int pickup)
		{
			if (__0x7813E8B8C4AE4799 == null) __0x7813E8B8C4AE4799 = (Function) native.GetObjectProperty("_0x7813E8B8C4AE4799");
			__0x7813E8B8C4AE4799.Call(native, pickup);
		}

		public void _0xBFFE53AE7E67FCDC(object p0, object p1)
		{
			if (__0xBFFE53AE7E67FCDC == null) __0xBFFE53AE7E67FCDC = (Function) native.GetObjectProperty("_0xBFFE53AE7E67FCDC");
			__0xBFFE53AE7E67FCDC.Call(native, p0, p1);
		}

		public void _0xD05A3241B9A86F19(object p0, object p1)
		{
			if (__0xD05A3241B9A86F19 == null) __0xD05A3241B9A86F19 = (Function) native.GetObjectProperty("_0xD05A3241B9A86F19");
			__0xD05A3241B9A86F19.Call(native, p0, p1);
		}

		public void _0xB2D0BDE54F0E8E5A(int @object, bool toggle)
		{
			if (__0xB2D0BDE54F0E8E5A == null) __0xB2D0BDE54F0E8E5A = (Function) native.GetObjectProperty("_0xB2D0BDE54F0E8E5A");
			__0xB2D0BDE54F0E8E5A.Call(native, @object, toggle);
		}

		public int GetWeaponTypeFromPickupType(int pickupHash)
		{
			if (getWeaponTypeFromPickupType == null) getWeaponTypeFromPickupType = (Function) native.GetObjectProperty("getWeaponTypeFromPickupType");
			return (int) getWeaponTypeFromPickupType.Call(native, pickupHash);
		}

		public object _0xD6429A016084F1A5(object p0)
		{
			if (__0xD6429A016084F1A5 == null) __0xD6429A016084F1A5 = (Function) native.GetObjectProperty("_0xD6429A016084F1A5");
			return __0xD6429A016084F1A5.Call(native, p0);
		}

		public bool IsPickupWeaponObjectValid(int @object)
		{
			if (isPickupWeaponObjectValid == null) isPickupWeaponObjectValid = (Function) native.GetObjectProperty("isPickupWeaponObjectValid");
			return (bool) isPickupWeaponObjectValid.Call(native, @object);
		}

		public int GetObjectTextureVariation(int @object)
		{
			if (getObjectTextureVariation == null) getObjectTextureVariation = (Function) native.GetObjectProperty("getObjectTextureVariation");
			return (int) getObjectTextureVariation.Call(native, @object);
		}

		/// <summary>
		/// enum ObjectPaintVariants
		/// {
		/// Pacific = 0,
		/// Azure = 1,
		/// Nautical = 2,
		/// Continental = 3,
		/// Battleship = 4,
		/// Intrepid = 5,
		/// Uniform = 6,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x971DA0055324D033
		/// </summary>
		public void SetObjectTextureVariation(int @object, int textureVariation)
		{
			if (setObjectTextureVariation == null) setObjectTextureVariation = (Function) native.GetObjectProperty("setObjectTextureVariation");
			setObjectTextureVariation.Call(native, @object, textureVariation);
		}

		public object _0xF12E33034D887F66(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (__0xF12E33034D887F66 == null) __0xF12E33034D887F66 = (Function) native.GetObjectProperty("_0xF12E33034D887F66");
			return __0xF12E33034D887F66.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public object SetObjectLightColor(int @object, bool p1, int r, int g, int b)
		{
			if (setObjectLightColor == null) setObjectLightColor = (Function) native.GetObjectProperty("setObjectLightColor");
			return setObjectLightColor.Call(native, @object, p1, r, g, b);
		}

		public object SetObjectColour(int @object, bool toggle, int red, int green, int blue)
		{
			if (setObjectColour == null) setObjectColour = (Function) native.GetObjectProperty("setObjectColour");
			return setObjectColour.Call(native, @object, toggle, red, green, blue);
		}

		/// <summary>
		/// SET_OBJECT_*
		/// </summary>
		public void _0x3B2FD68DB5F8331C(int @object, bool toggle)
		{
			if (__0x3B2FD68DB5F8331C == null) __0x3B2FD68DB5F8331C = (Function) native.GetObjectProperty("_0x3B2FD68DB5F8331C");
			__0x3B2FD68DB5F8331C.Call(native, @object, toggle);
		}

		public void SetObjectStuntPropSpeedup(object p0, object p1)
		{
			if (setObjectStuntPropSpeedup == null) setObjectStuntPropSpeedup = (Function) native.GetObjectProperty("setObjectStuntPropSpeedup");
			setObjectStuntPropSpeedup.Call(native, p0, p1);
		}

		public void SetObjectStuntPropDuration(object p0, object p1)
		{
			if (setObjectStuntPropDuration == null) setObjectStuntPropDuration = (Function) native.GetObjectProperty("setObjectStuntPropDuration");
			setObjectStuntPropDuration.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>returns pickup hash.</returns>
		public int GetPickupHash(int pickupHash)
		{
			if (getPickupHash == null) getPickupHash = (Function) native.GetObjectProperty("getPickupHash");
			return (int) getPickupHash.Call(native, pickupHash);
		}

		public void SetForceObjectThisFrame(double x, double y, double z, double p3)
		{
			if (setForceObjectThisFrame == null) setForceObjectThisFrame = (Function) native.GetObjectProperty("setForceObjectThisFrame");
			setForceObjectThisFrame.Call(native, x, y, z, p3);
		}

		/// <summary>
		/// is this like setting is as no longer needed?
		/// </summary>
		public void MarkObjectForDeletion(int @object)
		{
			if (markObjectForDeletion == null) markObjectForDeletion = (Function) native.GetObjectProperty("markObjectForDeletion");
			markObjectForDeletion.Call(native, @object);
		}

		public void _0x8CAAB2BD3EA58BD4(object p0)
		{
			if (__0x8CAAB2BD3EA58BD4 == null) __0x8CAAB2BD3EA58BD4 = (Function) native.GetObjectProperty("_0x8CAAB2BD3EA58BD4");
			__0x8CAAB2BD3EA58BD4.Call(native, p0);
		}

		public void _0x63ECF581BC70E363(object p0, object p1)
		{
			if (__0x63ECF581BC70E363 == null) __0x63ECF581BC70E363 = (Function) native.GetObjectProperty("_0x63ECF581BC70E363");
			__0x63ECF581BC70E363.Call(native, p0, p1);
		}

		public void SetEnableArenaPropPhysics(object p0, object p1, object p2)
		{
			if (setEnableArenaPropPhysics == null) setEnableArenaPropPhysics = (Function) native.GetObjectProperty("setEnableArenaPropPhysics");
			setEnableArenaPropPhysics.Call(native, p0, p1, p2);
		}

		public void SetEnableArenaPropPhysicsOnPed(object p0, object p1, object p2, object p3)
		{
			if (setEnableArenaPropPhysicsOnPed == null) setEnableArenaPropPhysicsOnPed = (Function) native.GetObjectProperty("setEnableArenaPropPhysicsOnPed");
			setEnableArenaPropPhysicsOnPed.Call(native, p0, p1, p2, p3);
		}

		public void _0x734E1714D077DA9A(object p0, object p1)
		{
			if (__0x734E1714D077DA9A == null) __0x734E1714D077DA9A = (Function) native.GetObjectProperty("_0x734E1714D077DA9A");
			__0x734E1714D077DA9A.Call(native, p0, p1);
		}

		public void _0x1A6CBB06E2D0D79D(object p0, object p1)
		{
			if (__0x1A6CBB06E2D0D79D == null) __0x1A6CBB06E2D0D79D = (Function) native.GetObjectProperty("_0x1A6CBB06E2D0D79D");
			__0x1A6CBB06E2D0D79D.Call(native, p0, p1);
		}

		public object GetIsArenaPropPhysicsDisabled(object p0, object p1)
		{
			if (getIsArenaPropPhysicsDisabled == null) getIsArenaPropPhysicsDisabled = (Function) native.GetObjectProperty("getIsArenaPropPhysicsDisabled");
			return getIsArenaPropPhysicsDisabled.Call(native, p0, p1);
		}

		public object _0x3BD770D281982DB5(object p0, object p1)
		{
			if (__0x3BD770D281982DB5 == null) __0x3BD770D281982DB5 = (Function) native.GetObjectProperty("_0x3BD770D281982DB5");
			return __0x3BD770D281982DB5.Call(native, p0, p1);
		}

		public void _0x1C57C94A6446492A(object p0, object p1)
		{
			if (__0x1C57C94A6446492A == null) __0x1C57C94A6446492A = (Function) native.GetObjectProperty("_0x1C57C94A6446492A");
			__0x1C57C94A6446492A.Call(native, p0, p1);
		}

		public void _0xB5B7742424BD4445(object p0, object p1)
		{
			if (__0xB5B7742424BD4445 == null) __0xB5B7742424BD4445 = (Function) native.GetObjectProperty("_0xB5B7742424BD4445");
			__0xB5B7742424BD4445.Call(native, p0, p1);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsControlEnabled(int padIndex, int control)
		{
			if (isControlEnabled == null) isControlEnabled = (Function) native.GetObjectProperty("isControlEnabled");
			return (bool) isControlEnabled.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsControlPressed(int padIndex, int control)
		{
			if (isControlPressed == null) isControlPressed = (Function) native.GetObjectProperty("isControlPressed");
			return (bool) isControlPressed.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsControlReleased(int padIndex, int control)
		{
			if (isControlReleased == null) isControlReleased = (Function) native.GetObjectProperty("isControlReleased");
			return (bool) isControlReleased.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsControlJustPressed(int padIndex, int control)
		{
			if (isControlJustPressed == null) isControlJustPressed = (Function) native.GetObjectProperty("isControlJustPressed");
			return (bool) isControlJustPressed.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsControlJustReleased(int padIndex, int control)
		{
			if (isControlJustReleased == null) isControlJustReleased = (Function) native.GetObjectProperty("isControlJustReleased");
			return (bool) isControlJustReleased.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public int GetControlValue(int padIndex, int control)
		{
			if (getControlValue == null) getControlValue = (Function) native.GetObjectProperty("getControlValue");
			return (int) getControlValue.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		/// <returns>Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)</returns>
		public double GetControlNormal(int padIndex, int control)
		{
			if (getControlNormal == null) getControlNormal = (Function) native.GetObjectProperty("getControlNormal");
			return (double) getControlNormal.Call(native, padIndex, control);
		}

		public void _0x5B73C77D9EB66E24(bool p0)
		{
			if (__0x5B73C77D9EB66E24 == null) __0x5B73C77D9EB66E24 = (Function) native.GetObjectProperty("_0x5B73C77D9EB66E24");
			__0x5B73C77D9EB66E24.Call(native, p0);
		}

		/// <summary>
		/// Seems to return values between -1 and 1 for controls like gas and steering.
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public double GetControlUnboundNormal(int padIndex, int control)
		{
			if (getControlUnboundNormal == null) getControlUnboundNormal = (Function) native.GetObjectProperty("getControlUnboundNormal");
			return (double) getControlUnboundNormal.Call(native, padIndex, control);
		}

		/// <summary>
		/// This is for simulating player input.
		/// amount is a float value from 0 - 1
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		/// <param name="amount">is a float value from 0 - 1</param>
		public bool SetControlNormal(int padIndex, int control, double amount)
		{
			if (setControlNormal == null) setControlNormal = (Function) native.GetObjectProperty("setControlNormal");
			return (bool) setControlNormal.Call(native, padIndex, control, amount);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsDisabledControlPressed(int padIndex, int control)
		{
			if (isDisabledControlPressed == null) isDisabledControlPressed = (Function) native.GetObjectProperty("isDisabledControlPressed");
			return (bool) isDisabledControlPressed.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsDisabledControlReleased(int padIndex, int control)
		{
			if (isDisabledControlReleased == null) isDisabledControlReleased = (Function) native.GetObjectProperty("isDisabledControlReleased");
			return (bool) isDisabledControlReleased.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsDisabledControlJustPressed(int padIndex, int control)
		{
			if (isDisabledControlJustPressed == null) isDisabledControlJustPressed = (Function) native.GetObjectProperty("isDisabledControlJustPressed");
			return (bool) isDisabledControlJustPressed.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool IsDisabledControlJustReleased(int padIndex, int control)
		{
			if (isDisabledControlJustReleased == null) isDisabledControlJustReleased = (Function) native.GetObjectProperty("isDisabledControlJustReleased");
			return (bool) isDisabledControlJustReleased.Call(native, padIndex, control);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		/// <returns>control - c# works with (int)GTA.Control.CursorY / (int)GTA.Control.CursorX and returns the mouse movement (additive).</returns>
		public double GetDisabledControlNormal(int padIndex, int control)
		{
			if (getDisabledControlNormal == null) getDisabledControlNormal = (Function) native.GetObjectProperty("getDisabledControlNormal");
			return (double) getDisabledControlNormal.Call(native, padIndex, control);
		}

		/// <summary>
		/// The "disabled" variant of _0x5B84D09CEC5209C5.
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public double GetDisabledControlUnboundNormal(int padIndex, int control)
		{
			if (getDisabledControlUnboundNormal == null) getDisabledControlUnboundNormal = (Function) native.GetObjectProperty("getDisabledControlUnboundNormal");
			return (double) getDisabledControlUnboundNormal.Call(native, padIndex, control);
		}

		public int _0xD7D22F5592AED8BA(int p0)
		{
			if (__0xD7D22F5592AED8BA == null) __0xD7D22F5592AED8BA = (Function) native.GetObjectProperty("_0xD7D22F5592AED8BA");
			return (int) __0xD7D22F5592AED8BA.Call(native, p0);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// Seems to return true if the input is currently disabled. "_GET_LAST_INPUT_METHOD" didn't seem very accurate, but I've left the original description below.
		/// --
		/// index usually 2
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		/// <returns>returns true if the last input method was made with mouse + keyboard, false if it was made with a gamepad</returns>
		public bool IsInputDisabled(int padIndex)
		{
			if (isInputDisabled == null) isInputDisabled = (Function) native.GetObjectProperty("isInputDisabled");
			return (bool) isInputDisabled.Call(native, padIndex);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		/// <returns>I may be wrong with this one, but from the looks of the scripts, it sets keyboard related stuff as soon as this returns true.</returns>
		public bool IsInputJustDisabled(int padIndex)
		{
			if (isInputJustDisabled == null) isInputJustDisabled = (Function) native.GetObjectProperty("isInputJustDisabled");
			return (bool) isInputJustDisabled.Call(native, padIndex);
		}

		/// <summary>
		/// Renamed to _SET_CURSOR_LOCATION (I previously named it _SET_CURSOR_POSTION) which is the correct name as far as I can tell.
		/// </summary>
		public bool SetCursorLocation(double x, double y)
		{
			if (setCursorLocation == null) setCursorLocation = (Function) native.GetObjectProperty("setCursorLocation");
			return (bool) setCursorLocation.Call(native, x, y);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// Hardcoded to return false.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool _0x23F09EADC01449D6(int padIndex)
		{
			if (__0x23F09EADC01449D6 == null) __0x23F09EADC01449D6 = (Function) native.GetObjectProperty("_0x23F09EADC01449D6");
			return (bool) __0x23F09EADC01449D6.Call(native, padIndex);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public bool _0x6CD79468A1E595C6(int padIndex)
		{
			if (__0x6CD79468A1E595C6 == null) __0x6CD79468A1E595C6 = (Function) native.GetObjectProperty("_0x6CD79468A1E595C6");
			return (bool) __0x6CD79468A1E595C6.Call(native, padIndex);
		}

		/// <summary>
		/// formerly called _GET_CONTROL_ACTION_NAME incorrectly
		/// p2 appears to always be true.
		/// p2 is unused variable in function.
		/// EG:
		/// GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) INPUT_FRONTEND_ACCEPT (e.g. Enter button)
		/// GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) INPUT_FRONTEND_CANCEL (e.g. ESC button)
		/// GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) INPUT_CONTEXT (e.g. E button)
		/// gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		/// <param name="p2">is unused variable in function.</param>
		public string GetControlInstructionalButton(int padIndex, int control, bool p2)
		{
			if (getControlInstructionalButton == null) getControlInstructionalButton = (Function) native.GetObjectProperty("getControlInstructionalButton");
			return (string) getControlInstructionalButton.Call(native, padIndex, control, p2);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public string GetControlGroupInstructionalButton(int padIndex, int controlGroup, bool p2)
		{
			if (getControlGroupInstructionalButton == null) getControlGroupInstructionalButton = (Function) native.GetObjectProperty("getControlGroupInstructionalButton");
			return (string) getControlGroupInstructionalButton.Call(native, padIndex, controlGroup, p2);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public void SetControlGroupColor(int padIndex, int red, int green, int blue)
		{
			if (setControlGroupColor == null) setControlGroupColor = (Function) native.GetObjectProperty("setControlGroupColor");
			setControlGroupColor.Call(native, padIndex, red, green, blue);
		}

		public void _0xCB0360EFEFB2580D(int padIndex)
		{
			if (__0xCB0360EFEFB2580D == null) __0xCB0360EFEFB2580D = (Function) native.GetObjectProperty("_0xCB0360EFEFB2580D");
			__0xCB0360EFEFB2580D.Call(native, padIndex);
		}

		/// <summary>
		/// padIndex always seems to be 0
		/// duration in milliseconds
		/// frequency should range from about 10 (slow vibration) to 255 (very fast)
		/// appears to be a hash collision, though it does do what it says
		/// example:
		/// SET_PAD_SHAKE(0, 100, 200);
		/// </summary>
		/// <param name="padIndex">always seems to be 0</param>
		/// <param name="duration">in milliseconds </param>
		/// <param name="frequency">should range from about 10 (slow vibration) to 255 (very fast)</param>
		public void SetPadShake(int padIndex, int duration, int frequency)
		{
			if (setPadShake == null) setPadShake = (Function) native.GetObjectProperty("setPadShake");
			setPadShake.Call(native, padIndex, duration, frequency);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0x14D29BB12D47F68C(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0x14D29BB12D47F68C == null) __0x14D29BB12D47F68C = (Function) native.GetObjectProperty("_0x14D29BB12D47F68C");
			__0x14D29BB12D47F68C.Call(native, p0, p1, p2, p3, p4);
		}

		public void StopPadShake(int padIndex)
		{
			if (stopPadShake == null) stopPadShake = (Function) native.GetObjectProperty("stopPadShake");
			stopPadShake.Call(native, padIndex);
		}

		public void _0xF239400E16C23E08(object p0, object p1)
		{
			if (__0xF239400E16C23E08 == null) __0xF239400E16C23E08 = (Function) native.GetObjectProperty("_0xF239400E16C23E08");
			__0xF239400E16C23E08.Call(native, p0, p1);
		}

		public void _0xA0CEFCEA390AAB9B(object p0)
		{
			if (__0xA0CEFCEA390AAB9B == null) __0xA0CEFCEA390AAB9B = (Function) native.GetObjectProperty("_0xA0CEFCEA390AAB9B");
			__0xA0CEFCEA390AAB9B.Call(native, p0);
		}

		public bool IsLookInverted()
		{
			if (isLookInverted == null) isLookInverted = (Function) native.GetObjectProperty("isLookInverted");
			return (bool) isLookInverted.Call(native);
		}

		/// <summary>
		/// Used with IS_LOOK_INVERTED() and negates its affect.
		/// --
		/// Not sure how the person above got that description, but here's an actual example:
		/// if (CONTROLS::_GET_LAST_INPUT_METHOD(2)) {
		/// if (a_5) {
		/// if (CONTROLS::IS_LOOK_INVERTED()) {
		/// a_3 *= -1;
		/// }
		/// if (CONTROLS::_E1615EC03B3BB4FD()) {
		/// See NativeDB for reference: http://natives.altv.mp/#/0xE1615EC03B3BB4FD
		/// </summary>
		public bool _0xE1615EC03B3BB4FD()
		{
			if (__0xE1615EC03B3BB4FD == null) __0xE1615EC03B3BB4FD = (Function) native.GetObjectProperty("_0xE1615EC03B3BB4FD");
			return (bool) __0xE1615EC03B3BB4FD.Call(native);
		}

		public int GetLocalPlayerAimState()
		{
			if (getLocalPlayerAimState == null) getLocalPlayerAimState = (Function) native.GetObjectProperty("getLocalPlayerAimState");
			return (int) getLocalPlayerAimState.Call(native);
		}

		/// <summary>
		/// Same behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.
		/// </summary>
		public int GetLocalPlayerAimState2()
		{
			if (getLocalPlayerAimState2 == null) getLocalPlayerAimState2 = (Function) native.GetObjectProperty("getLocalPlayerAimState2");
			return (int) getLocalPlayerAimState2.Call(native);
		}

		public object _0x25AAA32BDC98F2A3()
		{
			if (__0x25AAA32BDC98F2A3 == null) __0x25AAA32BDC98F2A3 = (Function) native.GetObjectProperty("_0x25AAA32BDC98F2A3");
			return __0x25AAA32BDC98F2A3.Call(native);
		}

		public bool GetIsUsingAlternateDriveby()
		{
			if (getIsUsingAlternateDriveby == null) getIsUsingAlternateDriveby = (Function) native.GetObjectProperty("getIsUsingAlternateDriveby");
			return (bool) getIsUsingAlternateDriveby.Call(native);
		}

		public bool GetAllowMovementWhileZoomed()
		{
			if (getAllowMovementWhileZoomed == null) getAllowMovementWhileZoomed = (Function) native.GetObjectProperty("getAllowMovementWhileZoomed");
			return (bool) getAllowMovementWhileZoomed.Call(native);
		}

		public void SetPlayerpadShakesWhenControllerDisabled(bool toggle)
		{
			if (setPlayerpadShakesWhenControllerDisabled == null) setPlayerpadShakesWhenControllerDisabled = (Function) native.GetObjectProperty("setPlayerpadShakesWhenControllerDisabled");
			setPlayerpadShakesWhenControllerDisabled.Call(native, toggle);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public void SetInputExclusive(int padIndex, int control)
		{
			if (setInputExclusive == null) setInputExclusive = (Function) native.GetObjectProperty("setInputExclusive");
			setInputExclusive.Call(native, padIndex, control);
		}

		/// <summary>
		/// control values and meaning: github.com/crosire/scripthookvdotnet/blob/dev_v3/source/scripting/Controls.cs
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// Control values from the decompiled scripts: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
		/// 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,5
		/// 4,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,
		/// 79,80,81,82,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,105,
		/// 107,108,109,110,111,112,113,114,115,116,117,118,119,123,126,129,130,131,132,
		/// 133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,
		/// 153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFE99B66D079CF6BC
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		/// <param name="control">Control values from the decompiled scripts: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,</param>
		public void DisableControlAction(int padIndex, int control, bool disable)
		{
			if (disableControlAction == null) disableControlAction = (Function) native.GetObjectProperty("disableControlAction");
			disableControlAction.Call(native, padIndex, control, disable);
		}

		/// <summary>
		/// control values and meaning: github.com/crosire/scripthookvdotnet/blob/dev/source/scripting/Controls.hpp
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// Control values from the decompiled scripts:
		/// 0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36,
		/// 37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100
		/// ,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19
		/// 0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2
		/// 20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257,
		/// 261,262,263,264,286,287,288,289,337,338,339,340,341,342,343
		/// See NativeDB for reference: http://natives.altv.mp/#/0x351220255D64C155
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		/// <param name="control">Control values from the decompiled scripts: </param>
		public void EnableControlAction(int padIndex, int control, bool enable)
		{
			if (enableControlAction == null) enableControlAction = (Function) native.GetObjectProperty("enableControlAction");
			enableControlAction.Call(native, padIndex, control, enable);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public void DisableAllControlActions(int padIndex)
		{
			if (disableAllControlActions == null) disableAllControlActions = (Function) native.GetObjectProperty("disableAllControlActions");
			disableAllControlActions.Call(native, padIndex);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public void EnableAllControlActions(int padIndex)
		{
			if (enableAllControlActions == null) enableAllControlActions = (Function) native.GetObjectProperty("enableAllControlActions");
			enableAllControlActions.Call(native, padIndex);
		}

		/// <summary>
		/// Used in carsteal3 script with p0 = "Carsteal4_spycar".
		/// S*
		/// </summary>
		public bool SwitchToInputMappingScheme(string name)
		{
			if (switchToInputMappingScheme == null) switchToInputMappingScheme = (Function) native.GetObjectProperty("switchToInputMappingScheme");
			return (bool) switchToInputMappingScheme.Call(native, name);
		}

		/// <summary>
		/// Same as 0x3D42B92563939375
		/// S*
		/// </summary>
		public bool SwitchToInputMappingScheme2(string name)
		{
			if (switchToInputMappingScheme2 == null) switchToInputMappingScheme2 = (Function) native.GetObjectProperty("switchToInputMappingScheme2");
			return (bool) switchToInputMappingScheme2.Call(native, name);
		}

		/// <summary>
		/// S*
		/// </summary>
		public void ResetInputMappingScheme()
		{
			if (resetInputMappingScheme == null) resetInputMappingScheme = (Function) native.GetObjectProperty("resetInputMappingScheme");
			resetInputMappingScheme.Call(native);
		}

		/// <summary>
		/// padIndex: 0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.
		/// A*
		/// </summary>
		/// <param name="padIndex">0 (PLAYER_CONTROL), 1 (unk) and 2 (unk) used in the scripts.</param>
		public void DisableInputGroup(int padIndex)
		{
			if (disableInputGroup == null) disableInputGroup = (Function) native.GetObjectProperty("disableInputGroup");
			disableInputGroup.Call(native, padIndex);
		}

		public void SetRoadsInArea(double x1, double y1, double z1, double x2, double y2, double z2, bool unknown1, bool unknown2)
		{
			if (setRoadsInArea == null) setRoadsInArea = (Function) native.GetObjectProperty("setRoadsInArea");
			setRoadsInArea.Call(native, x1, y1, z1, x2, y2, z2, unknown1, unknown2);
		}

		/// <summary>
		/// Corrected conflicting parameter names
		/// </summary>
		public void SetRoadsInAngledArea(double x1, double y1, double z1, double x2, double y2, double z2, double angle, bool unknown1, bool unknown2, bool unknown3)
		{
			if (setRoadsInAngledArea == null) setRoadsInAngledArea = (Function) native.GetObjectProperty("setRoadsInAngledArea");
			setRoadsInAngledArea.Call(native, x1, y1, z1, x2, y2, z2, angle, unknown1, unknown2, unknown3);
		}

		public void SetPedPathsInArea(double x1, double y1, double z1, double x2, double y2, double z2, bool unknown, object p7)
		{
			if (setPedPathsInArea == null) setPedPathsInArea = (Function) native.GetObjectProperty("setPedPathsInArea");
			setPedPathsInArea.Call(native, x1, y1, z1, x2, y2, z2, unknown, p7);
		}

		/// <summary>
		/// When onGround == true outPosition is a position located on the nearest pavement.
		/// When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
		/// In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.
		/// 16 works for me, 0 crashed the script.
		/// </summary>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) GetSafeCoordForPed(double x, double y, double z, bool onGround, Vector3 outPosition, int flags)
		{
			if (getSafeCoordForPed == null) getSafeCoordForPed = (Function) native.GetObjectProperty("getSafeCoordForPed");
			var results = (Array) getSafeCoordForPed.Call(native, x, y, z, onGround, outPosition, flags);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// FYI: When falling through the map (or however you got under it) you will respawn when your player ped's height is <= -200.0 meters (I think you all know this) and when in a vehicle you will actually respawn at the closest vehicle node.
		/// ----------
		/// Vector3 nodePos;
		/// GET_CLOSEST_VEHICLE_NODE(x,y,z,&nodePos,...)
		/// p4 is either 0, 1 or 8. 1 means any path/road. 0 means node in the middle of the closest main (asphalt) road.
		/// p5, p6 are always the same:
		/// 0x40400000 (3.0), 0
		/// p5 can also be 100.0 and p6 can be 2.5:
		/// PATHFIND::GET_CLOSEST_VEHICLE_NODE(a_0, &v_5, v_9, 100.0, 2.5)
		/// See NativeDB for reference: http://natives.altv.mp/#/0x240A18690AE96513
		/// </summary>
		/// <param name="p5">can also be 100.0 and p6 can be 2.5:</param>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) GetClosestVehicleNode(double x, double y, double z, Vector3 outPosition, int nodeType, double p5, double p6)
		{
			if (getClosestVehicleNode == null) getClosestVehicleNode = (Function) native.GetObjectProperty("getClosestVehicleNode");
			var results = (Array) getClosestVehicleNode.Call(native, x, y, z, outPosition, nodeType, p5, p6);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// Get the closest vehicle node to a given position, unknown1 = 3.0, unknown2 = 0
		/// </summary>
		/// <param name="unknown1">Get the closest vehicle node to a given position, 3.0, unknown2 = 0</param>
		/// <param name="unknown2">Get the closest vehicle node to a given position, unknown1 = 3.0, 0</param>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) GetClosestMajorVehicleNode(double x, double y, double z, Vector3 outPosition, double unknown1, int unknown2)
		{
			if (getClosestMajorVehicleNode == null) getClosestMajorVehicleNode = (Function) native.GetObjectProperty("getClosestMajorVehicleNode");
			var results = (Array) getClosestMajorVehicleNode.Call(native, x, y, z, outPosition, unknown1, unknown2);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
		/// p5 is either 1 or 12. 1 means any path/road. 12, 8, 0 means node in the middle of the closest main (asphalt) road.
		/// p6 is always 3.0
		/// p7 is always 0.
		/// Known node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.
		/// The node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.
		/// Starting at 2, every fourth node is under the map, always same coords.
		/// Same with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).
		/// gtaforums.com/topic/843561-pathfind-node-types
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFF071FB798B803B0
		/// </summary>
		/// <param name="p6">is always 3.0</param>
		/// <param name="p7">is always 0.</param>
		/// <returns>Array<bool, Vector3, double></returns>
		public (bool, Vector3, double) GetClosestVehicleNodeWithHeading(double x, double y, double z, Vector3 outPosition, double outHeading, int nodeType, double p6, int p7)
		{
			if (getClosestVehicleNodeWithHeading == null) getClosestVehicleNodeWithHeading = (Function) native.GetObjectProperty("getClosestVehicleNodeWithHeading");
			var results = (Array) getClosestVehicleNodeWithHeading.Call(native, x, y, z, outPosition, outHeading, nodeType, p6, p7);
			return ((bool) results[0], JSObjectToVector3(results[1]), (double) results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) GetNthClosestVehicleNode(double x, double y, double z, int nthClosest, Vector3 outPosition, object unknown1, object unknown2, object unknown3)
		{
			if (getNthClosestVehicleNode == null) getNthClosestVehicleNode = (Function) native.GetObjectProperty("getNthClosestVehicleNode");
			var results = (Array) getNthClosestVehicleNode.Call(native, x, y, z, nthClosest, outPosition, unknown1, unknown2, unknown3);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the id.</returns>
		public int GetNthClosestVehicleNodeId(double x, double y, double z, int nth, int nodetype, double p5, double p6)
		{
			if (getNthClosestVehicleNodeId == null) getNthClosestVehicleNodeId = (Function) native.GetObjectProperty("getNthClosestVehicleNodeId");
			return (int) getNthClosestVehicleNodeId.Call(native, x, y, z, nth, nodetype, p5, p6);
		}

		/// <summary>
		/// Get the nth closest vehicle node and its heading. (unknown2 = 9, unknown3 = 3.0, unknown4 = 2.5)
		/// </summary>
		/// <param name="unknown2">Get the nth closest vehicle node and its heading. (9, unknown3 = 3.0, unknown4 = 2.5)</param>
		/// <param name="unknown3">Get the nth closest vehicle node and its heading. (unknown2 = 9, 3.0, unknown4 = 2.5)</param>
		/// <param name="unknown4">Get the nth closest vehicle node and its heading. (unknown2 = 9, unknown3 = 3.0, 2.5)</param>
		/// <returns>Array<bool, Vector3, double, object></returns>
		public (bool, Vector3, double, object) GetNthClosestVehicleNodeWithHeading(double x, double y, double z, int nthClosest, Vector3 outPosition, double heading, object unknown1, int unknown2, double unknown3, double unknown4)
		{
			if (getNthClosestVehicleNodeWithHeading == null) getNthClosestVehicleNodeWithHeading = (Function) native.GetObjectProperty("getNthClosestVehicleNodeWithHeading");
			var results = (Array) getNthClosestVehicleNodeWithHeading.Call(native, x, y, z, nthClosest, outPosition, heading, unknown1, unknown2, unknown3, unknown4);
			return ((bool) results[0], JSObjectToVector3(results[1]), (double) results[2], results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) GetNthClosestVehicleNodeIdWithHeading(double x, double y, double z, int nthClosest, Vector3 outPosition, double outHeading, object p6, double p7, double p8)
		{
			if (getNthClosestVehicleNodeIdWithHeading == null) getNthClosestVehicleNodeIdWithHeading = (Function) native.GetObjectProperty("getNthClosestVehicleNodeIdWithHeading");
			var results = (Array) getNthClosestVehicleNodeIdWithHeading.Call(native, x, y, z, nthClosest, outPosition, outHeading, p6, p7, p8);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
		/// p10 always equal 0x40400000
		/// p11 always equal 0
		/// </summary>
		/// <param name="p10">always equal 0x40400000</param>
		/// <param name="p11">always equal 0</param>
		/// <returns>Array<bool, Vector3, double></returns>
		public (bool, Vector3, double) GetNthClosestVehicleNodeFavourDirection(double x, double y, double z, double desiredX, double desiredY, double desiredZ, int nthClosest, Vector3 outPosition, double outHeading, int nodetype, object p10, object p11)
		{
			if (getNthClosestVehicleNodeFavourDirection == null) getNthClosestVehicleNodeFavourDirection = (Function) native.GetObjectProperty("getNthClosestVehicleNodeFavourDirection");
			var results = (Array) getNthClosestVehicleNodeFavourDirection.Call(native, x, y, z, desiredX, desiredY, desiredZ, nthClosest, outPosition, outHeading, nodetype, p10, p11);
			return ((bool) results[0], JSObjectToVector3(results[1]), (double) results[2]);
		}

		/// <summary>
		/// MulleDK19: Gets the density and flags of the closest node to the specified position.
		/// Density is a value between 0 and 15, indicating how busy the road is.
		/// Flags is a bit field.
		/// </summary>
		/// <param name="density">Density is a value between 0 and 15, indicating how busy the road is.</param>
		/// <param name="flags">Flags is a bit field.</param>
		/// <returns>Array<bool, int, int></returns>
		public (bool, int, int) GetVehicleNodeProperties(double x, double y, double z, int density, int flags)
		{
			if (getVehicleNodeProperties == null) getVehicleNodeProperties = (Function) native.GetObjectProperty("getVehicleNodeProperties");
			var results = (Array) getVehicleNodeProperties.Call(native, x, y, z, density, flags);
			return ((bool) results[0], (int) results[1], (int) results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the id is non zero.</returns>
		public bool IsVehicleNodeIdValid(int vehicleNodeId)
		{
			if (isVehicleNodeIdValid == null) isVehicleNodeIdValid = (Function) native.GetObjectProperty("isVehicleNodeIdValid");
			return (bool) isVehicleNodeIdValid.Call(native, vehicleNodeId);
		}

		/// <summary>
		/// Calling this with an invalid node id, will crash the game.
		/// Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
		/// Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
		/// </summary>
		/// <returns>Array<void, Vector3></returns>
		public (object, Vector3) GetVehicleNodePosition(int nodeId, Vector3 outPosition)
		{
			if (getVehicleNodePosition == null) getVehicleNodePosition = (Function) native.GetObjectProperty("getVehicleNodePosition");
			var results = (Array) getVehicleNodePosition.Call(native, nodeId, outPosition);
			return (results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// Example:
		/// Nodes in Fort Zancudo and LSIA are false
		/// </summary>
		/// <returns>Returns false for nodes that aren't used for GPS routes.</returns>
		public bool GetVehicleNodeIsGpsAllowed(int nodeID)
		{
			if (getVehicleNodeIsGpsAllowed == null) getVehicleNodeIsGpsAllowed = (Function) native.GetObjectProperty("getVehicleNodeIsGpsAllowed");
			return (bool) getVehicleNodeIsGpsAllowed.Call(native, nodeID);
		}

		/// <summary>
		/// Normal roads where plenty of Peds spawn will return false
		/// </summary>
		/// <returns>Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.</returns>
		public bool GetVehicleNodeIsSwitchedOff(int nodeID)
		{
			if (getVehicleNodeIsSwitchedOff == null) getVehicleNodeIsSwitchedOff = (Function) native.GetObjectProperty("getVehicleNodeIsSwitchedOff");
			return (bool) getVehicleNodeIsSwitchedOff.Call(native, nodeID);
		}

		/// <summary>
		/// p1 seems to be always 1.0f in the scripts
		/// </summary>
		/// <returns>Array<object, Vector3, Vector3, object, object, double></returns>
		public (object, Vector3, Vector3, object, object, double) GetClosestRoad(double x, double y, double z, double p3, int p4, Vector3 p5, Vector3 p6, object p7, object p8, double p9, bool p10)
		{
			if (getClosestRoad == null) getClosestRoad = (Function) native.GetObjectProperty("getClosestRoad");
			var results = (Array) getClosestRoad.Call(native, x, y, z, p3, p4, p5, p6, p7, p8, p9, p10);
			return (results[0], JSObjectToVector3(results[1]), JSObjectToVector3(results[2]), results[3], results[4], (double) results[5]);
		}

		/// <summary>
		/// SET_ALL_PATHS_CACHE_BOUNDINGSTRUCT ?
		/// </summary>
		public void _0x228E5C6AD4D74BFD(bool toggle)
		{
			if (__0x228E5C6AD4D74BFD == null) __0x228E5C6AD4D74BFD = (Function) native.GetObjectProperty("_0x228E5C6AD4D74BFD");
			__0x228E5C6AD4D74BFD.Call(native, toggle);
		}

		/// <summary>
		/// ARE_*
		/// </summary>
		public bool ArePathNodesLoadedInArea(double x1, double y1, double x2, double y2)
		{
			if (arePathNodesLoadedInArea == null) arePathNodesLoadedInArea = (Function) native.GetObjectProperty("arePathNodesLoadedInArea");
			return (bool) arePathNodesLoadedInArea.Call(native, x1, y1, x2, y2);
		}

		public bool _0x07FB139B592FA687(double p0, double p1, double p2, double p3)
		{
			if (__0x07FB139B592FA687 == null) __0x07FB139B592FA687 = (Function) native.GetObjectProperty("_0x07FB139B592FA687");
			return (bool) __0x07FB139B592FA687.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// missing a last parameter int p6
		/// </summary>
		public void SetRoadsBackToOriginal(double p0, double p1, double p2, double p3, double p4, double p5, object p6)
		{
			if (setRoadsBackToOriginal == null) setRoadsBackToOriginal = (Function) native.GetObjectProperty("setRoadsBackToOriginal");
			setRoadsBackToOriginal.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// bool p7 - always 1
		/// </summary>
		/// <param name="p7">bool always 1</param>
		public void SetRoadsBackToOriginalInAngledArea(double x1, double y1, double z1, double x2, double y2, double z2, double p6, object p7)
		{
			if (setRoadsBackToOriginalInAngledArea == null) setRoadsBackToOriginalInAngledArea = (Function) native.GetObjectProperty("setRoadsBackToOriginalInAngledArea");
			setRoadsBackToOriginalInAngledArea.Call(native, x1, y1, z1, x2, y2, z2, p6, p7);
		}

		public void SetAmbientPedRangeMultiplierThisFrame(double multiplier)
		{
			if (setAmbientPedRangeMultiplierThisFrame == null) setAmbientPedRangeMultiplierThisFrame = (Function) native.GetObjectProperty("setAmbientPedRangeMultiplierThisFrame");
			setAmbientPedRangeMultiplierThisFrame.Call(native, multiplier);
		}

		public void _0xAA76052DDA9BFC3E(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0xAA76052DDA9BFC3E == null) __0xAA76052DDA9BFC3E = (Function) native.GetObjectProperty("_0xAA76052DDA9BFC3E");
			__0xAA76052DDA9BFC3E.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public void SetPedPathsBackToOriginal(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (setPedPathsBackToOriginal == null) setPedPathsBackToOriginal = (Function) native.GetObjectProperty("setPedPathsBackToOriginal");
			setPedPathsBackToOriginal.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, Vector3, int></returns>
		public (bool, Vector3, int) GetRandomVehicleNode(double x, double y, double z, double radius, bool p4, bool p5, bool p6, Vector3 outPosition, int nodeId)
		{
			if (getRandomVehicleNode == null) getRandomVehicleNode = (Function) native.GetObjectProperty("getRandomVehicleNode");
			var results = (Array) getRandomVehicleNode.Call(native, x, y, z, radius, p4, p5, p6, outPosition, nodeId);
			return ((bool) results[0], JSObjectToVector3(results[1]), (int) results[2]);
		}

		/// <summary>
		/// Determines the name of the street which is the closest to the given coordinates.
		/// x,y,z - the coordinates of the street
		/// crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
		/// Note: the names are returned as hashes, the strings can be returned using the function UI::GET_STREET_NAME_FROM_HASH_KEY.
		/// </summary>
		/// <param name="z">x,y,the coordinates of the street</param>
		/// <param name="crossingRoad">if the coordinates are on an intersection, a hash to the name of the crossing road</param>
		/// <returns>Array<void, int, int> streetName - returns a hash to the name of the street the coords are on</returns>
		public (object, int, int) GetStreetNameAtCoord(double x, double y, double z, int streetName, int crossingRoad)
		{
			if (getStreetNameAtCoord == null) getStreetNameAtCoord = (Function) native.GetObjectProperty("getStreetNameAtCoord");
			var results = (Array) getStreetNameAtCoord.Call(native, x, y, z, streetName, crossingRoad);
			return (results[0], (int) results[1], (int) results[2]);
		}

		/// <summary>
		/// Usage example:
		/// Public Function GenerateDirectionsToCoord(Pos As Vector3) As Tuple(Of String, Single, Single)
		/// Dim f4, f5, f6 As New OutputArgument()
		/// Native.Function.Call(Hash.GENERATE_DIRECTIONS_TO_COORD, Pos.X, Pos.Y, Pos.Z, True, f4, f5, f6)
		/// Dim direction As String = f4.GetResult(Of Single)()
		/// Return New Tuple(Of String, Single, Single)(direction.Substring(0, 1), f5.GetResult(Of Single)(), f6.GetResult(Of Single)())
		/// End Function
		/// p3 I use 1
		/// direction:
		/// See NativeDB for reference: http://natives.altv.mp/#/0xF90125F1F79ECDF8
		/// </summary>
		/// <param name="p3">I use 1</param>
		/// <returns>Array<int, int, double, double></returns>
		public (int, int, double, double) GenerateDirectionsToCoord(double x, double y, double z, bool p3, int direction, double p5, double distToNxJunction)
		{
			if (generateDirectionsToCoord == null) generateDirectionsToCoord = (Function) native.GetObjectProperty("generateDirectionsToCoord");
			var results = (Array) generateDirectionsToCoord.Call(native, x, y, z, p3, direction, p5, distToNxJunction);
			return ((int) results[0], (int) results[1], (double) results[2], (double) results[3]);
		}

		public void SetIgnoreNoGpsFlag(bool toggle)
		{
			if (setIgnoreNoGpsFlag == null) setIgnoreNoGpsFlag = (Function) native.GetObjectProperty("setIgnoreNoGpsFlag");
			setIgnoreNoGpsFlag.Call(native, toggle);
		}

		public void SetIgnoreSecondaryRouteNodes(bool toggle)
		{
			if (setIgnoreSecondaryRouteNodes == null) setIgnoreSecondaryRouteNodes = (Function) native.GetObjectProperty("setIgnoreSecondaryRouteNodes");
			setIgnoreSecondaryRouteNodes.Call(native, toggle);
		}

		public void SetGpsDisabledZone(double x1, double y1, double z1, double x2, double y2, double z3)
		{
			if (setGpsDisabledZone == null) setGpsDisabledZone = (Function) native.GetObjectProperty("setGpsDisabledZone");
			setGpsDisabledZone.Call(native, x1, y1, z1, x2, y2, z3);
		}

		public int GetGpsBlipRouteLength()
		{
			if (getGpsBlipRouteLength == null) getGpsBlipRouteLength = (Function) native.GetObjectProperty("getGpsBlipRouteLength");
			return (int) getGpsBlipRouteLength.Call(native);
		}

		public object _0xF3162836C28F9DA5(object p0, object p1, object p2, object p3)
		{
			if (__0xF3162836C28F9DA5 == null) __0xF3162836C28F9DA5 = (Function) native.GetObjectProperty("_0xF3162836C28F9DA5");
			return __0xF3162836C28F9DA5.Call(native, p0, p1, p2, p3);
		}

		public bool GetGpsBlipRouteFound()
		{
			if (getGpsBlipRouteFound == null) getGpsBlipRouteFound = (Function) native.GetObjectProperty("getGpsBlipRouteFound");
			return (bool) getGpsBlipRouteFound.Call(native);
		}

		public object GetRoadSidePointWithHeading(object p0, object p1, object p2, object p3, object p4)
		{
			if (getRoadSidePointWithHeading == null) getRoadSidePointWithHeading = (Function) native.GetObjectProperty("getRoadSidePointWithHeading");
			return getRoadSidePointWithHeading.Call(native, p0, p1, p2, p3, p4);
		}

		public object GetPointOnRoadSide(object p0, object p1, object p2, object p3, object p4)
		{
			if (getPointOnRoadSide == null) getPointOnRoadSide = (Function) native.GetObjectProperty("getPointOnRoadSide");
			return getPointOnRoadSide.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// Gets a value indicating whether the specified position is on a road.
		/// The vehicle parameter is not implemented (ignored).
		/// -MulleDK19
		/// </summary>
		public bool IsPointOnRoad(double x, double y, double z, int vehicle)
		{
			if (isPointOnRoad == null) isPointOnRoad = (Function) native.GetObjectProperty("isPointOnRoad");
			return (bool) isPointOnRoad.Call(native, x, y, z, vehicle);
		}

		public int GetNextGpsDisabledZoneIndex()
		{
			if (getNextGpsDisabledZoneIndex == null) getNextGpsDisabledZoneIndex = (Function) native.GetObjectProperty("getNextGpsDisabledZoneIndex");
			return (int) getNextGpsDisabledZoneIndex.Call(native);
		}

		public void SetGpsDisabledZoneAtIndex(double x1, double y1, double z1, double x2, double y2, double z2, int index)
		{
			if (setGpsDisabledZoneAtIndex == null) setGpsDisabledZoneAtIndex = (Function) native.GetObjectProperty("setGpsDisabledZoneAtIndex");
			setGpsDisabledZoneAtIndex.Call(native, x1, y1, z1, x2, y2, z2, index);
		}

		public void ClearGpsDisabledZoneAtIndex(int index)
		{
			if (clearGpsDisabledZoneAtIndex == null) clearGpsDisabledZoneAtIndex = (Function) native.GetObjectProperty("clearGpsDisabledZoneAtIndex");
			clearGpsDisabledZoneAtIndex.Call(native, index);
		}

		public void AddNavmeshRequiredRegion(double x, double y, double radius)
		{
			if (addNavmeshRequiredRegion == null) addNavmeshRequiredRegion = (Function) native.GetObjectProperty("addNavmeshRequiredRegion");
			addNavmeshRequiredRegion.Call(native, x, y, radius);
		}

		public void RemoveNavmeshRequiredRegions()
		{
			if (removeNavmeshRequiredRegions == null) removeNavmeshRequiredRegions = (Function) native.GetObjectProperty("removeNavmeshRequiredRegions");
			removeNavmeshRequiredRegions.Call(native);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool IsNavmeshRequiredRegionOwnedByAnyThread()
		{
			if (isNavmeshRequiredRegionOwnedByAnyThread == null) isNavmeshRequiredRegionOwnedByAnyThread = (Function) native.GetObjectProperty("isNavmeshRequiredRegionOwnedByAnyThread");
			return (bool) isNavmeshRequiredRegionOwnedByAnyThread.Call(native);
		}

		public void DisableNavmeshInArea(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (disableNavmeshInArea == null) disableNavmeshInArea = (Function) native.GetObjectProperty("disableNavmeshInArea");
			disableNavmeshInArea.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public bool AreAllNavmeshRegionsLoaded()
		{
			if (areAllNavmeshRegionsLoaded == null) areAllNavmeshRegionsLoaded = (Function) native.GetObjectProperty("areAllNavmeshRegionsLoaded");
			return (bool) areAllNavmeshRegionsLoaded.Call(native);
		}

		/// <summary>
		/// If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
		/// </summary>
		/// <returns>Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.</returns>
		public bool IsNavmeshLoadedInArea(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (isNavmeshLoadedInArea == null) isNavmeshLoadedInArea = (Function) native.GetObjectProperty("isNavmeshLoadedInArea");
			return (bool) isNavmeshLoadedInArea.Call(native, x1, y1, z1, x2, y2, z2);
		}

		public object _0x01708E8DD3FF8C65(double p0, double p1, double p2, double p3, double p4, double p5)
		{
			if (__0x01708E8DD3FF8C65 == null) __0x01708E8DD3FF8C65 = (Function) native.GetObjectProperty("_0x01708E8DD3FF8C65");
			return __0x01708E8DD3FF8C65.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public object AddNavmeshBlockingObject(double p0, double p1, double p2, double p3, double p4, double p5, double p6, bool p7, object p8)
		{
			if (addNavmeshBlockingObject == null) addNavmeshBlockingObject = (Function) native.GetObjectProperty("addNavmeshBlockingObject");
			return addNavmeshBlockingObject.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		public void UpdateNavmeshBlockingObject(object p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, object p8)
		{
			if (updateNavmeshBlockingObject == null) updateNavmeshBlockingObject = (Function) native.GetObjectProperty("updateNavmeshBlockingObject");
			updateNavmeshBlockingObject.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		public void RemoveNavmeshBlockingObject(object p0)
		{
			if (removeNavmeshBlockingObject == null) removeNavmeshBlockingObject = (Function) native.GetObjectProperty("removeNavmeshBlockingObject");
			removeNavmeshBlockingObject.Call(native, p0);
		}

		public bool DoesNavmeshBlockingObjectExist(object p0)
		{
			if (doesNavmeshBlockingObjectExist == null) doesNavmeshBlockingObjectExist = (Function) native.GetObjectProperty("doesNavmeshBlockingObjectExist");
			return (bool) doesNavmeshBlockingObjectExist.Call(native, p0);
		}

		public double GetHeightmapTopZForPosition(double p0, double p1)
		{
			if (getHeightmapTopZForPosition == null) getHeightmapTopZForPosition = (Function) native.GetObjectProperty("getHeightmapTopZForPosition");
			return (double) getHeightmapTopZForPosition.Call(native, p0, p1);
		}

		public double GetHeightmapTopZForArea(double p0, double p1, double p2, double p3)
		{
			if (getHeightmapTopZForArea == null) getHeightmapTopZForArea = (Function) native.GetObjectProperty("getHeightmapTopZForArea");
			return (double) getHeightmapTopZForArea.Call(native, p0, p1, p2, p3);
		}

		public double GetHeightmapBottomZForPosition(double left, double right)
		{
			if (getHeightmapBottomZForPosition == null) getHeightmapBottomZForPosition = (Function) native.GetObjectProperty("getHeightmapBottomZForPosition");
			return (double) getHeightmapBottomZForPosition.Call(native, left, right);
		}

		public double GetHeightmapBottomZForArea(double p0, double p1, double p2, double p3)
		{
			if (getHeightmapBottomZForArea == null) getHeightmapBottomZForArea = (Function) native.GetObjectProperty("getHeightmapBottomZForArea");
			return (double) getHeightmapBottomZForArea.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// Calculates the travel distance between a set of points.
		/// Doesn't seem to correlate with distance on gps sometimes.
		/// </summary>
		public double CalculateTravelDistanceBetweenPoints(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (calculateTravelDistanceBetweenPoints == null) calculateTravelDistanceBetweenPoints = (Function) native.GetObjectProperty("calculateTravelDistanceBetweenPoints");
			return (double) calculateTravelDistanceBetweenPoints.Call(native, x1, y1, z1, x2, y2, z2);
		}

		/// <summary>
		/// enum ePedType
		/// {
		/// PED_TYPE_PLAYER_0,
		/// PED_TYPE_PLAYER_1,
		/// PED_TYPE_NETWORK_PLAYER,
		/// PED_TYPE_PLAYER_2,
		/// PED_TYPE_CIVMALE,
		/// PED_TYPE_CIVFEMALE,
		/// PED_TYPE_COP,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xD49F9B0955C367DE
		/// </summary>
		public int CreatePed(int pedType, int modelHash, double x, double y, double z, double heading, bool isNetwork, bool thisScriptCheck)
		{
			if (createPed == null) createPed = (Function) native.GetObjectProperty("createPed");
			return (int) createPed.Call(native, pedType, modelHash, x, y, z, heading, isNetwork, thisScriptCheck);
		}

		/// <summary>
		/// Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) DeletePed(int ped)
		{
			if (deletePed == null) deletePed = (Function) native.GetObjectProperty("deletePed");
			var results = (Array) deletePed.Call(native, ped);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// p3 - last parameter does not mean ped handle is returned
		/// maybe a quick view in disassembly will tell us what is actually does
		/// Example of Cloning Your Player:
		/// CLONE_PED(PLAYER_PED_ID(), GET_ENTITY_HEADING(PLAYER_PED_ID()), 0, 1);
		/// </summary>
		public int ClonePed(int ped, double heading, bool isNetwork, bool thisScriptCheck)
		{
			if (clonePed == null) clonePed = (Function) native.GetObjectProperty("clonePed");
			return (int) clonePed.Call(native, ped, heading, isNetwork, thisScriptCheck);
		}

		public int ClonePedEx(int ped, double heading, bool isNetwork, bool thisScriptCheck, object p4)
		{
			if (clonePedEx == null) clonePedEx = (Function) native.GetObjectProperty("clonePedEx");
			return (int) clonePedEx.Call(native, ped, heading, isNetwork, thisScriptCheck, p4);
		}

		/// <summary>
		/// Copies ped's components and props to targetPed.
		/// </summary>
		public void ClonePedToTarget(int ped, int targetPed)
		{
			if (clonePedToTarget == null) clonePedToTarget = (Function) native.GetObjectProperty("clonePedToTarget");
			clonePedToTarget.Call(native, ped, targetPed);
		}

		public void ClonePedToTargetEx(int ped, int targetPed, object p2)
		{
			if (clonePedToTargetEx == null) clonePedToTargetEx = (Function) native.GetObjectProperty("clonePedToTargetEx");
			clonePedToTargetEx.Call(native, ped, targetPed, p2);
		}

		/// <summary>
		/// Gets a value indicating whether the specified ped is in the specified vehicle.
		/// </summary>
		/// <returns>If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.</returns>
		public bool IsPedInVehicle(int ped, int vehicle, bool atGetIn)
		{
			if (isPedInVehicle == null) isPedInVehicle = (Function) native.GetObjectProperty("isPedInVehicle");
			return (bool) isPedInVehicle.Call(native, ped, vehicle, atGetIn);
		}

		public bool IsPedInModel(int ped, int modelHash)
		{
			if (isPedInModel == null) isPedInModel = (Function) native.GetObjectProperty("isPedInModel");
			return (bool) isPedInModel.Call(native, ped, modelHash);
		}

		/// <summary>
		/// Gets a value indicating whether the specified ped is in any vehicle.
		/// </summary>
		/// <returns>If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.</returns>
		public bool IsPedInAnyVehicle(int ped, bool atGetIn)
		{
			if (isPedInAnyVehicle == null) isPedInAnyVehicle = (Function) native.GetObjectProperty("isPedInAnyVehicle");
			return (bool) isPedInAnyVehicle.Call(native, ped, atGetIn);
		}

		/// <summary>
		/// xyz - relative to the world origin.
		/// </summary>
		public bool IsCopPedInArea3d(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (isCopPedInArea3d == null) isCopPedInArea3d = (Function) native.GetObjectProperty("isCopPedInArea3d");
			return (bool) isCopPedInArea3d.Call(native, x1, y1, z1, x2, y2, z2);
		}

		/// <summary>
		/// Gets a value indicating whether this ped's health is below its injured threshold.
		/// The default threshold is 100.
		/// </summary>
		public bool IsPedInjured(int ped)
		{
			if (isPedInjured == null) isPedInjured = (Function) native.GetObjectProperty("isPedInjured");
			return (bool) isPedInjured.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether the specified ped is hurt.</returns>
		public bool IsPedHurt(int ped)
		{
			if (isPedHurt == null) isPedHurt = (Function) native.GetObjectProperty("isPedHurt");
			return (bool) isPedHurt.Call(native, ped);
		}

		/// <summary>
		/// Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
		/// </summary>
		/// <returns>If the handle is invalid, the function returns true.</returns>
		public bool IsPedFatallyInjured(int ped)
		{
			if (isPedFatallyInjured == null) isPedFatallyInjured = (Function) native.GetObjectProperty("isPedFatallyInjured");
			return (bool) isPedFatallyInjured.Call(native, ped);
		}

		/// <summary>
		/// Seems to consistently return true if the ped is dead.
		/// p1 is always passed 1 in the scripts.
		/// I suggest to remove "OR_DYING" part, because it does not detect dying phase.
		/// That's what the devs call it, cry about it.
		/// lol
		/// </summary>
		/// <param name="p1">is always passed 1 in the scripts.</param>
		public bool IsPedDeadOrDying(int ped, bool p1)
		{
			if (isPedDeadOrDying == null) isPedDeadOrDying = (Function) native.GetObjectProperty("isPedDeadOrDying");
			return (bool) isPedDeadOrDying.Call(native, ped, p1);
		}

		public bool IsConversationPedDead(int ped)
		{
			if (isConversationPedDead == null) isConversationPedDead = (Function) native.GetObjectProperty("isConversationPedDead");
			return (bool) isConversationPedDead.Call(native, ped);
		}

		public bool IsPedAimingFromCover(int ped)
		{
			if (isPedAimingFromCover == null) isPedAimingFromCover = (Function) native.GetObjectProperty("isPedAimingFromCover");
			return (bool) isPedAimingFromCover.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether the specified ped is reloading.</returns>
		public bool IsPedReloading(int ped)
		{
			if (isPedReloading == null) isPedReloading = (Function) native.GetObjectProperty("isPedReloading");
			return (bool) isPedReloading.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.</returns>
		public bool IsPedAPlayer(int ped)
		{
			if (isPedAPlayer == null) isPedAPlayer = (Function) native.GetObjectProperty("isPedAPlayer");
			return (bool) isPedAPlayer.Call(native, ped);
		}

		/// <summary>
		/// pedType: see CREATE_PED
		/// </summary>
		/// <param name="pedType">see CREATE_PED</param>
		public int CreatePedInsideVehicle(int vehicle, int pedType, int modelHash, int seat, bool isNetwork, bool thisScriptCheck)
		{
			if (createPedInsideVehicle == null) createPedInsideVehicle = (Function) native.GetObjectProperty("createPedInsideVehicle");
			return (int) createPedInsideVehicle.Call(native, vehicle, pedType, modelHash, seat, isNetwork, thisScriptCheck);
		}

		public void SetPedDesiredHeading(int ped, double heading)
		{
			if (setPedDesiredHeading == null) setPedDesiredHeading = (Function) native.GetObjectProperty("setPedDesiredHeading");
			setPedDesiredHeading.Call(native, ped, heading);
		}

		public void FreezePedCameraRotation(int ped)
		{
			if (freezePedCameraRotation == null) freezePedCameraRotation = (Function) native.GetObjectProperty("freezePedCameraRotation");
			freezePedCameraRotation.Call(native, ped);
		}

		/// <summary>
		/// angle is ped's view cone
		/// </summary>
		/// <param name="angle">is ped's view cone</param>
		public bool IsPedFacingPed(int ped, int otherPed, double angle)
		{
			if (isPedFacingPed == null) isPedFacingPed = (Function) native.GetObjectProperty("isPedFacingPed");
			return (bool) isPedFacingPed.Call(native, ped, otherPed, angle);
		}

		/// <summary>
		/// A.) Swinging a random melee attack (including pistol-whipping)
		/// B.) Reacting to being hit by a melee attack (including pistol-whipping)
		/// C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
		/// You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
		/// </summary>
		/// <returns>Notes: The function only returns true while the ped is:</returns>
		public bool IsPedInMeleeCombat(int ped)
		{
			if (isPedInMeleeCombat == null) isPedInMeleeCombat = (Function) native.GetObjectProperty("isPedInMeleeCombat");
			return (bool) isPedInMeleeCombat.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.</returns>
		public bool IsPedStopped(int ped)
		{
			if (isPedStopped == null) isPedStopped = (Function) native.GetObjectProperty("isPedStopped");
			return (bool) isPedStopped.Call(native, ped);
		}

		public bool IsPedShootingInArea(int ped, double x1, double y1, double z1, double x2, double y2, double z2, bool p7, bool p8)
		{
			if (isPedShootingInArea == null) isPedShootingInArea = (Function) native.GetObjectProperty("isPedShootingInArea");
			return (bool) isPedShootingInArea.Call(native, ped, x1, y1, z1, x2, y2, z2, p7, p8);
		}

		public bool IsAnyPedShootingInArea(double x1, double y1, double z1, double x2, double y2, double z2, bool p6, bool p7)
		{
			if (isAnyPedShootingInArea == null) isAnyPedShootingInArea = (Function) native.GetObjectProperty("isAnyPedShootingInArea");
			return (bool) isAnyPedShootingInArea.Call(native, x1, y1, z1, x2, y2, z2, p6, p7);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether the specified ped is shooting.</returns>
		public bool IsPedShooting(int ped)
		{
			if (isPedShooting == null) isPedShooting = (Function) native.GetObjectProperty("isPedShooting");
			return (bool) isPedShooting.Call(native, ped);
		}

		/// <summary>
		/// accuracy = 0-100, 100 being perfectly accurate
		/// </summary>
		/// <param name="accuracy">0-100, 100 being perfectly accurate</param>
		public void SetPedAccuracy(int ped, int accuracy)
		{
			if (setPedAccuracy == null) setPedAccuracy = (Function) native.GetObjectProperty("setPedAccuracy");
			setPedAccuracy.Call(native, ped, accuracy);
		}

		public int GetPedAccuracy(int ped)
		{
			if (getPedAccuracy == null) getPedAccuracy = (Function) native.GetObjectProperty("getPedAccuracy");
			return (int) getPedAccuracy.Call(native, ped);
		}

		/// <summary>
		/// SET_A*
		/// </summary>
		public void _0x87DDEB611B329A9C(double multiplier)
		{
			if (__0x87DDEB611B329A9C == null) __0x87DDEB611B329A9C = (Function) native.GetObjectProperty("_0x87DDEB611B329A9C");
			__0x87DDEB611B329A9C.Call(native, multiplier);
		}

		public bool IsPedModel(int ped, int modelHash)
		{
			if (isPedModel == null) isPedModel = (Function) native.GetObjectProperty("isPedModel");
			return (bool) isPedModel.Call(native, ped, modelHash);
		}

		/// <summary>
		/// Forces the ped to fall back and kills it.
		/// It doesn't really explode the ped's head but it kills the ped
		/// </summary>
		public void ExplodePedHead(int ped, int weaponHash)
		{
			if (explodePedHead == null) explodePedHead = (Function) native.GetObjectProperty("explodePedHead");
			explodePedHead.Call(native, ped, weaponHash);
		}

		/// <summary>
		/// Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) RemovePedElegantly(int ped)
		{
			if (removePedElegantly == null) removePedElegantly = (Function) native.GetObjectProperty("removePedElegantly");
			var results = (Array) removePedElegantly.Call(native, ped);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
		/// </summary>
		public void AddArmourToPed(int ped, int amount)
		{
			if (addArmourToPed == null) addArmourToPed = (Function) native.GetObjectProperty("addArmourToPed");
			addArmourToPed.Call(native, ped, amount);
		}

		/// <summary>
		/// Sets the armor of the specified ped.
		/// ped: The Ped to set the armor of.
		/// amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
		/// </summary>
		/// <param name="ped">The Ped to set the armor of.</param>
		/// <param name="amount">A value between 0 and 100 indicating the value to set the Ped's armor to.</param>
		public void SetPedArmour(int ped, int amount)
		{
			if (setPedArmour == null) setPedArmour = (Function) native.GetObjectProperty("setPedArmour");
			setPedArmour.Call(native, ped, amount);
		}

		/// <summary>
		/// Ped: The ped to warp.
		/// vehicle: The vehicle to warp the ped into.
		/// Seat_Index: [-1 is driver seat, -2 first free passenger seat]
		/// Moreinfo of Seat Index
		/// DriverSeat = -1
		/// Passenger = 0
		/// Left Rear = 1
		/// RightRear = 2
		/// </summary>
		/// <param name="ped">Ped: The ped to warp.</param>
		/// <param name="vehicle">The vehicle to warp the ped into.</param>
		public void SetPedIntoVehicle(int ped, int vehicle, int seatIndex)
		{
			if (setPedIntoVehicle == null) setPedIntoVehicle = (Function) native.GetObjectProperty("setPedIntoVehicle");
			setPedIntoVehicle.Call(native, ped, vehicle, seatIndex);
		}

		public void SetPedAllowVehiclesOverride(int ped, bool toggle)
		{
			if (setPedAllowVehiclesOverride == null) setPedAllowVehiclesOverride = (Function) native.GetObjectProperty("setPedAllowVehiclesOverride");
			setPedAllowVehiclesOverride.Call(native, ped, toggle);
		}

		public bool CanCreateRandomPed(bool unk)
		{
			if (canCreateRandomPed == null) canCreateRandomPed = (Function) native.GetObjectProperty("canCreateRandomPed");
			return (bool) canCreateRandomPed.Call(native, unk);
		}

		/// <summary>
		/// vb.net
		/// Dim ped_handle As Integer
		/// With Game.Player.Character
		/// Dim pos As Vector3 = .Position + .ForwardVector * 3
		/// ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
		/// End With
		/// Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
		/// </summary>
		/// <returns>Creates a Ped at the specified location, returns the Ped Handle.</returns>
		public int CreateRandomPed(double posX, double posY, double posZ)
		{
			if (createRandomPed == null) createRandomPed = (Function) native.GetObjectProperty("createRandomPed");
			return (int) createRandomPed.Call(native, posX, posY, posZ);
		}

		public int CreateRandomPedAsDriver(int vehicle, bool returnHandle)
		{
			if (createRandomPedAsDriver == null) createRandomPedAsDriver = (Function) native.GetObjectProperty("createRandomPedAsDriver");
			return (int) createRandomPedAsDriver.Call(native, vehicle, returnHandle);
		}

		public bool CanCreateRandomDriver()
		{
			if (canCreateRandomDriver == null) canCreateRandomDriver = (Function) native.GetObjectProperty("canCreateRandomDriver");
			return (bool) canCreateRandomDriver.Call(native);
		}

		public bool CanCreateRandomBikeRider()
		{
			if (canCreateRandomBikeRider == null) canCreateRandomBikeRider = (Function) native.GetObjectProperty("canCreateRandomBikeRider");
			return (bool) canCreateRandomBikeRider.Call(native);
		}

		public void SetPedMoveAnimsBlendOut(int ped)
		{
			if (setPedMoveAnimsBlendOut == null) setPedMoveAnimsBlendOut = (Function) native.GetObjectProperty("setPedMoveAnimsBlendOut");
			setPedMoveAnimsBlendOut.Call(native, ped);
		}

		public void SetPedCanBeDraggedOut(int ped, bool toggle)
		{
			if (setPedCanBeDraggedOut == null) setPedCanBeDraggedOut = (Function) native.GetObjectProperty("setPedCanBeDraggedOut");
			setPedCanBeDraggedOut.Call(native, ped, toggle);
		}

		/// <summary>
		/// SET_PED_ALLOW*
		/// toggle was always false except in one instance (b678).
		/// The one time this is set to true seems to do with when you fail the mission.
		/// </summary>
		/// <param name="toggle">was always false except in one instance (b678).</param>
		public void _0xF2BEBCDFAFDAA19E(bool toggle)
		{
			if (__0xF2BEBCDFAFDAA19E == null) __0xF2BEBCDFAFDAA19E = (Function) native.GetObjectProperty("_0xF2BEBCDFAFDAA19E");
			__0xF2BEBCDFAFDAA19E.Call(native, toggle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true/false if the ped is/isn't male.</returns>
		public bool IsPedMale(int ped)
		{
			if (isPedMale == null) isPedMale = (Function) native.GetObjectProperty("isPedMale");
			return (bool) isPedMale.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true/false if the ped is/isn't humanoid.</returns>
		public bool IsPedHuman(int ped)
		{
			if (isPedHuman == null) isPedHuman = (Function) native.GetObjectProperty("isPedHuman");
			return (bool) isPedHuman.Call(native, ped);
		}

		/// <summary>
		/// Gets the vehicle the specified Ped is/was in depending on bool value.
		/// [False = CurrentVehicle, True = LastVehicle]
		/// </summary>
		public int GetVehiclePedIsIn(int ped, bool lastVehicle)
		{
			if (getVehiclePedIsIn == null) getVehiclePedIsIn = (Function) native.GetObjectProperty("getVehiclePedIsIn");
			return (int) getVehiclePedIsIn.Call(native, ped, lastVehicle);
		}

		/// <summary>
		/// Resets the value for the last vehicle driven by the Ped.
		/// </summary>
		public void ResetPedLastVehicle(int ped)
		{
			if (resetPedLastVehicle == null) resetPedLastVehicle = (Function) native.GetObjectProperty("resetPedLastVehicle");
			resetPedLastVehicle.Call(native, ped);
		}

		public void SetPedDensityMultiplierThisFrame(double multiplier)
		{
			if (setPedDensityMultiplierThisFrame == null) setPedDensityMultiplierThisFrame = (Function) native.GetObjectProperty("setPedDensityMultiplierThisFrame");
			setPedDensityMultiplierThisFrame.Call(native, multiplier);
		}

		public void SetScenarioPedDensityMultiplierThisFrame(double p0, double p1)
		{
			if (setScenarioPedDensityMultiplierThisFrame == null) setScenarioPedDensityMultiplierThisFrame = (Function) native.GetObjectProperty("setScenarioPedDensityMultiplierThisFrame");
			setScenarioPedDensityMultiplierThisFrame.Call(native, p0, p1);
		}

		public void _0x5A7F62FDA59759BD()
		{
			if (__0x5A7F62FDA59759BD == null) __0x5A7F62FDA59759BD = (Function) native.GetObjectProperty("_0x5A7F62FDA59759BD");
			__0x5A7F62FDA59759BD.Call(native);
		}

		public void SetScriptedConversionCoordThisFrame(double x, double y, double z)
		{
			if (setScriptedConversionCoordThisFrame == null) setScriptedConversionCoordThisFrame = (Function) native.GetObjectProperty("setScriptedConversionCoordThisFrame");
			setScriptedConversionCoordThisFrame.Call(native, x, y, z);
		}

		/// <summary>
		/// The distance between these points, is the diagonal of a box (remember it's 3D).
		/// </summary>
		public void SetPedNonCreationArea(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (setPedNonCreationArea == null) setPedNonCreationArea = (Function) native.GetObjectProperty("setPedNonCreationArea");
			setPedNonCreationArea.Call(native, x1, y1, z1, x2, y2, z2);
		}

		public void ClearPedNonCreationArea()
		{
			if (clearPedNonCreationArea == null) clearPedNonCreationArea = (Function) native.GetObjectProperty("clearPedNonCreationArea");
			clearPedNonCreationArea.Call(native);
		}

		/// <summary>
		/// Something regarding ped population.
		/// </summary>
		public void _0x4759CC730F947C81()
		{
			if (__0x4759CC730F947C81 == null) __0x4759CC730F947C81 = (Function) native.GetObjectProperty("_0x4759CC730F947C81");
			__0x4759CC730F947C81.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Same function call as PED::GET_MOUNT, aka just returns 0</returns>
		public bool IsPedOnMount(int ped)
		{
			if (isPedOnMount == null) isPedOnMount = (Function) native.GetObjectProperty("isPedOnMount");
			return (bool) isPedOnMount.Call(native, ped);
		}

		/// <summary>
		/// void __fastcall ped__get_mount(NativeContext *a1)
		/// {
		/// NativeContext *v1; // rbx@1
		/// v1 = a1;
		/// GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
		/// v1->Returns->Item1= 0;
		/// }
		/// </summary>
		/// <returns>Function just returns 0</returns>
		public int GetMount(int ped)
		{
			if (getMount == null) getMount = (Function) native.GetObjectProperty("getMount");
			return (int) getMount.Call(native, ped);
		}

		/// <summary>
		/// Gets a value indicating whether the specified ped is on top of any vehicle.
		/// Return 1 when ped is on vehicle.
		/// Return 0 when ped is not on a vehicle.
		/// </summary>
		public bool IsPedOnVehicle(int ped)
		{
			if (isPedOnVehicle == null) isPedOnVehicle = (Function) native.GetObjectProperty("isPedOnVehicle");
			return (bool) isPedOnVehicle.Call(native, ped);
		}

		public bool IsPedOnSpecificVehicle(int ped, int vehicle)
		{
			if (isPedOnSpecificVehicle == null) isPedOnSpecificVehicle = (Function) native.GetObjectProperty("isPedOnSpecificVehicle");
			return (bool) isPedOnSpecificVehicle.Call(native, ped, vehicle);
		}

		/// <summary>
		/// Maximum possible amount of money on MP is 2000. ~JX
		/// -----------------------------------------------------------------------------
		/// Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
		/// </summary>
		public void SetPedMoney(int ped, int amount)
		{
			if (setPedMoney == null) setPedMoney = (Function) native.GetObjectProperty("setPedMoney");
			setPedMoney.Call(native, ped, amount);
		}

		public int GetPedMoney(int ped)
		{
			if (getPedMoney == null) getPedMoney = (Function) native.GetObjectProperty("getPedMoney");
			return (int) getPedMoney.Call(native, ped);
		}

		public void _0xFF4803BC019852D9(double p0, object p1)
		{
			if (__0xFF4803BC019852D9 == null) __0xFF4803BC019852D9 = (Function) native.GetObjectProperty("_0xFF4803BC019852D9");
			__0xFF4803BC019852D9.Call(native, p0, p1);
		}

		public void _0x6B0E6172C9A4D902(bool p0)
		{
			if (__0x6B0E6172C9A4D902 == null) __0x6B0E6172C9A4D902 = (Function) native.GetObjectProperty("_0x6B0E6172C9A4D902");
			__0x6B0E6172C9A4D902.Call(native, p0);
		}

		public void _0x9911F4A24485F653(bool p0)
		{
			if (__0x9911F4A24485F653 == null) __0x9911F4A24485F653 = (Function) native.GetObjectProperty("_0x9911F4A24485F653");
			__0x9911F4A24485F653.Call(native, p0);
		}

		/// <summary>
		/// ped cannot be headshot if this is set to false
		/// </summary>
		/// <param name="ped">cannot be headshot if this is set to false</param>
		public void SetPedSuffersCriticalHits(int ped, bool toggle)
		{
			if (setPedSuffersCriticalHits == null) setPedSuffersCriticalHits = (Function) native.GetObjectProperty("setPedSuffersCriticalHits");
			setPedSuffersCriticalHits.Call(native, ped, toggle);
		}

		/// <summary>
		/// SET_PED_*
		/// </summary>
		public void _0xAFC976FD0580C7B3(int ped, bool toggle)
		{
			if (__0xAFC976FD0580C7B3 == null) __0xAFC976FD0580C7B3 = (Function) native.GetObjectProperty("_0xAFC976FD0580C7B3");
			__0xAFC976FD0580C7B3.Call(native, ped, toggle);
		}

		/// <summary>
		/// Detect if ped is sitting in the specified vehicle
		/// [True/False]
		/// </summary>
		public bool IsPedSittingInVehicle(int ped, int vehicle)
		{
			if (isPedSittingInVehicle == null) isPedSittingInVehicle = (Function) native.GetObjectProperty("isPedSittingInVehicle");
			return (bool) isPedSittingInVehicle.Call(native, ped, vehicle);
		}

		/// <summary>
		/// Detect if ped is in any vehicle
		/// [True/False]
		/// </summary>
		public bool IsPedSittingInAnyVehicle(int ped)
		{
			if (isPedSittingInAnyVehicle == null) isPedSittingInAnyVehicle = (Function) native.GetObjectProperty("isPedSittingInAnyVehicle");
			return (bool) isPedSittingInAnyVehicle.Call(native, ped);
		}

		public bool IsPedOnFoot(int ped)
		{
			if (isPedOnFoot == null) isPedOnFoot = (Function) native.GetObjectProperty("isPedOnFoot");
			return (bool) isPedOnFoot.Call(native, ped);
		}

		public bool IsPedOnAnyBike(int ped)
		{
			if (isPedOnAnyBike == null) isPedOnAnyBike = (Function) native.GetObjectProperty("isPedOnAnyBike");
			return (bool) isPedOnAnyBike.Call(native, ped);
		}

		public bool IsPedPlantingBomb(int ped)
		{
			if (isPedPlantingBomb == null) isPedPlantingBomb = (Function) native.GetObjectProperty("isPedPlantingBomb");
			return (bool) isPedPlantingBomb.Call(native, ped);
		}

		public Vector3 GetDeadPedPickupCoords(int ped, double p1, double p2)
		{
			if (getDeadPedPickupCoords == null) getDeadPedPickupCoords = (Function) native.GetObjectProperty("getDeadPedPickupCoords");
			return JSObjectToVector3(getDeadPedPickupCoords.Call(native, ped, p1, p2));
		}

		public bool IsPedInAnyBoat(int ped)
		{
			if (isPedInAnyBoat == null) isPedInAnyBoat = (Function) native.GetObjectProperty("isPedInAnyBoat");
			return (bool) isPedInAnyBoat.Call(native, ped);
		}

		public bool IsPedInAnySub(int ped)
		{
			if (isPedInAnySub == null) isPedInAnySub = (Function) native.GetObjectProperty("isPedInAnySub");
			return (bool) isPedInAnySub.Call(native, ped);
		}

		public bool IsPedInAnyHeli(int ped)
		{
			if (isPedInAnyHeli == null) isPedInAnyHeli = (Function) native.GetObjectProperty("isPedInAnyHeli");
			return (bool) isPedInAnyHeli.Call(native, ped);
		}

		public bool IsPedInAnyPlane(int ped)
		{
			if (isPedInAnyPlane == null) isPedInAnyPlane = (Function) native.GetObjectProperty("isPedInAnyPlane");
			return (bool) isPedInAnyPlane.Call(native, ped);
		}

		public bool IsPedInFlyingVehicle(int ped)
		{
			if (isPedInFlyingVehicle == null) isPedInFlyingVehicle = (Function) native.GetObjectProperty("isPedInFlyingVehicle");
			return (bool) isPedInFlyingVehicle.Call(native, ped);
		}

		public void SetPedDiesInWater(int ped, bool toggle)
		{
			if (setPedDiesInWater == null) setPedDiesInWater = (Function) native.GetObjectProperty("setPedDiesInWater");
			setPedDiesInWater.Call(native, ped, toggle);
		}

		public void SetPedDiesInSinkingVehicle(int ped, bool toggle)
		{
			if (setPedDiesInSinkingVehicle == null) setPedDiesInSinkingVehicle = (Function) native.GetObjectProperty("setPedDiesInSinkingVehicle");
			setPedDiesInSinkingVehicle.Call(native, ped, toggle);
		}

		public int GetPedArmour(int ped)
		{
			if (getPedArmour == null) getPedArmour = (Function) native.GetObjectProperty("getPedArmour");
			return (int) getPedArmour.Call(native, ped);
		}

		public void SetPedStayInVehicleWhenJacked(int ped, bool toggle)
		{
			if (setPedStayInVehicleWhenJacked == null) setPedStayInVehicleWhenJacked = (Function) native.GetObjectProperty("setPedStayInVehicleWhenJacked");
			setPedStayInVehicleWhenJacked.Call(native, ped, toggle);
		}

		public void SetPedCanBeShotInVehicle(int ped, bool toggle)
		{
			if (setPedCanBeShotInVehicle == null) setPedCanBeShotInVehicle = (Function) native.GetObjectProperty("setPedCanBeShotInVehicle");
			setPedCanBeShotInVehicle.Call(native, ped, toggle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetPedLastDamageBone(int ped, int outBone)
		{
			if (getPedLastDamageBone == null) getPedLastDamageBone = (Function) native.GetObjectProperty("getPedLastDamageBone");
			var results = (Array) getPedLastDamageBone.Call(native, ped, outBone);
			return ((bool) results[0], (int) results[1]);
		}

		public void ClearPedLastDamageBone(int ped)
		{
			if (clearPedLastDamageBone == null) clearPedLastDamageBone = (Function) native.GetObjectProperty("clearPedLastDamageBone");
			clearPedLastDamageBone.Call(native, ped);
		}

		public void SetAiWeaponDamageModifier(double value)
		{
			if (setAiWeaponDamageModifier == null) setAiWeaponDamageModifier = (Function) native.GetObjectProperty("setAiWeaponDamageModifier");
			setAiWeaponDamageModifier.Call(native, value);
		}

		public void ResetAiWeaponDamageModifier()
		{
			if (resetAiWeaponDamageModifier == null) resetAiWeaponDamageModifier = (Function) native.GetObjectProperty("resetAiWeaponDamageModifier");
			resetAiWeaponDamageModifier.Call(native);
		}

		public void SetAiMeleeWeaponDamageModifier(double modifier)
		{
			if (setAiMeleeWeaponDamageModifier == null) setAiMeleeWeaponDamageModifier = (Function) native.GetObjectProperty("setAiMeleeWeaponDamageModifier");
			setAiMeleeWeaponDamageModifier.Call(native, modifier);
		}

		public void ResetAiMeleeWeaponDamageModifier()
		{
			if (resetAiMeleeWeaponDamageModifier == null) resetAiMeleeWeaponDamageModifier = (Function) native.GetObjectProperty("resetAiMeleeWeaponDamageModifier");
			resetAiMeleeWeaponDamageModifier.Call(native);
		}

		public void _0x2F3C3D9F50681DE4(object p0, bool p1)
		{
			if (__0x2F3C3D9F50681DE4 == null) __0x2F3C3D9F50681DE4 = (Function) native.GetObjectProperty("_0x2F3C3D9F50681DE4");
			__0x2F3C3D9F50681DE4.Call(native, p0, p1);
		}

		public void SetPedCanBeTargetted(int ped, bool toggle)
		{
			if (setPedCanBeTargetted == null) setPedCanBeTargetted = (Function) native.GetObjectProperty("setPedCanBeTargetted");
			setPedCanBeTargetted.Call(native, ped, toggle);
		}

		public void SetPedCanBeTargettedByTeam(int ped, int team, bool toggle)
		{
			if (setPedCanBeTargettedByTeam == null) setPedCanBeTargettedByTeam = (Function) native.GetObjectProperty("setPedCanBeTargettedByTeam");
			setPedCanBeTargettedByTeam.Call(native, ped, team, toggle);
		}

		public void SetPedCanBeTargettedByPlayer(int ped, int player, bool toggle)
		{
			if (setPedCanBeTargettedByPlayer == null) setPedCanBeTargettedByPlayer = (Function) native.GetObjectProperty("setPedCanBeTargettedByPlayer");
			setPedCanBeTargettedByPlayer.Call(native, ped, player, toggle);
		}

		public void _0x061CB768363D6424(int ped, bool toggle)
		{
			if (__0x061CB768363D6424 == null) __0x061CB768363D6424 = (Function) native.GetObjectProperty("_0x061CB768363D6424");
			__0x061CB768363D6424.Call(native, ped, toggle);
		}

		public void _0xFD325494792302D7(int ped, bool toggle)
		{
			if (__0xFD325494792302D7 == null) __0xFD325494792302D7 = (Function) native.GetObjectProperty("_0xFD325494792302D7");
			__0xFD325494792302D7.Call(native, ped, toggle);
		}

		public bool IsPedInAnyPoliceVehicle(int ped)
		{
			if (isPedInAnyPoliceVehicle == null) isPedInAnyPoliceVehicle = (Function) native.GetObjectProperty("isPedInAnyPoliceVehicle");
			return (bool) isPedInAnyPoliceVehicle.Call(native, ped);
		}

		public void ForcePedToOpenParachute(int ped)
		{
			if (forcePedToOpenParachute == null) forcePedToOpenParachute = (Function) native.GetObjectProperty("forcePedToOpenParachute");
			forcePedToOpenParachute.Call(native, ped);
		}

		public bool IsPedInParachuteFreeFall(int ped)
		{
			if (isPedInParachuteFreeFall == null) isPedInParachuteFreeFall = (Function) native.GetObjectProperty("isPedInParachuteFreeFall");
			return (bool) isPedInParachuteFreeFall.Call(native, ped);
		}

		public bool IsPedFalling(int ped)
		{
			if (isPedFalling == null) isPedFalling = (Function) native.GetObjectProperty("isPedFalling");
			return (bool) isPedFalling.Call(native, ped);
		}

		public bool IsPedJumping(int ped)
		{
			if (isPedJumping == null) isPedJumping = (Function) native.GetObjectProperty("isPedJumping");
			return (bool) isPedJumping.Call(native, ped);
		}

		public object _0x412F1364FA066CFB(object p0)
		{
			if (__0x412F1364FA066CFB == null) __0x412F1364FA066CFB = (Function) native.GetObjectProperty("_0x412F1364FA066CFB");
			return __0x412F1364FA066CFB.Call(native, p0);
		}

		public object _0x451D05012CCEC234(object p0)
		{
			if (__0x451D05012CCEC234 == null) __0x451D05012CCEC234 = (Function) native.GetObjectProperty("_0x451D05012CCEC234");
			return __0x451D05012CCEC234.Call(native, p0);
		}

		public bool IsPedClimbing(int ped)
		{
			if (isPedClimbing == null) isPedClimbing = (Function) native.GetObjectProperty("isPedClimbing");
			return (bool) isPedClimbing.Call(native, ped);
		}

		public bool IsPedVaulting(int ped)
		{
			if (isPedVaulting == null) isPedVaulting = (Function) native.GetObjectProperty("isPedVaulting");
			return (bool) isPedVaulting.Call(native, ped);
		}

		public bool IsPedDiving(int ped)
		{
			if (isPedDiving == null) isPedDiving = (Function) native.GetObjectProperty("isPedDiving");
			return (bool) isPedDiving.Call(native, ped);
		}

		public bool IsPedJumpingOutOfVehicle(int ped)
		{
			if (isPedJumpingOutOfVehicle == null) isPedJumpingOutOfVehicle = (Function) native.GetObjectProperty("isPedJumpingOutOfVehicle");
			return (bool) isPedJumpingOutOfVehicle.Call(native, ped);
		}

		/// <summary>
		/// IS_PED_*
		/// </summary>
		/// <returns>Returns true if the ped is currently opening a door (CTaskOpenDoor).</returns>
		public bool IsPedOpeningADoor(int ped)
		{
			if (isPedOpeningADoor == null) isPedOpeningADoor = (Function) native.GetObjectProperty("isPedOpeningADoor");
			return (bool) isPedOpeningADoor.Call(native, ped);
		}

		/// <summary>
		/// -1: Normal
		/// 0: Wearing parachute on back
		/// 1: Parachute opening
		/// 2: Parachute open
		/// 3: Falling to doom (e.g. after exiting parachute)
		/// Normal means no parachute?
		/// </summary>
		/// <returns>Returns:</returns>
		public int GetPedParachuteState(int ped)
		{
			if (getPedParachuteState == null) getPedParachuteState = (Function) native.GetObjectProperty("getPedParachuteState");
			return (int) getPedParachuteState.Call(native, ped);
		}

		/// <summary>
		/// -1: no landing
		/// 0: landing on both feet
		/// 1: stumbling
		/// 2: rolling
		/// 3: ragdoll
		/// </summary>
		public int GetPedParachuteLandingType(int ped)
		{
			if (getPedParachuteLandingType == null) getPedParachuteLandingType = (Function) native.GetObjectProperty("getPedParachuteLandingType");
			return (int) getPedParachuteLandingType.Call(native, ped);
		}

		public void SetPedParachuteTintIndex(int ped, int tintIndex)
		{
			if (setPedParachuteTintIndex == null) setPedParachuteTintIndex = (Function) native.GetObjectProperty("setPedParachuteTintIndex");
			setPedParachuteTintIndex.Call(native, ped, tintIndex);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) GetPedParachuteTintIndex(int ped, int outTintIndex)
		{
			if (getPedParachuteTintIndex == null) getPedParachuteTintIndex = (Function) native.GetObjectProperty("getPedParachuteTintIndex");
			var results = (Array) getPedParachuteTintIndex.Call(native, ped, outTintIndex);
			return (results[0], (int) results[1]);
		}

		public void SetPedReserveParachuteTintIndex(int ped, object p1)
		{
			if (setPedReserveParachuteTintIndex == null) setPedReserveParachuteTintIndex = (Function) native.GetObjectProperty("setPedReserveParachuteTintIndex");
			setPedReserveParachuteTintIndex.Call(native, ped, p1);
		}

		public int CreateParachuteObject(int ped, bool p1, bool p2)
		{
			if (createParachuteObject == null) createParachuteObject = (Function) native.GetObjectProperty("createParachuteObject");
			return (int) createParachuteObject.Call(native, ped, p1, p2);
		}

		/// <summary>
		/// This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
		/// </summary>
		public void SetPedDucking(int ped, bool toggle)
		{
			if (setPedDucking == null) setPedDucking = (Function) native.GetObjectProperty("setPedDucking");
			setPedDucking.Call(native, ped, toggle);
		}

		public bool IsPedDucking(int ped)
		{
			if (isPedDucking == null) isPedDucking = (Function) native.GetObjectProperty("isPedDucking");
			return (bool) isPedDucking.Call(native, ped);
		}

		public bool IsPedInAnyTaxi(int ped)
		{
			if (isPedInAnyTaxi == null) isPedInAnyTaxi = (Function) native.GetObjectProperty("isPedInAnyTaxi");
			return (bool) isPedInAnyTaxi.Call(native, ped);
		}

		public void SetPedIdRange(int ped, double value)
		{
			if (setPedIdRange == null) setPedIdRange = (Function) native.GetObjectProperty("setPedIdRange");
			setPedIdRange.Call(native, ped, value);
		}

		public void SetPedHighlyPerceptive(int ped, bool toggle)
		{
			if (setPedHighlyPerceptive == null) setPedHighlyPerceptive = (Function) native.GetObjectProperty("setPedHighlyPerceptive");
			setPedHighlyPerceptive.Call(native, ped, toggle);
		}

		public void _0x2F074C904D85129E(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0x2F074C904D85129E == null) __0x2F074C904D85129E = (Function) native.GetObjectProperty("_0x2F074C904D85129E");
			__0x2F074C904D85129E.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// SET_PED_*
		/// Has most likely to do with some shooting attributes as it sets the float which is in the same range as shootRate.
		/// </summary>
		public void _0xEC4B4B3B9908052A(int ped, double unk)
		{
			if (__0xEC4B4B3B9908052A == null) __0xEC4B4B3B9908052A = (Function) native.GetObjectProperty("_0xEC4B4B3B9908052A");
			__0xEC4B4B3B9908052A.Call(native, ped, unk);
		}

		public void _0x733C87D4CE22BEA2(object p0)
		{
			if (__0x733C87D4CE22BEA2 == null) __0x733C87D4CE22BEA2 = (Function) native.GetObjectProperty("_0x733C87D4CE22BEA2");
			__0x733C87D4CE22BEA2.Call(native, p0);
		}

		public void SetPedSeeingRange(int ped, double value)
		{
			if (setPedSeeingRange == null) setPedSeeingRange = (Function) native.GetObjectProperty("setPedSeeingRange");
			setPedSeeingRange.Call(native, ped, value);
		}

		public void SetPedHearingRange(int ped, double value)
		{
			if (setPedHearingRange == null) setPedHearingRange = (Function) native.GetObjectProperty("setPedHearingRange");
			setPedHearingRange.Call(native, ped, value);
		}

		public void SetPedVisualFieldMinAngle(int ped, double value)
		{
			if (setPedVisualFieldMinAngle == null) setPedVisualFieldMinAngle = (Function) native.GetObjectProperty("setPedVisualFieldMinAngle");
			setPedVisualFieldMinAngle.Call(native, ped, value);
		}

		public void SetPedVisualFieldMaxAngle(int ped, double value)
		{
			if (setPedVisualFieldMaxAngle == null) setPedVisualFieldMaxAngle = (Function) native.GetObjectProperty("setPedVisualFieldMaxAngle");
			setPedVisualFieldMaxAngle.Call(native, ped, value);
		}

		/// <summary>
		/// This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
		/// -90f should let the ped see 90 degrees below them, for example.
		/// </summary>
		public void SetPedVisualFieldMinElevationAngle(int ped, double angle)
		{
			if (setPedVisualFieldMinElevationAngle == null) setPedVisualFieldMinElevationAngle = (Function) native.GetObjectProperty("setPedVisualFieldMinElevationAngle");
			setPedVisualFieldMinElevationAngle.Call(native, ped, angle);
		}

		/// <summary>
		/// This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
		/// </summary>
		public void SetPedVisualFieldMaxElevationAngle(int ped, double angle)
		{
			if (setPedVisualFieldMaxElevationAngle == null) setPedVisualFieldMaxElevationAngle = (Function) native.GetObjectProperty("setPedVisualFieldMaxElevationAngle");
			setPedVisualFieldMaxElevationAngle.Call(native, ped, angle);
		}

		public void SetPedVisualFieldPeripheralRange(int ped, double range)
		{
			if (setPedVisualFieldPeripheralRange == null) setPedVisualFieldPeripheralRange = (Function) native.GetObjectProperty("setPedVisualFieldPeripheralRange");
			setPedVisualFieldPeripheralRange.Call(native, ped, range);
		}

		public void SetPedVisualFieldCenterAngle(int ped, double angle)
		{
			if (setPedVisualFieldCenterAngle == null) setPedVisualFieldCenterAngle = (Function) native.GetObjectProperty("setPedVisualFieldCenterAngle");
			setPedVisualFieldCenterAngle.Call(native, ped, angle);
		}

		public double GetPedVisualFieldCenterAngle(int ped)
		{
			if (getPedVisualFieldCenterAngle == null) getPedVisualFieldCenterAngle = (Function) native.GetObjectProperty("getPedVisualFieldCenterAngle");
			return (double) getPedVisualFieldCenterAngle.Call(native, ped);
		}

		/// <summary>
		/// p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
		/// </summary>
		/// <param name="p1">is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".</param>
		public void SetPedStealthMovement(int ped, bool p1, string action)
		{
			if (setPedStealthMovement == null) setPedStealthMovement = (Function) native.GetObjectProperty("setPedStealthMovement");
			setPedStealthMovement.Call(native, ped, p1, action);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether the entity is in stealth mode</returns>
		public bool GetPedStealthMovement(int ped)
		{
			if (getPedStealthMovement == null) getPedStealthMovement = (Function) native.GetObjectProperty("getPedStealthMovement");
			return (bool) getPedStealthMovement.Call(native, ped);
		}

		/// <summary>
		/// Creates a new ped group.
		/// Groups can contain up to 8 peds.
		/// The parameter is unused.
		/// </summary>
		/// <returns>Returns a handle to the created group, or 0 if a group couldn't be created.</returns>
		public int CreateGroup(int unused)
		{
			if (createGroup == null) createGroup = (Function) native.GetObjectProperty("createGroup");
			return (int) createGroup.Call(native, unused);
		}

		public void SetPedAsGroupLeader(int ped, int groupId)
		{
			if (setPedAsGroupLeader == null) setPedAsGroupLeader = (Function) native.GetObjectProperty("setPedAsGroupLeader");
			setPedAsGroupLeader.Call(native, ped, groupId);
		}

		public void SetPedAsGroupMember(int ped, int groupId)
		{
			if (setPedAsGroupMember == null) setPedAsGroupMember = (Function) native.GetObjectProperty("setPedAsGroupMember");
			setPedAsGroupMember.Call(native, ped, groupId);
		}

		/// <summary>
		/// This only will teleport the ped to the group leader if the group leader teleports (sets coords).
		/// Only works in singleplayer
		/// </summary>
		public void SetPedCanTeleportToGroupLeader(int pedHandle, int groupHandle, bool toggle)
		{
			if (setPedCanTeleportToGroupLeader == null) setPedCanTeleportToGroupLeader = (Function) native.GetObjectProperty("setPedCanTeleportToGroupLeader");
			setPedCanTeleportToGroupLeader.Call(native, pedHandle, groupHandle, toggle);
		}

		public void RemoveGroup(int groupId)
		{
			if (removeGroup == null) removeGroup = (Function) native.GetObjectProperty("removeGroup");
			removeGroup.Call(native, groupId);
		}

		public void RemovePedFromGroup(int ped)
		{
			if (removePedFromGroup == null) removePedFromGroup = (Function) native.GetObjectProperty("removePedFromGroup");
			removePedFromGroup.Call(native, ped);
		}

		public bool IsPedGroupMember(int ped, int groupId)
		{
			if (isPedGroupMember == null) isPedGroupMember = (Function) native.GetObjectProperty("isPedGroupMember");
			return (bool) isPedGroupMember.Call(native, ped, groupId);
		}

		public bool IsPedHangingOnToVehicle(int ped)
		{
			if (isPedHangingOnToVehicle == null) isPedHangingOnToVehicle = (Function) native.GetObjectProperty("isPedHangingOnToVehicle");
			return (bool) isPedHangingOnToVehicle.Call(native, ped);
		}

		/// <summary>
		/// Sets the range at which members will automatically leave the group.
		/// </summary>
		public void SetGroupSeparationRange(int groupHandle, double separationRange)
		{
			if (setGroupSeparationRange == null) setGroupSeparationRange = (Function) native.GetObjectProperty("setGroupSeparationRange");
			setGroupSeparationRange.Call(native, groupHandle, separationRange);
		}

		/// <summary>
		/// Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
		/// </summary>
		/// <param name="ped">Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)</param>
		public void SetPedMinGroundTimeForStungun(int ped, int ms)
		{
			if (setPedMinGroundTimeForStungun == null) setPedMinGroundTimeForStungun = (Function) native.GetObjectProperty("setPedMinGroundTimeForStungun");
			setPedMinGroundTimeForStungun.Call(native, ped, ms);
		}

		public bool IsPedProne(int ped)
		{
			if (isPedProne == null) isPedProne = (Function) native.GetObjectProperty("isPedProne");
			return (bool) isPedProne.Call(native, ped);
		}

		/// <summary>
		/// Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
		/// p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[414], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
		/// </summary>
		public bool IsPedInCombat(int ped, int target)
		{
			if (isPedInCombat == null) isPedInCombat = (Function) native.GetObjectProperty("isPedInCombat");
			return (bool) isPedInCombat.Call(native, ped, target);
		}

		public bool CanPedInCombatSeeTarget(int ped, int target)
		{
			if (canPedInCombatSeeTarget == null) canPedInCombatSeeTarget = (Function) native.GetObjectProperty("canPedInCombatSeeTarget");
			return (bool) canPedInCombatSeeTarget.Call(native, ped, target);
		}

		public bool IsPedDoingDriveby(int ped)
		{
			if (isPedDoingDriveby == null) isPedDoingDriveby = (Function) native.GetObjectProperty("isPedDoingDriveby");
			return (bool) isPedDoingDriveby.Call(native, ped);
		}

		public bool IsPedJacking(int ped)
		{
			if (isPedJacking == null) isPedJacking = (Function) native.GetObjectProperty("isPedJacking");
			return (bool) isPedJacking.Call(native, ped);
		}

		public bool IsPedBeingJacked(int ped)
		{
			if (isPedBeingJacked == null) isPedBeingJacked = (Function) native.GetObjectProperty("isPedBeingJacked");
			return (bool) isPedBeingJacked.Call(native, ped);
		}

		/// <summary>
		/// p1 is always 0
		/// </summary>
		/// <param name="p1">is always 0</param>
		public bool IsPedBeingStunned(int ped, int p1)
		{
			if (isPedBeingStunned == null) isPedBeingStunned = (Function) native.GetObjectProperty("isPedBeingStunned");
			return (bool) isPedBeingStunned.Call(native, ped, p1);
		}

		public int GetPedsJacker(int ped)
		{
			if (getPedsJacker == null) getPedsJacker = (Function) native.GetObjectProperty("getPedsJacker");
			return (int) getPedsJacker.Call(native, ped);
		}

		public int GetJackTarget(int ped)
		{
			if (getJackTarget == null) getJackTarget = (Function) native.GetObjectProperty("getJackTarget");
			return (int) getJackTarget.Call(native, ped);
		}

		public bool IsPedFleeing(int ped)
		{
			if (isPedFleeing == null) isPedFleeing = (Function) native.GetObjectProperty("isPedFleeing");
			return (bool) isPedFleeing.Call(native, ped);
		}

		/// <summary>
		/// p1 is nearly always 0 in the scripts.
		/// </summary>
		public bool IsPedInCover(int ped, bool exceptUseWeapon)
		{
			if (isPedInCover == null) isPedInCover = (Function) native.GetObjectProperty("isPedInCover");
			return (bool) isPedInCover.Call(native, ped, exceptUseWeapon);
		}

		public bool IsPedInCoverFacingLeft(int ped)
		{
			if (isPedInCoverFacingLeft == null) isPedInCoverFacingLeft = (Function) native.GetObjectProperty("isPedInCoverFacingLeft");
			return (bool) isPedInCoverFacingLeft.Call(native, ped);
		}

		public bool IsPedInHighCover(int ped)
		{
			if (isPedInHighCover == null) isPedInHighCover = (Function) native.GetObjectProperty("isPedInHighCover");
			return (bool) isPedInHighCover.Call(native, ped);
		}

		public bool IsPedGoingIntoCover(int ped)
		{
			if (isPedGoingIntoCover == null) isPedGoingIntoCover = (Function) native.GetObjectProperty("isPedGoingIntoCover");
			return (bool) isPedGoingIntoCover.Call(native, ped);
		}

		/// <summary>
		/// i could be time. Only example in the decompiled scripts uses it as -1.
		/// </summary>
		/// <param name="i">could be time. Only example in the decompiled scripts uses it as -1.</param>
		public object SetPedPinnedDown(int ped, bool pinned, int i)
		{
			if (setPedPinnedDown == null) setPedPinnedDown = (Function) native.GetObjectProperty("setPedPinnedDown");
			return setPedPinnedDown.Call(native, ped, pinned, i);
		}

		public int GetSeatPedIsTryingToEnter(int ped)
		{
			if (getSeatPedIsTryingToEnter == null) getSeatPedIsTryingToEnter = (Function) native.GetObjectProperty("getSeatPedIsTryingToEnter");
			return (int) getSeatPedIsTryingToEnter.Call(native, ped);
		}

		public int GetVehiclePedIsTryingToEnter(int ped)
		{
			if (getVehiclePedIsTryingToEnter == null) getVehiclePedIsTryingToEnter = (Function) native.GetObjectProperty("getVehiclePedIsTryingToEnter");
			return (int) getVehiclePedIsTryingToEnter.Call(native, ped);
		}

		/// <summary>
		/// Is best to check if the Ped is dead before asking for its killer.
		/// </summary>
		/// <returns>Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'</returns>
		public int GetPedSourceOfDeath(int ped)
		{
			if (getPedSourceOfDeath == null) getPedSourceOfDeath = (Function) native.GetObjectProperty("getPedSourceOfDeath");
			return (int) getPedSourceOfDeath.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the hash of the weapon/model/object that killed the ped.</returns>
		public int GetPedCauseOfDeath(int ped)
		{
			if (getPedCauseOfDeath == null) getPedCauseOfDeath = (Function) native.GetObjectProperty("getPedCauseOfDeath");
			return (int) getPedCauseOfDeath.Call(native, ped);
		}

		public int GetPedTimeOfDeath(int ped)
		{
			if (getPedTimeOfDeath == null) getPedTimeOfDeath = (Function) native.GetObjectProperty("getPedTimeOfDeath");
			return (int) getPedTimeOfDeath.Call(native, ped);
		}

		public int _0x5407B7288D0478B7(object p0)
		{
			if (__0x5407B7288D0478B7 == null) __0x5407B7288D0478B7 = (Function) native.GetObjectProperty("_0x5407B7288D0478B7");
			return (int) __0x5407B7288D0478B7.Call(native, p0);
		}

		public object _0x336B3D200AB007CB(object p0, double p1, double p2, double p3, double p4)
		{
			if (__0x336B3D200AB007CB == null) __0x336B3D200AB007CB = (Function) native.GetObjectProperty("_0x336B3D200AB007CB");
			return __0x336B3D200AB007CB.Call(native, p0, p1, p2, p3, p4);
		}

		public void SetPedRelationshipGroupDefaultHash(int ped, int hash)
		{
			if (setPedRelationshipGroupDefaultHash == null) setPedRelationshipGroupDefaultHash = (Function) native.GetObjectProperty("setPedRelationshipGroupDefaultHash");
			setPedRelationshipGroupDefaultHash.Call(native, ped, hash);
		}

		public void SetPedRelationshipGroupHash(int ped, int hash)
		{
			if (setPedRelationshipGroupHash == null) setPedRelationshipGroupHash = (Function) native.GetObjectProperty("setPedRelationshipGroupHash");
			setPedRelationshipGroupHash.Call(native, ped, hash);
		}

		/// <summary>
		/// Sets the relationship between two groups. This should be called twice (once for each group).
		/// Relationship types:
		/// 0 = Companion
		/// 1 = Respect
		/// 2 = Like
		/// 3 = Neutral
		/// 4 = Dislike
		/// 5 = Hate
		/// 255 = Pedestrians
		/// See NativeDB for reference: http://natives.altv.mp/#/0xBF25EB89375A37AD
		/// </summary>
		/// <param name="relationship">Relationship types:</param>
		public void SetRelationshipBetweenGroups(int relationship, int group1, int group2)
		{
			if (setRelationshipBetweenGroups == null) setRelationshipBetweenGroups = (Function) native.GetObjectProperty("setRelationshipBetweenGroups");
			setRelationshipBetweenGroups.Call(native, relationship, group1, group2);
		}

		/// <summary>
		/// Clears the relationship between two groups. This should be called twice (once for each group).
		/// Relationship types:
		/// 0 = Companion
		/// 1 = Respect
		/// 2 = Like
		/// 3 = Neutral
		/// 4 = Dislike
		/// 5 = Hate
		/// 255 = Pedestrians
		/// See NativeDB for reference: http://natives.altv.mp/#/0x5E29243FB56FC6D4
		/// </summary>
		/// <param name="relationship">Relationship types:</param>
		public void ClearRelationshipBetweenGroups(int relationship, int group1, int group2)
		{
			if (clearRelationshipBetweenGroups == null) clearRelationshipBetweenGroups = (Function) native.GetObjectProperty("clearRelationshipBetweenGroups");
			clearRelationshipBetweenGroups.Call(native, relationship, group1, group2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, int> Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.</returns>
		public (object, int) AddRelationshipGroup(string name, int groupHash)
		{
			if (addRelationshipGroup == null) addRelationshipGroup = (Function) native.GetObjectProperty("addRelationshipGroup");
			var results = (Array) addRelationshipGroup.Call(native, name, groupHash);
			return (results[0], (int) results[1]);
		}

		public void RemoveRelationshipGroup(int groupHash)
		{
			if (removeRelationshipGroup == null) removeRelationshipGroup = (Function) native.GetObjectProperty("removeRelationshipGroup");
			removeRelationshipGroup.Call(native, groupHash);
		}

		public object DoesRelationshipGroupExist(object p0)
		{
			if (doesRelationshipGroupExist == null) doesRelationshipGroupExist = (Function) native.GetObjectProperty("doesRelationshipGroupExist");
			return doesRelationshipGroupExist.Call(native, p0);
		}

		/// <summary>
		/// Gets the relationship between two peds. This should be called twice (once for each ped).
		/// Relationship types:
		/// 0 = Companion
		/// 1 = Respect
		/// 2 = Like
		/// 3 = Neutral
		/// 4 = Dislike
		/// 5 = Hate
		/// 255 = Pedestrians
		/// See NativeDB for reference: http://natives.altv.mp/#/0xEBA5AD3A0EAF7121
		/// </summary>
		public int GetRelationshipBetweenPeds(int ped1, int ped2)
		{
			if (getRelationshipBetweenPeds == null) getRelationshipBetweenPeds = (Function) native.GetObjectProperty("getRelationshipBetweenPeds");
			return (int) getRelationshipBetweenPeds.Call(native, ped1, ped2);
		}

		public int GetPedRelationshipGroupDefaultHash(int ped)
		{
			if (getPedRelationshipGroupDefaultHash == null) getPedRelationshipGroupDefaultHash = (Function) native.GetObjectProperty("getPedRelationshipGroupDefaultHash");
			return (int) getPedRelationshipGroupDefaultHash.Call(native, ped);
		}

		public int GetPedRelationshipGroupHash(int ped)
		{
			if (getPedRelationshipGroupHash == null) getPedRelationshipGroupHash = (Function) native.GetObjectProperty("getPedRelationshipGroupHash");
			return (int) getPedRelationshipGroupHash.Call(native, ped);
		}

		/// <summary>
		/// Gets the relationship between two groups. This should be called twice (once for each group).
		/// Relationship types:
		/// 0 = Companion
		/// 1 = Respect
		/// 2 = Like
		/// 3 = Neutral
		/// 4 = Dislike
		/// 5 = Hate
		/// 255 = Pedestrians
		/// See NativeDB for reference: http://natives.altv.mp/#/0x9E6B70061662AE5C
		/// </summary>
		public int GetRelationshipBetweenGroups(int group1, int group2)
		{
			if (getRelationshipBetweenGroups == null) getRelationshipBetweenGroups = (Function) native.GetObjectProperty("getRelationshipBetweenGroups");
			return (int) getRelationshipBetweenGroups.Call(native, group1, group2);
		}

		public void _0x5615E0C5EB2BC6E2(object p0, object p1)
		{
			if (__0x5615E0C5EB2BC6E2 == null) __0x5615E0C5EB2BC6E2 = (Function) native.GetObjectProperty("_0x5615E0C5EB2BC6E2");
			__0x5615E0C5EB2BC6E2.Call(native, p0, p1);
		}

		public void _0xAD27D957598E49E9(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (__0xAD27D957598E49E9 == null) __0xAD27D957598E49E9 = (Function) native.GetObjectProperty("_0xAD27D957598E49E9");
			__0xAD27D957598E49E9.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void SetPedCanBeTargetedWithoutLos(int ped, bool toggle)
		{
			if (setPedCanBeTargetedWithoutLos == null) setPedCanBeTargetedWithoutLos = (Function) native.GetObjectProperty("setPedCanBeTargetedWithoutLos");
			setPedCanBeTargetedWithoutLos.Call(native, ped, toggle);
		}

		public void SetPedToInformRespectedFriends(int ped, double radius, int maxFriends)
		{
			if (setPedToInformRespectedFriends == null) setPedToInformRespectedFriends = (Function) native.GetObjectProperty("setPedToInformRespectedFriends");
			setPedToInformRespectedFriends.Call(native, ped, radius, maxFriends);
		}

		public bool IsPedRespondingToEvent(int ped, object @event)
		{
			if (isPedRespondingToEvent == null) isPedRespondingToEvent = (Function) native.GetObjectProperty("isPedRespondingToEvent");
			return (bool) isPedRespondingToEvent.Call(native, ped, @event);
		}

		/// <summary>
		/// FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
		/// FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
		/// FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
		/// FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
		/// FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
		/// FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
		/// FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
		/// FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
		/// FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
		/// See NativeDB for reference: http://natives.altv.mp/#/0x9AC577F5A12AD8A9
		/// </summary>
		public void SetPedFiringPattern(int ped, int patternHash)
		{
			if (setPedFiringPattern == null) setPedFiringPattern = (Function) native.GetObjectProperty("setPedFiringPattern");
			setPedFiringPattern.Call(native, ped, patternHash);
		}

		/// <summary>
		/// shootRate 0-1000
		/// </summary>
		/// <param name="shootRate">0-1000</param>
		public void SetPedShootRate(int ped, int shootRate)
		{
			if (setPedShootRate == null) setPedShootRate = (Function) native.GetObjectProperty("setPedShootRate");
			setPedShootRate.Call(native, ped, shootRate);
		}

		/// <summary>
		/// combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
		/// </summary>
		/// <param name="combatType">can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.</param>
		public void SetCombatFloat(int ped, int combatType, double p2)
		{
			if (setCombatFloat == null) setCombatFloat = (Function) native.GetObjectProperty("setCombatFloat");
			setCombatFloat.Call(native, ped, combatType, p2);
		}

		/// <summary>
		/// p0: Ped Handle
		/// p1: int i | 0 <= i <= 27
		/// p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
		/// <BlindFireChance value="0.1"/>
		/// <WeaponShootRateModifier value="1.0"/>
		/// <TimeBetweenBurstsInCover value="1.25"/>
		/// <BurstDurationInCover value="2.0"/>
		/// <TimeBetweenPeeks value="10.0"/>
		/// <WeaponAccuracy value="0.18"/>
		/// See NativeDB for reference: http://natives.altv.mp/#/0x52DFF8A10508090A
		/// </summary>
		/// <param name="p1">probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:</param>
		public double GetCombatFloat(int ped, int p1)
		{
			if (getCombatFloat == null) getCombatFloat = (Function) native.GetObjectProperty("getCombatFloat");
			return (double) getCombatFloat.Call(native, ped, p1);
		}

		/// <summary>
		/// p1 may be a BOOL representing whether or not the group even exists
		/// </summary>
		/// <returns>Array<void, object, int></returns>
		public (object, object, int) GetGroupSize(int groupID, object unknown, int sizeInMembers)
		{
			if (getGroupSize == null) getGroupSize = (Function) native.GetObjectProperty("getGroupSize");
			var results = (Array) getGroupSize.Call(native, groupID, unknown, sizeInMembers);
			return (results[0], results[1], (int) results[2]);
		}

		public bool DoesGroupExist(int groupId)
		{
			if (doesGroupExist == null) doesGroupExist = (Function) native.GetObjectProperty("doesGroupExist");
			return (bool) doesGroupExist.Call(native, groupId);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the group id of which the specified ped is a member of.</returns>
		public int GetPedGroupIndex(int ped)
		{
			if (getPedGroupIndex == null) getPedGroupIndex = (Function) native.GetObjectProperty("getPedGroupIndex");
			return (int) getPedGroupIndex.Call(native, ped);
		}

		public bool IsPedInGroup(int ped)
		{
			if (isPedInGroup == null) isPedInGroup = (Function) native.GetObjectProperty("isPedInGroup");
			return (bool) isPedInGroup.Call(native, ped);
		}

		public int GetPlayerPedIsFollowing(int ped)
		{
			if (getPlayerPedIsFollowing == null) getPlayerPedIsFollowing = (Function) native.GetObjectProperty("getPlayerPedIsFollowing");
			return (int) getPlayerPedIsFollowing.Call(native, ped);
		}

		/// <summary>
		/// 0: Default
		/// 1: Circle Around Leader
		/// 2: Alternative Circle Around Leader
		/// 3: Line, with Leader at center
		/// </summary>
		public void SetGroupFormation(int groupId, int formationType)
		{
			if (setGroupFormation == null) setGroupFormation = (Function) native.GetObjectProperty("setGroupFormation");
			setGroupFormation.Call(native, groupId, formationType);
		}

		public void SetGroupFormationSpacing(int groupId, double p1, double p2, double p3)
		{
			if (setGroupFormationSpacing == null) setGroupFormationSpacing = (Function) native.GetObjectProperty("setGroupFormationSpacing");
			setGroupFormationSpacing.Call(native, groupId, p1, p2, p3);
		}

		public void ResetGroupFormationDefaultSpacing(int groupHandle)
		{
			if (resetGroupFormationDefaultSpacing == null) resetGroupFormationDefaultSpacing = (Function) native.GetObjectProperty("resetGroupFormationDefaultSpacing");
			resetGroupFormationDefaultSpacing.Call(native, groupHandle);
		}

		/// <summary>
		/// Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
		/// </summary>
		public int GetVehiclePedIsUsing(int ped)
		{
			if (getVehiclePedIsUsing == null) getVehiclePedIsUsing = (Function) native.GetObjectProperty("getVehiclePedIsUsing");
			return (int) getVehiclePedIsUsing.Call(native, ped);
		}

		public int GetVehiclePedIsEntering(int ped)
		{
			if (getVehiclePedIsEntering == null) getVehiclePedIsEntering = (Function) native.GetObjectProperty("getVehiclePedIsEntering");
			return (int) getVehiclePedIsEntering.Call(native, ped);
		}

		/// <summary>
		/// enable or disable the gravity of a ped
		/// Examples:
		/// PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
		/// PED::SET_PED_GRAVITY(Local_289[iVar0 20], 0x00000001);
		/// </summary>
		public void SetPedGravity(int ped, bool toggle)
		{
			if (setPedGravity == null) setPedGravity = (Function) native.GetObjectProperty("setPedGravity");
			setPedGravity.Call(native, ped, toggle);
		}

		/// <summary>
		/// damages a ped with the given amount
		/// </summary>
		public void ApplyDamageToPed(int ped, int damageAmount, bool p2, object p3)
		{
			if (applyDamageToPed == null) applyDamageToPed = (Function) native.GetObjectProperty("applyDamageToPed");
			applyDamageToPed.Call(native, ped, damageAmount, p2, p3);
		}

		/// <summary>
		/// GET_TIME_*
		/// </summary>
		public int GetTimeOfLastPedWeaponDamage(int ped, int weaponHash)
		{
			if (getTimeOfLastPedWeaponDamage == null) getTimeOfLastPedWeaponDamage = (Function) native.GetObjectProperty("getTimeOfLastPedWeaponDamage");
			return (int) getTimeOfLastPedWeaponDamage.Call(native, ped, weaponHash);
		}

		public void SetPedAllowedToDuck(int ped, bool toggle)
		{
			if (setPedAllowedToDuck == null) setPedAllowedToDuck = (Function) native.GetObjectProperty("setPedAllowedToDuck");
			setPedAllowedToDuck.Call(native, ped, toggle);
		}

		public void SetPedNeverLeavesGroup(int ped, bool toggle)
		{
			if (setPedNeverLeavesGroup == null) setPedNeverLeavesGroup = (Function) native.GetObjectProperty("setPedNeverLeavesGroup");
			setPedNeverLeavesGroup.Call(native, ped, toggle);
		}

		/// <summary>
		/// Ped Types: (ordered by return priority)
		/// Michael = 0
		/// Franklin = 1
		/// Trevor = 2
		/// Army = 29
		/// Animal = 28
		/// SWAT = 27
		/// LSFD = 21
		/// Paramedic = 20
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFF059E1E4C01E63C
		/// </summary>
		/// <param name="ped">Ped Types: (ordered by return priority)</param>
		public int GetPedType(int ped)
		{
			if (getPedType == null) getPedType = (Function) native.GetObjectProperty("getPedType");
			return (int) getPedType.Call(native, ped);
		}

		/// <summary>
		/// Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
		/// </summary>
		public void SetPedAsCop(int ped, bool toggle)
		{
			if (setPedAsCop == null) setPedAsCop = (Function) native.GetObjectProperty("setPedAsCop");
			setPedAsCop.Call(native, ped, toggle);
		}

		/// <summary>
		/// sets the maximum health of a ped
		/// I think it's never been used in any script
		/// </summary>
		public void SetPedMaxHealth(int ped, int value)
		{
			if (setPedMaxHealth == null) setPedMaxHealth = (Function) native.GetObjectProperty("setPedMaxHealth");
			setPedMaxHealth.Call(native, ped, value);
		}

		public int GetPedMaxHealth(int ped)
		{
			if (getPedMaxHealth == null) getPedMaxHealth = (Function) native.GetObjectProperty("getPedMaxHealth");
			return (int) getPedMaxHealth.Call(native, ped);
		}

		public void SetPedMaxTimeInWater(int ped, double value)
		{
			if (setPedMaxTimeInWater == null) setPedMaxTimeInWater = (Function) native.GetObjectProperty("setPedMaxTimeInWater");
			setPedMaxTimeInWater.Call(native, ped, value);
		}

		public void SetPedMaxTimeUnderwater(int ped, double value)
		{
			if (setPedMaxTimeUnderwater == null) setPedMaxTimeUnderwater = (Function) native.GetObjectProperty("setPedMaxTimeUnderwater");
			setPedMaxTimeUnderwater.Call(native, ped, value);
		}

		public void _0x2735233A786B1BEF(int ped, double p1)
		{
			if (__0x2735233A786B1BEF == null) __0x2735233A786B1BEF = (Function) native.GetObjectProperty("_0x2735233A786B1BEF");
			__0x2735233A786B1BEF.Call(native, ped, p1);
		}

		/// <summary>
		/// seatIndex must be <= 2
		/// </summary>
		/// <param name="seatIndex">must be <= 2</param>
		public void SetPedVehicleForcedSeatUsage(int ped, int vehicle, int seatIndex, int flags)
		{
			if (setPedVehicleForcedSeatUsage == null) setPedVehicleForcedSeatUsage = (Function) native.GetObjectProperty("setPedVehicleForcedSeatUsage");
			setPedVehicleForcedSeatUsage.Call(native, ped, vehicle, seatIndex, flags);
		}

		public void ClearAllPedVehicleForcedSeatUsage(int ped)
		{
			if (clearAllPedVehicleForcedSeatUsage == null) clearAllPedVehicleForcedSeatUsage = (Function) native.GetObjectProperty("clearAllPedVehicleForcedSeatUsage");
			clearAllPedVehicleForcedSeatUsage.Call(native, ped);
		}

		public void _0xB282749D5E028163(object p0, object p1)
		{
			if (__0xB282749D5E028163 == null) __0xB282749D5E028163 = (Function) native.GetObjectProperty("_0xB282749D5E028163");
			__0xB282749D5E028163.Call(native, p0, p1);
		}

		/// <summary>
		/// 0 = can (bike)
		/// 1 = can't (bike)
		/// 2 = unk
		/// 3 = unk
		/// </summary>
		public void SetPedCanBeKnockedOffVehicle(int ped, int state)
		{
			if (setPedCanBeKnockedOffVehicle == null) setPedCanBeKnockedOffVehicle = (Function) native.GetObjectProperty("setPedCanBeKnockedOffVehicle");
			setPedCanBeKnockedOffVehicle.Call(native, ped, state);
		}

		public bool CanKnockPedOffVehicle(int ped)
		{
			if (canKnockPedOffVehicle == null) canKnockPedOffVehicle = (Function) native.GetObjectProperty("canKnockPedOffVehicle");
			return (bool) canKnockPedOffVehicle.Call(native, ped);
		}

		public void KnockPedOffVehicle(int ped)
		{
			if (knockPedOffVehicle == null) knockPedOffVehicle = (Function) native.GetObjectProperty("knockPedOffVehicle");
			knockPedOffVehicle.Call(native, ped);
		}

		public void SetPedCoordsNoGang(int ped, double posX, double posY, double posZ)
		{
			if (setPedCoordsNoGang == null) setPedCoordsNoGang = (Function) native.GetObjectProperty("setPedCoordsNoGang");
			setPedCoordsNoGang.Call(native, ped, posX, posY, posZ);
		}

		/// <summary>
		/// from fm_mission_controller.c4 (variable names changed for clarity):
		/// int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
		/// PED::GET_GROUP_SIZE(group, &unused, &groupSize);
		/// if (groupSize >= 1) {
		/// . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
		/// . . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
		/// . . . . . . . . //and so on
		/// </summary>
		/// <param name="groupID">int PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());</param>
		/// <param name="memberNumber">. . . . for (int 0; memberNumber < groupSize; memberNumber++) {</param>
		public int GetPedAsGroupMember(int groupID, int memberNumber)
		{
			if (getPedAsGroupMember == null) getPedAsGroupMember = (Function) native.GetObjectProperty("getPedAsGroupMember");
			return (int) getPedAsGroupMember.Call(native, groupID, memberNumber);
		}

		public int GetPedAsGroupLeader(int groupID)
		{
			if (getPedAsGroupLeader == null) getPedAsGroupLeader = (Function) native.GetObjectProperty("getPedAsGroupLeader");
			return (int) getPedAsGroupLeader.Call(native, groupID);
		}

		public void SetPedKeepTask(int ped, bool toggle)
		{
			if (setPedKeepTask == null) setPedKeepTask = (Function) native.GetObjectProperty("setPedKeepTask");
			setPedKeepTask.Call(native, ped, toggle);
		}

		/// <summary>
		/// SET_PED_ALLOW*
		/// </summary>
		public void _0x49E50BDB8BA4DAB2(int ped, bool toggle)
		{
			if (__0x49E50BDB8BA4DAB2 == null) __0x49E50BDB8BA4DAB2 = (Function) native.GetObjectProperty("_0x49E50BDB8BA4DAB2");
			__0x49E50BDB8BA4DAB2.Call(native, ped, toggle);
		}

		public bool IsPedSwimming(int ped)
		{
			if (isPedSwimming == null) isPedSwimming = (Function) native.GetObjectProperty("isPedSwimming");
			return (bool) isPedSwimming.Call(native, ped);
		}

		public bool IsPedSwimmingUnderWater(int ped)
		{
			if (isPedSwimmingUnderWater == null) isPedSwimmingUnderWater = (Function) native.GetObjectProperty("isPedSwimmingUnderWater");
			return (bool) isPedSwimmingUnderWater.Call(native, ped);
		}

		/// <summary>
		/// teleports ped to coords along with the vehicle ped is in
		/// </summary>
		public void SetPedCoordsKeepVehicle(int ped, double posX, double posY, double posZ)
		{
			if (setPedCoordsKeepVehicle == null) setPedCoordsKeepVehicle = (Function) native.GetObjectProperty("setPedCoordsKeepVehicle");
			setPedCoordsKeepVehicle.Call(native, ped, posX, posY, posZ);
		}

		public void SetPedDiesInVehicle(int ped, bool toggle)
		{
			if (setPedDiesInVehicle == null) setPedDiesInVehicle = (Function) native.GetObjectProperty("setPedDiesInVehicle");
			setPedDiesInVehicle.Call(native, ped, toggle);
		}

		public void SetCreateRandomCops(bool toggle)
		{
			if (setCreateRandomCops == null) setCreateRandomCops = (Function) native.GetObjectProperty("setCreateRandomCops");
			setCreateRandomCops.Call(native, toggle);
		}

		public void SetCreateRandomCopsNotOnScenarios(bool toggle)
		{
			if (setCreateRandomCopsNotOnScenarios == null) setCreateRandomCopsNotOnScenarios = (Function) native.GetObjectProperty("setCreateRandomCopsNotOnScenarios");
			setCreateRandomCopsNotOnScenarios.Call(native, toggle);
		}

		public void SetCreateRandomCopsOnScenarios(bool toggle)
		{
			if (setCreateRandomCopsOnScenarios == null) setCreateRandomCopsOnScenarios = (Function) native.GetObjectProperty("setCreateRandomCopsOnScenarios");
			setCreateRandomCopsOnScenarios.Call(native, toggle);
		}

		public bool CanCreateRandomCops()
		{
			if (canCreateRandomCops == null) canCreateRandomCops = (Function) native.GetObjectProperty("canCreateRandomCops");
			return (bool) canCreateRandomCops.Call(native);
		}

		public void SetPedAsEnemy(int ped, bool toggle)
		{
			if (setPedAsEnemy == null) setPedAsEnemy = (Function) native.GetObjectProperty("setPedAsEnemy");
			setPedAsEnemy.Call(native, ped, toggle);
		}

		public void SetPedCanSmashGlass(int ped, bool p1, bool p2)
		{
			if (setPedCanSmashGlass == null) setPedCanSmashGlass = (Function) native.GetObjectProperty("setPedCanSmashGlass");
			setPedCanSmashGlass.Call(native, ped, p1, p2);
		}

		public bool IsPedInAnyTrain(int ped)
		{
			if (isPedInAnyTrain == null) isPedInAnyTrain = (Function) native.GetObjectProperty("isPedInAnyTrain");
			return (bool) isPedInAnyTrain.Call(native, ped);
		}

		public bool IsPedGettingIntoAVehicle(int ped)
		{
			if (isPedGettingIntoAVehicle == null) isPedGettingIntoAVehicle = (Function) native.GetObjectProperty("isPedGettingIntoAVehicle");
			return (bool) isPedGettingIntoAVehicle.Call(native, ped);
		}

		public bool IsPedTryingToEnterALockedVehicle(int ped)
		{
			if (isPedTryingToEnterALockedVehicle == null) isPedTryingToEnterALockedVehicle = (Function) native.GetObjectProperty("isPedTryingToEnterALockedVehicle");
			return (bool) isPedTryingToEnterALockedVehicle.Call(native, ped);
		}

		/// <summary>
		/// ped can not pull out a weapon when true
		/// </summary>
		/// <param name="ped">can not pull out a weapon when true</param>
		public void SetEnableHandcuffs(int ped, bool toggle)
		{
			if (setEnableHandcuffs == null) setEnableHandcuffs = (Function) native.GetObjectProperty("setEnableHandcuffs");
			setEnableHandcuffs.Call(native, ped, toggle);
		}

		public void SetEnableBoundAnkles(int ped, bool toggle)
		{
			if (setEnableBoundAnkles == null) setEnableBoundAnkles = (Function) native.GetObjectProperty("setEnableBoundAnkles");
			setEnableBoundAnkles.Call(native, ped, toggle);
		}

		/// <summary>
		/// Enables diving motion when underwater.
		/// </summary>
		public void SetEnableScuba(int ped, bool toggle)
		{
			if (setEnableScuba == null) setEnableScuba = (Function) native.GetObjectProperty("setEnableScuba");
			setEnableScuba.Call(native, ped, toggle);
		}

		/// <summary>
		/// Setting ped to true allows the ped to shoot "friendlies".
		/// p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
		/// p1 = false & p2 = false for unable to aim at.
		/// p1 = true & p2 = false for able to aim at.
		/// </summary>
		/// <param name="p2">p1 = true & false for able to aim at. </param>
		public void SetCanAttackFriendly(int ped, bool toggle, bool p2)
		{
			if (setCanAttackFriendly == null) setCanAttackFriendly = (Function) native.GetObjectProperty("setCanAttackFriendly");
			setCanAttackFriendly.Call(native, ped, toggle, p2);
		}

		/// <summary>
		/// Values :
		/// 0 : Neutral
		/// 1 : Heard something (gun shot, hit, etc)
		/// 2 : Knows (the origin of the event)
		/// 3 : Fully alerted (is facing the event?)
		/// If the Ped does not exist, returns -1.
		/// </summary>
		/// <returns>Returns the ped's alertness (0-3).</returns>
		public int GetPedAlertness(int ped)
		{
			if (getPedAlertness == null) getPedAlertness = (Function) native.GetObjectProperty("getPedAlertness");
			return (int) getPedAlertness.Call(native, ped);
		}

		/// <summary>
		/// value ranges from 0 to 3.
		/// </summary>
		/// <param name="value">ranges from 0 to 3.</param>
		public void SetPedAlertness(int ped, int value)
		{
			if (setPedAlertness == null) setPedAlertness = (Function) native.GetObjectProperty("setPedAlertness");
			setPedAlertness.Call(native, ped, value);
		}

		public void SetPedGetOutUpsideDownVehicle(int ped, bool toggle)
		{
			if (setPedGetOutUpsideDownVehicle == null) setPedGetOutUpsideDownVehicle = (Function) native.GetObjectProperty("setPedGetOutUpsideDownVehicle");
			setPedGetOutUpsideDownVehicle.Call(native, ped, toggle);
		}

		/// <summary>
		/// p2 is usually 1.0f
		/// EDIT 12/24/16:
		/// p2 does absolutely nothing no matter what the value is.
		/// List of movement clipsets:
		/// Thanks to elsewhat for list.
		/// "ANIM_GROUP_MOVE_BALLISTIC"
		/// "ANIM_GROUP_MOVE_LEMAR_ALLEY"
		/// "clipset@move@trash_fast_turn"
		/// "FEMALE_FAST_RUNNER"
		/// See NativeDB for reference: http://natives.altv.mp/#/0xAF8A94EDE7712BEF
		/// </summary>
		/// <param name="p2">does absolutely nothing no matter what the value is. </param>
		public void SetPedMovementClipset(int ped, string clipSet, double p2)
		{
			if (setPedMovementClipset == null) setPedMovementClipset = (Function) native.GetObjectProperty("setPedMovementClipset");
			setPedMovementClipset.Call(native, ped, clipSet, p2);
		}

		/// <summary>
		/// If p1 is 0.0, I believe you are back to normal.
		/// If p1 is 1.0, it looks like you can only rotate the ped, not walk.
		/// Using the following code to reset back to normal
		/// PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);
		/// </summary>
		public void ResetPedMovementClipset(int ped, double p1)
		{
			if (resetPedMovementClipset == null) resetPedMovementClipset = (Function) native.GetObjectProperty("resetPedMovementClipset");
			resetPedMovementClipset.Call(native, ped, p1);
		}

		public void SetPedStrafeClipset(int ped, string clipSet)
		{
			if (setPedStrafeClipset == null) setPedStrafeClipset = (Function) native.GetObjectProperty("setPedStrafeClipset");
			setPedStrafeClipset.Call(native, ped, clipSet);
		}

		public void ResetPedStrafeClipset(int ped)
		{
			if (resetPedStrafeClipset == null) resetPedStrafeClipset = (Function) native.GetObjectProperty("resetPedStrafeClipset");
			resetPedStrafeClipset.Call(native, ped);
		}

		public void SetPedWeaponMovementClipset(int ped, string clipSet)
		{
			if (setPedWeaponMovementClipset == null) setPedWeaponMovementClipset = (Function) native.GetObjectProperty("setPedWeaponMovementClipset");
			setPedWeaponMovementClipset.Call(native, ped, clipSet);
		}

		public void ResetPedWeaponMovementClipset(int ped)
		{
			if (resetPedWeaponMovementClipset == null) resetPedWeaponMovementClipset = (Function) native.GetObjectProperty("resetPedWeaponMovementClipset");
			resetPedWeaponMovementClipset.Call(native, ped);
		}

		public void SetPedDriveByClipsetOverride(int ped, string clipset)
		{
			if (setPedDriveByClipsetOverride == null) setPedDriveByClipsetOverride = (Function) native.GetObjectProperty("setPedDriveByClipsetOverride");
			setPedDriveByClipsetOverride.Call(native, ped, clipset);
		}

		public void ClearPedDriveByClipsetOverride(int ped)
		{
			if (clearPedDriveByClipsetOverride == null) clearPedDriveByClipsetOverride = (Function) native.GetObjectProperty("clearPedDriveByClipsetOverride");
			clearPedDriveByClipsetOverride.Call(native, ped);
		}

		/// <summary>
		/// Found in the b617d scripts:
		/// PED::_9DBA107B4937F809(v_7, "trevor_heist_cover_2h");
		/// SET_PED_MO*
		/// </summary>
		public void SetPedCoverClipsetOverride(int ped, string p1)
		{
			if (setPedCoverClipsetOverride == null) setPedCoverClipsetOverride = (Function) native.GetObjectProperty("setPedCoverClipsetOverride");
			setPedCoverClipsetOverride.Call(native, ped, p1);
		}

		/// <summary>
		/// CLEAR_PED_*
		/// </summary>
		public void ClearPedCoverClipsetOverride(int ped)
		{
			if (clearPedCoverClipsetOverride == null) clearPedCoverClipsetOverride = (Function) native.GetObjectProperty("clearPedCoverClipsetOverride");
			clearPedCoverClipsetOverride.Call(native, ped);
		}

		/// <summary>
		/// CLEAR_PED_*
		/// </summary>
		public void _0x80054D7FCC70EEC6(int ped)
		{
			if (__0x80054D7FCC70EEC6 == null) __0x80054D7FCC70EEC6 = (Function) native.GetObjectProperty("_0x80054D7FCC70EEC6");
			__0x80054D7FCC70EEC6.Call(native, ped);
		}

		/// <summary>
		/// PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, GAMEPLAY::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
		/// PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, GAMEPLAY::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
		/// PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, GAMEPLAY::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
		/// PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, GAMEPLAY::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
		/// PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, GAMEPLAY::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
		/// PED::SET_PED_IN_VEHICLE_CONTEXT(num3, GAMEPLAY::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
		/// PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
		/// PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
		/// </summary>
		public void SetPedInVehicleContext(int ped, int context)
		{
			if (setPedInVehicleContext == null) setPedInVehicleContext = (Function) native.GetObjectProperty("setPedInVehicleContext");
			setPedInVehicleContext.Call(native, ped, context);
		}

		public void ResetPedInVehicleContext(int ped)
		{
			if (resetPedInVehicleContext == null) resetPedInVehicleContext = (Function) native.GetObjectProperty("resetPedInVehicleContext");
			resetPedInVehicleContext.Call(native, ped);
		}

		/// <summary>
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		public bool IsScriptedScenarioPedUsingConditionalAnim(int ped, string animDict, string anim)
		{
			if (isScriptedScenarioPedUsingConditionalAnim == null) isScriptedScenarioPedUsingConditionalAnim = (Function) native.GetObjectProperty("isScriptedScenarioPedUsingConditionalAnim");
			return (bool) isScriptedScenarioPedUsingConditionalAnim.Call(native, ped, animDict, anim);
		}

		public void SetPedAlternateWalkAnim(int ped, string animDict, string animName, double p3, bool p4)
		{
			if (setPedAlternateWalkAnim == null) setPedAlternateWalkAnim = (Function) native.GetObjectProperty("setPedAlternateWalkAnim");
			setPedAlternateWalkAnim.Call(native, ped, animDict, animName, p3, p4);
		}

		public void ClearPedAlternateWalkAnim(int ped, double p1)
		{
			if (clearPedAlternateWalkAnim == null) clearPedAlternateWalkAnim = (Function) native.GetObjectProperty("clearPedAlternateWalkAnim");
			clearPedAlternateWalkAnim.Call(native, ped, p1);
		}

		/// <summary>
		/// stance:
		/// 0 = idle
		/// 1 = walk
		/// 2 = running
		/// p5 = usually set to true
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		/// <param name="p5">usually set to true</param>
		public void SetPedAlternateMovementAnim(int ped, int stance, string animDictionary, string animationName, double p4, bool p5)
		{
			if (setPedAlternateMovementAnim == null) setPedAlternateMovementAnim = (Function) native.GetObjectProperty("setPedAlternateMovementAnim");
			setPedAlternateMovementAnim.Call(native, ped, stance, animDictionary, animationName, p4, p5);
		}

		public void ClearPedAlternateMovementAnim(int ped, int stance, double p2)
		{
			if (clearPedAlternateMovementAnim == null) clearPedAlternateMovementAnim = (Function) native.GetObjectProperty("clearPedAlternateMovementAnim");
			clearPedAlternateMovementAnim.Call(native, ped, stance, p2);
		}

		/// <summary>
		/// From the scripts:
		/// PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
		/// "ANIM_GROUP_GESTURE_MISS_FRA0");
		/// PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
		/// "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
		/// </summary>
		public void SetPedGestureGroup(int ped, string animGroupGesture)
		{
			if (setPedGestureGroup == null) setPedGestureGroup = (Function) native.GetObjectProperty("setPedGestureGroup");
			setPedGestureGroup.Call(native, ped, animGroupGesture);
		}

		public Vector3 GetAnimInitialOffsetPosition(string animDict, string animName, double x, double y, double z, double xRot, double yRot, double zRot, double p8, int p9)
		{
			if (getAnimInitialOffsetPosition == null) getAnimInitialOffsetPosition = (Function) native.GetObjectProperty("getAnimInitialOffsetPosition");
			return JSObjectToVector3(getAnimInitialOffsetPosition.Call(native, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9));
		}

		public Vector3 GetAnimInitialOffsetRotation(string animDict, string animName, double x, double y, double z, double xRot, double yRot, double zRot, double p8, int p9)
		{
			if (getAnimInitialOffsetRotation == null) getAnimInitialOffsetRotation = (Function) native.GetObjectProperty("getAnimInitialOffsetRotation");
			return JSObjectToVector3(getAnimInitialOffsetRotation.Call(native, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9));
		}

		/// <summary>
		/// Ids
		/// 0 - Head
		/// 1 - Beard
		/// 2 - Hair
		/// 3 - Torso
		/// 4 - Legs
		/// 5 - Hands
		/// 6 - Foot
		/// 7 - ------
		/// See NativeDB for reference: http://natives.altv.mp/#/0x67F3780DD425D4FC
		/// </summary>
		public int GetPedDrawableVariation(int ped, int componentId)
		{
			if (getPedDrawableVariation == null) getPedDrawableVariation = (Function) native.GetObjectProperty("getPedDrawableVariation");
			return (int) getPedDrawableVariation.Call(native, ped, componentId);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public int GetNumberOfPedDrawableVariations(int ped, int componentId)
		{
			if (getNumberOfPedDrawableVariations == null) getNumberOfPedDrawableVariations = (Function) native.GetObjectProperty("getNumberOfPedDrawableVariations");
			return (int) getNumberOfPedDrawableVariations.Call(native, ped, componentId);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public int GetPedTextureVariation(int ped, int componentId)
		{
			if (getPedTextureVariation == null) getPedTextureVariation = (Function) native.GetObjectProperty("getPedTextureVariation");
			return (int) getPedTextureVariation.Call(native, ped, componentId);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public int GetNumberOfPedTextureVariations(int ped, int componentId, int drawableId)
		{
			if (getNumberOfPedTextureVariations == null) getNumberOfPedTextureVariations = (Function) native.GetObjectProperty("getNumberOfPedTextureVariations");
			return (int) getNumberOfPedTextureVariations.Call(native, ped, componentId, drawableId);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public int GetNumberOfPedPropDrawableVariations(int ped, int propId)
		{
			if (getNumberOfPedPropDrawableVariations == null) getNumberOfPedPropDrawableVariations = (Function) native.GetObjectProperty("getNumberOfPedPropDrawableVariations");
			return (int) getNumberOfPedPropDrawableVariations.Call(native, ped, propId);
		}

		/// <summary>
		/// Need to check behavior when drawableId = -1
		/// - Doofy.Ass
		/// Why this function doesn't work and return nill value?
		/// GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
		/// tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		/// <param name="drawableId">Need to check behavior when -1</param>
		public int GetNumberOfPedPropTextureVariations(int ped, int propId, int drawableId)
		{
			if (getNumberOfPedPropTextureVariations == null) getNumberOfPedPropTextureVariations = (Function) native.GetObjectProperty("getNumberOfPedPropTextureVariations");
			return (int) getNumberOfPedPropTextureVariations.Call(native, ped, propId, drawableId);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public int GetPedPaletteVariation(int ped, int componentId)
		{
			if (getPedPaletteVariation == null) getPedPaletteVariation = (Function) native.GetObjectProperty("getPedPaletteVariation");
			return (int) getPedPaletteVariation.Call(native, ped, componentId);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) _0x9E30E91FB03A2CAF(object p0, object p1)
		{
			if (__0x9E30E91FB03A2CAF == null) __0x9E30E91FB03A2CAF = (Function) native.GetObjectProperty("_0x9E30E91FB03A2CAF");
			var results = (Array) __0x9E30E91FB03A2CAF.Call(native, p0, p1);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// GET_*
		/// </summary>
		public object _0x1E77FA7A62EE6C4C(object p0)
		{
			if (__0x1E77FA7A62EE6C4C == null) __0x1E77FA7A62EE6C4C = (Function) native.GetObjectProperty("_0x1E77FA7A62EE6C4C");
			return __0x1E77FA7A62EE6C4C.Call(native, p0);
		}

		/// <summary>
		/// GET_*
		/// </summary>
		public object _0xF033419D1B81FAE8(object p0)
		{
			if (__0xF033419D1B81FAE8 == null) __0xF033419D1B81FAE8 = (Function) native.GetObjectProperty("_0xF033419D1B81FAE8");
			return __0xF033419D1B81FAE8.Call(native, p0);
		}

		/// <summary>
		/// Checks if the component variation is valid, this works great for randomizing components using loops.
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public bool IsPedComponentVariationValid(int ped, int componentId, int drawableId, int textureId)
		{
			if (isPedComponentVariationValid == null) isPedComponentVariationValid = (Function) native.GetObjectProperty("isPedComponentVariationValid");
			return (bool) isPedComponentVariationValid.Call(native, ped, componentId, drawableId, textureId);
		}

		/// <summary>
		/// paletteId/palletColor -  0 to 3.
		/// enum PedVariationData
		/// {
		/// PED_VARIATION_FACE = 0,
		/// PED_VARIATION_HEAD = 1,
		/// PED_VARIATION_HAIR = 2,
		/// PED_VARIATION_TORSO = 3,
		/// PED_VARIATION_LEGS = 4,
		/// PED_VARIATION_HANDS = 5,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x262B14F48D29DE80
		/// </summary>
		public void SetPedComponentVariation(int ped, int componentId, int drawableId, int textureId, int paletteId)
		{
			if (setPedComponentVariation == null) setPedComponentVariation = (Function) native.GetObjectProperty("setPedComponentVariation");
			setPedComponentVariation.Call(native, ped, componentId, drawableId, textureId, paletteId);
		}

		/// <summary>
		/// p1 is always 0 in R* scripts.
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		/// <param name="p1">is always 0 in R* scripts.</param>
		public void SetPedRandomComponentVariation(int ped, int p1)
		{
			if (setPedRandomComponentVariation == null) setPedRandomComponentVariation = (Function) native.GetObjectProperty("setPedRandomComponentVariation");
			setPedRandomComponentVariation.Call(native, ped, p1);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public void SetPedRandomProps(int ped)
		{
			if (setPedRandomProps == null) setPedRandomProps = (Function) native.GetObjectProperty("setPedRandomProps");
			setPedRandomProps.Call(native, ped);
		}

		/// <summary>
		/// Sets Ped Default Clothes
		/// </summary>
		public void SetPedDefaultComponentVariation(int ped)
		{
			if (setPedDefaultComponentVariation == null) setPedDefaultComponentVariation = (Function) native.GetObjectProperty("setPedDefaultComponentVariation");
			setPedDefaultComponentVariation.Call(native, ped);
		}

		public void SetPedBlendFromParents(int ped, object p1, object p2, double p3, double p4)
		{
			if (setPedBlendFromParents == null) setPedBlendFromParents = (Function) native.GetObjectProperty("setPedBlendFromParents");
			setPedBlendFromParents.Call(native, ped, p1, p2, p3, p4);
		}

		/// <summary>
		/// The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
		/// The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
		/// !!!Can someone add working example for this???
		/// try this:
		/// headBlendData headData;
		/// GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);
		/// SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
		/// , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
		/// For more info please refer to this topic.
		/// gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
		/// </summary>
		public void SetPedHeadBlendData(int ped, int shapeFirstID, int shapeSecondID, int shapeThirdID, int skinFirstID, int skinSecondID, int skinThirdID, double shapeMix, double skinMix, double thirdMix, bool isParent)
		{
			if (setPedHeadBlendData == null) setPedHeadBlendData = (Function) native.GetObjectProperty("setPedHeadBlendData");
			setPedHeadBlendData.Call(native, ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
		}

		/// <summary>
		/// The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
		/// pass this struct in the second parameter
		/// typedef struct
		/// {
		/// int shapeFirst, shapeSecond, shapeThird;
		/// int skinFirst, skinSecond, skinThird;
		/// float shapeMix, skinMix, thirdMix;
		/// } headBlendData;
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) GetPedHeadBlendData(int ped, object headBlendData)
		{
			if (getPedHeadBlendData == null) getPedHeadBlendData = (Function) native.GetObjectProperty("getPedHeadBlendData");
			var results = (Array) getPedHeadBlendData.Call(native, ped, headBlendData);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// See SET_PED_HEAD_BLEND_DATA().
		/// </summary>
		public void UpdatePedHeadBlendData(int ped, double shapeMix, double skinMix, double thirdMix)
		{
			if (updatePedHeadBlendData == null) updatePedHeadBlendData = (Function) native.GetObjectProperty("updatePedHeadBlendData");
			updatePedHeadBlendData.Call(native, ped, shapeMix, skinMix, thirdMix);
		}

		/// <summary>
		/// Used for freemode (online) characters.
		/// For some reason, the scripts use a rounded float for the index.
		/// </summary>
		public void SetPedEyeColor(int ped, int index)
		{
			if (setPedEyeColor == null) setPedEyeColor = (Function) native.GetObjectProperty("setPedEyeColor");
			setPedEyeColor.Call(native, ped, index);
		}

		public object _0x76BBA2CEE66D47E9(object p0)
		{
			if (__0x76BBA2CEE66D47E9 == null) __0x76BBA2CEE66D47E9 = (Function) native.GetObjectProperty("_0x76BBA2CEE66D47E9");
			return __0x76BBA2CEE66D47E9.Call(native, p0);
		}

		/// <summary>
		/// OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
		/// overlayID       Part                  Index, to disable
		/// 0               Blemishes             0 - 23, 255
		/// 1               Facial Hair           0 - 28, 255
		/// 2               Eyebrows              0 - 33, 255
		/// 3               Ageing                0 - 14, 255
		/// 4               Makeup                0 - 74, 255
		/// 5               Blush                 0 - 6, 255
		/// 6               Complexion            0 - 11, 255
		/// See NativeDB for reference: http://natives.altv.mp/#/0x48F44967FA05CC1E
		/// </summary>
		/// <param name="overlayID">      Part                  Index, to disable</param>
		public void SetPedHeadOverlay(int ped, int overlayID, int index, double opacity)
		{
			if (setPedHeadOverlay == null) setPedHeadOverlay = (Function) native.GetObjectProperty("setPedHeadOverlay");
			setPedHeadOverlay.Call(native, ped, overlayID, index, opacity);
		}

		/// <summary>
		/// This might be the once removed native GET_PED_HEAD_OVERLAY.
		/// </summary>
		/// <returns>Likely a char, if that overlay is not set, e.i. "None" option, returns 255;</returns>
		public int GetPedHeadOverlayValue(int ped, int overlayID)
		{
			if (getPedHeadOverlayValue == null) getPedHeadOverlayValue = (Function) native.GetObjectProperty("getPedHeadOverlayValue");
			return (int) getPedHeadOverlayValue.Call(native, ped, overlayID);
		}

		/// <summary>
		/// Used with freemode (online) characters.
		/// </summary>
		public int GetPedHeadOverlayNum(int overlayID)
		{
			if (getPedHeadOverlayNum == null) getPedHeadOverlayNum = (Function) native.GetObjectProperty("getPedHeadOverlayNum");
			return (int) getPedHeadOverlayNum.Call(native, overlayID);
		}

		/// <summary>
		/// Used for freemode (online) characters.
		/// ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
		/// Called after SET_PED_HEAD_OVERLAY().
		/// </summary>
		/// <param name="colorType">ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.</param>
		public void SetPedHeadOverlayColor(int ped, int overlayID, int colorType, int colorID, int secondColorID)
		{
			if (setPedHeadOverlayColor == null) setPedHeadOverlayColor = (Function) native.GetObjectProperty("setPedHeadOverlayColor");
			setPedHeadOverlayColor.Call(native, ped, overlayID, colorType, colorID, secondColorID);
		}

		/// <summary>
		/// Used for freemode (online) characters.
		/// </summary>
		public void SetPedHairColor(int ped, int colorID, int highlightColorID)
		{
			if (setPedHairColor == null) setPedHairColor = (Function) native.GetObjectProperty("setPedHairColor");
			setPedHairColor.Call(native, ped, colorID, highlightColorID);
		}

		/// <summary>
		/// Used for freemode (online) characters.
		/// </summary>
		public int GetNumHairColors()
		{
			if (getNumHairColors == null) getNumHairColors = (Function) native.GetObjectProperty("getNumHairColors");
			return (int) getNumHairColors.Call(native);
		}

		public int GetNumMakeupColors()
		{
			if (getNumMakeupColors == null) getNumMakeupColors = (Function) native.GetObjectProperty("getNumMakeupColors");
			return (int) getNumMakeupColors.Call(native);
		}

		/// <summary>
		/// GET_PED_*
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetPedHairRgbColor(int p0, int r, int g, int b)
		{
			if (getPedHairRgbColor == null) getPedHairRgbColor = (Function) native.GetObjectProperty("getPedHairRgbColor");
			var results = (Array) getPedHairRgbColor.Call(native, p0, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// GET_PED_*
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetPedMakeupRgbColor(int p0, int r, int g, int b)
		{
			if (getPedMakeupRgbColor == null) getPedMakeupRgbColor = (Function) native.GetObjectProperty("getPedMakeupRgbColor");
			var results = (Array) getPedMakeupRgbColor.Call(native, p0, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		public bool IsPedHairColorValid2(object p0)
		{
			if (isPedHairColorValid2 == null) isPedHairColorValid2 = (Function) native.GetObjectProperty("isPedHairColorValid2");
			return (bool) isPedHairColorValid2.Call(native, p0);
		}

		public int _0xEA9960D07DADCF10(object p0)
		{
			if (__0xEA9960D07DADCF10 == null) __0xEA9960D07DADCF10 = (Function) native.GetObjectProperty("_0xEA9960D07DADCF10");
			return (int) __0xEA9960D07DADCF10.Call(native, p0);
		}

		public bool IsPedLipstickColorValid2(object p0)
		{
			if (isPedLipstickColorValid2 == null) isPedLipstickColorValid2 = (Function) native.GetObjectProperty("isPedLipstickColorValid2");
			return (bool) isPedLipstickColorValid2.Call(native, p0);
		}

		public bool IsPedBlushColorValid2(object p0)
		{
			if (isPedBlushColorValid2 == null) isPedBlushColorValid2 = (Function) native.GetObjectProperty("isPedBlushColorValid2");
			return (bool) isPedBlushColorValid2.Call(native, p0);
		}

		public bool IsPedHairColorValid(int colorID)
		{
			if (isPedHairColorValid == null) isPedHairColorValid = (Function) native.GetObjectProperty("isPedHairColorValid");
			return (bool) isPedHairColorValid.Call(native, colorID);
		}

		public object _0xAAA6A3698A69E048(object p0)
		{
			if (__0xAAA6A3698A69E048 == null) __0xAAA6A3698A69E048 = (Function) native.GetObjectProperty("_0xAAA6A3698A69E048");
			return __0xAAA6A3698A69E048.Call(native, p0);
		}

		public bool IsPedLipstickColorValid(int colorID)
		{
			if (isPedLipstickColorValid == null) isPedLipstickColorValid = (Function) native.GetObjectProperty("isPedLipstickColorValid");
			return (bool) isPedLipstickColorValid.Call(native, colorID);
		}

		public bool IsPedBlushColorValid(int colorID)
		{
			if (isPedBlushColorValid == null) isPedBlushColorValid = (Function) native.GetObjectProperty("isPedBlushColorValid");
			return (bool) isPedBlushColorValid.Call(native, colorID);
		}

		public object _0x09E7ECA981D9B210(object p0)
		{
			if (__0x09E7ECA981D9B210 == null) __0x09E7ECA981D9B210 = (Function) native.GetObjectProperty("_0x09E7ECA981D9B210");
			return __0x09E7ECA981D9B210.Call(native, p0);
		}

		public object _0xC56FBF2F228E1DAC(int modelHash, object p1, object p2)
		{
			if (__0xC56FBF2F228E1DAC == null) __0xC56FBF2F228E1DAC = (Function) native.GetObjectProperty("_0xC56FBF2F228E1DAC");
			return __0xC56FBF2F228E1DAC.Call(native, modelHash, p1, p2);
		}

		/// <summary>
		/// Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
		/// Index can be 0 - 19
		/// SET_PED_M*
		/// </summary>
		/// <param name="index">Index can be 0 - 19</param>
		public void SetPedFaceFeature(int ped, int index, double scale)
		{
			if (setPedFaceFeature == null) setPedFaceFeature = (Function) native.GetObjectProperty("setPedFaceFeature");
			setPedFaceFeature.Call(native, ped, index, scale);
		}

		public bool HasPedHeadBlendFinished(int ped)
		{
			if (hasPedHeadBlendFinished == null) hasPedHeadBlendFinished = (Function) native.GetObjectProperty("hasPedHeadBlendFinished");
			return (bool) hasPedHeadBlendFinished.Call(native, ped);
		}

		public void _0x4668D80430D6C299(int ped)
		{
			if (__0x4668D80430D6C299 == null) __0x4668D80430D6C299 = (Function) native.GetObjectProperty("_0x4668D80430D6C299");
			__0x4668D80430D6C299.Call(native, ped);
		}

		/// <summary>
		/// p4 seems to vary from 0 to 3.
		/// </summary>
		/// <param name="p4">seems to vary from 0 to 3.</param>
		public void SetHeadBlendPaletteColor(int ped, int r, int g, int b, int p4)
		{
			if (setHeadBlendPaletteColor == null) setHeadBlendPaletteColor = (Function) native.GetObjectProperty("setHeadBlendPaletteColor");
			setHeadBlendPaletteColor.Call(native, ped, r, g, b, p4);
		}

		public void DisableHeadBlendPaletteColor(int ped)
		{
			if (disableHeadBlendPaletteColor == null) disableHeadBlendPaletteColor = (Function) native.GetObjectProperty("disableHeadBlendPaletteColor");
			disableHeadBlendPaletteColor.Call(native, ped);
		}

		/// <summary>
		/// Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
		/// Used when calling SET_PED_HEAD_BLEND_DATA.
		/// </summary>
		/// <param name="type">Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.</param>
		public int GetPedHeadBlendFirstIndex(int type)
		{
			if (getPedHeadBlendFirstIndex == null) getPedHeadBlendFirstIndex = (Function) native.GetObjectProperty("getPedHeadBlendFirstIndex");
			return (int) getPedHeadBlendFirstIndex.Call(native, type);
		}

		/// <summary>
		/// Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
		/// </summary>
		/// <param name="type">Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.</param>
		public int GetNumParentPedsOfType(int type)
		{
			if (getNumParentPedsOfType == null) getNumParentPedsOfType = (Function) native.GetObjectProperty("getNumParentPedsOfType");
			return (int) getNumParentPedsOfType.Call(native, type);
		}

		/// <summary>
		/// from extreme3.c4
		/// PED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));
		/// p1 is probably componentId
		/// </summary>
		public object SetPedPreloadVariationData(int ped, int slot, int drawableId, int textureId)
		{
			if (setPedPreloadVariationData == null) setPedPreloadVariationData = (Function) native.GetObjectProperty("setPedPreloadVariationData");
			return setPedPreloadVariationData.Call(native, ped, slot, drawableId, textureId);
		}

		public bool HasPedPreloadVariationDataFinished(int ped)
		{
			if (hasPedPreloadVariationDataFinished == null) hasPedPreloadVariationDataFinished = (Function) native.GetObjectProperty("hasPedPreloadVariationDataFinished");
			return (bool) hasPedPreloadVariationDataFinished.Call(native, ped);
		}

		public void ReleasePedPreloadVariationData(int ped)
		{
			if (releasePedPreloadVariationData == null) releasePedPreloadVariationData = (Function) native.GetObjectProperty("releasePedPreloadVariationData");
			releasePedPreloadVariationData.Call(native, ped);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public bool SetPedPreloadPropData(int ped, int componentId, int drawableId, int TextureId)
		{
			if (setPedPreloadPropData == null) setPedPreloadPropData = (Function) native.GetObjectProperty("setPedPreloadPropData");
			return (bool) setPedPreloadPropData.Call(native, ped, componentId, drawableId, TextureId);
		}

		public bool HasPedPreloadPropDataFinished(int ped)
		{
			if (hasPedPreloadPropDataFinished == null) hasPedPreloadPropDataFinished = (Function) native.GetObjectProperty("hasPedPreloadPropDataFinished");
			return (bool) hasPedPreloadPropDataFinished.Call(native, ped);
		}

		public void ReleasePedPreloadPropData(int ped)
		{
			if (releasePedPreloadPropData == null) releasePedPreloadPropData = (Function) native.GetObjectProperty("releasePedPreloadPropData");
			releasePedPreloadPropData.Call(native, ped);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public int GetPedPropIndex(int ped, int componentId)
		{
			if (getPedPropIndex == null) getPedPropIndex = (Function) native.GetObjectProperty("getPedPropIndex");
			return (int) getPedPropIndex.Call(native, ped, componentId);
		}

		/// <summary>
		/// ComponentId can be set to various things based on what category you're wanting to set
		/// enum PedPropsData
		/// {
		/// PED_PROP_HATS = 0,
		/// PED_PROP_GLASSES = 1,
		/// PED_PROP_EARS = 2,
		/// PED_PROP_WATCHES = 3,
		/// };
		/// Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x93376B65A266EB5F
		/// </summary>
		/// <param name="componentId">ComponentId can be set to various things based on what category you're wanting to set</param>
		public void SetPedPropIndex(int ped, int componentId, int drawableId, int TextureId, bool attach)
		{
			if (setPedPropIndex == null) setPedPropIndex = (Function) native.GetObjectProperty("setPedPropIndex");
			setPedPropIndex.Call(native, ped, componentId, drawableId, TextureId, attach);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public void KnockOffPedProp(int ped, bool p1, bool p2, bool p3, bool p4)
		{
			if (knockOffPedProp == null) knockOffPedProp = (Function) native.GetObjectProperty("knockOffPedProp");
			knockOffPedProp.Call(native, ped, p1, p2, p3, p4);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public void ClearPedProp(int ped, int propId)
		{
			if (clearPedProp == null) clearPedProp = (Function) native.GetObjectProperty("clearPedProp");
			clearPedProp.Call(native, ped, propId);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public void ClearAllPedProps(int ped)
		{
			if (clearAllPedProps == null) clearAllPedProps = (Function) native.GetObjectProperty("clearAllPedProps");
			clearAllPedProps.Call(native, ped);
		}

		public void DropAmbientProp(int ped)
		{
			if (dropAmbientProp == null) dropAmbientProp = (Function) native.GetObjectProperty("dropAmbientProp");
			dropAmbientProp.Call(native, ped);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public int GetPedPropTextureIndex(int ped, int componentId)
		{
			if (getPedPropTextureIndex == null) getPedPropTextureIndex = (Function) native.GetObjectProperty("getPedPropTextureIndex");
			return (int) getPedPropTextureIndex.Call(native, ped, componentId);
		}

		public void ClearPedParachutePackVariation(object p0)
		{
			if (clearPedParachutePackVariation == null) clearPedParachutePackVariation = (Function) native.GetObjectProperty("clearPedParachutePackVariation");
			clearPedParachutePackVariation.Call(native, p0);
		}

		/// <summary>
		/// when player character is used plays remove scuba gear animation
		/// </summary>
		public void _0x36C6984C3ED0C911(object p0)
		{
			if (__0x36C6984C3ED0C911 == null) __0x36C6984C3ED0C911 = (Function) native.GetObjectProperty("_0x36C6984C3ED0C911");
			__0x36C6984C3ED0C911.Call(native, p0);
		}

		public void ClearPedScubaGearVariation(int ped)
		{
			if (clearPedScubaGearVariation == null) clearPedScubaGearVariation = (Function) native.GetObjectProperty("clearPedScubaGearVariation");
			clearPedScubaGearVariation.Call(native, ped);
		}

		public bool _0xFEC9A3B1820F3331(object p0)
		{
			if (__0xFEC9A3B1820F3331 == null) __0xFEC9A3B1820F3331 = (Function) native.GetObjectProperty("_0xFEC9A3B1820F3331");
			return (bool) __0xFEC9A3B1820F3331.Call(native, p0);
		}

		/// <summary>
		/// works with AI::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
		/// </summary>
		public void SetBlockingOfNonTemporaryEvents(int ped, bool toggle)
		{
			if (setBlockingOfNonTemporaryEvents == null) setBlockingOfNonTemporaryEvents = (Function) native.GetObjectProperty("setBlockingOfNonTemporaryEvents");
			setBlockingOfNonTemporaryEvents.Call(native, ped, toggle);
		}

		public void SetPedBoundsOrientation(int ped, double p1, double p2, double p3, double p4, double p5)
		{
			if (setPedBoundsOrientation == null) setPedBoundsOrientation = (Function) native.GetObjectProperty("setPedBoundsOrientation");
			setPedBoundsOrientation.Call(native, ped, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.
		/// l_216 = RECSBRobber1
		/// </summary>
		public void RegisterTarget(int ped, int target)
		{
			if (registerTarget == null) registerTarget = (Function) native.GetObjectProperty("registerTarget");
			registerTarget.Call(native, ped, target);
		}

		/// <summary>
		/// Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
		/// </summary>
		public void RegisterHatedTargetsAroundPed(int ped, double radius)
		{
			if (registerHatedTargetsAroundPed == null) registerHatedTargetsAroundPed = (Function) native.GetObjectProperty("registerHatedTargetsAroundPed");
			registerHatedTargetsAroundPed.Call(native, ped, radius);
		}

		/// <summary>
		/// Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
		/// Ped Types:
		/// Any = -1
		/// Player = 1
		/// Male = 4
		/// Female = 5
		/// Cop = 6
		/// Human = 26
		/// SWAT = 27
		/// See NativeDB for reference: http://natives.altv.mp/#/0x876046A8E3A4B71C
		/// </summary>
		/// <param name="y">An-1</param>
		public int GetRandomPedAtCoord(double x, double y, double z, double xRadius, double yRadius, double zRadius, int pedType)
		{
			if (getRandomPedAtCoord == null) getRandomPedAtCoord = (Function) native.GetObjectProperty("getRandomPedAtCoord");
			return (int) getRandomPedAtCoord.Call(native, x, y, z, xRadius, yRadius, zRadius, pedType);
		}

		/// <summary>
		/// Gets the closest ped in a radius.
		/// Ped Types:
		/// Any ped = -1
		/// Player = 1
		/// Male = 4
		/// Female = 5
		/// Cop = 6
		/// Human = 26
		/// SWAT = 27
		/// See NativeDB for reference: http://natives.altv.mp/#/0xC33AB876A77F8164
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetClosestPed(double x, double y, double z, double radius, bool p4, bool p5, int outPed, bool p7, bool p8, int pedType)
		{
			if (getClosestPed == null) getClosestPed = (Function) native.GetObjectProperty("getClosestPed");
			var results = (Array) getClosestPed.Call(native, x, y, z, radius, p4, p5, outPed, p7, p8, pedType);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.</returns>
		public void SetScenarioPedsToBeReturnedByNextCommand(bool value)
		{
			if (setScenarioPedsToBeReturnedByNextCommand == null) setScenarioPedsToBeReturnedByNextCommand = (Function) native.GetObjectProperty("setScenarioPedsToBeReturnedByNextCommand");
			setScenarioPedsToBeReturnedByNextCommand.Call(native, value);
		}

		public bool _0x03EA03AF85A85CB7(int ped, bool p1, bool p2, bool p3, bool p4, bool p5, bool p6, bool p7, object p8)
		{
			if (__0x03EA03AF85A85CB7 == null) __0x03EA03AF85A85CB7 = (Function) native.GetObjectProperty("_0x03EA03AF85A85CB7");
			return (bool) __0x03EA03AF85A85CB7.Call(native, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		/// <summary>
		/// Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
		/// </summary>
		public void SetDriverRacingModifier(int driver, double modifier)
		{
			if (setDriverRacingModifier == null) setDriverRacingModifier = (Function) native.GetObjectProperty("setDriverRacingModifier");
			setDriverRacingModifier.Call(native, driver, modifier);
		}

		/// <summary>
		/// The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
		/// </summary>
		public void SetDriverAbility(int driver, double ability)
		{
			if (setDriverAbility == null) setDriverAbility = (Function) native.GetObjectProperty("setDriverAbility");
			setDriverAbility.Call(native, driver, ability);
		}

		/// <summary>
		/// range 0.0f - 1.0f
		/// </summary>
		public void SetDriverAggressiveness(int driver, double aggressiveness)
		{
			if (setDriverAggressiveness == null) setDriverAggressiveness = (Function) native.GetObjectProperty("setDriverAggressiveness");
			setDriverAggressiveness.Call(native, driver, aggressiveness);
		}

		/// <summary>
		/// Prevents the ped from going limp.
		/// [Example: Can prevent peds from falling when standing on moving vehicles.]
		/// </summary>
		public bool CanPedRagdoll(int ped)
		{
			if (canPedRagdoll == null) canPedRagdoll = (Function) native.GetObjectProperty("canPedRagdoll");
			return (bool) canPedRagdoll.Call(native, ped);
		}

		/// <summary>
		/// time1- Time Ped is in ragdoll mode(ms)
		/// time2- Unknown time, in milliseconds
		/// ragdollType-
		/// 0 : Normal ragdoll
		/// 1 : Falls with stiff legs/body
		/// 2 : Narrow leg stumble(may not fall)
		/// 3 : Wide leg stumble(may not fall)
		/// p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
		/// EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
		/// Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
		/// </summary>
		public bool SetPedToRagdoll(int ped, int time1, int time2, int ragdollType, bool p4, bool p5, bool p6)
		{
			if (setPedToRagdoll == null) setPedToRagdoll = (Function) native.GetObjectProperty("setPedToRagdoll");
			return (bool) setPedToRagdoll.Call(native, ped, time1, time2, ragdollType, p4, p5, p6);
		}

		/// <summary>
		/// Return variable is never used in R*'s scripts.
		/// Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
		/// x, y, and z are coordinates, most likely to where the ped will fall.
		/// p7 is probably the force of the fall, but untested, so I left the variable name the same.
		/// p8 to p13 are always 0f in R*'s scripts.
		/// (Simplified) Example of the usage of the function from R*'s scripts:
		/// ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
		/// </summary>
		/// <param name="p7">is probably the force of the fall, but untested, so I left the variable name the same.</param>
		/// <param name="p8">to p13 are always 0f in R*'s scripts.</param>
		public bool SetPedToRagdollWithFall(int ped, int time, int p2, int ragdollType, double x, double y, double z, double p7, double p8, double p9, double p10, double p11, double p12, double p13)
		{
			if (setPedToRagdollWithFall == null) setPedToRagdollWithFall = (Function) native.GetObjectProperty("setPedToRagdollWithFall");
			return (bool) setPedToRagdollWithFall.Call(native, ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13);
		}

		/// <summary>
		/// Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
		/// </summary>
		public void SetPedRagdollOnCollision(int ped, bool toggle)
		{
			if (setPedRagdollOnCollision == null) setPedRagdollOnCollision = (Function) native.GetObjectProperty("setPedRagdollOnCollision");
			setPedRagdollOnCollision.Call(native, ped, toggle);
		}

		/// <summary>
		/// If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
		/// </summary>
		public bool IsPedRagdoll(int ped)
		{
			if (isPedRagdoll == null) isPedRagdoll = (Function) native.GetObjectProperty("isPedRagdoll");
			return (bool) isPedRagdoll.Call(native, ped);
		}

		public bool IsPedRunningRagdollTask(int ped)
		{
			if (isPedRunningRagdollTask == null) isPedRunningRagdollTask = (Function) native.GetObjectProperty("isPedRunningRagdollTask");
			return (bool) isPedRunningRagdollTask.Call(native, ped);
		}

		public void SetPedRagdollForceFall(int ped)
		{
			if (setPedRagdollForceFall == null) setPedRagdollForceFall = (Function) native.GetObjectProperty("setPedRagdollForceFall");
			setPedRagdollForceFall.Call(native, ped);
		}

		public void ResetPedRagdollTimer(int ped)
		{
			if (resetPedRagdollTimer == null) resetPedRagdollTimer = (Function) native.GetObjectProperty("resetPedRagdollTimer");
			resetPedRagdollTimer.Call(native, ped);
		}

		public void SetPedCanRagdoll(int ped, bool toggle)
		{
			if (setPedCanRagdoll == null) setPedCanRagdoll = (Function) native.GetObjectProperty("setPedCanRagdoll");
			setPedCanRagdoll.Call(native, ped, toggle);
		}

		public bool IsPedRunningMeleeTask(int ped)
		{
			if (isPedRunningMeleeTask == null) isPedRunningMeleeTask = (Function) native.GetObjectProperty("isPedRunningMeleeTask");
			return (bool) isPedRunningMeleeTask.Call(native, ped);
		}

		public bool IsPedRunningMobilePhoneTask(int ped)
		{
			if (isPedRunningMobilePhoneTask == null) isPedRunningMobilePhoneTask = (Function) native.GetObjectProperty("isPedRunningMobilePhoneTask");
			return (bool) isPedRunningMobilePhoneTask.Call(native, ped);
		}

		/// <summary>
		/// Only called once in the scripts:
		/// if (sub_1abd() && (!PED::_A3F3564A5B3646C0(l_8C))) {
		/// if (sub_52e3("RESNA_CELLR", 0)) {
		/// PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(l_8C, 1);
		/// PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(l_8C, 1);
		/// PED::SET_PED_CAN_PLAY_VISEME_ANIMS(l_8C, 1, 0);
		/// l_184 += 1;
		/// }
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0xA3F3564A5B3646C0
		/// </summary>
		public bool _0xA3F3564A5B3646C0(int ped)
		{
			if (__0xA3F3564A5B3646C0 == null) __0xA3F3564A5B3646C0 = (Function) native.GetObjectProperty("_0xA3F3564A5B3646C0");
			return (bool) __0xA3F3564A5B3646C0.Call(native, ped);
		}

		/// <summary>
		/// Works for both player and peds, but some flags don't seem to work for the player (1, for example)
		/// 1 - Blocks ragdolling when shot.
		/// 2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
		/// 4 - Blocks ragdolling when set on fire.
		/// -----------------------------------------------------------------------
		/// There seem to be 26 flags
		/// </summary>
		public void SetRagdollBlockingFlags(int ped, int flags)
		{
			if (setRagdollBlockingFlags == null) setRagdollBlockingFlags = (Function) native.GetObjectProperty("setRagdollBlockingFlags");
			setRagdollBlockingFlags.Call(native, ped, flags);
		}

		/// <summary>
		/// There seem to be 26 flags
		/// </summary>
		public void ClearRagdollBlockingFlags(int ped, int flags)
		{
			if (clearRagdollBlockingFlags == null) clearRagdollBlockingFlags = (Function) native.GetObjectProperty("clearRagdollBlockingFlags");
			clearRagdollBlockingFlags.Call(native, ped, flags);
		}

		public void SetPedAngledDefensiveArea(int ped, double p1, double p2, double p3, double p4, double p5, double p6, double p7, bool p8, bool p9)
		{
			if (setPedAngledDefensiveArea == null) setPedAngledDefensiveArea = (Function) native.GetObjectProperty("setPedAngledDefensiveArea");
			setPedAngledDefensiveArea.Call(native, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		public void SetPedSphereDefensiveArea(int ped, double x, double y, double z, double radius, bool p5, bool p6)
		{
			if (setPedSphereDefensiveArea == null) setPedSphereDefensiveArea = (Function) native.GetObjectProperty("setPedSphereDefensiveArea");
			setPedSphereDefensiveArea.Call(native, ped, x, y, z, radius, p5, p6);
		}

		public void SetPedDefensiveSphereAttachedToPed(int ped, int target, double xOffset, double yOffset, double zOffset, double radius, bool p6)
		{
			if (setPedDefensiveSphereAttachedToPed == null) setPedDefensiveSphereAttachedToPed = (Function) native.GetObjectProperty("setPedDefensiveSphereAttachedToPed");
			setPedDefensiveSphereAttachedToPed.Call(native, ped, target, xOffset, yOffset, zOffset, radius, p6);
		}

		public void SetPedDefensiveSphereAttachedToVehicle(int ped, int target, double xOffset, double yOffset, double zOffset, double radius, bool p6)
		{
			if (setPedDefensiveSphereAttachedToVehicle == null) setPedDefensiveSphereAttachedToVehicle = (Function) native.GetObjectProperty("setPedDefensiveSphereAttachedToVehicle");
			setPedDefensiveSphereAttachedToVehicle.Call(native, ped, target, xOffset, yOffset, zOffset, radius, p6);
		}

		public void SetPedDefensiveAreaAttachedToPed(int ped, int attachPed, double p2, double p3, double p4, double p5, double p6, double p7, double p8, bool p9, bool p10)
		{
			if (setPedDefensiveAreaAttachedToPed == null) setPedDefensiveAreaAttachedToPed = (Function) native.GetObjectProperty("setPedDefensiveAreaAttachedToPed");
			setPedDefensiveAreaAttachedToPed.Call(native, ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		}

		public void SetPedDefensiveAreaDirection(int ped, double p1, double p2, double p3, bool p4)
		{
			if (setPedDefensiveAreaDirection == null) setPedDefensiveAreaDirection = (Function) native.GetObjectProperty("setPedDefensiveAreaDirection");
			setPedDefensiveAreaDirection.Call(native, ped, p1, p2, p3, p4);
		}

		/// <summary>
		/// Ped will no longer get angry when you stay near him.
		/// </summary>
		/// <param name="ped">Ped will no longer get angry when you stay near him.</param>
		public void RemovePedDefensiveArea(int ped, bool toggle)
		{
			if (removePedDefensiveArea == null) removePedDefensiveArea = (Function) native.GetObjectProperty("removePedDefensiveArea");
			removePedDefensiveArea.Call(native, ped, toggle);
		}

		public Vector3 GetPedDefensiveAreaPosition(int ped, bool p1)
		{
			if (getPedDefensiveAreaPosition == null) getPedDefensiveAreaPosition = (Function) native.GetObjectProperty("getPedDefensiveAreaPosition");
			return JSObjectToVector3(getPedDefensiveAreaPosition.Call(native, ped, p1));
		}

		public bool IsPedDefensiveAreaActive(int ped, bool p1)
		{
			if (isPedDefensiveAreaActive == null) isPedDefensiveAreaActive = (Function) native.GetObjectProperty("isPedDefensiveAreaActive");
			return (bool) isPedDefensiveAreaActive.Call(native, ped, p1);
		}

		public void SetPedPreferredCoverSet(int ped, object itemSet)
		{
			if (setPedPreferredCoverSet == null) setPedPreferredCoverSet = (Function) native.GetObjectProperty("setPedPreferredCoverSet");
			setPedPreferredCoverSet.Call(native, ped, itemSet);
		}

		public void RemovePedPreferredCoverSet(int ped)
		{
			if (removePedPreferredCoverSet == null) removePedPreferredCoverSet = (Function) native.GetObjectProperty("removePedPreferredCoverSet");
			removePedPreferredCoverSet.Call(native, ped);
		}

		/// <summary>
		/// It will revive/cure the injured ped. The condition is ped must not be dead.
		/// Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
		/// This function is well suited there.
		/// </summary>
		public void ReviveInjuredPed(int ped)
		{
			if (reviveInjuredPed == null) reviveInjuredPed = (Function) native.GetObjectProperty("reviveInjuredPed");
			reviveInjuredPed.Call(native, ped);
		}

		/// <summary>
		/// This function will simply bring the dead person back to life.
		/// Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
		/// Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
		/// Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
		/// </summary>
		public void ResurrectPed(int ped)
		{
			if (resurrectPed == null) resurrectPed = (Function) native.GetObjectProperty("resurrectPed");
			resurrectPed.Call(native, ped);
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// *untested but char *name could also be a hash for a localized string
		/// </summary>
		public void SetPedNameDebug(int ped, string name)
		{
			if (setPedNameDebug == null) setPedNameDebug = (Function) native.GetObjectProperty("setPedNameDebug");
			setPedNameDebug.Call(native, ped, name);
		}

		/// <summary>
		/// Gets the offset the specified ped has moved since the previous tick.
		/// If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
		/// If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
		/// </summary>
		public Vector3 GetPedExtractedDisplacement(int ped, bool worldSpace)
		{
			if (getPedExtractedDisplacement == null) getPedExtractedDisplacement = (Function) native.GetObjectProperty("getPedExtractedDisplacement");
			return JSObjectToVector3(getPedExtractedDisplacement.Call(native, ped, worldSpace));
		}

		public void SetPedDiesWhenInjured(int ped, bool toggle)
		{
			if (setPedDiesWhenInjured == null) setPedDiesWhenInjured = (Function) native.GetObjectProperty("setPedDiesWhenInjured");
			setPedDiesWhenInjured.Call(native, ped, toggle);
		}

		public void SetPedEnableWeaponBlocking(int ped, bool toggle)
		{
			if (setPedEnableWeaponBlocking == null) setPedEnableWeaponBlocking = (Function) native.GetObjectProperty("setPedEnableWeaponBlocking");
			setPedEnableWeaponBlocking.Call(native, ped, toggle);
		}

		/// <summary>
		/// p1 was always 1 (true).
		/// Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.
		/// Actual name begins with 'S'
		/// </summary>
		/// <param name="p1">was always 1 (true).</param>
		public void _0xF9ACF4A08098EA25(int ped, bool p1)
		{
			if (__0xF9ACF4A08098EA25 == null) __0xF9ACF4A08098EA25 = (Function) native.GetObjectProperty("_0xF9ACF4A08098EA25");
			__0xF9ACF4A08098EA25.Call(native, ped, p1);
		}

		public void ResetPedVisibleDamage(int ped)
		{
			if (resetPedVisibleDamage == null) resetPedVisibleDamage = (Function) native.GetObjectProperty("resetPedVisibleDamage");
			resetPedVisibleDamage.Call(native, ped);
		}

		public void ApplyPedBloodDamageByZone(int ped, object p1, double p2, double p3, object p4)
		{
			if (applyPedBloodDamageByZone == null) applyPedBloodDamageByZone = (Function) native.GetObjectProperty("applyPedBloodDamageByZone");
			applyPedBloodDamageByZone.Call(native, ped, p1, p2, p3, p4);
		}

		/// <summary>
		/// Found one occurence in re_crashrescue.c4
		/// PED::APPLY_PED_BLOOD(l_4B, 3, 0.0, 0.0, 0.0, "wound_sheet");
		/// - winject
		/// </summary>
		public void ApplyPedBlood(int ped, int boneIndex, double xRot, double yRot, double zRot, string woundType)
		{
			if (applyPedBlood == null) applyPedBlood = (Function) native.GetObjectProperty("applyPedBlood");
			applyPedBlood.Call(native, ped, boneIndex, xRot, yRot, zRot, woundType);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ApplyPedBloodByZone(int ped, object p1, double p2, double p3, object p4)
		{
			if (applyPedBloodByZone == null) applyPedBloodByZone = (Function) native.GetObjectProperty("applyPedBloodByZone");
			var results = (Array) applyPedBloodByZone.Call(native, ped, p1, p2, p3, p4);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ApplyPedBloodSpecific(int ped, object p1, double p2, double p3, double p4, double p5, object p6, double p7, object p8)
		{
			if (applyPedBloodSpecific == null) applyPedBloodSpecific = (Function) native.GetObjectProperty("applyPedBloodSpecific");
			var results = (Array) applyPedBloodSpecific.Call(native, ped, p1, p2, p3, p4, p5, p6, p7, p8);
			return (results[0], results[1]);
		}

		/// <summary>
		/// enum eDamageZone
		/// {
		/// DZ_Torso = 0,
		/// DZ_Head,
		/// DZ_LeftArm,
		/// DZ_RightArm,
		/// DZ_LeftLeg,
		/// DZ_RightLeg,
		/// };
		/// See NativeDB for reference: http://natives.altv.mp/#/0x397C38AA7B4A5F83
		/// </summary>
		public void ApplyPedDamageDecal(int ped, int damageZone, double xOffset, double yOffset, double heading, double scale, double alpha, int variation, bool fadeIn, string decalName)
		{
			if (applyPedDamageDecal == null) applyPedDamageDecal = (Function) native.GetObjectProperty("applyPedDamageDecal");
			applyPedDamageDecal.Call(native, ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName);
		}

		/// <summary>
		/// Damage Packs:
		/// "SCR_TrevorTreeBang"
		/// "HOSPITAL_0"
		/// "HOSPITAL_1"
		/// "HOSPITAL_2"
		/// "HOSPITAL_3"
		/// "HOSPITAL_4"
		/// "HOSPITAL_5"
		/// "HOSPITAL_6"
		/// See NativeDB for reference: http://natives.altv.mp/#/0x46DF918788CB093F
		/// </summary>
		/// <param name="damage">Damage Packs:</param>
		public void ApplyPedDamagePack(int ped, string damagePack, double damage, double mult)
		{
			if (applyPedDamagePack == null) applyPedDamagePack = (Function) native.GetObjectProperty("applyPedDamagePack");
			applyPedDamagePack.Call(native, ped, damagePack, damage, mult);
		}

		public void ClearPedBloodDamage(int ped)
		{
			if (clearPedBloodDamage == null) clearPedBloodDamage = (Function) native.GetObjectProperty("clearPedBloodDamage");
			clearPedBloodDamage.Call(native, ped);
		}

		/// <summary>
		/// Somehow related to changing ped's clothes.
		/// </summary>
		public void ClearPedBloodDamageByZone(int ped, int p1)
		{
			if (clearPedBloodDamageByZone == null) clearPedBloodDamageByZone = (Function) native.GetObjectProperty("clearPedBloodDamageByZone");
			clearPedBloodDamageByZone.Call(native, ped, p1);
		}

		public void HidePedBloodDamageByZone(int ped, object p1, bool p2)
		{
			if (hidePedBloodDamageByZone == null) hidePedBloodDamageByZone = (Function) native.GetObjectProperty("hidePedBloodDamageByZone");
			hidePedBloodDamageByZone.Call(native, ped, p1, p2);
		}

		/// <summary>
		/// p1: from 0 to 5 in the b617d scripts.
		/// p2: "blushing" and "ALL" found in the b617d scripts.
		/// </summary>
		/// <param name="p1">from 0 to 5 in the b617d scripts.</param>
		/// <param name="p2">"blushing" and "ALL" found in the b617d scripts.</param>
		public void ClearPedDamageDecalByZone(int ped, int p1, string p2)
		{
			if (clearPedDamageDecalByZone == null) clearPedDamageDecalByZone = (Function) native.GetObjectProperty("clearPedDamageDecalByZone");
			clearPedDamageDecalByZone.Call(native, ped, p1, p2);
		}

		public int GetPedDecorationsState(int ped)
		{
			if (getPedDecorationsState == null) getPedDecorationsState = (Function) native.GetObjectProperty("getPedDecorationsState");
			return (int) getPedDecorationsState.Call(native, ped);
		}

		public void _0x2B694AFCF64E6994(int ped, bool p1)
		{
			if (__0x2B694AFCF64E6994 == null) __0x2B694AFCF64E6994 = (Function) native.GetObjectProperty("_0x2B694AFCF64E6994");
			__0x2B694AFCF64E6994.Call(native, ped, p1);
		}

		/// <summary>
		/// It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
		/// </summary>
		public void ClearPedWetness(int ped)
		{
			if (clearPedWetness == null) clearPedWetness = (Function) native.GetObjectProperty("clearPedWetness");
			clearPedWetness.Call(native, ped);
		}

		/// <summary>
		/// It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
		/// </summary>
		public void SetPedWetnessHeight(int ped, double height)
		{
			if (setPedWetnessHeight == null) setPedWetnessHeight = (Function) native.GetObjectProperty("setPedWetnessHeight");
			setPedWetnessHeight.Call(native, ped, height);
		}

		/// <summary>
		/// combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
		/// </summary>
		public void SetPedWetnessEnabledThisFrame(int ped)
		{
			if (setPedWetnessEnabledThisFrame == null) setPedWetnessEnabledThisFrame = (Function) native.GetObjectProperty("setPedWetnessEnabledThisFrame");
			setPedWetnessEnabledThisFrame.Call(native, ped);
		}

		public void ClearPedEnvDirt(int ped)
		{
			if (clearPedEnvDirt == null) clearPedEnvDirt = (Function) native.GetObjectProperty("clearPedEnvDirt");
			clearPedEnvDirt.Call(native, ped);
		}

		/// <summary>
		/// Sweat is set to 100.0 or 0.0 in the decompiled scripts.
		/// </summary>
		/// <param name="sweat">Sweat is set to 100.0 or 0.0 in the decompiled scripts.</param>
		public void SetPedSweat(int ped, double sweat)
		{
			if (setPedSweat == null) setPedSweat = (Function) native.GetObjectProperty("setPedSweat");
			setPedSweat.Call(native, ped, sweat);
		}

		/// <summary>
		/// Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
		/// collection - PedDecorationCollection filename hash
		/// overlay - Item name hash
		/// Example:
		/// Entry inside "mpbeach_overlays.xml" -
		/// <Item>
		/// <uvPos x="0.500000" y="0.500000" />
		/// <scale x="0.600000" y="0.500000" />
		/// <rotation value="0.000000" />
		/// See NativeDB for reference: http://natives.altv.mp/#/0x5F5D1665E352A839
		/// </summary>
		/// <param name="collection">PedDecorationCollection filename hash</param>
		/// <param name="overlay">Item name hash</param>
		public void AddPedDecorationFromHashes(int ped, int collection, int overlay)
		{
			if (addPedDecorationFromHashes == null) addPedDecorationFromHashes = (Function) native.GetObjectProperty("addPedDecorationFromHashes");
			addPedDecorationFromHashes.Call(native, ped, collection, overlay);
		}

		public void AddPedDecorationFromHashesInCorona(int ped, int collection, int overlay)
		{
			if (addPedDecorationFromHashesInCorona == null) addPedDecorationFromHashesInCorona = (Function) native.GetObjectProperty("addPedDecorationFromHashesInCorona");
			addPedDecorationFromHashesInCorona.Call(native, ped, collection, overlay);
		}

		/// <summary>
		/// enum ePedDecorationZone
		/// {
		/// ZONE_TORSO = 0,
		/// ZONE_HEAD = 1,
		/// ZONE_LEFT_ARM = 2,
		/// ZONE_RIGHT_ARM = 3,
		/// ZONE_LEFT_LEG = 4,
		/// ZONE_RIGHT_LEG = 5,
		/// ZONE_UNKNOWN = 6,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x9FD452BFBE7A7A8B
		/// </summary>
		/// <returns>Returns the zoneID for the overlay if it is a member of collection.</returns>
		public int GetPedDecorationZoneFromHashes(int collection, int overlay)
		{
			if (getPedDecorationZoneFromHashes == null) getPedDecorationZoneFromHashes = (Function) native.GetObjectProperty("getPedDecorationZoneFromHashes");
			return (int) getPedDecorationZoneFromHashes.Call(native, collection, overlay);
		}

		public void ClearPedDecorations(int ped)
		{
			if (clearPedDecorations == null) clearPedDecorations = (Function) native.GetObjectProperty("clearPedDecorations");
			clearPedDecorations.Call(native, ped);
		}

		public void ClearPedDecorationsLeaveScars(int ped)
		{
			if (clearPedDecorationsLeaveScars == null) clearPedDecorationsLeaveScars = (Function) native.GetObjectProperty("clearPedDecorationsLeaveScars");
			clearPedDecorationsLeaveScars.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Despite this function's name, it simply returns whether the specified handle is a Ped.</returns>
		public bool WasPedSkeletonUpdated(int ped)
		{
			if (wasPedSkeletonUpdated == null) wasPedSkeletonUpdated = (Function) native.GetObjectProperty("wasPedSkeletonUpdated");
			return (bool) wasPedSkeletonUpdated.Call(native, ped);
		}

		/// <summary>
		/// Gets the position of the specified bone of the specified ped.
		/// ped: The ped to get the position of a bone from.
		/// boneId: The ID of the bone to get the position from. This is NOT the index.
		/// offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
		/// offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
		/// offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
		/// </summary>
		/// <param name="ped">The ped to get the position of a bone from.</param>
		/// <param name="boneId">The ID of the bone to get the position from. This is NOT the index.</param>
		/// <param name="offsetX">The X-component of the offset to add to the position relative to the bone's rotation.</param>
		/// <param name="offsetY">The Y-component of the offset to add to the position relative to the bone's rotation.</param>
		/// <param name="offsetZ">The Z-component of the offset to add to the position relative to the bone's rotation.</param>
		public Vector3 GetPedBoneCoords(int ped, int boneId, double offsetX, double offsetY, double offsetZ)
		{
			if (getPedBoneCoords == null) getPedBoneCoords = (Function) native.GetObjectProperty("getPedBoneCoords");
			return JSObjectToVector3(getPedBoneCoords.Call(native, ped, boneId, offsetX, offsetY, offsetZ));
		}

		/// <summary>
		/// Creates a new NaturalMotion message.
		/// startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
		/// messageId: The ID of the NaturalMotion message.
		/// If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
		/// </summary>
		/// <param name="startImmediately">If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.</param>
		/// <param name="messageId">The ID of the NaturalMotion message.</param>
		public void CreateNmMessage(bool startImmediately, int messageId)
		{
			if (createNmMessage == null) createNmMessage = (Function) native.GetObjectProperty("createNmMessage");
			createNmMessage.Call(native, startImmediately, messageId);
		}

		/// <summary>
		/// Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
		/// If a message hasn't been created already, this function does nothing.
		/// If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
		/// The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
		/// Call order:
		/// SET_PED_TO_RAGDOLL
		/// CREATE_NM_MESSAGE
		/// GIVE_PED_NM_MESSAGE
		/// Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB158DFCCC56E5C5B
		/// </summary>
		public void GivePedNmMessage(int ped)
		{
			if (givePedNmMessage == null) givePedNmMessage = (Function) native.GetObjectProperty("givePedNmMessage");
			givePedNmMessage.Call(native, ped);
		}

		public int AddScenarioBlockingArea(double x1, double y1, double z1, double x2, double y2, double z2, bool p6, bool p7, bool p8, bool p9)
		{
			if (addScenarioBlockingArea == null) addScenarioBlockingArea = (Function) native.GetObjectProperty("addScenarioBlockingArea");
			return (int) addScenarioBlockingArea.Call(native, x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);
		}

		public void RemoveScenarioBlockingAreas()
		{
			if (removeScenarioBlockingAreas == null) removeScenarioBlockingAreas = (Function) native.GetObjectProperty("removeScenarioBlockingAreas");
			removeScenarioBlockingAreas.Call(native);
		}

		public void RemoveScenarioBlockingArea(object p0, bool p1)
		{
			if (removeScenarioBlockingArea == null) removeScenarioBlockingArea = (Function) native.GetObjectProperty("removeScenarioBlockingArea");
			removeScenarioBlockingArea.Call(native, p0, p1);
		}

		public void SetScenarioPedsSpawnInSphereArea(double x, double y, double z, double range, int p4)
		{
			if (setScenarioPedsSpawnInSphereArea == null) setScenarioPedsSpawnInSphereArea = (Function) native.GetObjectProperty("setScenarioPedsSpawnInSphereArea");
			setScenarioPedsSpawnInSphereArea.Call(native, x, y, z, range, p4);
		}

		public bool DoesScenarioBlockingAreaExist(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (doesScenarioBlockingAreaExist == null) doesScenarioBlockingAreaExist = (Function) native.GetObjectProperty("doesScenarioBlockingAreaExist");
			return (bool) doesScenarioBlockingAreaExist.Call(native, x1, y1, z1, x2, y2, z2);
		}

		public bool IsPedUsingScenario(int ped, string scenario)
		{
			if (isPedUsingScenario == null) isPedUsingScenario = (Function) native.GetObjectProperty("isPedUsingScenario");
			return (bool) isPedUsingScenario.Call(native, ped, scenario);
		}

		public bool IsPedUsingAnyScenario(int ped)
		{
			if (isPedUsingAnyScenario == null) isPedUsingAnyScenario = (Function) native.GetObjectProperty("isPedUsingAnyScenario");
			return (bool) isPedUsingAnyScenario.Call(native, ped);
		}

		public object SetPedPanicExitScenario(object p0, object p1, object p2, object p3)
		{
			if (setPedPanicExitScenario == null) setPedPanicExitScenario = (Function) native.GetObjectProperty("setPedPanicExitScenario");
			return setPedPanicExitScenario.Call(native, p0, p1, p2, p3);
		}

		public void _0x9A77DFD295E29B09(object p0, bool p1)
		{
			if (__0x9A77DFD295E29B09 == null) __0x9A77DFD295E29B09 = (Function) native.GetObjectProperty("_0x9A77DFD295E29B09");
			__0x9A77DFD295E29B09.Call(native, p0, p1);
		}

		public object _0x25361A96E0F7E419(object p0, object p1, object p2, object p3)
		{
			if (__0x25361A96E0F7E419 == null) __0x25361A96E0F7E419 = (Function) native.GetObjectProperty("_0x25361A96E0F7E419");
			return __0x25361A96E0F7E419.Call(native, p0, p1, p2, p3);
		}

		public object _0xEC6935EBE0847B90(object p0, object p1, object p2, object p3)
		{
			if (__0xEC6935EBE0847B90 == null) __0xEC6935EBE0847B90 = (Function) native.GetObjectProperty("_0xEC6935EBE0847B90");
			return __0xEC6935EBE0847B90.Call(native, p0, p1, p2, p3);
		}

		public void _0xA3A9299C4F2ADB98(object p0)
		{
			if (__0xA3A9299C4F2ADB98 == null) __0xA3A9299C4F2ADB98 = (Function) native.GetObjectProperty("_0xA3A9299C4F2ADB98");
			__0xA3A9299C4F2ADB98.Call(native, p0);
		}

		public void _0xF1C03A5352243A30(object p0)
		{
			if (__0xF1C03A5352243A30 == null) __0xF1C03A5352243A30 = (Function) native.GetObjectProperty("_0xF1C03A5352243A30");
			__0xF1C03A5352243A30.Call(native, p0);
		}

		public object _0xEEED8FAFEC331A70(object p0, object p1, object p2, object p3)
		{
			if (__0xEEED8FAFEC331A70 == null) __0xEEED8FAFEC331A70 = (Function) native.GetObjectProperty("_0xEEED8FAFEC331A70");
			return __0xEEED8FAFEC331A70.Call(native, p0, p1, p2, p3);
		}

		public void _0x425AECF167663F48(int ped, bool p1)
		{
			if (__0x425AECF167663F48 == null) __0x425AECF167663F48 = (Function) native.GetObjectProperty("_0x425AECF167663F48");
			__0x425AECF167663F48.Call(native, ped, p1);
		}

		public void _0x5B6010B3CBC29095(object p0, bool p1)
		{
			if (__0x5B6010B3CBC29095 == null) __0x5B6010B3CBC29095 = (Function) native.GetObjectProperty("_0x5B6010B3CBC29095");
			__0x5B6010B3CBC29095.Call(native, p0, p1);
		}

		public void _0xCEDA60A74219D064(object p0, bool p1)
		{
			if (__0xCEDA60A74219D064 == null) __0xCEDA60A74219D064 = (Function) native.GetObjectProperty("_0xCEDA60A74219D064");
			__0xCEDA60A74219D064.Call(native, p0, p1);
		}

		public void PlayFacialAnim(int ped, string animName, string animDict)
		{
			if (playFacialAnim == null) playFacialAnim = (Function) native.GetObjectProperty("playFacialAnim");
			playFacialAnim.Call(native, ped, animName, animDict);
		}

		public void _0x5687C7F05B39E401(int ped, string animDict)
		{
			if (__0x5687C7F05B39E401 == null) __0x5687C7F05B39E401 = (Function) native.GetObjectProperty("_0x5687C7F05B39E401");
			__0x5687C7F05B39E401.Call(native, ped, animDict);
		}

		public void SetFacialIdleAnimOverride(int ped, string animName, string animDict)
		{
			if (setFacialIdleAnimOverride == null) setFacialIdleAnimOverride = (Function) native.GetObjectProperty("setFacialIdleAnimOverride");
			setFacialIdleAnimOverride.Call(native, ped, animName, animDict);
		}

		public void ClearFacialIdleAnimOverride(int ped)
		{
			if (clearFacialIdleAnimOverride == null) clearFacialIdleAnimOverride = (Function) native.GetObjectProperty("clearFacialIdleAnimOverride");
			clearFacialIdleAnimOverride.Call(native, ped);
		}

		public void SetPedCanPlayGestureAnims(int ped, bool toggle)
		{
			if (setPedCanPlayGestureAnims == null) setPedCanPlayGestureAnims = (Function) native.GetObjectProperty("setPedCanPlayGestureAnims");
			setPedCanPlayGestureAnims.Call(native, ped, toggle);
		}

		/// <summary>
		/// p2 usually 0
		/// </summary>
		/// <param name="p2">usually 0</param>
		public void SetPedCanPlayVisemeAnims(int ped, bool toggle, bool p2)
		{
			if (setPedCanPlayVisemeAnims == null) setPedCanPlayVisemeAnims = (Function) native.GetObjectProperty("setPedCanPlayVisemeAnims");
			setPedCanPlayVisemeAnims.Call(native, ped, toggle, p2);
		}

		public void SetPedCanPlayInjuredAnims(int ped, bool p1)
		{
			if (setPedCanPlayInjuredAnims == null) setPedCanPlayInjuredAnims = (Function) native.GetObjectProperty("setPedCanPlayInjuredAnims");
			setPedCanPlayInjuredAnims.Call(native, ped, p1);
		}

		public void SetPedCanPlayAmbientAnims(int ped, bool toggle)
		{
			if (setPedCanPlayAmbientAnims == null) setPedCanPlayAmbientAnims = (Function) native.GetObjectProperty("setPedCanPlayAmbientAnims");
			setPedCanPlayAmbientAnims.Call(native, ped, toggle);
		}

		public void SetPedCanPlayAmbientBaseAnims(int ped, bool toggle)
		{
			if (setPedCanPlayAmbientBaseAnims == null) setPedCanPlayAmbientBaseAnims = (Function) native.GetObjectProperty("setPedCanPlayAmbientBaseAnims");
			setPedCanPlayAmbientBaseAnims.Call(native, ped, toggle);
		}

		public void _0xC2EE020F5FB4DB53(int ped)
		{
			if (__0xC2EE020F5FB4DB53 == null) __0xC2EE020F5FB4DB53 = (Function) native.GetObjectProperty("_0xC2EE020F5FB4DB53");
			__0xC2EE020F5FB4DB53.Call(native, ped);
		}

		public void SetPedCanArmIk(int ped, bool toggle)
		{
			if (setPedCanArmIk == null) setPedCanArmIk = (Function) native.GetObjectProperty("setPedCanArmIk");
			setPedCanArmIk.Call(native, ped, toggle);
		}

		public void SetPedCanHeadIk(int ped, bool toggle)
		{
			if (setPedCanHeadIk == null) setPedCanHeadIk = (Function) native.GetObjectProperty("setPedCanHeadIk");
			setPedCanHeadIk.Call(native, ped, toggle);
		}

		public void SetPedCanLegIk(int ped, bool toggle)
		{
			if (setPedCanLegIk == null) setPedCanLegIk = (Function) native.GetObjectProperty("setPedCanLegIk");
			setPedCanLegIk.Call(native, ped, toggle);
		}

		public void SetPedCanTorsoIk(int ped, bool toggle)
		{
			if (setPedCanTorsoIk == null) setPedCanTorsoIk = (Function) native.GetObjectProperty("setPedCanTorsoIk");
			setPedCanTorsoIk.Call(native, ped, toggle);
		}

		public void SetPedCanTorsoReactIk(int ped, bool p1)
		{
			if (setPedCanTorsoReactIk == null) setPedCanTorsoReactIk = (Function) native.GetObjectProperty("setPedCanTorsoReactIk");
			setPedCanTorsoReactIk.Call(native, ped, p1);
		}

		public void _0x6647C5F6F5792496(int ped, bool p1)
		{
			if (__0x6647C5F6F5792496 == null) __0x6647C5F6F5792496 = (Function) native.GetObjectProperty("_0x6647C5F6F5792496");
			__0x6647C5F6F5792496.Call(native, ped, p1);
		}

		public void SetPedCanUseAutoConversationLookat(int ped, bool toggle)
		{
			if (setPedCanUseAutoConversationLookat == null) setPedCanUseAutoConversationLookat = (Function) native.GetObjectProperty("setPedCanUseAutoConversationLookat");
			setPedCanUseAutoConversationLookat.Call(native, ped, toggle);
		}

		public bool IsPedHeadtrackingPed(int ped1, int ped2)
		{
			if (isPedHeadtrackingPed == null) isPedHeadtrackingPed = (Function) native.GetObjectProperty("isPedHeadtrackingPed");
			return (bool) isPedHeadtrackingPed.Call(native, ped1, ped2);
		}

		public bool IsPedHeadtrackingEntity(int ped, int entity)
		{
			if (isPedHeadtrackingEntity == null) isPedHeadtrackingEntity = (Function) native.GetObjectProperty("isPedHeadtrackingEntity");
			return (bool) isPedHeadtrackingEntity.Call(native, ped, entity);
		}

		/// <summary>
		/// This is only called once in the scripts.
		/// sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
		/// sub_1CA8("WORLD_HUMAN_SMOKING", 2);
		/// PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());
		/// </summary>
		public void SetPedPrimaryLookat(int ped, int lookAt)
		{
			if (setPedPrimaryLookat == null) setPedPrimaryLookat = (Function) native.GetObjectProperty("setPedPrimaryLookat");
			setPedPrimaryLookat.Call(native, ped, lookAt);
		}

		public void SetPedClothPackageIndex(object p0, object p1)
		{
			if (setPedClothPackageIndex == null) setPedClothPackageIndex = (Function) native.GetObjectProperty("setPedClothPackageIndex");
			setPedClothPackageIndex.Call(native, p0, p1);
		}

		public void SetPedClothProne(object p0, object p1)
		{
			if (setPedClothProne == null) setPedClothProne = (Function) native.GetObjectProperty("setPedClothProne");
			setPedClothProne.Call(native, p0, p1);
		}

		public void _0xA660FAF550EB37E5(object p0, bool p1)
		{
			if (__0xA660FAF550EB37E5 == null) __0xA660FAF550EB37E5 = (Function) native.GetObjectProperty("_0xA660FAF550EB37E5");
			__0xA660FAF550EB37E5.Call(native, p0, p1);
		}

		/// <summary>
		/// Research help : pastebin.com/fPL1cSwB
		/// New items added with underscore as first char
		/// -----------------------------------------------------------------------
		/// enum PedConfigFlags
		/// {
		/// PED_FLAG_CAN_FLY_THRU_WINDSCREEN = 32,
		/// PED_FLAG_DIES_BY_RAGDOLL = 33,
		/// PED_FLAG_NO_COLLISION = 52,
		/// _PED_FLAG_IS_SHOOTING = 58,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x1913FE4CBF41C463
		/// </summary>
		public void SetPedConfigFlag(int ped, int flagId, bool value)
		{
			if (setPedConfigFlag == null) setPedConfigFlag = (Function) native.GetObjectProperty("setPedConfigFlag");
			setPedConfigFlag.Call(native, ped, flagId, value);
		}

		/// <summary>
		/// PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
		/// </summary>
		public void SetPedResetFlag(int ped, int flagId, bool doReset)
		{
			if (setPedResetFlag == null) setPedResetFlag = (Function) native.GetObjectProperty("setPedResetFlag");
			setPedResetFlag.Call(native, ped, flagId, doReset);
		}

		/// <summary>
		/// p2 is always 1 in the scripts.
		/// if (GET_PED_CONFIG_FLAG(ped, 78, 1))
		/// </summary>
		/// <param name="p2">is always 1 in the scripts.</param>
		/// <returns>= returns true if ped is aiming/shooting a gun</returns>
		public bool GetPedConfigFlag(int ped, int flagId, bool p2)
		{
			if (getPedConfigFlag == null) getPedConfigFlag = (Function) native.GetObjectProperty("getPedConfigFlag");
			return (bool) getPedConfigFlag.Call(native, ped, flagId, p2);
		}

		public bool GetPedResetFlag(int ped, int flagId)
		{
			if (getPedResetFlag == null) getPedResetFlag = (Function) native.GetObjectProperty("getPedResetFlag");
			return (bool) getPedResetFlag.Call(native, ped, flagId);
		}

		public void SetPedGroupMemberPassengerIndex(int ped, int index)
		{
			if (setPedGroupMemberPassengerIndex == null) setPedGroupMemberPassengerIndex = (Function) native.GetObjectProperty("setPedGroupMemberPassengerIndex");
			setPedGroupMemberPassengerIndex.Call(native, ped, index);
		}

		public void SetPedCanEvasiveDive(int ped, bool toggle)
		{
			if (setPedCanEvasiveDive == null) setPedCanEvasiveDive = (Function) native.GetObjectProperty("setPedCanEvasiveDive");
			setPedCanEvasiveDive.Call(native, ped, toggle);
		}

		/// <summary>
		/// var num3;
		/// if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
		/// if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
		/// </summary>
		/// <returns>Array<bool, int> Presumably returns the Entity that the Ped is currently diving out of the way of.</returns>
		public (bool, int) IsPedEvasiveDiving(int ped, int evadingEntity)
		{
			if (isPedEvasiveDiving == null) isPedEvasiveDiving = (Function) native.GetObjectProperty("isPedEvasiveDiving");
			var results = (Array) isPedEvasiveDiving.Call(native, ped, evadingEntity);
			return ((bool) results[0], (int) results[1]);
		}

		public void SetPedShootsAtCoord(int ped, double x, double y, double z, bool toggle)
		{
			if (setPedShootsAtCoord == null) setPedShootsAtCoord = (Function) native.GetObjectProperty("setPedShootsAtCoord");
			setPedShootsAtCoord.Call(native, ped, x, y, z, toggle);
		}

		public void SetPedModelIsSuppressed(int ped, bool toggle)
		{
			if (setPedModelIsSuppressed == null) setPedModelIsSuppressed = (Function) native.GetObjectProperty("setPedModelIsSuppressed");
			setPedModelIsSuppressed.Call(native, ped, toggle);
		}

		public void StopAnyPedModelBeingSuppressed()
		{
			if (stopAnyPedModelBeingSuppressed == null) stopAnyPedModelBeingSuppressed = (Function) native.GetObjectProperty("stopAnyPedModelBeingSuppressed");
			stopAnyPedModelBeingSuppressed.Call(native);
		}

		public void SetPedCanBeTargetedWhenInjured(int ped, bool toggle)
		{
			if (setPedCanBeTargetedWhenInjured == null) setPedCanBeTargetedWhenInjured = (Function) native.GetObjectProperty("setPedCanBeTargetedWhenInjured");
			setPedCanBeTargetedWhenInjured.Call(native, ped, toggle);
		}

		public void SetPedGeneratesDeadBodyEvents(int ped, bool toggle)
		{
			if (setPedGeneratesDeadBodyEvents == null) setPedGeneratesDeadBodyEvents = (Function) native.GetObjectProperty("setPedGeneratesDeadBodyEvents");
			setPedGeneratesDeadBodyEvents.Call(native, ped, toggle);
		}

		public void BlockPedDeadBodyShockingEvents(int ped, bool p1)
		{
			if (blockPedDeadBodyShockingEvents == null) blockPedDeadBodyShockingEvents = (Function) native.GetObjectProperty("blockPedDeadBodyShockingEvents");
			blockPedDeadBodyShockingEvents.Call(native, ped, p1);
		}

		public void _0x3E9679C1DFCF422C(object p0, object p1)
		{
			if (__0x3E9679C1DFCF422C == null) __0x3E9679C1DFCF422C = (Function) native.GetObjectProperty("_0x3E9679C1DFCF422C");
			__0x3E9679C1DFCF422C.Call(native, p0, p1);
		}

		public void SetPedCanRagdollFromPlayerImpact(int ped, bool toggle)
		{
			if (setPedCanRagdollFromPlayerImpact == null) setPedCanRagdollFromPlayerImpact = (Function) native.GetObjectProperty("setPedCanRagdollFromPlayerImpact");
			setPedCanRagdollFromPlayerImpact.Call(native, ped, toggle);
		}

		/// <summary>
		/// PoliceMotorcycleHelmet   1024
		/// RegularMotorcycleHelmet   4096
		/// FiremanHelmet 16384
		/// PilotHeadset  32768
		/// PilotHelmet   65536
		/// --
		/// p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
		/// </summary>
		public void GivePedHelmet(int ped, bool cannotRemove, int helmetFlag, int textureIndex)
		{
			if (givePedHelmet == null) givePedHelmet = (Function) native.GetObjectProperty("givePedHelmet");
			givePedHelmet.Call(native, ped, cannotRemove, helmetFlag, textureIndex);
		}

		public void RemovePedHelmet(int ped, bool instantly)
		{
			if (removePedHelmet == null) removePedHelmet = (Function) native.GetObjectProperty("removePedHelmet");
			removePedHelmet.Call(native, ped, instantly);
		}

		/// <summary>
		/// IS_PED_*
		/// </summary>
		public bool _0x14590DDBEDB1EC85(int ped)
		{
			if (__0x14590DDBEDB1EC85 == null) __0x14590DDBEDB1EC85 = (Function) native.GetObjectProperty("_0x14590DDBEDB1EC85");
			return (bool) __0x14590DDBEDB1EC85.Call(native, ped);
		}

		public void SetPedHelmet(int ped, bool canWearHelmet)
		{
			if (setPedHelmet == null) setPedHelmet = (Function) native.GetObjectProperty("setPedHelmet");
			setPedHelmet.Call(native, ped, canWearHelmet);
		}

		public void SetPedHelmetFlag(int ped, int helmetFlag)
		{
			if (setPedHelmetFlag == null) setPedHelmetFlag = (Function) native.GetObjectProperty("setPedHelmetFlag");
			setPedHelmetFlag.Call(native, ped, helmetFlag);
		}

		/// <summary>
		/// List of component/props ID
		/// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		/// </summary>
		public void SetPedHelmetPropIndex(int ped, int propIndex, bool p2)
		{
			if (setPedHelmetPropIndex == null) setPedHelmetPropIndex = (Function) native.GetObjectProperty("setPedHelmetPropIndex");
			setPedHelmetPropIndex.Call(native, ped, propIndex, p2);
		}

		public void SetPedHelmetUnk(int ped, bool p1, int p2, int p3)
		{
			if (setPedHelmetUnk == null) setPedHelmetUnk = (Function) native.GetObjectProperty("setPedHelmetUnk");
			setPedHelmetUnk.Call(native, ped, p1, p2, p3);
		}

		public bool IsPedHelmetUnk(int ped)
		{
			if (isPedHelmetUnk == null) isPedHelmetUnk = (Function) native.GetObjectProperty("isPedHelmetUnk");
			return (bool) isPedHelmetUnk.Call(native, ped);
		}

		public void SetPedHelmetTextureIndex(int ped, int textureIndex)
		{
			if (setPedHelmetTextureIndex == null) setPedHelmetTextureIndex = (Function) native.GetObjectProperty("setPedHelmetTextureIndex");
			setPedHelmetTextureIndex.Call(native, ped, textureIndex);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the ped passed through the parenthesis is wearing a helmet.</returns>
		public bool IsPedWearingHelmet(int ped)
		{
			if (isPedWearingHelmet == null) isPedWearingHelmet = (Function) native.GetObjectProperty("isPedWearingHelmet");
			return (bool) isPedWearingHelmet.Call(native, ped);
		}

		/// <summary>
		/// CLEAR_PED_*
		/// </summary>
		public void _0x687C0B594907D2E8(int ped)
		{
			if (__0x687C0B594907D2E8 == null) __0x687C0B594907D2E8 = (Function) native.GetObjectProperty("_0x687C0B594907D2E8");
			__0x687C0B594907D2E8.Call(native, ped);
		}

		public object _0x451294E859ECC018(object p0)
		{
			if (__0x451294E859ECC018 == null) __0x451294E859ECC018 = (Function) native.GetObjectProperty("_0x451294E859ECC018");
			return __0x451294E859ECC018.Call(native, p0);
		}

		public object _0x9D728C1E12BF5518(object p0)
		{
			if (__0x9D728C1E12BF5518 == null) __0x9D728C1E12BF5518 = (Function) native.GetObjectProperty("_0x9D728C1E12BF5518");
			return __0x9D728C1E12BF5518.Call(native, p0);
		}

		public bool _0xF2385935BFFD4D92(object p0)
		{
			if (__0xF2385935BFFD4D92 == null) __0xF2385935BFFD4D92 = (Function) native.GetObjectProperty("_0xF2385935BFFD4D92");
			return (bool) __0xF2385935BFFD4D92.Call(native, p0);
		}

		public void SetPedToLoadCover(int ped, bool toggle)
		{
			if (setPedToLoadCover == null) setPedToLoadCover = (Function) native.GetObjectProperty("setPedToLoadCover");
			setPedToLoadCover.Call(native, ped, toggle);
		}

		/// <summary>
		/// It simply makes the said ped to cower behind cover object(wall, desk, car)
		/// Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
		/// </summary>
		public void SetPedCanCowerInCover(int ped, bool toggle)
		{
			if (setPedCanCowerInCover == null) setPedCanCowerInCover = (Function) native.GetObjectProperty("setPedCanCowerInCover");
			setPedCanCowerInCover.Call(native, ped, toggle);
		}

		public void SetPedCanPeekInCover(int ped, bool toggle)
		{
			if (setPedCanPeekInCover == null) setPedCanPeekInCover = (Function) native.GetObjectProperty("setPedCanPeekInCover");
			setPedCanPeekInCover.Call(native, ped, toggle);
		}

		/// <summary>
		/// Points to the same function as for example GET_RANDOM_VEHICLE_MODEL_IN_MEMORY and it does absolutely nothing.
		/// </summary>
		public void SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(int ped, bool toggle)
		{
			if (setPedPlaysHeadOnHornAnimWhenDiesInVehicle == null) setPedPlaysHeadOnHornAnimWhenDiesInVehicle = (Function) native.GetObjectProperty("setPedPlaysHeadOnHornAnimWhenDiesInVehicle");
			setPedPlaysHeadOnHornAnimWhenDiesInVehicle.Call(native, ped, toggle);
		}

		/// <summary>
		/// "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
		/// </summary>
		public void SetPedLegIkMode(int ped, int mode)
		{
			if (setPedLegIkMode == null) setPedLegIkMode = (Function) native.GetObjectProperty("setPedLegIkMode");
			setPedLegIkMode.Call(native, ped, mode);
		}

		public void SetPedMotionBlur(int ped, bool toggle)
		{
			if (setPedMotionBlur == null) setPedMotionBlur = (Function) native.GetObjectProperty("setPedMotionBlur");
			setPedMotionBlur.Call(native, ped, toggle);
		}

		public void SetPedCanSwitchWeapon(int ped, bool toggle)
		{
			if (setPedCanSwitchWeapon == null) setPedCanSwitchWeapon = (Function) native.GetObjectProperty("setPedCanSwitchWeapon");
			setPedCanSwitchWeapon.Call(native, ped, toggle);
		}

		public void SetPedDiesInstantlyInWater(int ped, bool toggle)
		{
			if (setPedDiesInstantlyInWater == null) setPedDiesInstantlyInWater = (Function) native.GetObjectProperty("setPedDiesInstantlyInWater");
			setPedDiesInstantlyInWater.Call(native, ped, toggle);
		}

		/// <summary>
		/// Only appears in lamar1 script.
		/// </summary>
		public void _0x1A330D297AAC6BC1(int ped, int p1)
		{
			if (__0x1A330D297AAC6BC1 == null) __0x1A330D297AAC6BC1 = (Function) native.GetObjectProperty("_0x1A330D297AAC6BC1");
			__0x1A330D297AAC6BC1.Call(native, ped, p1);
		}

		public void StopPedWeaponFiringWhenDropped(int ped)
		{
			if (stopPedWeaponFiringWhenDropped == null) stopPedWeaponFiringWhenDropped = (Function) native.GetObjectProperty("stopPedWeaponFiringWhenDropped");
			stopPedWeaponFiringWhenDropped.Call(native, ped);
		}

		public void SetScriptedAnimSeatOffset(int ped, double p1)
		{
			if (setScriptedAnimSeatOffset == null) setScriptedAnimSeatOffset = (Function) native.GetObjectProperty("setScriptedAnimSeatOffset");
			setScriptedAnimSeatOffset.Call(native, ped, p1);
		}

		/// <summary>
		/// 0 - Stationary (Will just stand in place)
		/// 1 - Defensive (Will try to find cover and very likely to blind fire)
		/// 2 - Offensive (Will attempt to charge at enemy but take cover as well)
		/// 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
		/// </summary>
		public void SetPedCombatMovement(int ped, int combatMovement)
		{
			if (setPedCombatMovement == null) setPedCombatMovement = (Function) native.GetObjectProperty("setPedCombatMovement");
			setPedCombatMovement.Call(native, ped, combatMovement);
		}

		public int GetPedCombatMovement(int ped)
		{
			if (getPedCombatMovement == null) getPedCombatMovement = (Function) native.GetObjectProperty("getPedCombatMovement");
			return (int) getPedCombatMovement.Call(native, ped);
		}

		/// <summary>
		/// 100 would equal attack
		/// less then 50ish would mean run away
		/// Only the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described in combatbehaviour.meta:
		/// 0: CA_Poor
		/// 1: CA_Average
		/// 2: CA_Professional
		/// Tested this and got the same results as the first explanation here. Could not find any difference between 0, 1 and 2.
		/// </summary>
		public void SetPedCombatAbility(int ped, int p1)
		{
			if (setPedCombatAbility == null) setPedCombatAbility = (Function) native.GetObjectProperty("setPedCombatAbility");
			setPedCombatAbility.Call(native, ped, p1);
		}

		/// <summary>
		/// Only the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described as AttackRange in combatbehaviour.meta:
		/// 0: CR_Near
		/// 1: CR_Medium
		/// 2: CR_Far
		/// </summary>
		public void SetPedCombatRange(int ped, int p1)
		{
			if (setPedCombatRange == null) setPedCombatRange = (Function) native.GetObjectProperty("setPedCombatRange");
			setPedCombatRange.Call(native, ped, p1);
		}

		public int GetPedCombatRange(int ped)
		{
			if (getPedCombatRange == null) getPedCombatRange = (Function) native.GetObjectProperty("getPedCombatRange");
			return (int) getPedCombatRange.Call(native, ped);
		}

		/// <summary>
		/// These combat attributes seem to be the same as the BehaviourFlags from combatbehaviour.meta.
		/// So far, these are the equivalents found:
		/// enum CombatAttributes
		/// {
		/// BF_CanUseCover = 0,
		/// BF_CanUseVehicles = 1,
		/// BF_CanDoDrivebys = 2,
		/// BF_CanLeaveVehicle = 3,
		/// BF_CanFightArmedPedsWhenNotArmed = 5,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x9F7794730795E019
		/// </summary>
		public void SetPedCombatAttributes(int ped, int attributeIndex, bool enabled)
		{
			if (setPedCombatAttributes == null) setPedCombatAttributes = (Function) native.GetObjectProperty("setPedCombatAttributes");
			setPedCombatAttributes.Call(native, ped, attributeIndex, enabled);
		}

		/// <summary>
		/// Only 1 and 2 appear in the scripts. combatbehaviour.meta seems to only have TLR_SearchForTarget for all peds, but we don't know if that's 1 or 2.
		/// </summary>
		public void SetPedTargetLossResponse(int ped, int responseType)
		{
			if (setPedTargetLossResponse == null) setPedTargetLossResponse = (Function) native.GetObjectProperty("setPedTargetLossResponse");
			setPedTargetLossResponse.Call(native, ped, responseType);
		}

		public bool IsPedPerformingMeleeAction(int ped)
		{
			if (isPedPerformingMeleeAction == null) isPedPerformingMeleeAction = (Function) native.GetObjectProperty("isPedPerformingMeleeAction");
			return (bool) isPedPerformingMeleeAction.Call(native, ped);
		}

		public bool IsPedPerformingStealthKill(int ped)
		{
			if (isPedPerformingStealthKill == null) isPedPerformingStealthKill = (Function) native.GetObjectProperty("isPedPerformingStealthKill");
			return (bool) isPedPerformingStealthKill.Call(native, ped);
		}

		public bool IsPedPerformingDependentComboLimit(int ped)
		{
			if (isPedPerformingDependentComboLimit == null) isPedPerformingDependentComboLimit = (Function) native.GetObjectProperty("isPedPerformingDependentComboLimit");
			return (bool) isPedPerformingDependentComboLimit.Call(native, ped);
		}

		public bool IsPedBeingStealthKilled(int ped)
		{
			if (isPedBeingStealthKilled == null) isPedBeingStealthKilled = (Function) native.GetObjectProperty("isPedBeingStealthKilled");
			return (bool) isPedBeingStealthKilled.Call(native, ped);
		}

		public int GetMeleeTargetForPed(int ped)
		{
			if (getMeleeTargetForPed == null) getMeleeTargetForPed = (Function) native.GetObjectProperty("getMeleeTargetForPed");
			return (int) getMeleeTargetForPed.Call(native, ped);
		}

		public bool WasPedKilledByStealth(int ped)
		{
			if (wasPedKilledByStealth == null) wasPedKilledByStealth = (Function) native.GetObjectProperty("wasPedKilledByStealth");
			return (bool) wasPedKilledByStealth.Call(native, ped);
		}

		public bool WasPedKilledByTakedown(int ped)
		{
			if (wasPedKilledByTakedown == null) wasPedKilledByTakedown = (Function) native.GetObjectProperty("wasPedKilledByTakedown");
			return (bool) wasPedKilledByTakedown.Call(native, ped);
		}

		public bool WasPedKnockedOut(int ped)
		{
			if (wasPedKnockedOut == null) wasPedKnockedOut = (Function) native.GetObjectProperty("wasPedKnockedOut");
			return (bool) wasPedKnockedOut.Call(native, ped);
		}

		/// <summary>
		/// bit 15 (0x8000) = force cower
		/// </summary>
		public void SetPedFleeAttributes(int ped, int attributeFlags, bool enable)
		{
			if (setPedFleeAttributes == null) setPedFleeAttributes = (Function) native.GetObjectProperty("setPedFleeAttributes");
			setPedFleeAttributes.Call(native, ped, attributeFlags, enable);
		}

		/// <summary>
		/// p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
		/// </summary>
		/// <param name="p1">Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.</param>
		public void SetPedCowerHash(int ped, string p1)
		{
			if (setPedCowerHash == null) setPedCowerHash = (Function) native.GetObjectProperty("setPedCowerHash");
			setPedCowerHash.Call(native, ped, p1);
		}

		/// <summary>
		/// SET_PED_STE*
		/// </summary>
		public void _0x2016C603D6B8987C(int ped, bool toggle)
		{
			if (__0x2016C603D6B8987C == null) __0x2016C603D6B8987C = (Function) native.GetObjectProperty("_0x2016C603D6B8987C");
			__0x2016C603D6B8987C.Call(native, ped, toggle);
		}

		public void SetPedSteersAroundPeds(int ped, bool toggle)
		{
			if (setPedSteersAroundPeds == null) setPedSteersAroundPeds = (Function) native.GetObjectProperty("setPedSteersAroundPeds");
			setPedSteersAroundPeds.Call(native, ped, toggle);
		}

		public void SetPedSteersAroundObjects(int ped, bool toggle)
		{
			if (setPedSteersAroundObjects == null) setPedSteersAroundObjects = (Function) native.GetObjectProperty("setPedSteersAroundObjects");
			setPedSteersAroundObjects.Call(native, ped, toggle);
		}

		public void SetPedSteersAroundVehicles(int ped, bool toggle)
		{
			if (setPedSteersAroundVehicles == null) setPedSteersAroundVehicles = (Function) native.GetObjectProperty("setPedSteersAroundVehicles");
			setPedSteersAroundVehicles.Call(native, ped, toggle);
		}

		public void _0xA9B61A329BFDCBEA(object p0, bool p1)
		{
			if (__0xA9B61A329BFDCBEA == null) __0xA9B61A329BFDCBEA = (Function) native.GetObjectProperty("_0xA9B61A329BFDCBEA");
			__0xA9B61A329BFDCBEA.Call(native, p0, p1);
		}

		public void SetPedIncreasedAvoidanceRadius(int ped)
		{
			if (setPedIncreasedAvoidanceRadius == null) setPedIncreasedAvoidanceRadius = (Function) native.GetObjectProperty("setPedIncreasedAvoidanceRadius");
			setPedIncreasedAvoidanceRadius.Call(native, ped);
		}

		public void SetPedBlocksPathingWhenDead(int ped, bool toggle)
		{
			if (setPedBlocksPathingWhenDead == null) setPedBlocksPathingWhenDead = (Function) native.GetObjectProperty("setPedBlocksPathingWhenDead");
			setPedBlocksPathingWhenDead.Call(native, ped, toggle);
		}

		public void _0xA52D5247A4227E14(object p0)
		{
			if (__0xA52D5247A4227E14 == null) __0xA52D5247A4227E14 = (Function) native.GetObjectProperty("_0xA52D5247A4227E14");
			__0xA52D5247A4227E14.Call(native, p0);
		}

		public bool IsAnyPedNearPoint(double x, double y, double z, double radius)
		{
			if (isAnyPedNearPoint == null) isAnyPedNearPoint = (Function) native.GetObjectProperty("isAnyPedNearPoint");
			return (bool) isAnyPedNearPoint.Call(native, x, y, z, radius);
		}

		/// <summary>
		/// Function.Call(Hash._0x2208438012482A1A, ped, 0, 0);
		/// This makes the ped have faster animations
		/// FORCE_*
		/// </summary>
		public void _0x2208438012482A1A(int ped, bool p1, bool p2)
		{
			if (__0x2208438012482A1A == null) __0x2208438012482A1A = (Function) native.GetObjectProperty("_0x2208438012482A1A");
			__0x2208438012482A1A.Call(native, ped, p1, p2);
		}

		public bool IsPedHeadingTowardsPosition(int ped, double x, double y, double z, double p4)
		{
			if (isPedHeadingTowardsPosition == null) isPedHeadingTowardsPosition = (Function) native.GetObjectProperty("isPedHeadingTowardsPosition");
			return (bool) isPedHeadingTowardsPosition.Call(native, ped, x, y, z, p4);
		}

		public void RequestPedVisibilityTracking(int ped)
		{
			if (requestPedVisibilityTracking == null) requestPedVisibilityTracking = (Function) native.GetObjectProperty("requestPedVisibilityTracking");
			requestPedVisibilityTracking.Call(native, ped);
		}

		public void RequestPedVehicleVisibilityTracking(int ped, bool p1)
		{
			if (requestPedVehicleVisibilityTracking == null) requestPedVehicleVisibilityTracking = (Function) native.GetObjectProperty("requestPedVehicleVisibilityTracking");
			requestPedVehicleVisibilityTracking.Call(native, ped, p1);
		}

		/// <summary>
		/// REQUEST_*
		/// </summary>
		public void _0xCD018C591F94CB43(int ped, bool p1)
		{
			if (__0xCD018C591F94CB43 == null) __0xCD018C591F94CB43 = (Function) native.GetObjectProperty("_0xCD018C591F94CB43");
			__0xCD018C591F94CB43.Call(native, ped, p1);
		}

		/// <summary>
		/// REQUEST_*
		/// </summary>
		public void _0x75BA1CB3B7D40CAF(int ped, bool p1)
		{
			if (__0x75BA1CB3B7D40CAF == null) __0x75BA1CB3B7D40CAF = (Function) native.GetObjectProperty("_0x75BA1CB3B7D40CAF");
			__0x75BA1CB3B7D40CAF.Call(native, ped, p1);
		}

		/// <summary>
		/// Target needs to be tracked.. won't work otherwise.
		/// </summary>
		/// <returns>returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.</returns>
		public bool IsTrackedPedVisible(int ped)
		{
			if (isTrackedPedVisible == null) isTrackedPedVisible = (Function) native.GetObjectProperty("isTrackedPedVisible");
			return (bool) isTrackedPedVisible.Call(native, ped);
		}

		/// <summary>
		/// GET_*
		/// </summary>
		public int _0x511F1A683387C7E2(int ped)
		{
			if (__0x511F1A683387C7E2 == null) __0x511F1A683387C7E2 = (Function) native.GetObjectProperty("_0x511F1A683387C7E2");
			return (int) __0x511F1A683387C7E2.Call(native, ped);
		}

		public bool IsPedTracked(int ped)
		{
			if (isPedTracked == null) isPedTracked = (Function) native.GetObjectProperty("isPedTracked");
			return (bool) isPedTracked.Call(native, ped);
		}

		public bool HasPedReceivedEvent(int ped, int eventId)
		{
			if (hasPedReceivedEvent == null) hasPedReceivedEvent = (Function) native.GetObjectProperty("hasPedReceivedEvent");
			return (bool) hasPedReceivedEvent.Call(native, ped, eventId);
		}

		public bool CanPedSeeHatedPed(int ped1, int ped2)
		{
			if (canPedSeeHatedPed == null) canPedSeeHatedPed = (Function) native.GetObjectProperty("canPedSeeHatedPed");
			return (bool) canPedSeeHatedPed.Call(native, ped1, ped2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0x9C6A6C19B6C0C496(int ped, int p1)
		{
			if (__0x9C6A6C19B6C0C496 == null) __0x9C6A6C19B6C0C496 = (Function) native.GetObjectProperty("_0x9C6A6C19B6C0C496");
			var results = (Array) __0x9C6A6C19B6C0C496.Call(native, ped, p1);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0x2DFC81C9B9608549(int ped, int p1)
		{
			if (__0x2DFC81C9B9608549 == null) __0x2DFC81C9B9608549 = (Function) native.GetObjectProperty("_0x2DFC81C9B9608549");
			var results = (Array) __0x2DFC81C9B9608549.Call(native, ped, p1);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// no bone= -1
		/// boneIds:
		/// SKEL_ROOT = 0x0,
		/// SKEL_Pelvis = 0x2e28,
		/// SKEL_L_Thigh = 0xe39f,
		/// SKEL_L_Calf = 0xf9bb,
		/// SKEL_L_Foot = 0x3779,
		/// SKEL_L_Toe0 = 0x83c,
		/// IK_L_Foot = 0xfedd,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x3F428D08BE5AAE31
		/// </summary>
		public int GetPedBoneIndex(int ped, int boneId)
		{
			if (getPedBoneIndex == null) getPedBoneIndex = (Function) native.GetObjectProperty("getPedBoneIndex");
			return (int) getPedBoneIndex.Call(native, ped, boneId);
		}

		public int GetPedRagdollBoneIndex(int ped, int bone)
		{
			if (getPedRagdollBoneIndex == null) getPedRagdollBoneIndex = (Function) native.GetObjectProperty("getPedRagdollBoneIndex");
			return (int) getPedRagdollBoneIndex.Call(native, ped, bone);
		}

		/// <summary>
		/// Values look to be between 0.0 and 1.0
		/// From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
		/// You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
		/// </summary>
		public void SetPedEnveffScale(int ped, double value)
		{
			if (setPedEnveffScale == null) setPedEnveffScale = (Function) native.GetObjectProperty("setPedEnveffScale");
			setPedEnveffScale.Call(native, ped, value);
		}

		public double GetPedEnveffScale(int ped)
		{
			if (getPedEnveffScale == null) getPedEnveffScale = (Function) native.GetObjectProperty("getPedEnveffScale");
			return (double) getPedEnveffScale.Call(native, ped);
		}

		public void SetEnablePedEnveffScale(int ped, bool toggle)
		{
			if (setEnablePedEnveffScale == null) setEnablePedEnveffScale = (Function) native.GetObjectProperty("setEnablePedEnveffScale");
			setEnablePedEnveffScale.Call(native, ped, toggle);
		}

		/// <summary>
		/// In agency_heist3b.c4, its like this 90% of the time:
		/// PED::_110F526AB784111F(ped, 0.099);
		/// PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
		/// PED::_D69411AA0CEBF9E9(ped, 87, 81, 68);
		/// PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
		/// and its like this 10% of the time:
		/// PED::_110F526AB784111F(ped, 0.2);
		/// PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
		/// PED::_D69411AA0CEBF9E9(ped, 74, 69, 60);
		/// PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
		/// </summary>
		public void _0x110F526AB784111F(int ped, double p1)
		{
			if (__0x110F526AB784111F == null) __0x110F526AB784111F = (Function) native.GetObjectProperty("_0x110F526AB784111F");
			__0x110F526AB784111F.Call(native, ped, p1);
		}

		/// <summary>
		/// Something related to the environmental effects natives.
		/// In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
		/// </summary>
		/// <param name="p1">In the "agency_heist3b" script, p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}</param>
		public void SetPedEnveffColorModulator(int ped, int p1, int p2, int p3)
		{
			if (setPedEnveffColorModulator == null) setPedEnveffColorModulator = (Function) native.GetObjectProperty("setPedEnveffColorModulator");
			setPedEnveffColorModulator.Call(native, ped, p1, p2, p3);
		}

		public void SetPedReflectionIntensity(int ped, double intensity)
		{
			if (setPedReflectionIntensity == null) setPedReflectionIntensity = (Function) native.GetObjectProperty("setPedReflectionIntensity");
			setPedReflectionIntensity.Call(native, ped, intensity);
		}

		public double GetPedReflectionIntensity(int ped)
		{
			if (getPedReflectionIntensity == null) getPedReflectionIntensity = (Function) native.GetObjectProperty("getPedReflectionIntensity");
			return (double) getPedReflectionIntensity.Call(native, ped);
		}

		public bool IsPedShaderEffectValid(int ped)
		{
			if (isPedShaderEffectValid == null) isPedShaderEffectValid = (Function) native.GetObjectProperty("isPedShaderEffectValid");
			return (bool) isPedShaderEffectValid.Call(native, ped);
		}

		public void _0xE906EC930F5FE7C8(object p0, object p1)
		{
			if (__0xE906EC930F5FE7C8 == null) __0xE906EC930F5FE7C8 = (Function) native.GetObjectProperty("_0xE906EC930F5FE7C8");
			__0xE906EC930F5FE7C8.Call(native, p0, p1);
		}

		public void _0x1216E0BFA72CC703(object p0, object p1)
		{
			if (__0x1216E0BFA72CC703 == null) __0x1216E0BFA72CC703 = (Function) native.GetObjectProperty("_0x1216E0BFA72CC703");
			__0x1216E0BFA72CC703.Call(native, p0, p1);
		}

		public void _0x2B5AA717A181FB4C(object p0, bool p1)
		{
			if (__0x2B5AA717A181FB4C == null) __0x2B5AA717A181FB4C = (Function) native.GetObjectProperty("_0x2B5AA717A181FB4C");
			__0x2B5AA717A181FB4C.Call(native, p0, p1);
		}

		/// <summary>
		/// if (!$B8B52E498014F5B0(PLAYER::PLAYER_PED_ID())) {
		/// </summary>
		public bool _0xB8B52E498014F5B0(int ped)
		{
			if (__0xB8B52E498014F5B0 == null) __0xB8B52E498014F5B0 = (Function) native.GetObjectProperty("_0xB8B52E498014F5B0");
			return (bool) __0xB8B52E498014F5B0.Call(native, ped);
		}

		/// <summary>
		/// p6 always 2 (but it doesnt seem to matter...)
		/// roll and pitch 0
		/// yaw to Ped.rotation
		/// </summary>
		/// <param name="roll">and pitch 0</param>
		/// <param name="yaw">to Ped.rotation</param>
		/// <param name="p6">always 2 (but it doesnt seem to matter...)</param>
		public int CreateSynchronizedScene(double x, double y, double z, double roll, double pitch, double yaw, int p6)
		{
			if (createSynchronizedScene == null) createSynchronizedScene = (Function) native.GetObjectProperty("createSynchronizedScene");
			return (int) createSynchronizedScene.Call(native, x, y, z, roll, pitch, yaw, p6);
		}

		public int CreateSynchronizedScene2(double x, double y, double z, double radius, int @object)
		{
			if (createSynchronizedScene2 == null) createSynchronizedScene2 = (Function) native.GetObjectProperty("createSynchronizedScene2");
			return (int) createSynchronizedScene2.Call(native, x, y, z, radius, @object);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if a synchronized scene is running</returns>
		public bool IsSynchronizedSceneRunning(int sceneId)
		{
			if (isSynchronizedSceneRunning == null) isSynchronizedSceneRunning = (Function) native.GetObjectProperty("isSynchronizedSceneRunning");
			return (bool) isSynchronizedSceneRunning.Call(native, sceneId);
		}

		public void SetSynchronizedSceneOrigin(int sceneID, double x, double y, double z, double roll, double pitch, double yaw, bool p7)
		{
			if (setSynchronizedSceneOrigin == null) setSynchronizedSceneOrigin = (Function) native.GetObjectProperty("setSynchronizedSceneOrigin");
			setSynchronizedSceneOrigin.Call(native, sceneID, x, y, z, roll, pitch, yaw, p7);
		}

		public void SetSynchronizedScenePhase(int sceneID, double phase)
		{
			if (setSynchronizedScenePhase == null) setSynchronizedScenePhase = (Function) native.GetObjectProperty("setSynchronizedScenePhase");
			setSynchronizedScenePhase.Call(native, sceneID, phase);
		}

		public double GetSynchronizedScenePhase(int sceneID)
		{
			if (getSynchronizedScenePhase == null) getSynchronizedScenePhase = (Function) native.GetObjectProperty("getSynchronizedScenePhase");
			return (double) getSynchronizedScenePhase.Call(native, sceneID);
		}

		public void SetSynchronizedSceneRate(int sceneID, double rate)
		{
			if (setSynchronizedSceneRate == null) setSynchronizedSceneRate = (Function) native.GetObjectProperty("setSynchronizedSceneRate");
			setSynchronizedSceneRate.Call(native, sceneID, rate);
		}

		public double GetSynchronizedSceneRate(int sceneID)
		{
			if (getSynchronizedSceneRate == null) getSynchronizedSceneRate = (Function) native.GetObjectProperty("getSynchronizedSceneRate");
			return (double) getSynchronizedSceneRate.Call(native, sceneID);
		}

		public void SetSynchronizedSceneLooped(int sceneID, bool toggle)
		{
			if (setSynchronizedSceneLooped == null) setSynchronizedSceneLooped = (Function) native.GetObjectProperty("setSynchronizedSceneLooped");
			setSynchronizedSceneLooped.Call(native, sceneID, toggle);
		}

		public bool IsSynchronizedSceneLooped(int sceneID)
		{
			if (isSynchronizedSceneLooped == null) isSynchronizedSceneLooped = (Function) native.GetObjectProperty("isSynchronizedSceneLooped");
			return (bool) isSynchronizedSceneLooped.Call(native, sceneID);
		}

		public void SetSynchronizedSceneOcclusionPortal(object sceneID, bool p1)
		{
			if (setSynchronizedSceneOcclusionPortal == null) setSynchronizedSceneOcclusionPortal = (Function) native.GetObjectProperty("setSynchronizedSceneOcclusionPortal");
			setSynchronizedSceneOcclusionPortal.Call(native, sceneID, p1);
		}

		/// <summary>
		/// IS_S*
		/// </summary>
		public bool _0x7F2F4F13AC5257EF(object p0)
		{
			if (__0x7F2F4F13AC5257EF == null) __0x7F2F4F13AC5257EF = (Function) native.GetObjectProperty("_0x7F2F4F13AC5257EF");
			return (bool) __0x7F2F4F13AC5257EF.Call(native, p0);
		}

		public void AttachSynchronizedSceneToEntity(int sceneID, int entity, int boneIndex)
		{
			if (attachSynchronizedSceneToEntity == null) attachSynchronizedSceneToEntity = (Function) native.GetObjectProperty("attachSynchronizedSceneToEntity");
			attachSynchronizedSceneToEntity.Call(native, sceneID, entity, boneIndex);
		}

		public void DetachSynchronizedScene(int sceneID)
		{
			if (detachSynchronizedScene == null) detachSynchronizedScene = (Function) native.GetObjectProperty("detachSynchronizedScene");
			detachSynchronizedScene.Call(native, sceneID);
		}

		public void DisposeSynchronizedScene(int scene)
		{
			if (disposeSynchronizedScene == null) disposeSynchronizedScene = (Function) native.GetObjectProperty("disposeSynchronizedScene");
			disposeSynchronizedScene.Call(native, scene);
		}

		/// <summary>
		/// Some motionstate hashes are
		/// 0xec17e58 (standing idle), 0xbac0f10b (nothing?), 0x3f67c6af (aiming with pistol 2-h), 0x422d7a25 (stealth), 0xbd8817db, 0x916e828c
		/// and those for the strings
		/// "motionstate_idle", "motionstate_walk", "motionstate_run", "motionstate_actionmode_idle", and "motionstate_actionmode_walk".
		/// Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in the scripts. p4 is very rarely something other than 0.
		/// [31/03/2017] ins1de :
		/// enum MotionState
		/// {
		/// StopRunning = -530524,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xF28965D04F570DCA
		/// </summary>
		/// <param name="p4">Regarding p2, p3 and Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in the scripts. p4 is very rarely something other than 0.</param>
		public bool ForcePedMotionState(int ped, int motionStateHash, bool p2, int p3, bool p4)
		{
			if (forcePedMotionState == null) forcePedMotionState = (Function) native.GetObjectProperty("forcePedMotionState");
			return (bool) forcePedMotionState.Call(native, ped, motionStateHash, p2, p3, p4);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) _0xF60165E1D2C5370B(int ped, object p1, object p2)
		{
			if (__0xF60165E1D2C5370B == null) __0xF60165E1D2C5370B = (Function) native.GetObjectProperty("_0xF60165E1D2C5370B");
			var results = (Array) __0xF60165E1D2C5370B.Call(native, ped, p1, p2);
			return ((bool) results[0], results[1], results[2]);
		}

		public void SetPedMaxMoveBlendRatio(int ped, double value)
		{
			if (setPedMaxMoveBlendRatio == null) setPedMaxMoveBlendRatio = (Function) native.GetObjectProperty("setPedMaxMoveBlendRatio");
			setPedMaxMoveBlendRatio.Call(native, ped, value);
		}

		public void SetPedMinMoveBlendRatio(int ped, double value)
		{
			if (setPedMinMoveBlendRatio == null) setPedMinMoveBlendRatio = (Function) native.GetObjectProperty("setPedMinMoveBlendRatio");
			setPedMinMoveBlendRatio.Call(native, ped, value);
		}

		/// <summary>
		/// Min: 0.00
		/// Max: 10.00
		/// Can be used in combo with fast run cheat.
		/// When value is set to 10.00:
		/// Sprinting without fast run cheat: 66 m/s
		/// Sprinting with fast run cheat: 77 m/s
		/// Does not need to be looped!
		/// Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
		/// </summary>
		public void SetPedMoveRateOverride(int ped, double value)
		{
			if (setPedMoveRateOverride == null) setPedMoveRateOverride = (Function) native.GetObjectProperty("setPedMoveRateOverride");
			setPedMoveRateOverride.Call(native, ped, value);
		}

		public void _0x0B3E35AC043707D9(object p0, object p1)
		{
			if (__0x0B3E35AC043707D9 == null) __0x0B3E35AC043707D9 = (Function) native.GetObjectProperty("_0x0B3E35AC043707D9");
			__0x0B3E35AC043707D9.Call(native, p0, p1);
		}

		/// <summary>
		/// Checks if the specified unknown flag is set in the ped's model.
		/// The engine itself seems to exclusively check for flags 1 and 4 (Might be inlined code of the check that checks for other flags).
		/// Game scripts exclusively check for flags 1 and 4.
		/// </summary>
		public bool _0x46B05BCAE43856B0(int ped, int flag)
		{
			if (__0x46B05BCAE43856B0 == null) __0x46B05BCAE43856B0 = (Function) native.GetObjectProperty("_0x46B05BCAE43856B0");
			return (bool) __0x46B05BCAE43856B0.Call(native, ped, flag);
		}

		/// <summary>
		/// See below for usage information.
		/// This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
		/// //Setup the array
		/// const int numElements = 10;
		/// const int arrSize = numElements * 2 + 2;
		/// Any veh[arrSize];
		/// //0 index is the size of the array
		/// veh[0] = numElements;
		/// int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
		/// See NativeDB for reference: http://natives.altv.mp/#/0xCFF869CBFA210D82
		/// </summary>
		/// <returns>Array<int, int> Returns size of array, passed into the second variable.</returns>
		public (int, int) GetPedNearbyVehicles(int ped, int sizeAndVehs)
		{
			if (getPedNearbyVehicles == null) getPedNearbyVehicles = (Function) native.GetObjectProperty("getPedNearbyVehicles");
			var results = (Array) getPedNearbyVehicles.Call(native, ped, sizeAndVehs);
			return ((int) results[0], (int) results[1]);
		}

		/// <summary>
		/// sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
		/// ignore - ped type to ignore
		/// Return value is the number of peds found and added to the array passed.
		/// -----------------------------------
		/// To make this work in most menu bases at least in C++ do it like so,
		/// Formatted Example: pastebin.com/D8an9wwp
		/// -----------------------------------
		/// Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
		/// </summary>
		/// <param name="sizeAndPeds">is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.</param>
		/// <param name="ignore">ped type to ignore</param>
		/// <returns>Array<int, int></returns>
		public (int, int) GetPedNearbyPeds(int ped, int sizeAndPeds, int ignore)
		{
			if (getPedNearbyPeds == null) getPedNearbyPeds = (Function) native.GetObjectProperty("getPedNearbyPeds");
			var results = (Array) getPedNearbyPeds.Call(native, ped, sizeAndPeds, ignore);
			return ((int) results[0], (int) results[1]);
		}

		/// <summary>
		/// HAS_*
		/// </summary>
		public bool HasStreamedPedAssetsLoaded(int ped)
		{
			if (hasStreamedPedAssetsLoaded == null) hasStreamedPedAssetsLoaded = (Function) native.GetObjectProperty("hasStreamedPedAssetsLoaded");
			return (bool) hasStreamedPedAssetsLoaded.Call(native, ped);
		}

		public bool IsPedUsingActionMode(int ped)
		{
			if (isPedUsingActionMode == null) isPedUsingActionMode = (Function) native.GetObjectProperty("isPedUsingActionMode");
			return (bool) isPedUsingActionMode.Call(native, ped);
		}

		/// <summary>
		/// p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
		/// </summary>
		/// <param name="p2">is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".</param>
		public void SetPedUsingActionMode(int ped, bool p1, int p2, string action)
		{
			if (setPedUsingActionMode == null) setPedUsingActionMode = (Function) native.GetObjectProperty("setPedUsingActionMode");
			setPedUsingActionMode.Call(native, ped, p1, p2, action);
		}

		/// <summary>
		/// name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
		/// </summary>
		/// <param name="name">"MP_FEMALE_ACTION" found multiple times in the b617d scripts.</param>
		public void SetMovementModeOverride(int ped, string name)
		{
			if (setMovementModeOverride == null) setMovementModeOverride = (Function) native.GetObjectProperty("setMovementModeOverride");
			setMovementModeOverride.Call(native, ped, name);
		}

		/// <summary>
		/// Overrides the ped's collision capsule radius for the current tick.
		/// Must be called every tick to be effective.
		/// Setting this to 0.001 will allow warping through some objects.
		/// </summary>
		public void SetPedCapsule(int ped, double value)
		{
			if (setPedCapsule == null) setPedCapsule = (Function) native.GetObjectProperty("setPedCapsule");
			setPedCapsule.Call(native, ped, value);
		}

		/// <summary>
		/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		/// </summary>
		public int RegisterPedheadshot(int ped)
		{
			if (registerPedheadshot == null) registerPedheadshot = (Function) native.GetObjectProperty("registerPedheadshot");
			return (int) registerPedheadshot.Call(native, ped);
		}

		public int RegisterPedheadshot3(int ped)
		{
			if (registerPedheadshot3 == null) registerPedheadshot3 = (Function) native.GetObjectProperty("registerPedheadshot3");
			return (int) registerPedheadshot3.Call(native, ped);
		}

		public int RegisterPedheadshotTransparent(int ped)
		{
			if (registerPedheadshotTransparent == null) registerPedheadshotTransparent = (Function) native.GetObjectProperty("registerPedheadshotTransparent");
			return (int) registerPedheadshotTransparent.Call(native, ped);
		}

		/// <summary>
		/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		/// </summary>
		public void UnregisterPedheadshot(int id)
		{
			if (unregisterPedheadshot == null) unregisterPedheadshot = (Function) native.GetObjectProperty("unregisterPedheadshot");
			unregisterPedheadshot.Call(native, id);
		}

		/// <summary>
		/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		/// </summary>
		public bool IsPedheadshotValid(int id)
		{
			if (isPedheadshotValid == null) isPedheadshotValid = (Function) native.GetObjectProperty("isPedheadshotValid");
			return (bool) isPedheadshotValid.Call(native, id);
		}

		/// <summary>
		/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		/// </summary>
		public bool IsPedheadshotReady(int id)
		{
			if (isPedheadshotReady == null) isPedheadshotReady = (Function) native.GetObjectProperty("isPedheadshotReady");
			return (bool) isPedheadshotReady.Call(native, id);
		}

		/// <summary>
		/// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		/// </summary>
		public string GetPedheadshotTxdString(int id)
		{
			if (getPedheadshotTxdString == null) getPedheadshotTxdString = (Function) native.GetObjectProperty("getPedheadshotTxdString");
			return (string) getPedheadshotTxdString.Call(native, id);
		}

		public bool RequestPedheadshotImgUpload(int id)
		{
			if (requestPedheadshotImgUpload == null) requestPedheadshotImgUpload = (Function) native.GetObjectProperty("requestPedheadshotImgUpload");
			return (bool) requestPedheadshotImgUpload.Call(native, id);
		}

		public void ReleasePedheadshotImgUpload(int id)
		{
			if (releasePedheadshotImgUpload == null) releasePedheadshotImgUpload = (Function) native.GetObjectProperty("releasePedheadshotImgUpload");
			releasePedheadshotImgUpload.Call(native, id);
		}

		public bool IsPedheadshotImgUploadAvailable()
		{
			if (isPedheadshotImgUploadAvailable == null) isPedheadshotImgUploadAvailable = (Function) native.GetObjectProperty("isPedheadshotImgUploadAvailable");
			return (bool) isPedheadshotImgUploadAvailable.Call(native);
		}

		public bool HasPedheadshotImgUploadFailed()
		{
			if (hasPedheadshotImgUploadFailed == null) hasPedheadshotImgUploadFailed = (Function) native.GetObjectProperty("hasPedheadshotImgUploadFailed");
			return (bool) hasPedheadshotImgUploadFailed.Call(native);
		}

		public bool HasPedheadshotImgUploadSucceeded()
		{
			if (hasPedheadshotImgUploadSucceeded == null) hasPedheadshotImgUploadSucceeded = (Function) native.GetObjectProperty("hasPedheadshotImgUploadSucceeded");
			return (bool) hasPedheadshotImgUploadSucceeded.Call(native);
		}

		public void SetPedHeatscaleOverride(int ped, double heatScale)
		{
			if (setPedHeatscaleOverride == null) setPedHeatscaleOverride = (Function) native.GetObjectProperty("setPedHeatscaleOverride");
			setPedHeatscaleOverride.Call(native, ped, heatScale);
		}

		public void DisablePedHeatscaleOverride(object p0)
		{
			if (disablePedHeatscaleOverride == null) disablePedHeatscaleOverride = (Function) native.GetObjectProperty("disablePedHeatscaleOverride");
			disablePedHeatscaleOverride.Call(native, p0);
		}

		public void _0x2DF9038C90AD5264(double p0, double p1, double p2, double p3, double p4, int interiorFlags, double scale, int duration)
		{
			if (__0x2DF9038C90AD5264 == null) __0x2DF9038C90AD5264 = (Function) native.GetObjectProperty("_0x2DF9038C90AD5264");
			__0x2DF9038C90AD5264.Call(native, p0, p1, p2, p3, p4, interiorFlags, scale, duration);
		}

		public void _0xB2AFF10216DEFA2F(double x, double y, double z, double p3, double p4, double p5, double p6, int interiorFlags, double scale, int duration)
		{
			if (__0xB2AFF10216DEFA2F == null) __0xB2AFF10216DEFA2F = (Function) native.GetObjectProperty("_0xB2AFF10216DEFA2F");
			__0xB2AFF10216DEFA2F.Call(native, x, y, z, p3, p4, p5, p6, interiorFlags, scale, duration);
		}

		public void _0xFEE4A5459472A9F8()
		{
			if (__0xFEE4A5459472A9F8 == null) __0xFEE4A5459472A9F8 = (Function) native.GetObjectProperty("_0xFEE4A5459472A9F8");
			__0xFEE4A5459472A9F8.Call(native);
		}

		public object _0x3C67506996001F5E()
		{
			if (__0x3C67506996001F5E == null) __0x3C67506996001F5E = (Function) native.GetObjectProperty("_0x3C67506996001F5E");
			return __0x3C67506996001F5E.Call(native);
		}

		public object _0xA586FBEB32A53DBB()
		{
			if (__0xA586FBEB32A53DBB == null) __0xA586FBEB32A53DBB = (Function) native.GetObjectProperty("_0xA586FBEB32A53DBB");
			return __0xA586FBEB32A53DBB.Call(native);
		}

		public object _0xF445DE8DA80A1792()
		{
			if (__0xF445DE8DA80A1792 == null) __0xF445DE8DA80A1792 = (Function) native.GetObjectProperty("_0xF445DE8DA80A1792");
			return __0xF445DE8DA80A1792.Call(native);
		}

		public object _0xA635C11B8C44AFC2()
		{
			if (__0xA635C11B8C44AFC2 == null) __0xA635C11B8C44AFC2 = (Function) native.GetObjectProperty("_0xA635C11B8C44AFC2");
			return __0xA635C11B8C44AFC2.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object></returns>
		public (object, object, object, object) _0x280C7E3AC7F56E90(object p0, object p1, object p2, object p3)
		{
			if (__0x280C7E3AC7F56E90 == null) __0x280C7E3AC7F56E90 = (Function) native.GetObjectProperty("_0x280C7E3AC7F56E90");
			var results = (Array) __0x280C7E3AC7F56E90.Call(native, p0, p1, p2, p3);
			return (results[0], results[1], results[2], results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) _0xB782F8238512BAD5(object p0, object p1)
		{
			if (__0xB782F8238512BAD5 == null) __0xB782F8238512BAD5 = (Function) native.GetObjectProperty("_0xB782F8238512BAD5");
			var results = (Array) __0xB782F8238512BAD5.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		public void SetIkTarget(int ped, int ikIndex, int entityLookAt, int boneLookAt, double offsetX, double offsetY, double offsetZ, object p7, int blendInDuration, int blendOutDuration)
		{
			if (setIkTarget == null) setIkTarget = (Function) native.GetObjectProperty("setIkTarget");
			setIkTarget.Call(native, ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
		}

		/// <summary>
		/// FORCE_*
		/// </summary>
		public void _0xED3C76ADFA6D07C4(int ped)
		{
			if (__0xED3C76ADFA6D07C4 == null) __0xED3C76ADFA6D07C4 = (Function) native.GetObjectProperty("_0xED3C76ADFA6D07C4");
			__0xED3C76ADFA6D07C4.Call(native, ped);
		}

		public void RequestActionModeAsset(string asset)
		{
			if (requestActionModeAsset == null) requestActionModeAsset = (Function) native.GetObjectProperty("requestActionModeAsset");
			requestActionModeAsset.Call(native, asset);
		}

		public bool HasActionModeAssetLoaded(string asset)
		{
			if (hasActionModeAssetLoaded == null) hasActionModeAssetLoaded = (Function) native.GetObjectProperty("hasActionModeAssetLoaded");
			return (bool) hasActionModeAssetLoaded.Call(native, asset);
		}

		public void RemoveActionModeAsset(string asset)
		{
			if (removeActionModeAsset == null) removeActionModeAsset = (Function) native.GetObjectProperty("removeActionModeAsset");
			removeActionModeAsset.Call(native, asset);
		}

		public void RequestStealthModeAsset(string asset)
		{
			if (requestStealthModeAsset == null) requestStealthModeAsset = (Function) native.GetObjectProperty("requestStealthModeAsset");
			requestStealthModeAsset.Call(native, asset);
		}

		public bool HasStealthModeAssetLoaded(string asset)
		{
			if (hasStealthModeAssetLoaded == null) hasStealthModeAssetLoaded = (Function) native.GetObjectProperty("hasStealthModeAssetLoaded");
			return (bool) hasStealthModeAssetLoaded.Call(native, asset);
		}

		public void RemoveStealthModeAsset(string asset)
		{
			if (removeStealthModeAsset == null) removeStealthModeAsset = (Function) native.GetObjectProperty("removeStealthModeAsset");
			removeStealthModeAsset.Call(native, asset);
		}

		public void SetPedLodMultiplier(int ped, double multiplier)
		{
			if (setPedLodMultiplier == null) setPedLodMultiplier = (Function) native.GetObjectProperty("setPedLodMultiplier");
			setPedLodMultiplier.Call(native, ped, multiplier);
		}

		/// <summary>
		/// SET_PED_CAN_*
		/// </summary>
		public void _0xE861D0B05C7662B8(int ped, bool p1, int p2)
		{
			if (__0xE861D0B05C7662B8 == null) __0xE861D0B05C7662B8 = (Function) native.GetObjectProperty("_0xE861D0B05C7662B8");
			__0xE861D0B05C7662B8.Call(native, ped, p1, p2);
		}

		public void SetForceFootstepUpdate(int ped, bool toggle)
		{
			if (setForceFootstepUpdate == null) setForceFootstepUpdate = (Function) native.GetObjectProperty("setForceFootstepUpdate");
			setForceFootstepUpdate.Call(native, ped, toggle);
		}

		public void SetForceStepType(int ped, bool p1, int type, int p3)
		{
			if (setForceStepType == null) setForceStepType = (Function) native.GetObjectProperty("setForceStepType");
			setForceStepType.Call(native, ped, p1, type, p3);
		}

		public bool IsAnyHostilePedNearPoint(int ped, double x, double y, double z, double radius)
		{
			if (isAnyHostilePedNearPoint == null) isAnyHostilePedNearPoint = (Function) native.GetObjectProperty("isAnyHostilePedNearPoint");
			return (bool) isAnyHostilePedNearPoint.Call(native, ped, x, y, z, radius);
		}

		public void _0x820E9892A77E97CD(object p0, object p1)
		{
			if (__0x820E9892A77E97CD == null) __0x820E9892A77E97CD = (Function) native.GetObjectProperty("_0x820E9892A77E97CD");
			__0x820E9892A77E97CD.Call(native, p0, p1);
		}

		public bool _0x06087579E7AA85A9(object p0, object p1, double p2, double p3, double p4, double p5)
		{
			if (__0x06087579E7AA85A9 == null) __0x06087579E7AA85A9 = (Function) native.GetObjectProperty("_0x06087579E7AA85A9");
			return (bool) __0x06087579E7AA85A9.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void SetPopControlSphereThisFrame(object p0, object p1, object p2, object p3, object p4)
		{
			if (setPopControlSphereThisFrame == null) setPopControlSphereThisFrame = (Function) native.GetObjectProperty("setPopControlSphereThisFrame");
			setPopControlSphereThisFrame.Call(native, p0, p1, p2, p3, p4);
		}

		public void _0xD33DAA36272177C4(int ped)
		{
			if (__0xD33DAA36272177C4 == null) __0xD33DAA36272177C4 = (Function) native.GetObjectProperty("_0xD33DAA36272177C4");
			__0xD33DAA36272177C4.Call(native, ped);
		}

		public void _0x711794453CFD692B(object p0, object p1)
		{
			if (__0x711794453CFD692B == null) __0x711794453CFD692B = (Function) native.GetObjectProperty("_0x711794453CFD692B");
			__0x711794453CFD692B.Call(native, p0, p1);
		}

		public void _0x83A169EABCDB10A2(object p0, object p1)
		{
			if (__0x83A169EABCDB10A2 == null) __0x83A169EABCDB10A2 = (Function) native.GetObjectProperty("_0x83A169EABCDB10A2");
			__0x83A169EABCDB10A2.Call(native, p0, p1);
		}

		public void _0x288DF530C92DAD6F(object p0, double p1)
		{
			if (__0x288DF530C92DAD6F == null) __0x288DF530C92DAD6F = (Function) native.GetObjectProperty("_0x288DF530C92DAD6F");
			__0x288DF530C92DAD6F.Call(native, p0, p1);
		}

		/// <summary>
		/// IS_PED_*
		/// </summary>
		public bool _0x3795688A307E1EB6(int Ped)
		{
			if (__0x3795688A307E1EB6 == null) __0x3795688A307E1EB6 = (Function) native.GetObjectProperty("_0x3795688A307E1EB6");
			return (bool) __0x3795688A307E1EB6.Call(native, Ped);
		}

		public void _0x0F62619393661D6E(object p0, object p1, object p2)
		{
			if (__0x0F62619393661D6E == null) __0x0F62619393661D6E = (Function) native.GetObjectProperty("_0x0F62619393661D6E");
			__0x0F62619393661D6E.Call(native, p0, p1, p2);
		}

		public void _0xDFE68C4B787E1BFB(object p0)
		{
			if (__0xDFE68C4B787E1BFB == null) __0xDFE68C4B787E1BFB = (Function) native.GetObjectProperty("_0xDFE68C4B787E1BFB");
			__0xDFE68C4B787E1BFB.Call(native, p0);
		}

		public void SetEnableScubaGearLight(int ped, bool toggle)
		{
			if (setEnableScubaGearLight == null) setEnableScubaGearLight = (Function) native.GetObjectProperty("setEnableScubaGearLight");
			setEnableScubaGearLight.Call(native, ped, toggle);
		}

		public bool IsScubaGearLightEnabled(int ped)
		{
			if (isScubaGearLightEnabled == null) isScubaGearLightEnabled = (Function) native.GetObjectProperty("isScubaGearLightEnabled");
			return (bool) isScubaGearLightEnabled.Call(native, ped);
		}

		public void _0x637822DC2AFEEBF8(object p0)
		{
			if (__0x637822DC2AFEEBF8 == null) __0x637822DC2AFEEBF8 = (Function) native.GetObjectProperty("_0x637822DC2AFEEBF8");
			__0x637822DC2AFEEBF8.Call(native, p0);
		}

		/// <summary>
		/// SET_A*
		/// </summary>
		public void _0xFAB944D4D481ACCB(int ped, bool toggle)
		{
			if (__0xFAB944D4D481ACCB == null) __0xFAB944D4D481ACCB = (Function) native.GetObjectProperty("_0xFAB944D4D481ACCB");
			__0xFAB944D4D481ACCB.Call(native, ped, toggle);
		}

		/// <summary>
		/// Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
		/// __
		/// Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
		/// When attached, Position<vector> does not matter
		/// When attached, Angle<vector> does not matter
		/// Rope Type:
		/// 4 and bellow is a thick rope
		/// 5 and up are small metal wires
		/// 0 crashes the game
		/// See NativeDB for reference: http://natives.altv.mp/#/0xE832D760399EB220
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) AddRope(double x, double y, double z, double rotX, double rotY, double rotZ, double length, int ropeType, double maxLength, double minLength, double p10, bool p11, bool p12, bool rigid, double p14, bool breakWhenShot, object unkPtr)
		{
			if (addRope == null) addRope = (Function) native.GetObjectProperty("addRope");
			var results = (Array) addRope.Call(native, x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, p10, p11, p12, rigid, p14, breakWhenShot, unkPtr);
			return ((int) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) DeleteRope(int ropeId)
		{
			if (deleteRope == null) deleteRope = (Function) native.GetObjectProperty("deleteRope");
			var results = (Array) deleteRope.Call(native, ropeId);
			return (results[0], (int) results[1]);
		}

		public void DeleteChildRope(int ropeId)
		{
			if (deleteChildRope == null) deleteChildRope = (Function) native.GetObjectProperty("deleteChildRope");
			deleteChildRope.Call(native, ropeId);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) DoesRopeExist(int ropeId)
		{
			if (doesRopeExist == null) doesRopeExist = (Function) native.GetObjectProperty("doesRopeExist");
			var results = (Array) doesRopeExist.Call(native, ropeId);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) RopeDrawShadowEnabled(int ropeId, bool toggle)
		{
			if (ropeDrawShadowEnabled == null) ropeDrawShadowEnabled = (Function) native.GetObjectProperty("ropeDrawShadowEnabled");
			var results = (Array) ropeDrawShadowEnabled.Call(native, ropeId, toggle);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
		/// </summary>
		public void LoadRopeData(int ropeId, string rope_preset)
		{
			if (loadRopeData == null) loadRopeData = (Function) native.GetObjectProperty("loadRopeData");
			loadRopeData.Call(native, ropeId, rope_preset);
		}

		public void PinRopeVertex(int ropeId, int vertex, double x, double y, double z)
		{
			if (pinRopeVertex == null) pinRopeVertex = (Function) native.GetObjectProperty("pinRopeVertex");
			pinRopeVertex.Call(native, ropeId, vertex, x, y, z);
		}

		public void UnpinRopeVertex(int ropeId, int vertex)
		{
			if (unpinRopeVertex == null) unpinRopeVertex = (Function) native.GetObjectProperty("unpinRopeVertex");
			unpinRopeVertex.Call(native, ropeId, vertex);
		}

		public int GetRopeVertexCount(int ropeId)
		{
			if (getRopeVertexCount == null) getRopeVertexCount = (Function) native.GetObjectProperty("getRopeVertexCount");
			return (int) getRopeVertexCount.Call(native, ropeId);
		}

		/// <summary>
		/// Attaches entity 1 to entity 2.
		/// </summary>
		/// <returns>Array<void, object, object></returns>
		public (object, object, object) AttachEntitiesToRope(int ropeId, int ent1, int ent2, double ent1_x, double ent1_y, double ent1_z, double ent2_x, double ent2_y, double ent2_z, double length, bool p10, bool p11, object p12, object p13)
		{
			if (attachEntitiesToRope == null) attachEntitiesToRope = (Function) native.GetObjectProperty("attachEntitiesToRope");
			var results = (Array) attachEntitiesToRope.Call(native, ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, p12, p13);
			return (results[0], results[1], results[2]);
		}

		/// <summary>
		/// The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
		/// </summary>
		public void AttachRopeToEntity(int ropeId, int entity, double x, double y, double z, bool p5)
		{
			if (attachRopeToEntity == null) attachRopeToEntity = (Function) native.GetObjectProperty("attachRopeToEntity");
			attachRopeToEntity.Call(native, ropeId, entity, x, y, z, p5);
		}

		public void DetachRopeFromEntity(int ropeId, int entity)
		{
			if (detachRopeFromEntity == null) detachRopeFromEntity = (Function) native.GetObjectProperty("detachRopeFromEntity");
			detachRopeFromEntity.Call(native, ropeId, entity);
		}

		public void RopeSetUpdatePinverts(int ropeId)
		{
			if (ropeSetUpdatePinverts == null) ropeSetUpdatePinverts = (Function) native.GetObjectProperty("ropeSetUpdatePinverts");
			ropeSetUpdatePinverts.Call(native, ropeId);
		}

		public void RopeSetUpdateOrder(int ropeId, object p1)
		{
			if (ropeSetUpdateOrder == null) ropeSetUpdateOrder = (Function) native.GetObjectProperty("ropeSetUpdateOrder");
			ropeSetUpdateOrder.Call(native, ropeId, p1);
		}

		/// <summary>
		/// ROPE_*
		/// </summary>
		public void _0x36CCB9BE67B970FD(int ropeId, bool p1)
		{
			if (__0x36CCB9BE67B970FD == null) __0x36CCB9BE67B970FD = (Function) native.GetObjectProperty("_0x36CCB9BE67B970FD");
			__0x36CCB9BE67B970FD.Call(native, ropeId, p1);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0x84DE3B5FB3E666F0(int ropeId)
		{
			if (__0x84DE3B5FB3E666F0 == null) __0x84DE3B5FB3E666F0 = (Function) native.GetObjectProperty("_0x84DE3B5FB3E666F0");
			var results = (Array) __0x84DE3B5FB3E666F0.Call(native, ropeId);
			return ((bool) results[0], (int) results[1]);
		}

		public Vector3 GetRopeLastVertexCoord(int ropeId)
		{
			if (getRopeLastVertexCoord == null) getRopeLastVertexCoord = (Function) native.GetObjectProperty("getRopeLastVertexCoord");
			return JSObjectToVector3(getRopeLastVertexCoord.Call(native, ropeId));
		}

		public Vector3 GetRopeVertexCoord(int ropeId, int vertex)
		{
			if (getRopeVertexCoord == null) getRopeVertexCoord = (Function) native.GetObjectProperty("getRopeVertexCoord");
			return JSObjectToVector3(getRopeVertexCoord.Call(native, ropeId, vertex));
		}

		public void StartRopeWinding(int ropeId)
		{
			if (startRopeWinding == null) startRopeWinding = (Function) native.GetObjectProperty("startRopeWinding");
			startRopeWinding.Call(native, ropeId);
		}

		public void StopRopeWinding(int ropeId)
		{
			if (stopRopeWinding == null) stopRopeWinding = (Function) native.GetObjectProperty("stopRopeWinding");
			stopRopeWinding.Call(native, ropeId);
		}

		public void StartRopeUnwindingFront(int ropeId)
		{
			if (startRopeUnwindingFront == null) startRopeUnwindingFront = (Function) native.GetObjectProperty("startRopeUnwindingFront");
			startRopeUnwindingFront.Call(native, ropeId);
		}

		public void StopRopeUnwindingFront(int ropeId)
		{
			if (stopRopeUnwindingFront == null) stopRopeUnwindingFront = (Function) native.GetObjectProperty("stopRopeUnwindingFront");
			stopRopeUnwindingFront.Call(native, ropeId);
		}

		public void RopeConvertToSimple(int ropeId)
		{
			if (ropeConvertToSimple == null) ropeConvertToSimple = (Function) native.GetObjectProperty("ropeConvertToSimple");
			ropeConvertToSimple.Call(native, ropeId);
		}

		/// <summary>
		/// Loads rope textures for all ropes in the current scene.
		/// </summary>
		public void RopeLoadTextures()
		{
			if (ropeLoadTextures == null) ropeLoadTextures = (Function) native.GetObjectProperty("ropeLoadTextures");
			ropeLoadTextures.Call(native);
		}

		public bool RopeAreTexturesLoaded()
		{
			if (ropeAreTexturesLoaded == null) ropeAreTexturesLoaded = (Function) native.GetObjectProperty("ropeAreTexturesLoaded");
			return (bool) ropeAreTexturesLoaded.Call(native);
		}

		/// <summary>
		/// Unloads rope textures for all ropes in the current scene.
		/// </summary>
		public void RopeUnloadTextures()
		{
			if (ropeUnloadTextures == null) ropeUnloadTextures = (Function) native.GetObjectProperty("ropeUnloadTextures");
			ropeUnloadTextures.Call(native);
		}

		public bool DoesRopeBelongToThisScript(int ropeId)
		{
			if (doesRopeBelongToThisScript == null) doesRopeBelongToThisScript = (Function) native.GetObjectProperty("doesRopeBelongToThisScript");
			return (bool) doesRopeBelongToThisScript.Call(native, ropeId);
		}

		/// <summary>
		/// Most likely ROPE_ATTACH_*
		/// </summary>
		public void _0xBC0CE682D4D05650(int ropeId, int p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13)
		{
			if (__0xBC0CE682D4D05650 == null) __0xBC0CE682D4D05650 = (Function) native.GetObjectProperty("_0xBC0CE682D4D05650");
			__0xBC0CE682D4D05650.Call(native, ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
		}

		public void _0xB1B6216CA2E7B55E(object p0, bool p1, bool p2)
		{
			if (__0xB1B6216CA2E7B55E == null) __0xB1B6216CA2E7B55E = (Function) native.GetObjectProperty("_0xB1B6216CA2E7B55E");
			__0xB1B6216CA2E7B55E.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// ROPE_*
		/// </summary>
		public void _0xB743F735C03D7810(int ropeId, int p1)
		{
			if (__0xB743F735C03D7810 == null) __0xB743F735C03D7810 = (Function) native.GetObjectProperty("_0xB743F735C03D7810");
			__0xB743F735C03D7810.Call(native, ropeId, p1);
		}

		public double RopeGetDistanceBetweenEnds(int ropeId)
		{
			if (ropeGetDistanceBetweenEnds == null) ropeGetDistanceBetweenEnds = (Function) native.GetObjectProperty("ropeGetDistanceBetweenEnds");
			return (double) ropeGetDistanceBetweenEnds.Call(native, ropeId);
		}

		/// <summary>
		/// Forces a rope to a certain length.
		/// </summary>
		public void RopeForceLength(int ropeId, double length)
		{
			if (ropeForceLength == null) ropeForceLength = (Function) native.GetObjectProperty("ropeForceLength");
			ropeForceLength.Call(native, ropeId, length);
		}

		/// <summary>
		/// Reset a rope to a certain length.
		/// </summary>
		public void RopeResetLength(int ropeId, double length)
		{
			if (ropeResetLength == null) ropeResetLength = (Function) native.GetObjectProperty("ropeResetLength");
			ropeResetLength.Call(native, ropeId, length);
		}

		public void ApplyImpulseToCloth(double posX, double posY, double posZ, double vecX, double vecY, double vecZ, double impulse)
		{
			if (applyImpulseToCloth == null) applyImpulseToCloth = (Function) native.GetObjectProperty("applyImpulseToCloth");
			applyImpulseToCloth.Call(native, posX, posY, posZ, vecX, vecY, vecZ, impulse);
		}

		public void SetDamping(int entity, int vertex, double value)
		{
			if (setDamping == null) setDamping = (Function) native.GetObjectProperty("setDamping");
			setDamping.Call(native, entity, vertex, value);
		}

		public void ActivatePhysics(int entity)
		{
			if (activatePhysics == null) activatePhysics = (Function) native.GetObjectProperty("activatePhysics");
			activatePhysics.Call(native, entity);
		}

		public void SetCgoffset(int entity, double x, double y, double z)
		{
			if (setCgoffset == null) setCgoffset = (Function) native.GetObjectProperty("setCgoffset");
			setCgoffset.Call(native, entity, x, y, z);
		}

		public Vector3 GetCgoffset(int entity)
		{
			if (getCgoffset == null) getCgoffset = (Function) native.GetObjectProperty("getCgoffset");
			return JSObjectToVector3(getCgoffset.Call(native, entity));
		}

		public void SetCgAtBoundcenter(int entity)
		{
			if (setCgAtBoundcenter == null) setCgAtBoundcenter = (Function) native.GetObjectProperty("setCgAtBoundcenter");
			setCgAtBoundcenter.Call(native, entity);
		}

		public void BreakEntityGlass(int entity, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, object p9, bool p10)
		{
			if (breakEntityGlass == null) breakEntityGlass = (Function) native.GetObjectProperty("breakEntityGlass");
			breakEntityGlass.Call(native, entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		}

		/// <summary>
		/// GET_*
		/// </summary>
		public bool GetHasObjectFragInst(int @object)
		{
			if (getHasObjectFragInst == null) getHasObjectFragInst = (Function) native.GetObjectProperty("getHasObjectFragInst");
			return (bool) getHasObjectFragInst.Call(native, @object);
		}

		public void SetDisableBreaking(int @object, bool toggle)
		{
			if (setDisableBreaking == null) setDisableBreaking = (Function) native.GetObjectProperty("setDisableBreaking");
			setDisableBreaking.Call(native, @object, toggle);
		}

		/// <summary>
		/// RESET_*
		/// </summary>
		public void _0xCC6E963682533882(int @object)
		{
			if (__0xCC6E963682533882 == null) __0xCC6E963682533882 = (Function) native.GetObjectProperty("_0xCC6E963682533882");
			__0xCC6E963682533882.Call(native, @object);
		}

		public void SetDisableFragDamage(int @object, bool toggle)
		{
			if (setDisableFragDamage == null) setDisableFragDamage = (Function) native.GetObjectProperty("setDisableFragDamage");
			setDisableFragDamage.Call(native, @object, toggle);
		}

		public void SetEntityProofUnk(int entity, bool toggle)
		{
			if (setEntityProofUnk == null) setEntityProofUnk = (Function) native.GetObjectProperty("setEntityProofUnk");
			setEntityProofUnk.Call(native, entity, toggle);
		}

		/// <summary>
		/// SET_*
		/// </summary>
		public void _0x9EBD751E5787BAF2(bool p0)
		{
			if (__0x9EBD751E5787BAF2 == null) __0x9EBD751E5787BAF2 = (Function) native.GetObjectProperty("_0x9EBD751E5787BAF2");
			__0x9EBD751E5787BAF2.Call(native, p0);
		}

		/// <summary>
		/// SET_*
		/// </summary>
		public void _0xAA6A6098851C396F(bool p0)
		{
			if (__0xAA6A6098851C396F == null) __0xAA6A6098851C396F = (Function) native.GetObjectProperty("_0xAA6A6098851C396F");
			__0xAA6A6098851C396F.Call(native, p0);
		}

		public int GetPlayerPed(int player)
		{
			if (getPlayerPed == null) getPlayerPed = (Function) native.GetObjectProperty("getPlayerPed");
			return (int) getPlayerPed.Call(native, player);
		}

		/// <summary>
		/// Does the same like PLAYER::GET_PLAYER_PED
		/// </summary>
		public int GetPlayerPedScriptIndex(int player)
		{
			if (getPlayerPedScriptIndex == null) getPlayerPedScriptIndex = (Function) native.GetObjectProperty("getPlayerPedScriptIndex");
			return (int) getPlayerPedScriptIndex.Call(native, player);
		}

		/// <summary>
		/// Make sure to request the model first and wait until it has loaded.
		/// </summary>
		public void SetPlayerModel(int player, int model)
		{
			if (setPlayerModel == null) setPlayerModel = (Function) native.GetObjectProperty("setPlayerModel");
			setPlayerModel.Call(native, player, model);
		}

		public void ChangePlayerPed(int player, int ped, bool p2, bool resetDamage)
		{
			if (changePlayerPed == null) changePlayerPed = (Function) native.GetObjectProperty("changePlayerPed");
			changePlayerPed.Call(native, player, ped, p2, resetDamage);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetPlayerRgbColour(int player, int r, int g, int b)
		{
			if (getPlayerRgbColour == null) getPlayerRgbColour = (Function) native.GetObjectProperty("getPlayerRgbColour");
			var results = (Array) getPlayerRgbColour.Call(native, player, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// Gets the number of players in the current session.
		/// </summary>
		/// <returns>If not multiplayer, always returns 1.</returns>
		public int GetNumberOfPlayers()
		{
			if (getNumberOfPlayers == null) getNumberOfPlayers = (Function) native.GetObjectProperty("getNumberOfPlayers");
			return (int) getNumberOfPlayers.Call(native);
		}

		/// <summary>
		/// Gets the player's team.
		/// Does nothing in singleplayer.
		/// </summary>
		public int GetPlayerTeam(int player)
		{
			if (getPlayerTeam == null) getPlayerTeam = (Function) native.GetObjectProperty("getPlayerTeam");
			return (int) getPlayerTeam.Call(native, player);
		}

		/// <summary>
		/// Set player team on deathmatch and last team standing..
		/// </summary>
		public void SetPlayerTeam(int player, int team)
		{
			if (setPlayerTeam == null) setPlayerTeam = (Function) native.GetObjectProperty("setPlayerTeam");
			setPlayerTeam.Call(native, player, team);
		}

		public int GetNumberOfPlayersInTeam(int team)
		{
			if (getNumberOfPlayersInTeam == null) getNumberOfPlayersInTeam = (Function) native.GetObjectProperty("getNumberOfPlayersInTeam");
			return (int) getNumberOfPlayersInTeam.Call(native, team);
		}

		public string GetPlayerName(int player)
		{
			if (getPlayerName == null) getPlayerName = (Function) native.GetObjectProperty("getPlayerName");
			return (string) getPlayerName.Call(native, player);
		}

		/// <summary>
		/// Remnant from GTA IV. Does nothing in GTA V.
		/// </summary>
		public double GetWantedLevelRadius(int player)
		{
			if (getWantedLevelRadius == null) getWantedLevelRadius = (Function) native.GetObjectProperty("getWantedLevelRadius");
			return (double) getWantedLevelRadius.Call(native, player);
		}

		public Vector3 GetPlayerWantedCentrePosition(int player)
		{
			if (getPlayerWantedCentrePosition == null) getPlayerWantedCentrePosition = (Function) native.GetObjectProperty("getPlayerWantedCentrePosition");
			return JSObjectToVector3(getPlayerWantedCentrePosition.Call(native, player));
		}

		/// <summary>
		/// # Predominant call signatures
		/// PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));
		/// # Parameter value ranges
		/// P0: PLAYER::PLAYER_ID()
		/// P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
		/// P2: Not set by any call
		/// </summary>
		/// <param name="p2">P2: Not set by any call</param>
		/// <returns>Array<void, Vector3></returns>
		public (object, Vector3) SetPlayerWantedCentrePosition(int player, Vector3 position, bool p2, bool p3)
		{
			if (setPlayerWantedCentrePosition == null) setPlayerWantedCentrePosition = (Function) native.GetObjectProperty("setPlayerWantedCentrePosition");
			var results = (Array) setPlayerWantedCentrePosition.Call(native, player, position, p2, p3);
			return (results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// Drft
		/// </summary>
		public int GetWantedLevelThreshold(int wantedLevel)
		{
			if (getWantedLevelThreshold == null) getWantedLevelThreshold = (Function) native.GetObjectProperty("getWantedLevelThreshold");
			return (int) getWantedLevelThreshold.Call(native, wantedLevel);
		}

		/// <summary>
		/// Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
		/// wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
		/// disableNoMission-  Disables When Off Mission- appears to always be false
		/// </summary>
		/// <param name="wantedLevel">is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files</param>
		public void SetPlayerWantedLevel(int player, int wantedLevel, bool disableNoMission)
		{
			if (setPlayerWantedLevel == null) setPlayerWantedLevel = (Function) native.GetObjectProperty("setPlayerWantedLevel");
			setPlayerWantedLevel.Call(native, player, wantedLevel, disableNoMission);
		}

		/// <summary>
		/// p2 is always false in R* scripts
		/// </summary>
		/// <param name="p2">is always false in R* scripts</param>
		public void SetPlayerWantedLevelNoDrop(int player, int wantedLevel, bool p2)
		{
			if (setPlayerWantedLevelNoDrop == null) setPlayerWantedLevelNoDrop = (Function) native.GetObjectProperty("setPlayerWantedLevelNoDrop");
			setPlayerWantedLevelNoDrop.Call(native, player, wantedLevel, p2);
		}

		/// <summary>
		/// Forces any pending wanted level to be applied to the specified player immediately.
		/// Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
		/// Second parameter is unknown (always false).
		/// </summary>
		public void SetPlayerWantedLevelNow(int player, bool p1)
		{
			if (setPlayerWantedLevelNow == null) setPlayerWantedLevelNow = (Function) native.GetObjectProperty("setPlayerWantedLevelNow");
			setPlayerWantedLevelNow.Call(native, player, p1);
		}

		public bool ArePlayerFlashingStarsAboutToDrop(int player)
		{
			if (arePlayerFlashingStarsAboutToDrop == null) arePlayerFlashingStarsAboutToDrop = (Function) native.GetObjectProperty("arePlayerFlashingStarsAboutToDrop");
			return (bool) arePlayerFlashingStarsAboutToDrop.Call(native, player);
		}

		public bool ArePlayerStarsGreyedOut(int player)
		{
			if (arePlayerStarsGreyedOut == null) arePlayerStarsGreyedOut = (Function) native.GetObjectProperty("arePlayerStarsGreyedOut");
			return (bool) arePlayerStarsGreyedOut.Call(native, player);
		}

		public object _0x7E07C78925D5FD96(object p0)
		{
			if (__0x7E07C78925D5FD96 == null) __0x7E07C78925D5FD96 = (Function) native.GetObjectProperty("_0x7E07C78925D5FD96");
			return __0x7E07C78925D5FD96.Call(native, p0);
		}

		public void SetDispatchCopsForPlayer(int player, bool toggle)
		{
			if (setDispatchCopsForPlayer == null) setDispatchCopsForPlayer = (Function) native.GetObjectProperty("setDispatchCopsForPlayer");
			setDispatchCopsForPlayer.Call(native, player, toggle);
		}

		public bool IsPlayerWantedLevelGreater(int player, int wantedLevel)
		{
			if (isPlayerWantedLevelGreater == null) isPlayerWantedLevelGreater = (Function) native.GetObjectProperty("isPlayerWantedLevelGreater");
			return (bool) isPlayerWantedLevelGreater.Call(native, player, wantedLevel);
		}

		/// <summary>
		/// This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
		/// PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
		/// </summary>
		public void ClearPlayerWantedLevel(int player)
		{
			if (clearPlayerWantedLevel == null) clearPlayerWantedLevel = (Function) native.GetObjectProperty("clearPlayerWantedLevel");
			clearPlayerWantedLevel.Call(native, player);
		}

		public bool IsPlayerDead(int player)
		{
			if (isPlayerDead == null) isPlayerDead = (Function) native.GetObjectProperty("isPlayerDead");
			return (bool) isPlayerDead.Call(native, player);
		}

		public bool IsPlayerPressingHorn(int player)
		{
			if (isPlayerPressingHorn == null) isPlayerPressingHorn = (Function) native.GetObjectProperty("isPlayerPressingHorn");
			return (bool) isPlayerPressingHorn.Call(native, player);
		}

		/// <summary>
		/// enum eSetPlayerControlFlag : uint32_t
		/// {
		/// SPC_AMBIENT_SCRIPT = (1 << 1),
		/// SPC_CLEAR_TASKS = (1 << 2),
		/// SPC_REMOVE_FIRES = (1 << 3),
		/// SPC_REMOVE_EXPLOSIONS = (1 << 4),
		/// SPC_REMOVE_PROJECTILES = (1 << 5),
		/// SPC_DEACTIVATE_GADGETS = (1 << 6),
		/// SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
		/// See NativeDB for reference: http://natives.altv.mp/#/0x8D32347D6D4C40A2
		/// </summary>
		public void SetPlayerControl(int player, bool bHasControl, int flags)
		{
			if (setPlayerControl == null) setPlayerControl = (Function) native.GetObjectProperty("setPlayerControl");
			setPlayerControl.Call(native, player, bHasControl, flags);
		}

		public int GetPlayerWantedLevel(int player)
		{
			if (getPlayerWantedLevel == null) getPlayerWantedLevel = (Function) native.GetObjectProperty("getPlayerWantedLevel");
			return (int) getPlayerWantedLevel.Call(native, player);
		}

		public void SetMaxWantedLevel(int maxWantedLevel)
		{
			if (setMaxWantedLevel == null) setMaxWantedLevel = (Function) native.GetObjectProperty("setMaxWantedLevel");
			setMaxWantedLevel.Call(native, maxWantedLevel);
		}

		/// <summary>
		/// If toggle is set to false:
		/// The police won't be shown on the (mini)map
		/// If toggle is set to true:
		/// The police will be shown on the (mini)map
		/// </summary>
		public void SetPoliceRadarBlips(bool toggle)
		{
			if (setPoliceRadarBlips == null) setPoliceRadarBlips = (Function) native.GetObjectProperty("setPoliceRadarBlips");
			setPoliceRadarBlips.Call(native, toggle);
		}

		/// <summary>
		/// The player will be ignored by the police if toggle is set to true
		/// </summary>
		public void SetPoliceIgnorePlayer(int player, bool toggle)
		{
			if (setPoliceIgnorePlayer == null) setPoliceIgnorePlayer = (Function) native.GetObjectProperty("setPoliceIgnorePlayer");
			setPoliceIgnorePlayer.Call(native, player, toggle);
		}

		/// <summary>
		/// Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
		/// </summary>
		public bool IsPlayerPlaying(int player)
		{
			if (isPlayerPlaying == null) isPlayerPlaying = (Function) native.GetObjectProperty("isPlayerPlaying");
			return (bool) isPlayerPlaying.Call(native, player);
		}

		public void SetEveryoneIgnorePlayer(int player, bool toggle)
		{
			if (setEveryoneIgnorePlayer == null) setEveryoneIgnorePlayer = (Function) native.GetObjectProperty("setEveryoneIgnorePlayer");
			setEveryoneIgnorePlayer.Call(native, player, toggle);
		}

		public void SetAllRandomPedsFlee(int player, bool toggle)
		{
			if (setAllRandomPedsFlee == null) setAllRandomPedsFlee = (Function) native.GetObjectProperty("setAllRandomPedsFlee");
			setAllRandomPedsFlee.Call(native, player, toggle);
		}

		public void SetAllRandomPedsFleeThisFrame(int player)
		{
			if (setAllRandomPedsFleeThisFrame == null) setAllRandomPedsFleeThisFrame = (Function) native.GetObjectProperty("setAllRandomPedsFleeThisFrame");
			setAllRandomPedsFleeThisFrame.Call(native, player);
		}

		public void _0xDE45D1A1EF45EE61(int player, bool toggle)
		{
			if (__0xDE45D1A1EF45EE61 == null) __0xDE45D1A1EF45EE61 = (Function) native.GetObjectProperty("_0xDE45D1A1EF45EE61");
			__0xDE45D1A1EF45EE61.Call(native, player, toggle);
		}

		/// <summary>
		/// - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
		/// </summary>
		public void _0xC3376F42B1FACCC6(int player)
		{
			if (__0xC3376F42B1FACCC6 == null) __0xC3376F42B1FACCC6 = (Function) native.GetObjectProperty("_0xC3376F42B1FACCC6");
			__0xC3376F42B1FACCC6.Call(native, player);
		}

		public void _0xFAC75988A7D078D3(int player)
		{
			if (__0xFAC75988A7D078D3 == null) __0xFAC75988A7D078D3 = (Function) native.GetObjectProperty("_0xFAC75988A7D078D3");
			__0xFAC75988A7D078D3.Call(native, player);
		}

		public void SetIgnoreLowPriorityShockingEvents(int player, bool toggle)
		{
			if (setIgnoreLowPriorityShockingEvents == null) setIgnoreLowPriorityShockingEvents = (Function) native.GetObjectProperty("setIgnoreLowPriorityShockingEvents");
			setIgnoreLowPriorityShockingEvents.Call(native, player, toggle);
		}

		public void SetWantedLevelMultiplier(double multiplier)
		{
			if (setWantedLevelMultiplier == null) setWantedLevelMultiplier = (Function) native.GetObjectProperty("setWantedLevelMultiplier");
			setWantedLevelMultiplier.Call(native, multiplier);
		}

		/// <summary>
		/// Max value is 1.0
		/// </summary>
		public void SetWantedLevelDifficulty(int player, double difficulty)
		{
			if (setWantedLevelDifficulty == null) setWantedLevelDifficulty = (Function) native.GetObjectProperty("setWantedLevelDifficulty");
			setWantedLevelDifficulty.Call(native, player, difficulty);
		}

		public void ResetWantedLevelDifficulty(int player)
		{
			if (resetWantedLevelDifficulty == null) resetWantedLevelDifficulty = (Function) native.GetObjectProperty("resetWantedLevelDifficulty");
			resetWantedLevelDifficulty.Call(native, player);
		}

		public void StartFiringAmnesty(int duration)
		{
			if (startFiringAmnesty == null) startFiringAmnesty = (Function) native.GetObjectProperty("startFiringAmnesty");
			startFiringAmnesty.Call(native, duration);
		}

		/// <summary>
		/// PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));
		/// From am_armybase.ysc.c4:
		/// PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));
		/// -----
		/// This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7
		/// -----
		/// crimeType:
		/// 1: Firearms possession
		/// 2: Person running a red light ("5-0-5")
		/// See NativeDB for reference: http://natives.altv.mp/#/0xE9B09589827545E7
		/// </summary>
		public void ReportCrime(int player, int crimeType, int wantedLvlThresh)
		{
			if (reportCrime == null) reportCrime = (Function) native.GetObjectProperty("reportCrime");
			reportCrime.Call(native, player, crimeType, wantedLvlThresh);
		}

		/// <summary>
		/// This was previously named as "RESERVE_ENTITY_EXPLODES_ON_HIGH_EXPLOSION_COMBO"
		/// which is obviously incorrect.
		/// Seems to only appear in scripts used in Singleplayer. p1 ranges from 2 - 46.
		/// I assume this switches the crime type
		/// </summary>
		public void SwitchCrimeType(int player, int p1)
		{
			if (switchCrimeType == null) switchCrimeType = (Function) native.GetObjectProperty("switchCrimeType");
			switchCrimeType.Call(native, player, p1);
		}

		/// <summary>
		/// Seems to only appear in scripts used in Singleplayer.
		/// Always used like this in scripts
		/// PLAYER::_BC9490CA15AEA8FB(PLAYER::PLAYER_ID());
		/// </summary>
		public void _0xBC9490CA15AEA8FB(int player)
		{
			if (__0xBC9490CA15AEA8FB == null) __0xBC9490CA15AEA8FB = (Function) native.GetObjectProperty("_0xBC9490CA15AEA8FB");
			__0xBC9490CA15AEA8FB.Call(native, player);
		}

		/// <summary>
		/// This has been found in use in the decompiled files.
		/// </summary>
		public void _0x4669B3ED80F24B4E(int player)
		{
			if (__0x4669B3ED80F24B4E == null) __0x4669B3ED80F24B4E = (Function) native.GetObjectProperty("_0x4669B3ED80F24B4E");
			__0x4669B3ED80F24B4E.Call(native, player);
		}

		public void _0x2F41A3BAE005E5FA(object p0, object p1)
		{
			if (__0x2F41A3BAE005E5FA == null) __0x2F41A3BAE005E5FA = (Function) native.GetObjectProperty("_0x2F41A3BAE005E5FA");
			__0x2F41A3BAE005E5FA.Call(native, p0, p1);
		}

		/// <summary>
		/// This has been found in use in the decompiled files.
		/// </summary>
		public void _0xAD73CE5A09E42D12(int player)
		{
			if (__0xAD73CE5A09E42D12 == null) __0xAD73CE5A09E42D12 = (Function) native.GetObjectProperty("_0xAD73CE5A09E42D12");
			__0xAD73CE5A09E42D12.Call(native, player);
		}

		public void _0x36F1B38855F2A8DF(int player)
		{
			if (__0x36F1B38855F2A8DF == null) __0x36F1B38855F2A8DF = (Function) native.GetObjectProperty("_0x36F1B38855F2A8DF");
			__0x36F1B38855F2A8DF.Call(native, player);
		}

		/// <summary>
		/// Has something to do with police.
		/// RE*
		/// </summary>
		public void _0xDC64D2C53493ED12(int player)
		{
			if (__0xDC64D2C53493ED12 == null) __0xDC64D2C53493ED12 = (Function) native.GetObjectProperty("_0xDC64D2C53493ED12");
			__0xDC64D2C53493ED12.Call(native, player);
		}

		/// <summary>
		/// PLAYER::0xBF6993C7(rPtr((&l_122) + 71)); // Found in decompilation
		/// ***
		/// In "am_hold_up.ysc" used once:
		/// l_8d._f47 = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
		/// PLAYER::_B45EFF719D8427A6((l_8d._f47));
		/// </summary>
		public void _0xB45EFF719D8427A6(double p0)
		{
			if (__0xB45EFF719D8427A6 == null) __0xB45EFF719D8427A6 = (Function) native.GetObjectProperty("_0xB45EFF719D8427A6");
			__0xB45EFF719D8427A6.Call(native, p0);
		}

		/// <summary>
		/// 2 matches in 1 script - am_hold_up
		/// Used in multiplayer scripts?
		/// </summary>
		public void _0x0032A6DBA562C518()
		{
			if (__0x0032A6DBA562C518 == null) __0x0032A6DBA562C518 = (Function) native.GetObjectProperty("_0x0032A6DBA562C518");
			__0x0032A6DBA562C518.Call(native);
		}

		public bool CanPlayerStartMission(int player)
		{
			if (canPlayerStartMission == null) canPlayerStartMission = (Function) native.GetObjectProperty("canPlayerStartMission");
			return (bool) canPlayerStartMission.Call(native, player);
		}

		public bool IsPlayerReadyForCutscene(int player)
		{
			if (isPlayerReadyForCutscene == null) isPlayerReadyForCutscene = (Function) native.GetObjectProperty("isPlayerReadyForCutscene");
			return (bool) isPlayerReadyForCutscene.Call(native, player);
		}

		public bool IsPlayerTargettingEntity(int player, int entity)
		{
			if (isPlayerTargettingEntity == null) isPlayerTargettingEntity = (Function) native.GetObjectProperty("isPlayerTargettingEntity");
			return (bool) isPlayerTargettingEntity.Call(native, player, entity);
		}

		/// <summary>
		/// Assigns the handle of locked-on melee target to *entity that you pass it.
		/// </summary>
		/// <returns>Array<bool, int> Returns false if no entity found.</returns>
		public (bool, int) GetPlayerTargetEntity(int player, int entity)
		{
			if (getPlayerTargetEntity == null) getPlayerTargetEntity = (Function) native.GetObjectProperty("getPlayerTargetEntity");
			var results = (Array) getPlayerTargetEntity.Call(native, player, entity);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// Gets a value indicating whether the specified player is currently aiming freely.
		/// </summary>
		public bool IsPlayerFreeAiming(int player)
		{
			if (isPlayerFreeAiming == null) isPlayerFreeAiming = (Function) native.GetObjectProperty("isPlayerFreeAiming");
			return (bool) isPlayerFreeAiming.Call(native, player);
		}

		/// <summary>
		/// Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
		/// </summary>
		public bool IsPlayerFreeAimingAtEntity(int player, int entity)
		{
			if (isPlayerFreeAimingAtEntity == null) isPlayerFreeAimingAtEntity = (Function) native.GetObjectProperty("isPlayerFreeAimingAtEntity");
			return (bool) isPlayerFreeAimingAtEntity.Call(native, player, entity);
		}

		/// <summary>
		/// Returns false if no entity found.
		/// </summary>
		/// <returns>Array<bool, int> Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.</returns>
		public (bool, int) GetEntityPlayerIsFreeAimingAt(int player, int entity)
		{
			if (getEntityPlayerIsFreeAimingAt == null) getEntityPlayerIsFreeAimingAt = (Function) native.GetObjectProperty("getEntityPlayerIsFreeAimingAt");
			var results = (Array) getEntityPlayerIsFreeAimingAt.Call(native, player, entity);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// Affects the range of auto aim target.
		/// </summary>
		public void SetPlayerLockonRangeOverride(int player, double range)
		{
			if (setPlayerLockonRangeOverride == null) setPlayerLockonRangeOverride = (Function) native.GetObjectProperty("setPlayerLockonRangeOverride");
			setPlayerLockonRangeOverride.Call(native, player, range);
		}

		/// <summary>
		/// Set whether this player should be able to do drive-bys.
		/// "A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
		/// </summary>
		public void SetPlayerCanDoDriveBy(int player, bool toggle)
		{
			if (setPlayerCanDoDriveBy == null) setPlayerCanDoDriveBy = (Function) native.GetObjectProperty("setPlayerCanDoDriveBy");
			setPlayerCanDoDriveBy.Call(native, player, toggle);
		}

		/// <summary>
		/// Sets whether this player can be hassled by gangs.
		/// </summary>
		public void SetPlayerCanBeHassledByGangs(int player, bool toggle)
		{
			if (setPlayerCanBeHassledByGangs == null) setPlayerCanBeHassledByGangs = (Function) native.GetObjectProperty("setPlayerCanBeHassledByGangs");
			setPlayerCanBeHassledByGangs.Call(native, player, toggle);
		}

		/// <summary>
		/// Sets whether this player can take cover.
		/// </summary>
		public void SetPlayerCanUseCover(int player, bool toggle)
		{
			if (setPlayerCanUseCover == null) setPlayerCanUseCover = (Function) native.GetObjectProperty("setPlayerCanUseCover");
			setPlayerCanUseCover.Call(native, player, toggle);
		}

		/// <summary>
		/// Gets the maximum wanted level the player can get.
		/// Ranges from 0 to 5.
		/// </summary>
		public int GetMaxWantedLevel()
		{
			if (getMaxWantedLevel == null) getMaxWantedLevel = (Function) native.GetObjectProperty("getMaxWantedLevel");
			return (int) getMaxWantedLevel.Call(native);
		}

		public bool IsPlayerTargettingAnything(int player)
		{
			if (isPlayerTargettingAnything == null) isPlayerTargettingAnything = (Function) native.GetObjectProperty("isPlayerTargettingAnything");
			return (bool) isPlayerTargettingAnything.Call(native, player);
		}

		public void SetPlayerSprint(int player, bool toggle)
		{
			if (setPlayerSprint == null) setPlayerSprint = (Function) native.GetObjectProperty("setPlayerSprint");
			setPlayerSprint.Call(native, player, toggle);
		}

		public void ResetPlayerStamina(int player)
		{
			if (resetPlayerStamina == null) resetPlayerStamina = (Function) native.GetObjectProperty("resetPlayerStamina");
			resetPlayerStamina.Call(native, player);
		}

		public void RestorePlayerStamina(int player, double p1)
		{
			if (restorePlayerStamina == null) restorePlayerStamina = (Function) native.GetObjectProperty("restorePlayerStamina");
			restorePlayerStamina.Call(native, player, p1);
		}

		public double GetPlayerSprintStaminaRemaining(int player)
		{
			if (getPlayerSprintStaminaRemaining == null) getPlayerSprintStaminaRemaining = (Function) native.GetObjectProperty("getPlayerSprintStaminaRemaining");
			return (double) getPlayerSprintStaminaRemaining.Call(native, player);
		}

		public double GetPlayerSprintTimeRemaining(int player)
		{
			if (getPlayerSprintTimeRemaining == null) getPlayerSprintTimeRemaining = (Function) native.GetObjectProperty("getPlayerSprintTimeRemaining");
			return (double) getPlayerSprintTimeRemaining.Call(native, player);
		}

		public double GetPlayerUnderwaterTimeRemaining(int player)
		{
			if (getPlayerUnderwaterTimeRemaining == null) getPlayerUnderwaterTimeRemaining = (Function) native.GetObjectProperty("getPlayerUnderwaterTimeRemaining");
			return (double) getPlayerUnderwaterTimeRemaining.Call(native, player);
		}

		public object _0xA0D3E4F7AAFB7E78(object p0, object p1)
		{
			if (__0xA0D3E4F7AAFB7E78 == null) __0xA0D3E4F7AAFB7E78 = (Function) native.GetObjectProperty("_0xA0D3E4F7AAFB7E78");
			return __0xA0D3E4F7AAFB7E78.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the group ID the player is member of.</returns>
		public int GetPlayerGroup(int player)
		{
			if (getPlayerGroup == null) getPlayerGroup = (Function) native.GetObjectProperty("getPlayerGroup");
			return (int) getPlayerGroup.Call(native, player);
		}

		public int GetPlayerMaxArmour(int player)
		{
			if (getPlayerMaxArmour == null) getPlayerMaxArmour = (Function) native.GetObjectProperty("getPlayerMaxArmour");
			return (int) getPlayerMaxArmour.Call(native, player);
		}

		/// <summary>
		/// Can the player control himself, used to disable controls for player for things like a cutscene.
		/// ---
		/// You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
		/// </summary>
		public bool IsPlayerControlOn(int player)
		{
			if (isPlayerControlOn == null) isPlayerControlOn = (Function) native.GetObjectProperty("isPlayerControlOn");
			return (bool) isPlayerControlOn.Call(native, player);
		}

		/// <summary>
		/// Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
		/// </summary>
		/// <returns>Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.</returns>
		public bool IsPlayerCamControlDisabled()
		{
			if (isPlayerCamControlDisabled == null) isPlayerCamControlDisabled = (Function) native.GetObjectProperty("isPlayerCamControlDisabled");
			return (bool) isPlayerCamControlDisabled.Call(native);
		}

		public bool IsPlayerScriptControlOn(int player)
		{
			if (isPlayerScriptControlOn == null) isPlayerScriptControlOn = (Function) native.GetObjectProperty("isPlayerScriptControlOn");
			return (bool) isPlayerScriptControlOn.Call(native, player);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns TRUE if the player ('s ped) is climbing at the moment.</returns>
		public bool IsPlayerClimbing(int player)
		{
			if (isPlayerClimbing == null) isPlayerClimbing = (Function) native.GetObjectProperty("isPlayerClimbing");
			return (bool) isPlayerClimbing.Call(native, player);
		}

		/// <summary>
		/// Return true while player is being arrested / busted.
		/// If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
		/// If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
		/// </summary>
		public bool IsPlayerBeingArrested(int player, bool atArresting)
		{
			if (isPlayerBeingArrested == null) isPlayerBeingArrested = (Function) native.GetObjectProperty("isPlayerBeingArrested");
			return (bool) isPlayerBeingArrested.Call(native, player, atArresting);
		}

		public void ResetPlayerArrestState(int player)
		{
			if (resetPlayerArrestState == null) resetPlayerArrestState = (Function) native.GetObjectProperty("resetPlayerArrestState");
			resetPlayerArrestState.Call(native, player);
		}

		/// <summary>
		/// Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
		/// </summary>
		public int GetPlayersLastVehicle()
		{
			if (getPlayersLastVehicle == null) getPlayersLastVehicle = (Function) native.GetObjectProperty("getPlayersLastVehicle");
			return (int) getPlayersLastVehicle.Call(native);
		}

		public int GetPlayerIndex()
		{
			if (getPlayerIndex == null) getPlayerIndex = (Function) native.GetObjectProperty("getPlayerIndex");
			return (int) getPlayerIndex.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).</returns>
		public int IntToPlayerindex(int value)
		{
			if (intToPlayerindex == null) intToPlayerindex = (Function) native.GetObjectProperty("intToPlayerindex");
			return (int) intToPlayerindex.Call(native, value);
		}

		/// <summary>
		/// --------------------------------------------------------
		/// if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
		/// </summary>
		/// <returns>Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).</returns>
		public int IntToParticipantindex(int value)
		{
			if (intToParticipantindex == null) intToParticipantindex = (Function) native.GetObjectProperty("intToParticipantindex");
			return (int) intToParticipantindex.Call(native, value);
		}

		public int GetTimeSincePlayerHitVehicle(int player)
		{
			if (getTimeSincePlayerHitVehicle == null) getTimeSincePlayerHitVehicle = (Function) native.GetObjectProperty("getTimeSincePlayerHitVehicle");
			return (int) getTimeSincePlayerHitVehicle.Call(native, player);
		}

		public int GetTimeSincePlayerHitPed(int player)
		{
			if (getTimeSincePlayerHitPed == null) getTimeSincePlayerHitPed = (Function) native.GetObjectProperty("getTimeSincePlayerHitPed");
			return (int) getTimeSincePlayerHitPed.Call(native, player);
		}

		public int GetTimeSincePlayerDroveOnPavement(int player)
		{
			if (getTimeSincePlayerDroveOnPavement == null) getTimeSincePlayerDroveOnPavement = (Function) native.GetObjectProperty("getTimeSincePlayerDroveOnPavement");
			return (int) getTimeSincePlayerDroveOnPavement.Call(native, player);
		}

		public int GetTimeSincePlayerDroveAgainstTraffic(int player)
		{
			if (getTimeSincePlayerDroveAgainstTraffic == null) getTimeSincePlayerDroveAgainstTraffic = (Function) native.GetObjectProperty("getTimeSincePlayerDroveAgainstTraffic");
			return (int) getTimeSincePlayerDroveAgainstTraffic.Call(native, player);
		}

		public bool IsPlayerFreeForAmbientTask(int player)
		{
			if (isPlayerFreeForAmbientTask == null) isPlayerFreeForAmbientTask = (Function) native.GetObjectProperty("isPlayerFreeForAmbientTask");
			return (bool) isPlayerFreeForAmbientTask.Call(native, player);
		}

		/// <summary>
		/// Always returns 0 in story mode.
		/// </summary>
		/// <returns>This returns YOUR 'identity' as a Player type.</returns>
		public int PlayerId()
		{
			if (playerId == null) playerId = (Function) native.GetObjectProperty("playerId");
			return (int) playerId.Call(native);
		}

		public int PlayerPedId()
		{
			if (playerPedId == null) playerPedId = (Function) native.GetObjectProperty("playerPedId");
			return (int) playerPedId.Call(native);
		}

		/// <summary>
		/// Does exactly the same thing as PLAYER_ID()
		/// </summary>
		public int NetworkPlayerIdToInt()
		{
			if (networkPlayerIdToInt == null) networkPlayerIdToInt = (Function) native.GetObjectProperty("networkPlayerIdToInt");
			return (int) networkPlayerIdToInt.Call(native);
		}

		public bool HasForceCleanupOccurred(int cleanupFlags)
		{
			if (hasForceCleanupOccurred == null) hasForceCleanupOccurred = (Function) native.GetObjectProperty("hasForceCleanupOccurred");
			return (bool) hasForceCleanupOccurred.Call(native, cleanupFlags);
		}

		/// <summary>
		/// used with 1,2,8,64,128 in the scripts
		/// </summary>
		public void ForceCleanup(int cleanupFlags)
		{
			if (forceCleanup == null) forceCleanup = (Function) native.GetObjectProperty("forceCleanup");
			forceCleanup.Call(native, cleanupFlags);
		}

		/// <summary>
		/// PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
		/// </summary>
		public void ForceCleanupForAllThreadsWithThisName(string name, int cleanupFlags)
		{
			if (forceCleanupForAllThreadsWithThisName == null) forceCleanupForAllThreadsWithThisName = (Function) native.GetObjectProperty("forceCleanupForAllThreadsWithThisName");
			forceCleanupForAllThreadsWithThisName.Call(native, name, cleanupFlags);
		}

		public void ForceCleanupForThreadWithThisId(int id, int cleanupFlags)
		{
			if (forceCleanupForThreadWithThisId == null) forceCleanupForThreadWithThisId = (Function) native.GetObjectProperty("forceCleanupForThreadWithThisId");
			forceCleanupForThreadWithThisId.Call(native, id, cleanupFlags);
		}

		public int GetCauseOfMostRecentForceCleanup()
		{
			if (getCauseOfMostRecentForceCleanup == null) getCauseOfMostRecentForceCleanup = (Function) native.GetObjectProperty("getCauseOfMostRecentForceCleanup");
			return (int) getCauseOfMostRecentForceCleanup.Call(native);
		}

		public void SetPlayerMayOnlyEnterThisVehicle(int player, int vehicle)
		{
			if (setPlayerMayOnlyEnterThisVehicle == null) setPlayerMayOnlyEnterThisVehicle = (Function) native.GetObjectProperty("setPlayerMayOnlyEnterThisVehicle");
			setPlayerMayOnlyEnterThisVehicle.Call(native, player, vehicle);
		}

		public void SetPlayerMayNotEnterAnyVehicle(int player)
		{
			if (setPlayerMayNotEnterAnyVehicle == null) setPlayerMayNotEnterAnyVehicle = (Function) native.GetObjectProperty("setPlayerMayNotEnterAnyVehicle");
			setPlayerMayNotEnterAnyVehicle.Call(native, player);
		}

		/// <summary>
		/// Achievements from 0-57
		/// more achievements came with update 1.29 (freemode events update), I'd say that they now go to 60, but I'll need to check.
		/// </summary>
		public bool GiveAchievementToPlayer(int achievement)
		{
			if (giveAchievementToPlayer == null) giveAchievementToPlayer = (Function) native.GetObjectProperty("giveAchievementToPlayer");
			return (bool) giveAchievementToPlayer.Call(native, achievement);
		}

		/// <summary>
		/// For Steam.
		/// </summary>
		/// <returns>Does nothing and always returns false in the retail version of the game.</returns>
		public bool SetAchievementProgress(int achievement, int progress)
		{
			if (setAchievementProgress == null) setAchievementProgress = (Function) native.GetObjectProperty("setAchievementProgress");
			return (bool) setAchievementProgress.Call(native, achievement, progress);
		}

		/// <summary>
		/// For Steam.
		/// </summary>
		/// <returns>Always returns 0 in retail version of the game.</returns>
		public int GetAchievementProgress(int achievement)
		{
			if (getAchievementProgress == null) getAchievementProgress = (Function) native.GetObjectProperty("getAchievementProgress");
			return (int) getAchievementProgress.Call(native, achievement);
		}

		public bool HasAchievementBeenPassed(int achievement)
		{
			if (hasAchievementBeenPassed == null) hasAchievementBeenPassed = (Function) native.GetObjectProperty("hasAchievementBeenPassed");
			return (bool) hasAchievementBeenPassed.Call(native, achievement);
		}

		/// <summary>
		/// This is an alias for NETWORK_IS_SIGNED_ONLINE.
		/// </summary>
		/// <returns>Returns TRUE if the game is in online mode and FALSE if in offline mode.</returns>
		public bool IsPlayerOnline()
		{
			if (isPlayerOnline == null) isPlayerOnline = (Function) native.GetObjectProperty("isPlayerOnline");
			return (bool) isPlayerOnline.Call(native);
		}

		/// <summary>
		/// this function is hard-coded to always return 0.
		/// </summary>
		public bool IsPlayerLoggingInNp()
		{
			if (isPlayerLoggingInNp == null) isPlayerLoggingInNp = (Function) native.GetObjectProperty("isPlayerLoggingInNp");
			return (bool) isPlayerLoggingInNp.Call(native);
		}

		/// <summary>
		/// Purpose of the BOOL currently unknown.
		/// Both, true and false, work
		/// </summary>
		public void DisplaySystemSigninUi(bool unk)
		{
			if (displaySystemSigninUi == null) displaySystemSigninUi = (Function) native.GetObjectProperty("displaySystemSigninUi");
			displaySystemSigninUi.Call(native, unk);
		}

		public bool IsSystemUiBeingDisplayed()
		{
			if (isSystemUiBeingDisplayed == null) isSystemUiBeingDisplayed = (Function) native.GetObjectProperty("isSystemUiBeingDisplayed");
			return (bool) isSystemUiBeingDisplayed.Call(native);
		}

		/// <summary>
		/// Simply sets you as invincible (Health will not deplete).
		/// Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
		/// *(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
		/// </summary>
		public void SetPlayerInvincible(int player, bool toggle)
		{
			if (setPlayerInvincible == null) setPlayerInvincible = (Function) native.GetObjectProperty("setPlayerInvincible");
			setPlayerInvincible.Call(native, player, toggle);
		}

		/// <summary>
		/// This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
		/// bool IsPlayerInvincible(Player player)
		/// {
		/// auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
		/// if (addr)
		/// {
		/// DWORD flag = *(DWORD *)(addr + 0x188);
		/// return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB721981B2B939E07
		/// </summary>
		/// <returns>Returns the Player's Invincible status.</returns>
		public bool GetPlayerInvincible(int player)
		{
			if (getPlayerInvincible == null) getPlayerInvincible = (Function) native.GetObjectProperty("getPlayerInvincible");
			return (bool) getPlayerInvincible.Call(native, player);
		}

		public void SetPlayerInvincibleKeepRagdollEnabled(int player, bool toggle)
		{
			if (setPlayerInvincibleKeepRagdollEnabled == null) setPlayerInvincibleKeepRagdollEnabled = (Function) native.GetObjectProperty("setPlayerInvincibleKeepRagdollEnabled");
			setPlayerInvincibleKeepRagdollEnabled.Call(native, player, toggle);
		}

		/// <summary>
		/// Found in "director_mode", "fm_bj_race_controler", "fm_deathmatch_controler", "fm_impromptu_dm_controler", "fm_race_controler", "gb_deathmatch".
		/// </summary>
		public void _0xCAC57395B151135F(int player, bool p1)
		{
			if (__0xCAC57395B151135F == null) __0xCAC57395B151135F = (Function) native.GetObjectProperty("_0xCAC57395B151135F");
			__0xCAC57395B151135F.Call(native, player, p1);
		}

		public void RemovePlayerHelmet(int player, bool p2)
		{
			if (removePlayerHelmet == null) removePlayerHelmet = (Function) native.GetObjectProperty("removePlayerHelmet");
			removePlayerHelmet.Call(native, player, p2);
		}

		public void GivePlayerRagdollControl(int player, bool toggle)
		{
			if (givePlayerRagdollControl == null) givePlayerRagdollControl = (Function) native.GetObjectProperty("givePlayerRagdollControl");
			givePlayerRagdollControl.Call(native, player, toggle);
		}

		/// <summary>
		/// Example from fm_mission_controler.ysc.c4:
		/// PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);
		/// All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
		/// No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
		/// </summary>
		public void SetPlayerLockon(int player, bool toggle)
		{
			if (setPlayerLockon == null) setPlayerLockon = (Function) native.GetObjectProperty("setPlayerLockon");
			setPlayerLockon.Call(native, player, toggle);
		}

		/// <summary>
		/// Sets your targeting mode.
		/// 0 = Traditional GTA
		/// 1 = Assisted Aiming
		/// 2 = Free Aim
		/// </summary>
		public void SetPlayerTargetingMode(int targetMode)
		{
			if (setPlayerTargetingMode == null) setPlayerTargetingMode = (Function) native.GetObjectProperty("setPlayerTargetingMode");
			setPlayerTargetingMode.Call(native, targetMode);
		}

		public void SetPlayerTargetLevel(int targetLevel)
		{
			if (setPlayerTargetLevel == null) setPlayerTargetLevel = (Function) native.GetObjectProperty("setPlayerTargetLevel");
			setPlayerTargetLevel.Call(native, targetLevel);
		}

		/// <summary>
		/// GET_*
		/// </summary>
		/// <returns>Returns profile setting 237.</returns>
		public bool _0xB9CF1F793A9F1BF1()
		{
			if (__0xB9CF1F793A9F1BF1 == null) __0xB9CF1F793A9F1BF1 = (Function) native.GetObjectProperty("_0xB9CF1F793A9F1BF1");
			return (bool) __0xB9CF1F793A9F1BF1.Call(native);
		}

		/// <summary>
		/// GET_*
		/// </summary>
		/// <returns>Returns profile setting 243.</returns>
		public bool _0xCB645E85E97EA48B()
		{
			if (__0xCB645E85E97EA48B == null) __0xCB645E85E97EA48B = (Function) native.GetObjectProperty("_0xCB645E85E97EA48B");
			return (bool) __0xCB645E85E97EA48B.Call(native);
		}

		public void ClearPlayerHasDamagedAtLeastOnePed(int player)
		{
			if (clearPlayerHasDamagedAtLeastOnePed == null) clearPlayerHasDamagedAtLeastOnePed = (Function) native.GetObjectProperty("clearPlayerHasDamagedAtLeastOnePed");
			clearPlayerHasDamagedAtLeastOnePed.Call(native, player);
		}

		public bool HasPlayerDamagedAtLeastOnePed(int player)
		{
			if (hasPlayerDamagedAtLeastOnePed == null) hasPlayerDamagedAtLeastOnePed = (Function) native.GetObjectProperty("hasPlayerDamagedAtLeastOnePed");
			return (bool) hasPlayerDamagedAtLeastOnePed.Call(native, player);
		}

		public void ClearPlayerHasDamagedAtLeastOneNonAnimalPed(int player)
		{
			if (clearPlayerHasDamagedAtLeastOneNonAnimalPed == null) clearPlayerHasDamagedAtLeastOneNonAnimalPed = (Function) native.GetObjectProperty("clearPlayerHasDamagedAtLeastOneNonAnimalPed");
			clearPlayerHasDamagedAtLeastOneNonAnimalPed.Call(native, player);
		}

		public bool HasPlayerDamagedAtLeastOneNonAnimalPed(int player)
		{
			if (hasPlayerDamagedAtLeastOneNonAnimalPed == null) hasPlayerDamagedAtLeastOneNonAnimalPed = (Function) native.GetObjectProperty("hasPlayerDamagedAtLeastOneNonAnimalPed");
			return (bool) hasPlayerDamagedAtLeastOneNonAnimalPed.Call(native, player);
		}

		/// <summary>
		/// This can be between 1.0f - 14.9f
		/// You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
		/// </summary>
		public void SetAirDragMultiplierForPlayersVehicle(int player, double multiplier)
		{
			if (setAirDragMultiplierForPlayersVehicle == null) setAirDragMultiplierForPlayersVehicle = (Function) native.GetObjectProperty("setAirDragMultiplierForPlayersVehicle");
			setAirDragMultiplierForPlayersVehicle.Call(native, player, multiplier);
		}

		/// <summary>
		/// Swim speed multiplier.
		/// Multiplier goes up to 1.49
		/// Just call it one time, it is not required to be called once every tick. - Note copied from below native.
		/// Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
		/// </summary>
		/// <param name="multiplier">Multiplier goes up to 1.49</param>
		public void SetSwimMultiplierForPlayer(int player, double multiplier)
		{
			if (setSwimMultiplierForPlayer == null) setSwimMultiplierForPlayer = (Function) native.GetObjectProperty("setSwimMultiplierForPlayer");
			setSwimMultiplierForPlayer.Call(native, player, multiplier);
		}

		/// <summary>
		/// Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
		/// Just call it one time, it is not required to be called once every tick.
		/// Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
		/// </summary>
		/// <param name="multiplier">Multiplier goes up to 1.49 any value above will be completely overruled by the game and the will not take effect, this can be edited in memory however.</param>
		public void SetRunSprintMultiplierForPlayer(int player, double multiplier)
		{
			if (setRunSprintMultiplierForPlayer == null) setRunSprintMultiplierForPlayer = (Function) native.GetObjectProperty("setRunSprintMultiplierForPlayer");
			setRunSprintMultiplierForPlayer.Call(native, player, multiplier);
		}

		/// <summary>
		/// example
		/// var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
		/// UI.DrawSubtitle(time.ToString());
		/// if player has not been arrested, the int returned will be -1.
		/// </summary>
		/// <returns>Returns the time since the character was arrested in (ms) milliseconds.</returns>
		public int GetTimeSinceLastArrest()
		{
			if (getTimeSinceLastArrest == null) getTimeSinceLastArrest = (Function) native.GetObjectProperty("getTimeSinceLastArrest");
			return (int) getTimeSinceLastArrest.Call(native);
		}

		/// <summary>
		/// example
		/// var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
		/// UI.DrawSubtitle(time.ToString());
		/// if player has not died, the int returned will be -1.
		/// </summary>
		/// <returns>Returns the time since the character died in (ms) milliseconds.</returns>
		public int GetTimeSinceLastDeath()
		{
			if (getTimeSinceLastDeath == null) getTimeSinceLastDeath = (Function) native.GetObjectProperty("getTimeSinceLastDeath");
			return (int) getTimeSinceLastDeath.Call(native);
		}

		public void AssistedMovementCloseRoute()
		{
			if (assistedMovementCloseRoute == null) assistedMovementCloseRoute = (Function) native.GetObjectProperty("assistedMovementCloseRoute");
			assistedMovementCloseRoute.Call(native);
		}

		public void AssistedMovementFlushRoute()
		{
			if (assistedMovementFlushRoute == null) assistedMovementFlushRoute = (Function) native.GetObjectProperty("assistedMovementFlushRoute");
			assistedMovementFlushRoute.Call(native);
		}

		public void SetPlayerForcedAim(int player, bool toggle)
		{
			if (setPlayerForcedAim == null) setPlayerForcedAim = (Function) native.GetObjectProperty("setPlayerForcedAim");
			setPlayerForcedAim.Call(native, player, toggle);
		}

		public void SetPlayerForcedZoom(int player, bool toggle)
		{
			if (setPlayerForcedZoom == null) setPlayerForcedZoom = (Function) native.GetObjectProperty("setPlayerForcedZoom");
			setPlayerForcedZoom.Call(native, player, toggle);
		}

		public void SetPlayerForceSkipAimIntro(int player, bool toggle)
		{
			if (setPlayerForceSkipAimIntro == null) setPlayerForceSkipAimIntro = (Function) native.GetObjectProperty("setPlayerForceSkipAimIntro");
			setPlayerForceSkipAimIntro.Call(native, player, toggle);
		}

		/// <summary>
		/// Inhibits the player from using any method of combat including melee and firearms.
		/// NOTE: Only disables the firing for one frame
		/// </summary>
		public void DisablePlayerFiring(int player, bool toggle)
		{
			if (disablePlayerFiring == null) disablePlayerFiring = (Function) native.GetObjectProperty("disablePlayerFiring");
			disablePlayerFiring.Call(native, player, toggle);
		}

		/// <summary>
		/// Disables something. Used only once in R* scripts (freemode.ysc).
		/// DISABLE_PLAYER_*
		/// </summary>
		public void _0xB885852C39CC265D()
		{
			if (__0xB885852C39CC265D == null) __0xB885852C39CC265D = (Function) native.GetObjectProperty("_0xB885852C39CC265D");
			__0xB885852C39CC265D.Call(native);
		}

		public void SetDisableAmbientMeleeMove(int player, bool toggle)
		{
			if (setDisableAmbientMeleeMove == null) setDisableAmbientMeleeMove = (Function) native.GetObjectProperty("setDisableAmbientMeleeMove");
			setDisableAmbientMeleeMove.Call(native, player, toggle);
		}

		/// <summary>
		/// Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
		/// </summary>
		public void SetPlayerMaxArmour(int player, int value)
		{
			if (setPlayerMaxArmour == null) setPlayerMaxArmour = (Function) native.GetObjectProperty("setPlayerMaxArmour");
			setPlayerMaxArmour.Call(native, player, value);
		}

		public void SpecialAbilityActivate(object p0)
		{
			if (specialAbilityActivate == null) specialAbilityActivate = (Function) native.GetObjectProperty("specialAbilityActivate");
			specialAbilityActivate.Call(native, p0);
		}

		public void SetSpecialAbility(int player, int p1)
		{
			if (setSpecialAbility == null) setSpecialAbility = (Function) native.GetObjectProperty("setSpecialAbility");
			setSpecialAbility.Call(native, player, p1);
		}

		public void SpecialAbilityDeplete(object p0)
		{
			if (specialAbilityDeplete == null) specialAbilityDeplete = (Function) native.GetObjectProperty("specialAbilityDeplete");
			specialAbilityDeplete.Call(native, p0);
		}

		public void SpecialAbilityDeactivate(int player)
		{
			if (specialAbilityDeactivate == null) specialAbilityDeactivate = (Function) native.GetObjectProperty("specialAbilityDeactivate");
			specialAbilityDeactivate.Call(native, player);
		}

		public void SpecialAbilityDeactivateFast(int player)
		{
			if (specialAbilityDeactivateFast == null) specialAbilityDeactivateFast = (Function) native.GetObjectProperty("specialAbilityDeactivateFast");
			specialAbilityDeactivateFast.Call(native, player);
		}

		public void SpecialAbilityReset(int player)
		{
			if (specialAbilityReset == null) specialAbilityReset = (Function) native.GetObjectProperty("specialAbilityReset");
			specialAbilityReset.Call(native, player);
		}

		public void SpecialAbilityChargeOnMissionFailed(int player)
		{
			if (specialAbilityChargeOnMissionFailed == null) specialAbilityChargeOnMissionFailed = (Function) native.GetObjectProperty("specialAbilityChargeOnMissionFailed");
			specialAbilityChargeOnMissionFailed.Call(native, player);
		}

		/// <summary>
		/// Every occurrence of p1 & p2 were both true.
		/// </summary>
		public void SpecialAbilityChargeSmall(int player, bool p1, bool p2)
		{
			if (specialAbilityChargeSmall == null) specialAbilityChargeSmall = (Function) native.GetObjectProperty("specialAbilityChargeSmall");
			specialAbilityChargeSmall.Call(native, player, p1, p2);
		}

		/// <summary>
		/// Only 1 match. Both p1 & p2 were true.
		/// </summary>
		public void SpecialAbilityChargeMedium(int player, bool p1, bool p2)
		{
			if (specialAbilityChargeMedium == null) specialAbilityChargeMedium = (Function) native.GetObjectProperty("specialAbilityChargeMedium");
			specialAbilityChargeMedium.Call(native, player, p1, p2);
		}

		/// <summary>
		/// 2 matches. p1 was always true.
		/// </summary>
		public void SpecialAbilityChargeLarge(int player, bool p1, bool p2)
		{
			if (specialAbilityChargeLarge == null) specialAbilityChargeLarge = (Function) native.GetObjectProperty("specialAbilityChargeLarge");
			specialAbilityChargeLarge.Call(native, player, p1, p2);
		}

		/// <summary>
		/// p1 appears to always be 1 (only comes up twice)
		/// </summary>
		public void SpecialAbilityChargeContinuous(int player, int p2)
		{
			if (specialAbilityChargeContinuous == null) specialAbilityChargeContinuous = (Function) native.GetObjectProperty("specialAbilityChargeContinuous");
			specialAbilityChargeContinuous.Call(native, player, p2);
		}

		/// <summary>
		/// p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
		/// </summary>
		/// <param name="p1">appears as 5, 10, 15, 25, or 30. p2 is always true.</param>
		public void SpecialAbilityChargeAbsolute(int player, int p1, bool p2)
		{
			if (specialAbilityChargeAbsolute == null) specialAbilityChargeAbsolute = (Function) native.GetObjectProperty("specialAbilityChargeAbsolute");
			specialAbilityChargeAbsolute.Call(native, player, p1, p2);
		}

		/// <summary>
		/// normalizedValue is from 0.0 - 1.0
		/// p2 is always 1
		/// </summary>
		/// <param name="normalizedValue">is from 0.0 - 1.0</param>
		/// <param name="p2">is always 1</param>
		public void SpecialAbilityChargeNormalized(int player, double normalizedValue, bool p2)
		{
			if (specialAbilityChargeNormalized == null) specialAbilityChargeNormalized = (Function) native.GetObjectProperty("specialAbilityChargeNormalized");
			specialAbilityChargeNormalized.Call(native, player, normalizedValue, p2);
		}

		/// <summary>
		/// Also known as _RECHARGE_SPECIAL_ABILITY
		/// </summary>
		public void SpecialAbilityFillMeter(int player, bool p1)
		{
			if (specialAbilityFillMeter == null) specialAbilityFillMeter = (Function) native.GetObjectProperty("specialAbilityFillMeter");
			specialAbilityFillMeter.Call(native, player, p1);
		}

		/// <summary>
		/// p1 was always true.
		/// </summary>
		/// <param name="p1">was always true.</param>
		public void SpecialAbilityDepleteMeter(int player, bool p1)
		{
			if (specialAbilityDepleteMeter == null) specialAbilityDepleteMeter = (Function) native.GetObjectProperty("specialAbilityDepleteMeter");
			specialAbilityDepleteMeter.Call(native, player, p1);
		}

		public void SpecialAbilityLock(int playerModel)
		{
			if (specialAbilityLock == null) specialAbilityLock = (Function) native.GetObjectProperty("specialAbilityLock");
			specialAbilityLock.Call(native, playerModel);
		}

		public void SpecialAbilityUnlock(int playerModel)
		{
			if (specialAbilityUnlock == null) specialAbilityUnlock = (Function) native.GetObjectProperty("specialAbilityUnlock");
			specialAbilityUnlock.Call(native, playerModel);
		}

		public bool IsSpecialAbilityUnlocked(int playerModel)
		{
			if (isSpecialAbilityUnlocked == null) isSpecialAbilityUnlocked = (Function) native.GetObjectProperty("isSpecialAbilityUnlocked");
			return (bool) isSpecialAbilityUnlocked.Call(native, playerModel);
		}

		public bool IsSpecialAbilityActive(int player)
		{
			if (isSpecialAbilityActive == null) isSpecialAbilityActive = (Function) native.GetObjectProperty("isSpecialAbilityActive");
			return (bool) isSpecialAbilityActive.Call(native, player);
		}

		public bool IsSpecialAbilityMeterFull(int player)
		{
			if (isSpecialAbilityMeterFull == null) isSpecialAbilityMeterFull = (Function) native.GetObjectProperty("isSpecialAbilityMeterFull");
			return (bool) isSpecialAbilityMeterFull.Call(native, player);
		}

		public void EnableSpecialAbility(int player, bool toggle)
		{
			if (enableSpecialAbility == null) enableSpecialAbility = (Function) native.GetObjectProperty("enableSpecialAbility");
			enableSpecialAbility.Call(native, player, toggle);
		}

		public bool IsSpecialAbilityEnabled(int player)
		{
			if (isSpecialAbilityEnabled == null) isSpecialAbilityEnabled = (Function) native.GetObjectProperty("isSpecialAbilityEnabled");
			return (bool) isSpecialAbilityEnabled.Call(native, player);
		}

		public void SetSpecialAbilityMultiplier(double multiplier)
		{
			if (setSpecialAbilityMultiplier == null) setSpecialAbilityMultiplier = (Function) native.GetObjectProperty("setSpecialAbilityMultiplier");
			setSpecialAbilityMultiplier.Call(native, multiplier);
		}

		public void _0xFFEE8FA29AB9A18E(int player)
		{
			if (__0xFFEE8FA29AB9A18E == null) __0xFFEE8FA29AB9A18E = (Function) native.GetObjectProperty("_0xFFEE8FA29AB9A18E");
			__0xFFEE8FA29AB9A18E.Call(native, player);
		}

		/// <summary>
		/// Appears once in "re_dealgonewrong"
		/// </summary>
		public bool _0x5FC472C501CCADB3(int player)
		{
			if (__0x5FC472C501CCADB3 == null) __0x5FC472C501CCADB3 = (Function) native.GetObjectProperty("_0x5FC472C501CCADB3");
			return (bool) __0x5FC472C501CCADB3.Call(native, player);
		}

		/// <summary>
		/// Only 1 occurrence. p1 was 2.
		/// </summary>
		public bool _0xF10B44FD479D69F3(int player, int p1)
		{
			if (__0xF10B44FD479D69F3 == null) __0xF10B44FD479D69F3 = (Function) native.GetObjectProperty("_0xF10B44FD479D69F3");
			return (bool) __0xF10B44FD479D69F3.Call(native, player, p1);
		}

		/// <summary>
		/// 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
		/// </summary>
		public bool _0xDD2620B7B9D16FF1(int player, double p1)
		{
			if (__0xDD2620B7B9D16FF1 == null) __0xDD2620B7B9D16FF1 = (Function) native.GetObjectProperty("_0xDD2620B7B9D16FF1");
			return (bool) __0xDD2620B7B9D16FF1.Call(native, player, p1);
		}

		public void StartPlayerTeleport(int player, double x, double y, double z, double heading, bool p5, bool p6, bool p7)
		{
			if (startPlayerTeleport == null) startPlayerTeleport = (Function) native.GetObjectProperty("startPlayerTeleport");
			startPlayerTeleport.Call(native, player, x, y, z, heading, p5, p6, p7);
		}

		public bool HasPlayerTeleportFinished(int player)
		{
			if (hasPlayerTeleportFinished == null) hasPlayerTeleportFinished = (Function) native.GetObjectProperty("hasPlayerTeleportFinished");
			return (bool) hasPlayerTeleportFinished.Call(native, player);
		}

		/// <summary>
		/// Disables the player's teleportation
		/// </summary>
		public void StopPlayerTeleport()
		{
			if (stopPlayerTeleport == null) stopPlayerTeleport = (Function) native.GetObjectProperty("stopPlayerTeleport");
			stopPlayerTeleport.Call(native);
		}

		public bool IsPlayerTeleportActive()
		{
			if (isPlayerTeleportActive == null) isPlayerTeleportActive = (Function) native.GetObjectProperty("isPlayerTeleportActive");
			return (bool) isPlayerTeleportActive.Call(native);
		}

		public double GetPlayerCurrentStealthNoise(int player)
		{
			if (getPlayerCurrentStealthNoise == null) getPlayerCurrentStealthNoise = (Function) native.GetObjectProperty("getPlayerCurrentStealthNoise");
			return (double) getPlayerCurrentStealthNoise.Call(native, player);
		}

		public void SetPlayerHealthRechargeMultiplier(int player, double regenRate)
		{
			if (setPlayerHealthRechargeMultiplier == null) setPlayerHealthRechargeMultiplier = (Function) native.GetObjectProperty("setPlayerHealthRechargeMultiplier");
			setPlayerHealthRechargeMultiplier.Call(native, player, regenRate);
		}

		public double GetPlayerHealthRechargeLimit(int player)
		{
			if (getPlayerHealthRechargeLimit == null) getPlayerHealthRechargeLimit = (Function) native.GetObjectProperty("getPlayerHealthRechargeLimit");
			return (double) getPlayerHealthRechargeLimit.Call(native, player);
		}

		public void SetPlayerHealthRechargeLimit(int player, double limit)
		{
			if (setPlayerHealthRechargeLimit == null) setPlayerHealthRechargeLimit = (Function) native.GetObjectProperty("setPlayerHealthRechargeLimit");
			setPlayerHealthRechargeLimit.Call(native, player, limit);
		}

		public void SetPlayerFallDistance(object p0, object p1)
		{
			if (setPlayerFallDistance == null) setPlayerFallDistance = (Function) native.GetObjectProperty("setPlayerFallDistance");
			setPlayerFallDistance.Call(native, p0, p1);
		}

		/// <summary>
		/// This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
		/// Based on tests, it is unlikely to be a multiplier.
		/// modifier's min value is 0.1
		/// </summary>
		public void SetPlayerWeaponDamageModifier(int player, double modifier)
		{
			if (setPlayerWeaponDamageModifier == null) setPlayerWeaponDamageModifier = (Function) native.GetObjectProperty("setPlayerWeaponDamageModifier");
			setPlayerWeaponDamageModifier.Call(native, player, modifier);
		}

		/// <summary>
		/// modifier's min value is 0.1
		/// </summary>
		public void SetPlayerWeaponDefenseModifier(int player, double modifier)
		{
			if (setPlayerWeaponDefenseModifier == null) setPlayerWeaponDefenseModifier = (Function) native.GetObjectProperty("setPlayerWeaponDefenseModifier");
			setPlayerWeaponDefenseModifier.Call(native, player, modifier);
		}

		/// <summary>
		/// modifier's min value is 0.1
		/// </summary>
		public void SetPlayerWeaponDefenseModifier2(int player, double modifier)
		{
			if (setPlayerWeaponDefenseModifier2 == null) setPlayerWeaponDefenseModifier2 = (Function) native.GetObjectProperty("setPlayerWeaponDefenseModifier2");
			setPlayerWeaponDefenseModifier2.Call(native, player, modifier);
		}

		/// <summary>
		/// modifier's min value is 0.1
		/// </summary>
		public void SetPlayerMeleeWeaponDamageModifier(int player, double modifier, bool p2)
		{
			if (setPlayerMeleeWeaponDamageModifier == null) setPlayerMeleeWeaponDamageModifier = (Function) native.GetObjectProperty("setPlayerMeleeWeaponDamageModifier");
			setPlayerMeleeWeaponDamageModifier.Call(native, player, modifier, p2);
		}

		/// <summary>
		/// modifier's min value is 0.1
		/// </summary>
		public void SetPlayerMeleeWeaponDefenseModifier(int player, double modifier)
		{
			if (setPlayerMeleeWeaponDefenseModifier == null) setPlayerMeleeWeaponDefenseModifier = (Function) native.GetObjectProperty("setPlayerMeleeWeaponDefenseModifier");
			setPlayerMeleeWeaponDefenseModifier.Call(native, player, modifier);
		}

		/// <summary>
		/// modifier's min value is 0.1
		/// </summary>
		public void SetPlayerVehicleDamageModifier(int player, double modifier)
		{
			if (setPlayerVehicleDamageModifier == null) setPlayerVehicleDamageModifier = (Function) native.GetObjectProperty("setPlayerVehicleDamageModifier");
			setPlayerVehicleDamageModifier.Call(native, player, modifier);
		}

		/// <summary>
		/// modifier's min value is 0.1
		/// </summary>
		public void SetPlayerVehicleDefenseModifier(int player, double modifier)
		{
			if (setPlayerVehicleDefenseModifier == null) setPlayerVehicleDefenseModifier = (Function) native.GetObjectProperty("setPlayerVehicleDefenseModifier");
			setPlayerVehicleDefenseModifier.Call(native, player, modifier);
		}

		/// <summary>
		/// SET_PLAYER_MAX_*
		/// </summary>
		public void _0x8D768602ADEF2245(int player, double p1)
		{
			if (__0x8D768602ADEF2245 == null) __0x8D768602ADEF2245 = (Function) native.GetObjectProperty("_0x8D768602ADEF2245");
			__0x8D768602ADEF2245.Call(native, player, p1);
		}

		public void _0xD821056B9ACF8052(object p0, object p1)
		{
			if (__0xD821056B9ACF8052 == null) __0xD821056B9ACF8052 = (Function) native.GetObjectProperty("_0xD821056B9ACF8052");
			__0xD821056B9ACF8052.Call(native, p0, p1);
		}

		public void _0x31E90B8873A4CD3B(object p0, object p1)
		{
			if (__0x31E90B8873A4CD3B == null) __0x31E90B8873A4CD3B = (Function) native.GetObjectProperty("_0x31E90B8873A4CD3B");
			__0x31E90B8873A4CD3B.Call(native, p0, p1);
		}

		/// <summary>
		/// Tints:
		/// None = -1,
		/// Rainbow = 0,
		/// Red = 1,
		/// SeasideStripes = 2,
		/// WidowMaker = 3,
		/// Patriot = 4,
		/// Blue = 5,
		/// Black = 6,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xA3D0E54541D9A5E5
		/// </summary>
		public void SetPlayerParachuteTintIndex(int player, int tintIndex)
		{
			if (setPlayerParachuteTintIndex == null) setPlayerParachuteTintIndex = (Function) native.GetObjectProperty("setPlayerParachuteTintIndex");
			setPlayerParachuteTintIndex.Call(native, player, tintIndex);
		}

		/// <summary>
		/// Tints:
		/// None = -1,
		/// Rainbow = 0,
		/// Red = 1,
		/// SeasideStripes = 2,
		/// WidowMaker = 3,
		/// Patriot = 4,
		/// Blue = 5,
		/// Black = 6,
		/// See NativeDB for reference: http://natives.altv.mp/#/0x75D3F7A1B0D9B145
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) GetPlayerParachuteTintIndex(int player, int tintIndex)
		{
			if (getPlayerParachuteTintIndex == null) getPlayerParachuteTintIndex = (Function) native.GetObjectProperty("getPlayerParachuteTintIndex");
			var results = (Array) getPlayerParachuteTintIndex.Call(native, player, tintIndex);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// Tints:
		/// None = -1,
		/// Rainbow = 0,
		/// Red = 1,
		/// SeasideStripes = 2,
		/// WidowMaker = 3,
		/// Patriot = 4,
		/// Blue = 5,
		/// Black = 6,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xAF04C87F5DC1DF38
		/// </summary>
		public void SetPlayerReserveParachuteTintIndex(int player, int index)
		{
			if (setPlayerReserveParachuteTintIndex == null) setPlayerReserveParachuteTintIndex = (Function) native.GetObjectProperty("setPlayerReserveParachuteTintIndex");
			setPlayerReserveParachuteTintIndex.Call(native, player, index);
		}

		/// <summary>
		/// Tints:
		/// None = -1,
		/// Rainbow = 0,
		/// Red = 1,
		/// SeasideStripes = 2,
		/// WidowMaker = 3,
		/// Patriot = 4,
		/// Blue = 5,
		/// Black = 6,
		/// See NativeDB for reference: http://natives.altv.mp/#/0xD5A016BC3C09CF40
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) GetPlayerReserveParachuteTintIndex(int player, int index)
		{
			if (getPlayerReserveParachuteTintIndex == null) getPlayerReserveParachuteTintIndex = (Function) native.GetObjectProperty("getPlayerReserveParachuteTintIndex");
			var results = (Array) getPlayerReserveParachuteTintIndex.Call(native, player, index);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// tints 0- 13
		/// 0 - unkown
		/// 1 - unkown
		/// 2 - unkown
		/// 3 - unkown
		/// 4 - unkown
		/// </summary>
		public void SetPlayerParachutePackTintIndex(int player, int tintIndex)
		{
			if (setPlayerParachutePackTintIndex == null) setPlayerParachutePackTintIndex = (Function) native.GetObjectProperty("setPlayerParachutePackTintIndex");
			setPlayerParachutePackTintIndex.Call(native, player, tintIndex);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) GetPlayerParachutePackTintIndex(int player, int tintIndex)
		{
			if (getPlayerParachutePackTintIndex == null) getPlayerParachutePackTintIndex = (Function) native.GetObjectProperty("getPlayerParachutePackTintIndex");
			var results = (Array) getPlayerParachutePackTintIndex.Call(native, player, tintIndex);
			return (results[0], (int) results[1]);
		}

		public void SetPlayerHasReserveParachute(int player)
		{
			if (setPlayerHasReserveParachute == null) setPlayerHasReserveParachute = (Function) native.GetObjectProperty("setPlayerHasReserveParachute");
			setPlayerHasReserveParachute.Call(native, player);
		}

		public bool GetPlayerHasReserveParachute(int player)
		{
			if (getPlayerHasReserveParachute == null) getPlayerHasReserveParachute = (Function) native.GetObjectProperty("getPlayerHasReserveParachute");
			return (bool) getPlayerHasReserveParachute.Call(native, player);
		}

		public void SetPlayerCanLeaveParachuteSmokeTrail(int player, bool enabled)
		{
			if (setPlayerCanLeaveParachuteSmokeTrail == null) setPlayerCanLeaveParachuteSmokeTrail = (Function) native.GetObjectProperty("setPlayerCanLeaveParachuteSmokeTrail");
			setPlayerCanLeaveParachuteSmokeTrail.Call(native, player, enabled);
		}

		public void SetPlayerParachuteSmokeTrailColor(int player, int r, int g, int b)
		{
			if (setPlayerParachuteSmokeTrailColor == null) setPlayerParachuteSmokeTrailColor = (Function) native.GetObjectProperty("setPlayerParachuteSmokeTrailColor");
			setPlayerParachuteSmokeTrailColor.Call(native, player, r, g, b);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetPlayerParachuteSmokeTrailColor(int player, int r, int g, int b)
		{
			if (getPlayerParachuteSmokeTrailColor == null) getPlayerParachuteSmokeTrailColor = (Function) native.GetObjectProperty("getPlayerParachuteSmokeTrailColor");
			var results = (Array) getPlayerParachuteSmokeTrailColor.Call(native, player, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// example:
		/// flags: 0-6
		/// PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);
		/// wouldnt the flag be the seatIndex?
		/// </summary>
		/// <param name="flags">0-6</param>
		public void SetPlayerResetFlagPreferRearSeats(int player, int flags)
		{
			if (setPlayerResetFlagPreferRearSeats == null) setPlayerResetFlagPreferRearSeats = (Function) native.GetObjectProperty("setPlayerResetFlagPreferRearSeats");
			setPlayerResetFlagPreferRearSeats.Call(native, player, flags);
		}

		public void SetPlayerNoiseMultiplier(int player, double multiplier)
		{
			if (setPlayerNoiseMultiplier == null) setPlayerNoiseMultiplier = (Function) native.GetObjectProperty("setPlayerNoiseMultiplier");
			setPlayerNoiseMultiplier.Call(native, player, multiplier);
		}

		/// <summary>
		/// Values around 1.0f to 2.0f used in game scripts.
		/// </summary>
		public void SetPlayerSneakingNoiseMultiplier(int player, double multiplier)
		{
			if (setPlayerSneakingNoiseMultiplier == null) setPlayerSneakingNoiseMultiplier = (Function) native.GetObjectProperty("setPlayerSneakingNoiseMultiplier");
			setPlayerSneakingNoiseMultiplier.Call(native, player, multiplier);
		}

		public bool CanPedHearPlayer(int player, int ped)
		{
			if (canPedHearPlayer == null) canPedHearPlayer = (Function) native.GetObjectProperty("canPedHearPlayer");
			return (bool) canPedHearPlayer.Call(native, player, ped);
		}

		/// <summary>
		/// This is to make the player walk without accepting input from INPUT.
		/// gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
		/// p4 is always 1 and p5 is always 0.
		/// C# Example :
		/// Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
		/// </summary>
		/// <param name="gaitType">is in increments of 100s. 2000, 500, 300, 200, etc.</param>
		/// <param name="p4">is always 1 and p5 is always 0.</param>
		public void SimulatePlayerInputGait(int player, double amount, int gaitType, double speed, bool p4, bool p5)
		{
			if (simulatePlayerInputGait == null) simulatePlayerInputGait = (Function) native.GetObjectProperty("simulatePlayerInputGait");
			simulatePlayerInputGait.Call(native, player, amount, gaitType, speed, p4, p5);
		}

		public void ResetPlayerInputGait(int player)
		{
			if (resetPlayerInputGait == null) resetPlayerInputGait = (Function) native.GetObjectProperty("resetPlayerInputGait");
			resetPlayerInputGait.Call(native, player);
		}

		public void SetAutoGiveParachuteWhenEnterPlane(int player, bool toggle)
		{
			if (setAutoGiveParachuteWhenEnterPlane == null) setAutoGiveParachuteWhenEnterPlane = (Function) native.GetObjectProperty("setAutoGiveParachuteWhenEnterPlane");
			setAutoGiveParachuteWhenEnterPlane.Call(native, player, toggle);
		}

		public void SetAutoGiveScubaGearWhenExitVehicle(int player, bool toggle)
		{
			if (setAutoGiveScubaGearWhenExitVehicle == null) setAutoGiveScubaGearWhenExitVehicle = (Function) native.GetObjectProperty("setAutoGiveScubaGearWhenExitVehicle");
			setAutoGiveScubaGearWhenExitVehicle.Call(native, player, toggle);
		}

		public void SetPlayerStealthPerceptionModifier(int player, double value)
		{
			if (setPlayerStealthPerceptionModifier == null) setPlayerStealthPerceptionModifier = (Function) native.GetObjectProperty("setPlayerStealthPerceptionModifier");
			setPlayerStealthPerceptionModifier.Call(native, player, value);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool _0x690A61A6D13583F6(int player)
		{
			if (__0x690A61A6D13583F6 == null) __0x690A61A6D13583F6 = (Function) native.GetObjectProperty("_0x690A61A6D13583F6");
			return (bool) __0x690A61A6D13583F6.Call(native, player);
		}

		public void _0x9EDD76E87D5D51BA(int player)
		{
			if (__0x9EDD76E87D5D51BA == null) __0x9EDD76E87D5D51BA = (Function) native.GetObjectProperty("_0x9EDD76E87D5D51BA");
			__0x9EDD76E87D5D51BA.Call(native, player);
		}

		public void SetPlayerSimulateAiming(int player, bool toggle)
		{
			if (setPlayerSimulateAiming == null) setPlayerSimulateAiming = (Function) native.GetObjectProperty("setPlayerSimulateAiming");
			setPlayerSimulateAiming.Call(native, player, toggle);
		}

		/// <summary>
		/// Every occurrence of p1 I found was true.1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
		/// </summary>
		public void SetPlayerClothPinFrames(int player, bool toggle)
		{
			if (setPlayerClothPinFrames == null) setPlayerClothPinFrames = (Function) native.GetObjectProperty("setPlayerClothPinFrames");
			setPlayerClothPinFrames.Call(native, player, toggle);
		}

		/// <summary>
		/// Every occurrence was either 0 or 2.
		/// </summary>
		public void SetPlayerClothPackageIndex(int index)
		{
			if (setPlayerClothPackageIndex == null) setPlayerClothPackageIndex = (Function) native.GetObjectProperty("setPlayerClothPackageIndex");
			setPlayerClothPackageIndex.Call(native, index);
		}

		/// <summary>
		/// 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
		/// </summary>
		public void SetPlayerClothLockCounter(int value)
		{
			if (setPlayerClothLockCounter == null) setPlayerClothLockCounter = (Function) native.GetObjectProperty("setPlayerClothLockCounter");
			setPlayerClothLockCounter.Call(native, value);
		}

		/// <summary>
		/// Only 1 match. ob_sofa_michael.
		/// PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
		/// </summary>
		public void PlayerAttachVirtualBound(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7)
		{
			if (playerAttachVirtualBound == null) playerAttachVirtualBound = (Function) native.GetObjectProperty("playerAttachVirtualBound");
			playerAttachVirtualBound.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
		/// </summary>
		public void PlayerDetachVirtualBound()
		{
			if (playerDetachVirtualBound == null) playerDetachVirtualBound = (Function) native.GetObjectProperty("playerDetachVirtualBound");
			playerDetachVirtualBound.Call(native);
		}

		public bool HasPlayerBeenSpottedInStolenVehicle(int player)
		{
			if (hasPlayerBeenSpottedInStolenVehicle == null) hasPlayerBeenSpottedInStolenVehicle = (Function) native.GetObjectProperty("hasPlayerBeenSpottedInStolenVehicle");
			return (bool) hasPlayerBeenSpottedInStolenVehicle.Call(native, player);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if an unk value is greater than 0.0f</returns>
		public bool IsPlayerBattleAware(int player)
		{
			if (isPlayerBattleAware == null) isPlayerBattleAware = (Function) native.GetObjectProperty("isPlayerBattleAware");
			return (bool) isPlayerBattleAware.Call(native, player);
		}

		/// <summary>
		/// var num3 = PLAYER::GET_PLAYER_PED(l_2171); // proof l_2171 is a player
		/// var num17 = PLAYER::0x9DF75B2A(l_2171, 100, 0); // l_2171
		/// .ysc:
		/// if (PLAYER::GET_PLAYER_WANTED_LEVEL(l_6EF) < v_4) { // l_6EF is a player
		/// PLAYER::SET_PLAYER_WANTED_LEVEL(l_6EF, v_4, 0); // l_6EF
		/// PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(l_6EF, 0); // l_6EF
		/// } else {
		/// PLAYER::_4669B3ED80F24B4E(l_6EF); // l_6EF
		/// UI::_BA8D65C1C65702E5(1);
		/// See NativeDB for reference: http://natives.altv.mp/#/0xBC0753C9CA14B506
		/// </summary>
		public bool _0xBC0753C9CA14B506(int player, int p1, bool p2)
		{
			if (__0xBC0753C9CA14B506 == null) __0xBC0753C9CA14B506 = (Function) native.GetObjectProperty("_0xBC0753C9CA14B506");
			return (bool) __0xBC0753C9CA14B506.Call(native, player, p1, p2);
		}

		/// <summary>
		/// Appears only 3 times in the scripts, more specifically in michael1.ysc
		/// -
		/// This can be used to prevent dying if you are "out of the world"
		/// </summary>
		public void ExtendWorldBoundaryForPlayer(double x, double y, double z)
		{
			if (extendWorldBoundaryForPlayer == null) extendWorldBoundaryForPlayer = (Function) native.GetObjectProperty("extendWorldBoundaryForPlayer");
			extendWorldBoundaryForPlayer.Call(native, x, y, z);
		}

		public void ResetWorldBoundaryForPlayer()
		{
			if (resetWorldBoundaryForPlayer == null) resetWorldBoundaryForPlayer = (Function) native.GetObjectProperty("resetWorldBoundaryForPlayer");
			resetWorldBoundaryForPlayer.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the player is riding a train.</returns>
		public bool IsPlayerRidingTrain(int player)
		{
			if (isPlayerRidingTrain == null) isPlayerRidingTrain = (Function) native.GetObjectProperty("isPlayerRidingTrain");
			return (bool) isPlayerRidingTrain.Call(native, player);
		}

		public bool HasPlayerLeftTheWorld(int player)
		{
			if (hasPlayerLeftTheWorld == null) hasPlayerLeftTheWorld = (Function) native.GetObjectProperty("hasPlayerLeftTheWorld");
			return (bool) hasPlayerLeftTheWorld.Call(native, player);
		}

		public void SetPlayerLeavePedBehind(int player, bool toggle)
		{
			if (setPlayerLeavePedBehind == null) setPlayerLeavePedBehind = (Function) native.GetObjectProperty("setPlayerLeavePedBehind");
			setPlayerLeavePedBehind.Call(native, player, toggle);
		}

		/// <summary>
		/// p1 was always 5.
		/// p4 was always false.
		/// </summary>
		/// <param name="p1">was always 5.</param>
		/// <param name="p4">was always false.</param>
		public void SetPlayerParachuteVariationOverride(int player, int p1, object p2, object p3, bool p4)
		{
			if (setPlayerParachuteVariationOverride == null) setPlayerParachuteVariationOverride = (Function) native.GetObjectProperty("setPlayerParachuteVariationOverride");
			setPlayerParachuteVariationOverride.Call(native, player, p1, p2, p3, p4);
		}

		public void ClearPlayerParachuteVariationOverride(int player)
		{
			if (clearPlayerParachuteVariationOverride == null) clearPlayerParachuteVariationOverride = (Function) native.GetObjectProperty("clearPlayerParachuteVariationOverride");
			clearPlayerParachuteVariationOverride.Call(native, player);
		}

		/// <summary>
		/// example:
		/// PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(PLAYER::PLAYER_ID(), 0x73268708);
		/// </summary>
		public void SetPlayerParachuteModelOverride(int player, int model)
		{
			if (setPlayerParachuteModelOverride == null) setPlayerParachuteModelOverride = (Function) native.GetObjectProperty("setPlayerParachuteModelOverride");
			setPlayerParachuteModelOverride.Call(native, player, model);
		}

		public void ClearPlayerParachuteModelOverride(int player)
		{
			if (clearPlayerParachuteModelOverride == null) clearPlayerParachuteModelOverride = (Function) native.GetObjectProperty("clearPlayerParachuteModelOverride");
			clearPlayerParachuteModelOverride.Call(native, player);
		}

		public void SetPlayerParachutePackModelOverride(int player, int model)
		{
			if (setPlayerParachutePackModelOverride == null) setPlayerParachutePackModelOverride = (Function) native.GetObjectProperty("setPlayerParachutePackModelOverride");
			setPlayerParachutePackModelOverride.Call(native, player, model);
		}

		public void ClearPlayerParachutePackModelOverride(int player)
		{
			if (clearPlayerParachutePackModelOverride == null) clearPlayerParachutePackModelOverride = (Function) native.GetObjectProperty("clearPlayerParachutePackModelOverride");
			clearPlayerParachutePackModelOverride.Call(native, player);
		}

		public void DisablePlayerVehicleRewards(int player)
		{
			if (disablePlayerVehicleRewards == null) disablePlayerVehicleRewards = (Function) native.GetObjectProperty("disablePlayerVehicleRewards");
			disablePlayerVehicleRewards.Call(native, player);
		}

		/// <summary>
		/// Used with radios:
		/// void sub_cf383(auto _a0) {
		/// if ((a_0)==1) {
		/// if (GAMEPLAY::IS_BIT_SET((g_240005._f1), 3)) {
		/// PLAYER::_2F7CEB6520288061(0);
		/// AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 0);
		/// AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0);
		/// AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 0);
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0x2F7CEB6520288061
		/// </summary>
		public void _0x2F7CEB6520288061(bool p0)
		{
			if (__0x2F7CEB6520288061 == null) __0x2F7CEB6520288061 = (Function) native.GetObjectProperty("_0x2F7CEB6520288061");
			__0x2F7CEB6520288061.Call(native, p0);
		}

		public void SetPlayerBluetoothState(int player, bool state)
		{
			if (setPlayerBluetoothState == null) setPlayerBluetoothState = (Function) native.GetObjectProperty("setPlayerBluetoothState");
			setPlayerBluetoothState.Call(native, player, state);
		}

		public bool IsPlayerBluetoothEnable(int player)
		{
			if (isPlayerBluetoothEnable == null) isPlayerBluetoothEnable = (Function) native.GetObjectProperty("isPlayerBluetoothEnable");
			return (bool) isPlayerBluetoothEnable.Call(native, player);
		}

		/// <summary>
		/// DISABLE_*
		/// </summary>
		public void _0x5501B7A5CDB79D37(int player)
		{
			if (__0x5501B7A5CDB79D37 == null) __0x5501B7A5CDB79D37 = (Function) native.GetObjectProperty("_0x5501B7A5CDB79D37");
			__0x5501B7A5CDB79D37.Call(native, player);
		}

		public int GetPlayerFakeWantedLevel(int player)
		{
			if (getPlayerFakeWantedLevel == null) getPlayerFakeWantedLevel = (Function) native.GetObjectProperty("getPlayerFakeWantedLevel");
			return (int) getPlayerFakeWantedLevel.Call(native, player);
		}

		public void _0x55FCC0C390620314(object p0, object p1, object p2)
		{
			if (__0x55FCC0C390620314 == null) __0x55FCC0C390620314 = (Function) native.GetObjectProperty("_0x55FCC0C390620314");
			__0x55FCC0C390620314.Call(native, p0, p1, p2);
		}

		public void _0x2382AB11450AE7BA(object p0, object p1)
		{
			if (__0x2382AB11450AE7BA == null) __0x2382AB11450AE7BA = (Function) native.GetObjectProperty("_0x2382AB11450AE7BA");
			__0x2382AB11450AE7BA.Call(native, p0, p1);
		}

		public object _0x6E4361FF3E8CD7CA(object p0)
		{
			if (__0x6E4361FF3E8CD7CA == null) __0x6E4361FF3E8CD7CA = (Function) native.GetObjectProperty("_0x6E4361FF3E8CD7CA");
			return __0x6E4361FF3E8CD7CA.Call(native, p0);
		}

		public void _0x237440E46D918649(object p0)
		{
			if (__0x237440E46D918649 == null) __0x237440E46D918649 = (Function) native.GetObjectProperty("_0x237440E46D918649");
			__0x237440E46D918649.Call(native, p0);
		}

		public void SetPlayerHomingRocketDisabled(object p0, object p1)
		{
			if (setPlayerHomingRocketDisabled == null) setPlayerHomingRocketDisabled = (Function) native.GetObjectProperty("setPlayerHomingRocketDisabled");
			setPlayerHomingRocketDisabled.Call(native, p0, p1);
		}

		public void _0x7BAE68775557AE0B(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (__0x7BAE68775557AE0B == null) __0x7BAE68775557AE0B = (Function) native.GetObjectProperty("_0x7BAE68775557AE0B");
			__0x7BAE68775557AE0B.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void _0x7148E0F43D11F0D9()
		{
			if (__0x7148E0F43D11F0D9 == null) __0x7148E0F43D11F0D9 = (Function) native.GetObjectProperty("_0x7148E0F43D11F0D9");
			__0x7148E0F43D11F0D9.Call(native);
		}

		public void _0x70A382ADEC069DD3(object p0, object p1, object p2)
		{
			if (__0x70A382ADEC069DD3 == null) __0x70A382ADEC069DD3 = (Function) native.GetObjectProperty("_0x70A382ADEC069DD3");
			__0x70A382ADEC069DD3.Call(native, p0, p1, p2);
		}

		public void _0x48621C9FCA3EBD28(int p0)
		{
			if (__0x48621C9FCA3EBD28 == null) __0x48621C9FCA3EBD28 = (Function) native.GetObjectProperty("_0x48621C9FCA3EBD28");
			__0x48621C9FCA3EBD28.Call(native, p0);
		}

		public void _0x81CBAE94390F9F89()
		{
			if (__0x81CBAE94390F9F89 == null) __0x81CBAE94390F9F89 = (Function) native.GetObjectProperty("_0x81CBAE94390F9F89");
			__0x81CBAE94390F9F89.Call(native);
		}

		public void _0x13B350B8AD0EEE10()
		{
			if (__0x13B350B8AD0EEE10 == null) __0x13B350B8AD0EEE10 = (Function) native.GetObjectProperty("_0x13B350B8AD0EEE10");
			__0x13B350B8AD0EEE10.Call(native);
		}

		public void _0x293220DA1B46CEBC(double p0, double p1, int p2)
		{
			if (__0x293220DA1B46CEBC == null) __0x293220DA1B46CEBC = (Function) native.GetObjectProperty("_0x293220DA1B46CEBC");
			__0x293220DA1B46CEBC.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
		/// first one seems to be a string of a mission name, second one seems to be a bool/toggle
		/// p1 was always 0.
		/// </summary>
		/// <param name="p1">was always 0.</param>
		public void _0x208784099002BC30(string missionNameLabel, object p1)
		{
			if (__0x208784099002BC30 == null) __0x208784099002BC30 = (Function) native.GetObjectProperty("_0x208784099002BC30");
			__0x208784099002BC30.Call(native, missionNameLabel, p1);
		}

		public void StopRecordingThisFrame()
		{
			if (stopRecordingThisFrame == null) stopRecordingThisFrame = (Function) native.GetObjectProperty("stopRecordingThisFrame");
			stopRecordingThisFrame.Call(native);
		}

		public void _0xF854439EFBB3B583()
		{
			if (__0xF854439EFBB3B583 == null) __0xF854439EFBB3B583 = (Function) native.GetObjectProperty("_0xF854439EFBB3B583");
			__0xF854439EFBB3B583.Call(native);
		}

		/// <summary>
		/// This will disable the ability to make camera changes in R* Editor.
		/// RE*
		/// </summary>
		public void DisableRockstarEditorCameraChanges()
		{
			if (disableRockstarEditorCameraChanges == null) disableRockstarEditorCameraChanges = (Function) native.GetObjectProperty("disableRockstarEditorCameraChanges");
			disableRockstarEditorCameraChanges.Call(native);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0x66972397E0757E7A(int p0, int p1, int p2)
		{
			if (__0x66972397E0757E7A == null) __0x66972397E0757E7A = (Function) native.GetObjectProperty("_0x66972397E0757E7A");
			__0x66972397E0757E7A.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// Starts recording a replay.
		/// If mode is 0, turns on action replay.
		/// If mode is 1, starts recording.
		/// If already recording a replay, does nothing.
		/// </summary>
		public void StartRecording(int mode)
		{
			if (startRecording == null) startRecording = (Function) native.GetObjectProperty("startRecording");
			startRecording.Call(native, mode);
		}

		/// <summary>
		/// Stops recording and saves the recorded clip.
		/// </summary>
		public void StopRecordingAndSaveClip()
		{
			if (stopRecordingAndSaveClip == null) stopRecordingAndSaveClip = (Function) native.GetObjectProperty("stopRecordingAndSaveClip");
			stopRecordingAndSaveClip.Call(native);
		}

		/// <summary>
		/// Stops recording and discards the recorded clip.
		/// </summary>
		public void StopRecordingAndDiscardClip()
		{
			if (stopRecordingAndDiscardClip == null) stopRecordingAndDiscardClip = (Function) native.GetObjectProperty("stopRecordingAndDiscardClip");
			stopRecordingAndDiscardClip.Call(native);
		}

		public bool SaveRecordingClip()
		{
			if (saveRecordingClip == null) saveRecordingClip = (Function) native.GetObjectProperty("saveRecordingClip");
			return (bool) saveRecordingClip.Call(native);
		}

		/// <summary>
		/// mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
		/// retn
		/// </summary>
		/// <returns>Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)</returns>
		public bool IsRecording()
		{
			if (isRecording == null) isRecording = (Function) native.GetObjectProperty("isRecording");
			return (bool) isRecording.Call(native);
		}

		public object _0xDF4B952F7D381B95()
		{
			if (__0xDF4B952F7D381B95 == null) __0xDF4B952F7D381B95 = (Function) native.GetObjectProperty("_0xDF4B952F7D381B95");
			return __0xDF4B952F7D381B95.Call(native);
		}

		public object _0x4282E08174868BE3()
		{
			if (__0x4282E08174868BE3 == null) __0x4282E08174868BE3 = (Function) native.GetObjectProperty("_0x4282E08174868BE3");
			return __0x4282E08174868BE3.Call(native);
		}

		public bool _0x33D47E85B476ABCD(bool p0)
		{
			if (__0x33D47E85B476ABCD == null) __0x33D47E85B476ABCD = (Function) native.GetObjectProperty("_0x33D47E85B476ABCD");
			return (bool) __0x33D47E85B476ABCD.Call(native, p0);
		}

		/// <summary>
		/// Does nothing (it's a nullsub).
		/// </summary>
		public void _0x7E2BD3EF6C205F09(string p0, bool p1)
		{
			if (__0x7E2BD3EF6C205F09 == null) __0x7E2BD3EF6C205F09 = (Function) native.GetObjectProperty("_0x7E2BD3EF6C205F09");
			__0x7E2BD3EF6C205F09.Call(native, p0, p1);
		}

		public bool IsInteriorRenderingDisabled()
		{
			if (isInteriorRenderingDisabled == null) isInteriorRenderingDisabled = (Function) native.GetObjectProperty("isInteriorRenderingDisabled");
			return (bool) isInteriorRenderingDisabled.Call(native);
		}

		/// <summary>
		/// Disables some other rendering (internal)
		/// </summary>
		public void _0x5AD3932DAEB1E5D3()
		{
			if (__0x5AD3932DAEB1E5D3 == null) __0x5AD3932DAEB1E5D3 = (Function) native.GetObjectProperty("_0x5AD3932DAEB1E5D3");
			__0x5AD3932DAEB1E5D3.Call(native);
		}

		public void _0xE058175F8EAFE79A(bool p0)
		{
			if (__0xE058175F8EAFE79A == null) __0xE058175F8EAFE79A = (Function) native.GetObjectProperty("_0xE058175F8EAFE79A");
			__0xE058175F8EAFE79A.Call(native, p0);
		}

		/// <summary>
		/// Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
		/// </summary>
		public void ResetEditorValues()
		{
			if (resetEditorValues == null) resetEditorValues = (Function) native.GetObjectProperty("resetEditorValues");
			resetEditorValues.Call(native);
		}

		/// <summary>
		/// Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
		/// </summary>
		public void ActivateRockstarEditor()
		{
			if (activateRockstarEditor == null) activateRockstarEditor = (Function) native.GetObjectProperty("activateRockstarEditor");
			activateRockstarEditor.Call(native);
		}

		public void RequestScript(string scriptName)
		{
			if (requestScript == null) requestScript = (Function) native.GetObjectProperty("requestScript");
			requestScript.Call(native, scriptName);
		}

		public void SetScriptAsNoLongerNeeded(string scriptName)
		{
			if (setScriptAsNoLongerNeeded == null) setScriptAsNoLongerNeeded = (Function) native.GetObjectProperty("setScriptAsNoLongerNeeded");
			setScriptAsNoLongerNeeded.Call(native, scriptName);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.</returns>
		public bool HasScriptLoaded(string scriptName)
		{
			if (hasScriptLoaded == null) hasScriptLoaded = (Function) native.GetObjectProperty("hasScriptLoaded");
			return (bool) hasScriptLoaded.Call(native, scriptName);
		}

		public bool DoesScriptExist(string scriptName)
		{
			if (doesScriptExist == null) doesScriptExist = (Function) native.GetObjectProperty("doesScriptExist");
			return (bool) doesScriptExist.Call(native, scriptName);
		}

		/// <summary>
		/// formerly _REQUEST_STREAMED_SCRIPT
		/// </summary>
		public void RequestScriptWithNameHash(int scriptHash)
		{
			if (requestScriptWithNameHash == null) requestScriptWithNameHash = (Function) native.GetObjectProperty("requestScriptWithNameHash");
			requestScriptWithNameHash.Call(native, scriptHash);
		}

		public void SetScriptWithNameHashAsNoLongerNeeded(int scriptHash)
		{
			if (setScriptWithNameHashAsNoLongerNeeded == null) setScriptWithNameHashAsNoLongerNeeded = (Function) native.GetObjectProperty("setScriptWithNameHashAsNoLongerNeeded");
			setScriptWithNameHashAsNoLongerNeeded.Call(native, scriptHash);
		}

		public bool HasScriptWithNameHashLoaded(int scriptHash)
		{
			if (hasScriptWithNameHashLoaded == null) hasScriptWithNameHashLoaded = (Function) native.GetObjectProperty("hasScriptWithNameHashLoaded");
			return (bool) hasScriptWithNameHashLoaded.Call(native, scriptHash);
		}

		public bool DoesScriptWithNameHashExist(int scriptHash)
		{
			if (doesScriptWithNameHashExist == null) doesScriptWithNameHashExist = (Function) native.GetObjectProperty("doesScriptWithNameHashExist");
			return (bool) doesScriptWithNameHashExist.Call(native, scriptHash);
		}

		public void TerminateThread(int threadId)
		{
			if (terminateThread == null) terminateThread = (Function) native.GetObjectProperty("terminateThread");
			terminateThread.Call(native, threadId);
		}

		public bool IsThreadActive(int threadId)
		{
			if (isThreadActive == null) isThreadActive = (Function) native.GetObjectProperty("isThreadActive");
			return (bool) isThreadActive.Call(native, threadId);
		}

		public string GetNameOfThread(int threadId)
		{
			if (getNameOfThread == null) getNameOfThread = (Function) native.GetObjectProperty("getNameOfThread");
			return (string) getNameOfThread.Call(native, threadId);
		}

		/// <summary>
		/// Starts a new iteration of the current threads.
		/// Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
		/// </summary>
		public void ScriptThreadIteratorReset()
		{
			if (scriptThreadIteratorReset == null) scriptThreadIteratorReset = (Function) native.GetObjectProperty("scriptThreadIteratorReset");
			scriptThreadIteratorReset.Call(native);
		}

		public int ScriptThreadIteratorGetNextThreadId()
		{
			if (scriptThreadIteratorGetNextThreadId == null) scriptThreadIteratorGetNextThreadId = (Function) native.GetObjectProperty("scriptThreadIteratorGetNextThreadId");
			return (int) scriptThreadIteratorGetNextThreadId.Call(native);
		}

		public int GetIdOfThisThread()
		{
			if (getIdOfThisThread == null) getIdOfThisThread = (Function) native.GetObjectProperty("getIdOfThisThread");
			return (int) getIdOfThisThread.Call(native);
		}

		public void TerminateThisThread()
		{
			if (terminateThisThread == null) terminateThisThread = (Function) native.GetObjectProperty("terminateThisThread");
			terminateThisThread.Call(native);
		}

		/// <summary>
		/// Gets the number of instances of the specified script is currently running.
		/// if (program)
		/// v3 = rage::scrProgram::GetNumRefs(program) - 1;
		/// return v3;
		/// </summary>
		/// <returns>Actually returns numRefs - 1.</returns>
		public int GetNumberOfReferencesOfScriptWithNameHash(int scriptHash)
		{
			if (getNumberOfReferencesOfScriptWithNameHash == null) getNumberOfReferencesOfScriptWithNameHash = (Function) native.GetObjectProperty("getNumberOfReferencesOfScriptWithNameHash");
			return (int) getNumberOfReferencesOfScriptWithNameHash.Call(native, scriptHash);
		}

		public string GetThisScriptName()
		{
			if (getThisScriptName == null) getThisScriptName = (Function) native.GetObjectProperty("getThisScriptName");
			return (string) getThisScriptName.Call(native);
		}

		public int GetHashOfThisScriptName()
		{
			if (getHashOfThisScriptName == null) getHashOfThisScriptName = (Function) native.GetObjectProperty("getHashOfThisScriptName");
			return (int) getHashOfThisScriptName.Call(native);
		}

		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		/// </summary>
		/// <param name="eventGroup">0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)</param>
		public int GetNumberOfEvents(int eventGroup)
		{
			if (getNumberOfEvents == null) getNumberOfEvents = (Function) native.GetObjectProperty("getNumberOfEvents");
			return (int) getNumberOfEvents.Call(native, eventGroup);
		}

		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		/// </summary>
		/// <param name="eventGroup">0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)</param>
		public bool GetEventExists(int eventGroup, int eventIndex)
		{
			if (getEventExists == null) getEventExists = (Function) native.GetObjectProperty("getEventExists");
			return (bool) getEventExists.Call(native, eventGroup, eventIndex);
		}

		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		/// </summary>
		/// <param name="eventGroup">0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)</param>
		public int GetEventAtIndex(int eventGroup, int eventIndex)
		{
			if (getEventAtIndex == null) getEventAtIndex = (Function) native.GetObjectProperty("getEventAtIndex");
			return (int) getEventAtIndex.Call(native, eventGroup, eventIndex);
		}

		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		/// </summary>
		/// <param name="eventGroup">0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)</param>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetEventData(int eventGroup, int eventIndex, int argStruct, int argStructSize)
		{
			if (getEventData == null) getEventData = (Function) native.GetObjectProperty("getEventData");
			var results = (Array) getEventData.Call(native, eventGroup, eventIndex, argStruct, argStructSize);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		/// </summary>
		/// <param name="eventGroup">0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)</param>
		/// <returns>Array<void, int></returns>
		public (object, int) TriggerScriptEvent(int eventGroup, int args, int argCount, int bit)
		{
			if (triggerScriptEvent == null) triggerScriptEvent = (Function) native.GetObjectProperty("triggerScriptEvent");
			var results = (Array) triggerScriptEvent.Call(native, eventGroup, args, argCount, bit);
			return (results[0], (int) results[1]);
		}

		public void ShutdownLoadingScreen()
		{
			if (shutdownLoadingScreen == null) shutdownLoadingScreen = (Function) native.GetObjectProperty("shutdownLoadingScreen");
			shutdownLoadingScreen.Call(native);
		}

		public void SetNoLoadingScreen(bool toggle)
		{
			if (setNoLoadingScreen == null) setNoLoadingScreen = (Function) native.GetObjectProperty("setNoLoadingScreen");
			setNoLoadingScreen.Call(native, toggle);
		}

		public bool GetNoLoadingScreen()
		{
			if (getNoLoadingScreen == null) getNoLoadingScreen = (Function) native.GetObjectProperty("getNoLoadingScreen");
			return (bool) getNoLoadingScreen.Call(native);
		}

		public void _0xB1577667C3708F9B()
		{
			if (__0xB1577667C3708F9B == null) __0xB1577667C3708F9B = (Function) native.GetObjectProperty("_0xB1577667C3708F9B");
			__0xB1577667C3708F9B.Call(native);
		}

		/// <summary>
		/// BG_*
		/// </summary>
		/// <returns>Returns true if bit 0 in GtaThread+0x154 is set.</returns>
		public bool _0x836B62713E0534CA()
		{
			if (__0x836B62713E0534CA == null) __0x836B62713E0534CA = (Function) native.GetObjectProperty("_0x836B62713E0534CA");
			return (bool) __0x836B62713E0534CA.Call(native);
		}

		/// <summary>
		/// Sets bit 1 in GtaThread+0x154
		/// BG_*
		/// </summary>
		public void _0x760910B49D2B98EA()
		{
			if (__0x760910B49D2B98EA == null) __0x760910B49D2B98EA = (Function) native.GetObjectProperty("_0x760910B49D2B98EA");
			__0x760910B49D2B98EA.Call(native);
		}

		/// <summary>
		/// Hashed version of 0x9D5A25BADB742ACD.
		/// </summary>
		public void BgStartContextHash(int contextHash)
		{
			if (bgStartContextHash == null) bgStartContextHash = (Function) native.GetObjectProperty("bgStartContextHash");
			bgStartContextHash.Call(native, contextHash);
		}

		/// <summary>
		/// Hashed version of 0xDC2BACD920D0A0DD.
		/// </summary>
		public void BgEndContextHash(int contextHash)
		{
			if (bgEndContextHash == null) bgEndContextHash = (Function) native.GetObjectProperty("bgEndContextHash");
			bgEndContextHash.Call(native, contextHash);
		}

		/// <summary>
		/// Inserts the given context into the background scripts context map.
		/// </summary>
		public void BgStartContext(string contextName)
		{
			if (bgStartContext == null) bgStartContext = (Function) native.GetObjectProperty("bgStartContext");
			bgStartContext.Call(native, contextName);
		}

		/// <summary>
		/// Deletes the given context from the background scripts context map.
		/// </summary>
		public void BgEndContext(string contextName)
		{
			if (bgEndContext == null) bgEndContext = (Function) native.GetObjectProperty("bgEndContext");
			bgEndContext.Call(native, contextName);
		}

		/// <summary>
		/// BG_*
		/// </summary>
		public bool _0x0F6F1EBBC4E1D5E6(int scriptIndex, string p1)
		{
			if (__0x0F6F1EBBC4E1D5E6 == null) __0x0F6F1EBBC4E1D5E6 = (Function) native.GetObjectProperty("_0x0F6F1EBBC4E1D5E6");
			return (bool) __0x0F6F1EBBC4E1D5E6.Call(native, scriptIndex, p1);
		}

		/// <summary>
		/// BG_*
		/// </summary>
		public int _0x22E21FBCFC88C149(int scriptIndex, string p1)
		{
			if (__0x22E21FBCFC88C149 == null) __0x22E21FBCFC88C149 = (Function) native.GetObjectProperty("_0x22E21FBCFC88C149");
			return (int) __0x22E21FBCFC88C149.Call(native, scriptIndex, p1);
		}

		/// <summary>
		/// BG_*
		/// </summary>
		public int _0x829CD22E043A2577(int p0)
		{
			if (__0x829CD22E043A2577 == null) __0x829CD22E043A2577 = (Function) native.GetObjectProperty("_0x829CD22E043A2577");
			return (int) __0x829CD22E043A2577.Call(native, p0);
		}

		/// <summary>
		/// entity = 0 most of the time.
		/// p8 = 7 most of the time.
		/// Result of this function is passed to WORLDPROBE::_GET_RAYCAST_RESULT as a first argument.
		/// </summary>
		/// <param name="entity">0 most of the time.</param>
		/// <param name="p8">7 most of the time.</param>
		/// <returns>Returns a ray (?) going from x1, y1, z1 to x2, y2, z2.</returns>
		public int StartShapeTestLosProbe(double x1, double y1, double z1, double x2, double y2, double z2, int flags, int entity, int p8)
		{
			if (startShapeTestLosProbe == null) startShapeTestLosProbe = (Function) native.GetObjectProperty("startShapeTestLosProbe");
			return (int) startShapeTestLosProbe.Call(native, x1, y1, z1, x2, y2, z2, flags, entity, p8);
		}

		/// <summary>
		/// Not sure how or why this differs from 0x7EE9F5D83DD4F90E, but it does.
		/// You can use _GET_RAYCAST_RESULT to get the result of the raycast
		/// Entity is an entity to ignore, such as the player.
		/// Flags are intersection bit flags.  They tell the ray what to care about and what not to care about when casting. Passing -1 will intersect with everything, presumably.
		/// Flags:
		/// 1: Intersect with map
		/// 2: Intersect with vehicles (used to be mission entities?) (includes train)
		/// 4: Intersect with peds? (same as 8)
		/// 8: Intersect with peds? (same as 4)
		/// See NativeDB for reference: http://natives.altv.mp/#/0x377906D8A31E5586
		/// </summary>
		/// <param name="flags">Flags are intersection bit flags.  They tell the ray what to care about and what not to care about when casting. Passing -1 will intersect with everything, presumably.</param>
		/// <param name="entity">Entity is an to ignore, such as the player.</param>
		/// <returns>This function casts a ray from Point1 to Point2 and returns it's ray handle.  A simple ray cast will 'shoot' a line from point A to point B, and return whether or not the ray reached it's destination or if it hit anything and if it did hit anything, will return the handle of what it hit (entity handle) and coordinates of where the ray reached.</returns>
		public int StartShapeTestRay(double x1, double y1, double z1, double x2, double y2, double z2, int flags, int entity, int p8)
		{
			if (startShapeTestRay == null) startShapeTestRay = (Function) native.GetObjectProperty("startShapeTestRay");
			return (int) startShapeTestRay.Call(native, x1, y1, z1, x2, y2, z2, flags, entity, p8);
		}

		public int StartShapeTestBoundingBox(int entity, int flags1, int flags2)
		{
			if (startShapeTestBoundingBox == null) startShapeTestBoundingBox = (Function) native.GetObjectProperty("startShapeTestBoundingBox");
			return (int) startShapeTestBoundingBox.Call(native, entity, flags1, flags2);
		}

		public int StartShapeTestBox(double x, double y, double z, double x1, double y2, double z2, double rotX, double rotY, double rotZ, object p9, object p10, object entity, object p12)
		{
			if (startShapeTestBox == null) startShapeTestBox = (Function) native.GetObjectProperty("startShapeTestBox");
			return (int) startShapeTestBox.Call(native, x, y, z, x1, y2, z2, rotX, rotY, rotZ, p9, p10, entity, p12);
		}

		public int StartShapeTestBound(int entity, int flags1, int flags2)
		{
			if (startShapeTestBound == null) startShapeTestBound = (Function) native.GetObjectProperty("startShapeTestBound");
			return (int) startShapeTestBound.Call(native, entity, flags1, flags2);
		}

		/// <summary>
		/// Raycast from point to point, where the ray has a radius.
		/// flags:
		/// vehicles=10
		/// peds =12
		/// Iterating through flags yields many ped / vehicle/ object combinations
		/// p9 = 7, but no idea what it does
		/// Entity is an entity to ignore
		/// </summary>
		/// <param name="entity">Entity is an to ignore</param>
		/// <param name="p9">7, but no idea what it does</param>
		public int StartShapeTestCapsule(double x1, double y1, double z1, double x2, double y2, double z2, double radius, int flags, int entity, int p9)
		{
			if (startShapeTestCapsule == null) startShapeTestCapsule = (Function) native.GetObjectProperty("startShapeTestCapsule");
			return (int) startShapeTestCapsule.Call(native, x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
		}

		public int StartShapeTestSweptSphere(double x1, double y1, double z1, double x2, double y2, double z2, double radius, int flags, int entity, object p9)
		{
			if (startShapeTestSweptSphere == null) startShapeTestSweptSphere = (Function) native.GetObjectProperty("startShapeTestSweptSphere");
			return (int) startShapeTestSweptSphere.Call(native, x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
		}

		/// <summary>
		/// In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
		/// </summary>
		/// <returns>Array<int, Vector3, Vector3> Actual name starts with START_SHAPE_TEST_??? and it returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.</returns>
		public (int, Vector3, Vector3) StartShapeTestSurroundingCoords(Vector3 pVec1, Vector3 pVec2, int flag, int entity, int flag2)
		{
			if (startShapeTestSurroundingCoords == null) startShapeTestSurroundingCoords = (Function) native.GetObjectProperty("startShapeTestSurroundingCoords");
			var results = (Array) startShapeTestSurroundingCoords.Call(native, pVec1, pVec2, flag, entity, flag2);
			return ((int) results[0], JSObjectToVector3(results[1]), JSObjectToVector3(results[2]));
		}

		/// <summary>
		/// Parameters:
		/// rayHandle - Ray Handle from a casted ray, as returned by CAST_RAY_POINT_TO_POINT
		/// hit - Where to store whether or not it hit anything. False is when the ray reached its destination.
		/// endCoords - Where to store the world-coords of where the ray was stopped (by hitting its desired max range or by colliding with an entity/the map)
		/// surfaceNormal - Where to store the surface-normal coords (NOT relative to the game world) of where the entity was hit by the ray
		/// entityHit - Where to store the handle of the entity hit by the ray
		/// Result? Some type of enum.
		/// NOTE: To get the offset-coords of where the ray hit relative to the entity that it hit (which is NOT the same as surfaceNormal), you can use these two natives:
		/// Vector3 offset = ENTITY::GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entityHit, endCoords.x, endCoords.y, endCoords.z);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x3D87450E15D98694
		/// </summary>
		/// <param name="rayHandle">Ray Handle from a casted ray, as returned by CAST_RAY_POINT_TO_POINT</param>
		/// <param name="hit">entityHit - Where to store the handle of the entity hit by the ray</param>
		/// <param name="endCoords">Where to store the world-coords of where the ray was stopped (by hitting its desired max range or by colliding with an entity/the map)</param>
		/// <param name="surfaceNormal">Where to store the surface-normal coords (NOT relative to the game world) of where the entity was hit by the ray</param>
		/// <param name="entityHit">Where to store the handle of the entity hit by the ray</param>
		/// <returns>Array<int, bool, Vector3, Vector3, int> Returns:</returns>
		public (int, bool, Vector3, Vector3, int) GetShapeTestResult(int rayHandle, bool hit, Vector3 endCoords, Vector3 surfaceNormal, int entityHit)
		{
			if (getShapeTestResult == null) getShapeTestResult = (Function) native.GetObjectProperty("getShapeTestResult");
			var results = (Array) getShapeTestResult.Call(native, rayHandle, hit, endCoords, surfaceNormal, entityHit);
			return ((int) results[0], (bool) results[1], JSObjectToVector3(results[2]), JSObjectToVector3(results[3]), (int) results[4]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, bool, Vector3, Vector3, int, int></returns>
		public (int, bool, Vector3, Vector3, int, int) GetShapeTestResultIncludingMaterial(int rayHandle, bool hit, Vector3 endCoords, Vector3 surfaceNormal, int materialHash, int entityHit)
		{
			if (getShapeTestResultIncludingMaterial == null) getShapeTestResultIncludingMaterial = (Function) native.GetObjectProperty("getShapeTestResultIncludingMaterial");
			var results = (Array) getShapeTestResultIncludingMaterial.Call(native, rayHandle, hit, endCoords, surfaceNormal, materialHash, entityHit);
			return ((int) results[0], (bool) results[1], JSObjectToVector3(results[2]), JSObjectToVector3(results[3]), (int) results[4], (int) results[5]);
		}

		public void ShapeTestResultEntity(int entityHit)
		{
			if (shapeTestResultEntity == null) shapeTestResultEntity = (Function) native.GetObjectProperty("shapeTestResultEntity");
			shapeTestResultEntity.Call(native, entityHit);
		}

		public int GetTotalScInboxIds()
		{
			if (getTotalScInboxIds == null) getTotalScInboxIds = (Function) native.GetObjectProperty("getTotalScInboxIds");
			return (int) getTotalScInboxIds.Call(native);
		}

		public int ScInboxMessageInit(int p0)
		{
			if (scInboxMessageInit == null) scInboxMessageInit = (Function) native.GetObjectProperty("scInboxMessageInit");
			return (int) scInboxMessageInit.Call(native, p0);
		}

		public bool IsScInboxValid(int p0)
		{
			if (isScInboxValid == null) isScInboxValid = (Function) native.GetObjectProperty("isScInboxValid");
			return (bool) isScInboxValid.Call(native, p0);
		}

		public bool ScInboxMessagePop(int p0)
		{
			if (scInboxMessagePop == null) scInboxMessagePop = (Function) native.GetObjectProperty("scInboxMessagePop");
			return (bool) scInboxMessagePop.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) ScInboxMessageGetDataInt(int p0, string context, int @out)
		{
			if (scInboxMessageGetDataInt == null) scInboxMessageGetDataInt = (Function) native.GetObjectProperty("scInboxMessageGetDataInt");
			var results = (Array) scInboxMessageGetDataInt.Call(native, p0, context, @out);
			return ((bool) results[0], (int) results[1]);
		}

		public bool ScInboxMessageGetDataBool(int p0, string p1)
		{
			if (scInboxMessageGetDataBool == null) scInboxMessageGetDataBool = (Function) native.GetObjectProperty("scInboxMessageGetDataBool");
			return (bool) scInboxMessageGetDataBool.Call(native, p0, p1);
		}

		public bool ScInboxMessageGetDataString(int p0, string context, string @out)
		{
			if (scInboxMessageGetDataString == null) scInboxMessageGetDataString = (Function) native.GetObjectProperty("scInboxMessageGetDataString");
			return (bool) scInboxMessageGetDataString.Call(native, p0, context, @out);
		}

		public bool ScInboxMessageDoApply(int p0)
		{
			if (scInboxMessageDoApply == null) scInboxMessageDoApply = (Function) native.GetObjectProperty("scInboxMessageDoApply");
			return (bool) scInboxMessageDoApply.Call(native, p0);
		}

		public string ScInboxMessageGetString(int p0)
		{
			if (scInboxMessageGetString == null) scInboxMessageGetString = (Function) native.GetObjectProperty("scInboxMessageGetString");
			return (string) scInboxMessageGetString.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) ScInboxMessagePushGamerToEventRecipList(int networkHandle)
		{
			if (scInboxMessagePushGamerToEventRecipList == null) scInboxMessagePushGamerToEventRecipList = (Function) native.GetObjectProperty("scInboxMessagePushGamerToEventRecipList");
			var results = (Array) scInboxMessagePushGamerToEventRecipList.Call(native, networkHandle);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) ScInboxMessageSendUgcStatUpdateEvent(object data)
		{
			if (scInboxMessageSendUgcStatUpdateEvent == null) scInboxMessageSendUgcStatUpdateEvent = (Function) native.GetObjectProperty("scInboxMessageSendUgcStatUpdateEvent");
			var results = (Array) scInboxMessageSendUgcStatUpdateEvent.Call(native, data);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) ScInboxMessageGetUgcdata(object p0, object p1)
		{
			if (scInboxMessageGetUgcdata == null) scInboxMessageGetUgcdata = (Function) native.GetObjectProperty("scInboxMessageGetUgcdata");
			var results = (Array) scInboxMessageGetUgcdata.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) ScInboxMessageSendBountyPresenceEvent(object data)
		{
			if (scInboxMessageSendBountyPresenceEvent == null) scInboxMessageSendBountyPresenceEvent = (Function) native.GetObjectProperty("scInboxMessageSendBountyPresenceEvent");
			var results = (Array) scInboxMessageSendBountyPresenceEvent.Call(native, data);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) ScInboxMessageGetBountyData(int index, object outData)
		{
			if (scInboxMessageGetBountyData == null) scInboxMessageGetBountyData = (Function) native.GetObjectProperty("scInboxMessageGetBountyData");
			var results = (Array) scInboxMessageGetBountyData.Call(native, index, outData);
			return ((bool) results[0], results[1]);
		}

		public void ScInboxGetEmails(int offset, int limit)
		{
			if (scInboxGetEmails == null) scInboxGetEmails = (Function) native.GetObjectProperty("scInboxGetEmails");
			scInboxGetEmails.Call(native, offset, limit);
		}

		public object _0x16DA8172459434AA()
		{
			if (__0x16DA8172459434AA == null) __0x16DA8172459434AA = (Function) native.GetObjectProperty("_0x16DA8172459434AA");
			return __0x16DA8172459434AA.Call(native);
		}

		public object _0x7DB18CA8CAD5B098()
		{
			if (__0x7DB18CA8CAD5B098 == null) __0x7DB18CA8CAD5B098 = (Function) native.GetObjectProperty("_0x7DB18CA8CAD5B098");
			return __0x7DB18CA8CAD5B098.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x4737980E8A283806(int p0, object p1)
		{
			if (__0x4737980E8A283806 == null) __0x4737980E8A283806 = (Function) native.GetObjectProperty("_0x4737980E8A283806");
			var results = (Array) __0x4737980E8A283806.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) _0x44ACA259D67651DB(object p0, object p1)
		{
			if (__0x44ACA259D67651DB == null) __0x44ACA259D67651DB = (Function) native.GetObjectProperty("_0x44ACA259D67651DB");
			var results = (Array) __0x44ACA259D67651DB.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) ScEmailMessagePushGamerToRecipList(int networkHandle)
		{
			if (scEmailMessagePushGamerToRecipList == null) scEmailMessagePushGamerToRecipList = (Function) native.GetObjectProperty("scEmailMessagePushGamerToRecipList");
			var results = (Array) scEmailMessagePushGamerToRecipList.Call(native, networkHandle);
			return (results[0], (int) results[1]);
		}

		public void ScEmailMessageClearRecipList()
		{
			if (scEmailMessageClearRecipList == null) scEmailMessageClearRecipList = (Function) native.GetObjectProperty("scEmailMessageClearRecipList");
			scEmailMessageClearRecipList.Call(native);
		}

		public void _0x116FB94DC4B79F17(string p0)
		{
			if (__0x116FB94DC4B79F17 == null) __0x116FB94DC4B79F17 = (Function) native.GetObjectProperty("_0x116FB94DC4B79F17");
			__0x116FB94DC4B79F17.Call(native, p0);
		}

		public object _0x07DBD622D9533857(object p0)
		{
			if (__0x07DBD622D9533857 == null) __0x07DBD622D9533857 = (Function) native.GetObjectProperty("_0x07DBD622D9533857");
			return __0x07DBD622D9533857.Call(native, p0);
		}

		public void SetHandleRockstarMessageViaScript(bool toggle)
		{
			if (setHandleRockstarMessageViaScript == null) setHandleRockstarMessageViaScript = (Function) native.GetObjectProperty("setHandleRockstarMessageViaScript");
			setHandleRockstarMessageViaScript.Call(native, toggle);
		}

		public bool IsRockstarMessageReadyForScript()
		{
			if (isRockstarMessageReadyForScript == null) isRockstarMessageReadyForScript = (Function) native.GetObjectProperty("isRockstarMessageReadyForScript");
			return (bool) isRockstarMessageReadyForScript.Call(native);
		}

		public string RockstarMessageGetString()
		{
			if (rockstarMessageGetString == null) rockstarMessageGetString = (Function) native.GetObjectProperty("rockstarMessageGetString");
			return (string) rockstarMessageGetString.Call(native);
		}

		public bool _0x1F1E9682483697C7(object p0, object p1)
		{
			if (__0x1F1E9682483697C7 == null) __0x1F1E9682483697C7 = (Function) native.GetObjectProperty("_0x1F1E9682483697C7");
			return (bool) __0x1F1E9682483697C7.Call(native, p0, p1);
		}

		public object _0xC4C4575F62534A24()
		{
			if (__0xC4C4575F62534A24 == null) __0xC4C4575F62534A24 = (Function) native.GetObjectProperty("_0xC4C4575F62534A24");
			return __0xC4C4575F62534A24.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x287F1F75D2803595(object p0, object p1)
		{
			if (__0x287F1F75D2803595 == null) __0x287F1F75D2803595 = (Function) native.GetObjectProperty("_0x287F1F75D2803595");
			var results = (Array) __0x287F1F75D2803595.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public bool _0x487912FD248EFDDF(object p0, double p1)
		{
			if (__0x487912FD248EFDDF == null) __0x487912FD248EFDDF = (Function) native.GetObjectProperty("_0x487912FD248EFDDF");
			return (bool) __0x487912FD248EFDDF.Call(native, p0, p1);
		}

		public object _0xC85A7127E7AD02AA()
		{
			if (__0xC85A7127E7AD02AA == null) __0xC85A7127E7AD02AA = (Function) native.GetObjectProperty("_0xC85A7127E7AD02AA");
			return __0xC85A7127E7AD02AA.Call(native);
		}

		public object _0xA770C8EEC6FB2AC5()
		{
			if (__0xA770C8EEC6FB2AC5 == null) __0xA770C8EEC6FB2AC5 = (Function) native.GetObjectProperty("_0xA770C8EEC6FB2AC5");
			return __0xA770C8EEC6FB2AC5.Call(native);
		}

		/// <summary>
		/// sfink: from scripts:
		/// func_720(socialclub::_0x8416FE4E4629D7D7("bIgnoreCheaterOverride"));
		/// func_719(socialclub::_0x8416FE4E4629D7D7("bIgnoreBadSportOverride"));
		/// </summary>
		public bool ScGetIsProfileAttributeSet(string name)
		{
			if (scGetIsProfileAttributeSet == null) scGetIsProfileAttributeSet = (Function) native.GetObjectProperty("scGetIsProfileAttributeSet");
			return (bool) scGetIsProfileAttributeSet.Call(native, name);
		}

		public object _0x7FFCBFEE44ECFABF()
		{
			if (__0x7FFCBFEE44ECFABF == null) __0x7FFCBFEE44ECFABF = (Function) native.GetObjectProperty("_0x7FFCBFEE44ECFABF");
			return __0x7FFCBFEE44ECFABF.Call(native);
		}

		public object _0x2D874D4AE612A65F()
		{
			if (__0x2D874D4AE612A65F == null) __0x2D874D4AE612A65F = (Function) native.GetObjectProperty("_0x2D874D4AE612A65F");
			return __0x2D874D4AE612A65F.Call(native);
		}

		/// <summary>
		/// Starts a task to check an entered string for profanity on the ROS/Social Club services.
		/// See also: 1753344C770358AE, 82E4A58BABC15AE7.
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) ScProfanityCheckString(string @string, int token)
		{
			if (scProfanityCheckString == null) scProfanityCheckString = (Function) native.GetObjectProperty("scProfanityCheckString");
			var results = (Array) scProfanityCheckString.Call(native, @string, token);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) ScProfanityCheckUgcString(string @string, int token)
		{
			if (scProfanityCheckUgcString == null) scProfanityCheckUgcString = (Function) native.GetObjectProperty("scProfanityCheckUgcString");
			var results = (Array) scProfanityCheckUgcString.Call(native, @string, token);
			return ((bool) results[0], (int) results[1]);
		}

		public bool ScProfanityGetCheckIsValid(int token)
		{
			if (scProfanityGetCheckIsValid == null) scProfanityGetCheckIsValid = (Function) native.GetObjectProperty("scProfanityGetCheckIsValid");
			return (bool) scProfanityGetCheckIsValid.Call(native, token);
		}

		public bool ScProfanityGetCheckIsPending(int token)
		{
			if (scProfanityGetCheckIsPending == null) scProfanityGetCheckIsPending = (Function) native.GetObjectProperty("scProfanityGetCheckIsPending");
			return (bool) scProfanityGetCheckIsPending.Call(native, token);
		}

		public bool ScProfanityGetStringPassed(int token)
		{
			if (scProfanityGetStringPassed == null) scProfanityGetStringPassed = (Function) native.GetObjectProperty("scProfanityGetStringPassed");
			return (bool) scProfanityGetStringPassed.Call(native, token);
		}

		public int ScProfanityGetStringStatus(int token)
		{
			if (scProfanityGetStringStatus == null) scProfanityGetStringStatus = (Function) native.GetObjectProperty("scProfanityGetStringStatus");
			return (int) scProfanityGetStringStatus.Call(native, token);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0xF6BAAAF762E1BF40(string p0, int p1)
		{
			if (__0xF6BAAAF762E1BF40 == null) __0xF6BAAAF762E1BF40 = (Function) native.GetObjectProperty("_0xF6BAAAF762E1BF40");
			var results = (Array) __0xF6BAAAF762E1BF40.Call(native, p0, p1);
			return ((bool) results[0], (int) results[1]);
		}

		public bool _0xF22CA0FD74B80E7A(object p0)
		{
			if (__0xF22CA0FD74B80E7A == null) __0xF22CA0FD74B80E7A = (Function) native.GetObjectProperty("_0xF22CA0FD74B80E7A");
			return (bool) __0xF22CA0FD74B80E7A.Call(native, p0);
		}

		public object _0x9237E334F6E43156(object p0)
		{
			if (__0x9237E334F6E43156 == null) __0x9237E334F6E43156 = (Function) native.GetObjectProperty("_0x9237E334F6E43156");
			return __0x9237E334F6E43156.Call(native, p0);
		}

		public object _0x700569DBA175A77C(object p0)
		{
			if (__0x700569DBA175A77C == null) __0x700569DBA175A77C = (Function) native.GetObjectProperty("_0x700569DBA175A77C");
			return __0x700569DBA175A77C.Call(native, p0);
		}

		public object _0x1D4446A62D35B0D0(object p0, object p1)
		{
			if (__0x1D4446A62D35B0D0 == null) __0x1D4446A62D35B0D0 = (Function) native.GetObjectProperty("_0x1D4446A62D35B0D0");
			return __0x1D4446A62D35B0D0.Call(native, p0, p1);
		}

		public object _0x2E89990DDFF670C3(object p0, object p1)
		{
			if (__0x2E89990DDFF670C3 == null) __0x2E89990DDFF670C3 = (Function) native.GetObjectProperty("_0x2E89990DDFF670C3");
			return __0x2E89990DDFF670C3.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object, object></returns>
		public (bool, object, object, object) _0xD0EE05FE193646EA(object p0, object p1, object p2)
		{
			if (__0xD0EE05FE193646EA == null) __0xD0EE05FE193646EA = (Function) native.GetObjectProperty("_0xD0EE05FE193646EA");
			var results = (Array) __0xD0EE05FE193646EA.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1], results[2], results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object, object></returns>
		public (bool, object, object, object) _0x1989C6E6F67E76A8(object p0, object p1, object p2)
		{
			if (__0x1989C6E6F67E76A8 == null) __0x1989C6E6F67E76A8 = (Function) native.GetObjectProperty("_0x1989C6E6F67E76A8");
			var results = (Array) __0x1989C6E6F67E76A8.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1], results[2], results[3]);
		}

		public object _0x07C61676E5BB52CD(object p0)
		{
			if (__0x07C61676E5BB52CD == null) __0x07C61676E5BB52CD = (Function) native.GetObjectProperty("_0x07C61676E5BB52CD");
			return __0x07C61676E5BB52CD.Call(native, p0);
		}

		public object _0x8147FFF6A718E1AD(object p0)
		{
			if (__0x8147FFF6A718E1AD == null) __0x8147FFF6A718E1AD = (Function) native.GetObjectProperty("_0x8147FFF6A718E1AD");
			return __0x8147FFF6A718E1AD.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, int></returns>
		public (bool, object, int) _0x0F73393BAC7E6730(object p0, int p1)
		{
			if (__0x0F73393BAC7E6730 == null) __0x0F73393BAC7E6730 = (Function) native.GetObjectProperty("_0x0F73393BAC7E6730");
			var results = (Array) __0x0F73393BAC7E6730.Call(native, p0, p1);
			return ((bool) results[0], results[1], (int) results[2]);
		}

		public object _0xD302E99EDF0449CF(object p0)
		{
			if (__0xD302E99EDF0449CF == null) __0xD302E99EDF0449CF = (Function) native.GetObjectProperty("_0xD302E99EDF0449CF");
			return __0xD302E99EDF0449CF.Call(native, p0);
		}

		public object _0x5C4EBFFA98BDB41C(object p0)
		{
			if (__0x5C4EBFFA98BDB41C == null) __0x5C4EBFFA98BDB41C = (Function) native.GetObjectProperty("_0x5C4EBFFA98BDB41C");
			return __0x5C4EBFFA98BDB41C.Call(native, p0);
		}

		public object _0xFF8F3A92B75ED67A()
		{
			if (__0xFF8F3A92B75ED67A == null) __0xFF8F3A92B75ED67A = (Function) native.GetObjectProperty("_0xFF8F3A92B75ED67A");
			return __0xFF8F3A92B75ED67A.Call(native);
		}

		public object _0x4ED9C8D6DA297639()
		{
			if (__0x4ED9C8D6DA297639 == null) __0x4ED9C8D6DA297639 = (Function) native.GetObjectProperty("_0x4ED9C8D6DA297639");
			return __0x4ED9C8D6DA297639.Call(native);
		}

		public object _0x710BCDA8071EDED1()
		{
			if (__0x710BCDA8071EDED1 == null) __0x710BCDA8071EDED1 = (Function) native.GetObjectProperty("_0x710BCDA8071EDED1");
			return __0x710BCDA8071EDED1.Call(native);
		}

		public object _0x50A8A36201DBF83E()
		{
			if (__0x50A8A36201DBF83E == null) __0x50A8A36201DBF83E = (Function) native.GetObjectProperty("_0x50A8A36201DBF83E");
			return __0x50A8A36201DBF83E.Call(native);
		}

		public object _0x9DE5D2F723575ED0()
		{
			if (__0x9DE5D2F723575ED0 == null) __0x9DE5D2F723575ED0 = (Function) native.GetObjectProperty("_0x9DE5D2F723575ED0");
			return __0x9DE5D2F723575ED0.Call(native);
		}

		public object _0xC2C97EA97711D1AE()
		{
			if (__0xC2C97EA97711D1AE == null) __0xC2C97EA97711D1AE = (Function) native.GetObjectProperty("_0xC2C97EA97711D1AE");
			return __0xC2C97EA97711D1AE.Call(native);
		}

		public object _0x450819D8CF90C416()
		{
			if (__0x450819D8CF90C416 == null) __0x450819D8CF90C416 = (Function) native.GetObjectProperty("_0x450819D8CF90C416");
			return __0x450819D8CF90C416.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) _0x4A7D6E727F941747(object p0)
		{
			if (__0x4A7D6E727F941747 == null) __0x4A7D6E727F941747 = (Function) native.GetObjectProperty("_0x4A7D6E727F941747");
			var results = (Array) __0x4A7D6E727F941747.Call(native, p0);
			return (results[0], results[1]);
		}

		public object _0xE75A4A2E5E316D86()
		{
			if (__0xE75A4A2E5E316D86 == null) __0xE75A4A2E5E316D86 = (Function) native.GetObjectProperty("_0xE75A4A2E5E316D86");
			return __0xE75A4A2E5E316D86.Call(native);
		}

		public object _0x2570E26BE63964E3()
		{
			if (__0x2570E26BE63964E3 == null) __0x2570E26BE63964E3 = (Function) native.GetObjectProperty("_0x2570E26BE63964E3");
			return __0x2570E26BE63964E3.Call(native);
		}

		public object _0x1D12A56FC95BE92E()
		{
			if (__0x1D12A56FC95BE92E == null) __0x1D12A56FC95BE92E = (Function) native.GetObjectProperty("_0x1D12A56FC95BE92E");
			return __0x1D12A56FC95BE92E.Call(native);
		}

		public object _0x33DF47CC0642061B()
		{
			if (__0x33DF47CC0642061B == null) __0x33DF47CC0642061B = (Function) native.GetObjectProperty("_0x33DF47CC0642061B");
			return __0x33DF47CC0642061B.Call(native);
		}

		public object _0xA468E0BE12B12C70()
		{
			if (__0xA468E0BE12B12C70 == null) __0xA468E0BE12B12C70 = (Function) native.GetObjectProperty("_0xA468E0BE12B12C70");
			return __0xA468E0BE12B12C70.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x8CC469AB4D349B7C(int p0, string p1, object p2)
		{
			if (__0x8CC469AB4D349B7C == null) __0x8CC469AB4D349B7C = (Function) native.GetObjectProperty("_0x8CC469AB4D349B7C");
			var results = (Array) __0x8CC469AB4D349B7C.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		public object _0xC5A35C73B68F3C49()
		{
			if (__0xC5A35C73B68F3C49 == null) __0xC5A35C73B68F3C49 = (Function) native.GetObjectProperty("_0xC5A35C73B68F3C49");
			return __0xC5A35C73B68F3C49.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x699E4A5C8C893A18(int p0, string p1, object p2)
		{
			if (__0x699E4A5C8C893A18 == null) __0x699E4A5C8C893A18 = (Function) native.GetObjectProperty("_0x699E4A5C8C893A18");
			var results = (Array) __0x699E4A5C8C893A18.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x19853B5B17D77BCA(object p0, object p1)
		{
			if (__0x19853B5B17D77BCA == null) __0x19853B5B17D77BCA = (Function) native.GetObjectProperty("_0x19853B5B17D77BCA");
			var results = (Array) __0x19853B5B17D77BCA.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public bool _0x6BFB12CE158E3DD4(object p0)
		{
			if (__0x6BFB12CE158E3DD4 == null) __0x6BFB12CE158E3DD4 = (Function) native.GetObjectProperty("_0x6BFB12CE158E3DD4");
			return (bool) __0x6BFB12CE158E3DD4.Call(native, p0);
		}

		public bool _0xFE4C1D0D3B9CC17E(object p0, object p1)
		{
			if (__0xFE4C1D0D3B9CC17E == null) __0xFE4C1D0D3B9CC17E = (Function) native.GetObjectProperty("_0xFE4C1D0D3B9CC17E");
			return (bool) __0xFE4C1D0D3B9CC17E.Call(native, p0, p1);
		}

		public object _0xD8122C407663B995()
		{
			if (__0xD8122C407663B995 == null) __0xD8122C407663B995 = (Function) native.GetObjectProperty("_0xD8122C407663B995");
			return __0xD8122C407663B995.Call(native);
		}

		public bool _0x3001BEF2FECA3680()
		{
			if (__0x3001BEF2FECA3680 == null) __0x3001BEF2FECA3680 = (Function) native.GetObjectProperty("_0x3001BEF2FECA3680");
			return (bool) __0x3001BEF2FECA3680.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0x92DA6E70EF249BD1(string p0, int p1)
		{
			if (__0x92DA6E70EF249BD1 == null) __0x92DA6E70EF249BD1 = (Function) native.GetObjectProperty("_0x92DA6E70EF249BD1");
			var results = (Array) __0x92DA6E70EF249BD1.Call(native, p0, p1);
			return ((bool) results[0], (int) results[1]);
		}

		public void _0x675721C9F644D161()
		{
			if (__0x675721C9F644D161 == null) __0x675721C9F644D161 = (Function) native.GetObjectProperty("_0x675721C9F644D161");
			__0x675721C9F644D161.Call(native);
		}

		public object _0xE4F6E8D07A2F0F51(object p0)
		{
			if (__0xE4F6E8D07A2F0F51 == null) __0xE4F6E8D07A2F0F51 = (Function) native.GetObjectProperty("_0xE4F6E8D07A2F0F51");
			return __0xE4F6E8D07A2F0F51.Call(native, p0);
		}

		public object _0x8A4416C0DB05FA66(object p0)
		{
			if (__0x8A4416C0DB05FA66 == null) __0x8A4416C0DB05FA66 = (Function) native.GetObjectProperty("_0x8A4416C0DB05FA66");
			return __0x8A4416C0DB05FA66.Call(native, p0);
		}

		public void _0xEA95C0853A27888E()
		{
			if (__0xEA95C0853A27888E == null) __0xEA95C0853A27888E = (Function) native.GetObjectProperty("_0xEA95C0853A27888E");
			__0xEA95C0853A27888E.Call(native);
		}

		public string ScGetNickname()
		{
			if (scGetNickname == null) scGetNickname = (Function) native.GetObjectProperty("scGetNickname");
			return (string) scGetNickname.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) _0x225798743970412B(int p0)
		{
			if (__0x225798743970412B == null) __0x225798743970412B = (Function) native.GetObjectProperty("_0x225798743970412B");
			var results = (Array) __0x225798743970412B.Call(native, p0);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// Same as HAS_ACHIEVEMENT_BEEN_PASSED
		/// </summary>
		public bool ScGetHasAchievementBeenPassed(int achievement)
		{
			if (scGetHasAchievementBeenPassed == null) scGetHasAchievementBeenPassed = (Function) native.GetObjectProperty("scGetHasAchievementBeenPassed");
			return (bool) scGetHasAchievementBeenPassed.Call(native, achievement);
		}

		/// <summary>
		/// Please change to "void"!
		/// ---------------------------------
		/// Example:
		/// for (v_2 = 0; v_2 <= 4; v_2 += 1) {
		/// STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
		/// }
		/// </summary>
		public object StatClearSlotForReload(int statSlot)
		{
			if (statClearSlotForReload == null) statClearSlotForReload = (Function) native.GetObjectProperty("statClearSlotForReload");
			return statClearSlotForReload.Call(native, statSlot);
		}

		public bool StatLoad(int p0)
		{
			if (statLoad == null) statLoad = (Function) native.GetObjectProperty("statLoad");
			return (bool) statLoad.Call(native, p0);
		}

		public bool StatSave(int p0, bool p1, int p2)
		{
			if (statSave == null) statSave = (Function) native.GetObjectProperty("statSave");
			return (bool) statSave.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// STAT_SET_*
		/// </summary>
		public void _0x5688585E6D563CD8(int p0)
		{
			if (__0x5688585E6D563CD8 == null) __0x5688585E6D563CD8 = (Function) native.GetObjectProperty("_0x5688585E6D563CD8");
			__0x5688585E6D563CD8.Call(native, p0);
		}

		public bool StatLoadPending(object p0)
		{
			if (statLoadPending == null) statLoadPending = (Function) native.GetObjectProperty("statLoadPending");
			return (bool) statLoadPending.Call(native, p0);
		}

		public bool StatSavePending()
		{
			if (statSavePending == null) statSavePending = (Function) native.GetObjectProperty("statSavePending");
			return (bool) statSavePending.Call(native);
		}

		public bool StatSavePendingOrRequested()
		{
			if (statSavePendingOrRequested == null) statSavePendingOrRequested = (Function) native.GetObjectProperty("statSavePendingOrRequested");
			return (bool) statSavePendingOrRequested.Call(native);
		}

		public object StatDeleteSlot(object p0)
		{
			if (statDeleteSlot == null) statDeleteSlot = (Function) native.GetObjectProperty("statDeleteSlot");
			return statDeleteSlot.Call(native, p0);
		}

		public bool StatSlotIsLoaded(object p0)
		{
			if (statSlotIsLoaded == null) statSlotIsLoaded = (Function) native.GetObjectProperty("statSlotIsLoaded");
			return (bool) statSlotIsLoaded.Call(native, p0);
		}

		public bool _0x7F2C4CDF2E82DF4C(object p0)
		{
			if (__0x7F2C4CDF2E82DF4C == null) __0x7F2C4CDF2E82DF4C = (Function) native.GetObjectProperty("_0x7F2C4CDF2E82DF4C");
			return (bool) __0x7F2C4CDF2E82DF4C.Call(native, p0);
		}

		public object _0xE496A53BA5F50A56(object p0)
		{
			if (__0xE496A53BA5F50A56 == null) __0xE496A53BA5F50A56 = (Function) native.GetObjectProperty("_0xE496A53BA5F50A56");
			return __0xE496A53BA5F50A56.Call(native, p0);
		}

		/// <summary>
		/// STAT_S*
		/// </summary>
		public void _0xF434A10BA01C37D0(bool toggle)
		{
			if (__0xF434A10BA01C37D0 == null) __0xF434A10BA01C37D0 = (Function) native.GetObjectProperty("_0xF434A10BA01C37D0");
			__0xF434A10BA01C37D0.Call(native, toggle);
		}

		public bool _0x7E6946F68A38B74F(object p0)
		{
			if (__0x7E6946F68A38B74F == null) __0x7E6946F68A38B74F = (Function) native.GetObjectProperty("_0x7E6946F68A38B74F");
			return (bool) __0x7E6946F68A38B74F.Call(native, p0);
		}

		public void _0xA8733668D1047B51(object p0)
		{
			if (__0xA8733668D1047B51 == null) __0xA8733668D1047B51 = (Function) native.GetObjectProperty("_0xA8733668D1047B51");
			__0xA8733668D1047B51.Call(native, p0);
		}

		/// <summary>
		/// STAT_LOAD_*
		/// </summary>
		public bool _0xECB41AC6AB754401()
		{
			if (__0xECB41AC6AB754401 == null) __0xECB41AC6AB754401 = (Function) native.GetObjectProperty("_0xECB41AC6AB754401");
			return (bool) __0xECB41AC6AB754401.Call(native);
		}

		public void _0x9B4BD21D69B1E609()
		{
			if (__0x9B4BD21D69B1E609 == null) __0x9B4BD21D69B1E609 = (Function) native.GetObjectProperty("_0x9B4BD21D69B1E609");
			__0x9B4BD21D69B1E609.Call(native);
		}

		public object _0xC0E0D686DDFC6EAE()
		{
			if (__0xC0E0D686DDFC6EAE == null) __0xC0E0D686DDFC6EAE = (Function) native.GetObjectProperty("_0xC0E0D686DDFC6EAE");
			return __0xC0E0D686DDFC6EAE.Call(native);
		}

		/// <summary>
		/// Add Cash example:
		/// for (int i = 0; i < 3; i++)
		/// {
		/// char statNameFull[32];
		/// sprintf_s(statNameFull, "SP%d_TOTAL_CASH", i);
		/// Hash hash = GAMEPLAY::GET_HASH_KEY(statNameFull);
		/// int val;
		/// STATS::STAT_GET_INT(hash, &val, -1);
		/// val += 1000000;
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB3271D7AB655B441
		/// </summary>
		public bool StatSetInt(int statName, int value, bool save)
		{
			if (statSetInt == null) statSetInt = (Function) native.GetObjectProperty("statSetInt");
			return (bool) statSetInt.Call(native, statName, value, save);
		}

		public bool StatSetFloat(int statName, double value, bool save)
		{
			if (statSetFloat == null) statSetFloat = (Function) native.GetObjectProperty("statSetFloat");
			return (bool) statSetFloat.Call(native, statName, value, save);
		}

		public bool StatSetBool(int statName, bool value, bool save)
		{
			if (statSetBool == null) statSetBool = (Function) native.GetObjectProperty("statSetBool");
			return (bool) statSetBool.Call(native, statName, value, save);
		}

		/// <summary>
		/// The following values have been found in the decompiled scripts:
		/// "RC_ABI1"
		/// "RC_ABI2"
		/// "RC_BA1"
		/// "RC_BA2"
		/// "RC_BA3"
		/// "RC_BA3A"
		/// "RC_BA3C"
		/// "RC_BA4"
		/// See NativeDB for reference: http://natives.altv.mp/#/0x17695002FD8B2AE0
		/// </summary>
		public bool StatSetGxtLabel(int statName, string value, bool save)
		{
			if (statSetGxtLabel == null) statSetGxtLabel = (Function) native.GetObjectProperty("statSetGxtLabel");
			return (bool) statSetGxtLabel.Call(native, statName, value, save);
		}

		/// <summary>
		/// 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
		/// The structure looks like this:
		/// int year
		/// int month
		/// int day
		/// int hour
		/// int minute
		/// int second
		/// int millisecond
		/// The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) StatSetDate(int statName, object value, int numFields, bool save)
		{
			if (statSetDate == null) statSetDate = (Function) native.GetObjectProperty("statSetDate");
			var results = (Array) statSetDate.Call(native, statName, value, numFields, save);
			return ((bool) results[0], results[1]);
		}

		public bool StatSetString(int statName, string value, bool save)
		{
			if (statSetString == null) statSetString = (Function) native.GetObjectProperty("statSetString");
			return (bool) statSetString.Call(native, statName, value, save);
		}

		public bool StatSetPos(int statName, double x, double y, double z, bool save)
		{
			if (statSetPos == null) statSetPos = (Function) native.GetObjectProperty("statSetPos");
			return (bool) statSetPos.Call(native, statName, x, y, z, save);
		}

		public bool StatSetMaskedInt(int statName, object p1, object p2, int p3, bool save)
		{
			if (statSetMaskedInt == null) statSetMaskedInt = (Function) native.GetObjectProperty("statSetMaskedInt");
			return (bool) statSetMaskedInt.Call(native, statName, p1, p2, p3, save);
		}

		public bool StatSetUserId(int statName, string value, bool save)
		{
			if (statSetUserId == null) statSetUserId = (Function) native.GetObjectProperty("statSetUserId");
			return (bool) statSetUserId.Call(native, statName, value, save);
		}

		/// <summary>
		/// p1 always true.
		/// </summary>
		/// <param name="p1">always true.</param>
		public bool StatSetCurrentPosixTime(int statName, bool p1)
		{
			if (statSetCurrentPosixTime == null) statSetCurrentPosixTime = (Function) native.GetObjectProperty("statSetCurrentPosixTime");
			return (bool) statSetCurrentPosixTime.Call(native, statName, p1);
		}

		/// <summary>
		/// p2 appears to always be -1
		/// </summary>
		/// <param name="p2">appears to always be -1</param>
		/// <returns>Array<bool, int></returns>
		public (bool, int) StatGetInt(int statHash, int outValue, int p2)
		{
			if (statGetInt == null) statGetInt = (Function) native.GetObjectProperty("statGetInt");
			var results = (Array) statGetInt.Call(native, statHash, outValue, p2);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) StatGetFloat(int statHash, double outValue, object p2)
		{
			if (statGetFloat == null) statGetFloat = (Function) native.GetObjectProperty("statGetFloat");
			var results = (Array) statGetFloat.Call(native, statHash, outValue, p2);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, bool></returns>
		public (bool, bool) StatGetBool(int statHash, bool outValue, object p2)
		{
			if (statGetBool == null) statGetBool = (Function) native.GetObjectProperty("statGetBool");
			var results = (Array) statGetBool.Call(native, statHash, outValue, p2);
			return ((bool) results[0], (bool) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) StatGetDate(int statHash, object p1, object p2, object p3)
		{
			if (statGetDate == null) statGetDate = (Function) native.GetObjectProperty("statGetDate");
			var results = (Array) statGetDate.Call(native, statHash, p1, p2, p3);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// p1 is always -1 in the script files
		/// </summary>
		/// <param name="p1">is always -1 in the script files</param>
		public string StatGetString(int statHash, int p1)
		{
			if (statGetString == null) statGetString = (Function) native.GetObjectProperty("statGetString");
			return (string) statGetString.Call(native, statHash, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object, object></returns>
		public (bool, object, object, object) StatGetPos(object p0, object p1, object p2, object p3, object p4)
		{
			if (statGetPos == null) statGetPos = (Function) native.GetObjectProperty("statGetPos");
			var results = (Array) statGetPos.Call(native, p0, p1, p2, p3, p4);
			return ((bool) results[0], results[1], results[2], results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) StatGetMaskedInt(object p0, object p1, object p2, object p3, object p4)
		{
			if (statGetMaskedInt == null) statGetMaskedInt = (Function) native.GetObjectProperty("statGetMaskedInt");
			var results = (Array) statGetMaskedInt.Call(native, p0, p1, p2, p3, p4);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// Needs more research. Seems to return "STAT_UNKNOWN" if no such user id exists.
		/// </summary>
		public string StatGetUserId(object p0)
		{
			if (statGetUserId == null) statGetUserId = (Function) native.GetObjectProperty("statGetUserId");
			return (string) statGetUserId.Call(native, p0);
		}

		public string StatGetLicensePlate(int statName)
		{
			if (statGetLicensePlate == null) statGetLicensePlate = (Function) native.GetObjectProperty("statGetLicensePlate");
			return (string) statGetLicensePlate.Call(native, statName);
		}

		public bool StatSetLicensePlate(int statName, string str)
		{
			if (statSetLicensePlate == null) statSetLicensePlate = (Function) native.GetObjectProperty("statSetLicensePlate");
			return (bool) statSetLicensePlate.Call(native, statName, str);
		}

		public void StatIncrement(int statName, double value)
		{
			if (statIncrement == null) statIncrement = (Function) native.GetObjectProperty("statIncrement");
			statIncrement.Call(native, statName, value);
		}

		public bool _0x5A556B229A169402()
		{
			if (__0x5A556B229A169402 == null) __0x5A556B229A169402 = (Function) native.GetObjectProperty("_0x5A556B229A169402");
			return (bool) __0x5A556B229A169402.Call(native);
		}

		public bool _0xB1D2BB1E1631F5B1()
		{
			if (__0xB1D2BB1E1631F5B1 == null) __0xB1D2BB1E1631F5B1 = (Function) native.GetObjectProperty("_0xB1D2BB1E1631F5B1");
			return (bool) __0xB1D2BB1E1631F5B1.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) _0xBED9F5693F34ED17(int statName, int p1, double outValue)
		{
			if (__0xBED9F5693F34ED17 == null) __0xBED9F5693F34ED17 = (Function) native.GetObjectProperty("_0xBED9F5693F34ED17");
			var results = (Array) __0xBED9F5693F34ED17.Call(native, statName, p1, outValue);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// STATS::0x343B27E2(0);
		/// STATS::0x343B27E2(1);
		/// STATS::0x343B27E2(2);
		/// STATS::0x343B27E2(3);
		/// STATS::0x343B27E2(4);
		/// STATS::0x343B27E2(5);
		/// STATS::0x343B27E2(6);
		/// STATS::0x343B27E2(7);
		/// Identical in ingamehud & maintransition.
		/// </summary>
		public void _0x26D7399B9587FE89(int p0)
		{
			if (__0x26D7399B9587FE89 == null) __0x26D7399B9587FE89 = (Function) native.GetObjectProperty("_0x26D7399B9587FE89");
			__0x26D7399B9587FE89.Call(native, p0);
		}

		/// <summary>
		/// STATS::0xE3247582(0);
		/// STATS::0xE3247582(1);
		/// STATS::0xE3247582(2);
		/// STATS::0xE3247582(3);
		/// STATS::0xE3247582(4);
		/// STATS::0xE3247582(5);
		/// STATS::0xE3247582(6);
		/// </summary>
		public void _0xA78B8FA58200DA56(int p0)
		{
			if (__0xA78B8FA58200DA56 == null) __0xA78B8FA58200DA56 = (Function) native.GetObjectProperty("_0xA78B8FA58200DA56");
			__0xA78B8FA58200DA56.Call(native, p0);
		}

		public int StatGetNumberOfDays(int statName)
		{
			if (statGetNumberOfDays == null) statGetNumberOfDays = (Function) native.GetObjectProperty("statGetNumberOfDays");
			return (int) statGetNumberOfDays.Call(native, statName);
		}

		public int StatGetNumberOfHours(int statName)
		{
			if (statGetNumberOfHours == null) statGetNumberOfHours = (Function) native.GetObjectProperty("statGetNumberOfHours");
			return (int) statGetNumberOfHours.Call(native, statName);
		}

		public int StatGetNumberOfMinutes(int statName)
		{
			if (statGetNumberOfMinutes == null) statGetNumberOfMinutes = (Function) native.GetObjectProperty("statGetNumberOfMinutes");
			return (int) statGetNumberOfMinutes.Call(native, statName);
		}

		public int StatGetNumberOfSeconds(int statName)
		{
			if (statGetNumberOfSeconds == null) statGetNumberOfSeconds = (Function) native.GetObjectProperty("statGetNumberOfSeconds");
			return (int) statGetNumberOfSeconds.Call(native, statName);
		}

		/// <summary>
		/// Does not take effect immediately, unfortunately.
		/// profileSetting seems to only be 936, 937 and 938 in scripts
		/// </summary>
		/// <param name="profileSetting">seems to only be 936, 937 and 938 in scripts</param>
		public void StatSetProfileSettingValue(int profileSetting, int value)
		{
			if (statSetProfileSettingValue == null) statSetProfileSettingValue = (Function) native.GetObjectProperty("statSetProfileSettingValue");
			statSetProfileSettingValue.Call(native, profileSetting, value);
		}

		/// <summary>
		/// Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_BOOL_MASKED"?
		/// </summary>
		public int _0xF4D8E7AC2A27758C(int p0)
		{
			if (__0xF4D8E7AC2A27758C == null) __0xF4D8E7AC2A27758C = (Function) native.GetObjectProperty("_0xF4D8E7AC2A27758C");
			return (int) __0xF4D8E7AC2A27758C.Call(native, p0);
		}

		/// <summary>
		/// Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
		/// </summary>
		public int _0x94F12ABF9C79E339(int p0)
		{
			if (__0x94F12ABF9C79E339 == null) __0x94F12ABF9C79E339 = (Function) native.GetObjectProperty("_0x94F12ABF9C79E339");
			return (int) __0x94F12ABF9C79E339.Call(native, p0);
		}

		public int GetPackedBoolStatKey(int index, bool spStat, bool charStat, int character)
		{
			if (getPackedBoolStatKey == null) getPackedBoolStatKey = (Function) native.GetObjectProperty("getPackedBoolStatKey");
			return (int) getPackedBoolStatKey.Call(native, index, spStat, charStat, character);
		}

		public int GetPackedIntStatKey(int index, bool spStat, bool charStat, int character)
		{
			if (getPackedIntStatKey == null) getPackedIntStatKey = (Function) native.GetObjectProperty("getPackedIntStatKey");
			return (int) getPackedIntStatKey.Call(native, index, spStat, charStat, character);
		}

		public int GetPackedTitleUpdateBoolStatKey(int index, bool spStat, bool charStat, int character)
		{
			if (getPackedTitleUpdateBoolStatKey == null) getPackedTitleUpdateBoolStatKey = (Function) native.GetObjectProperty("getPackedTitleUpdateBoolStatKey");
			return (int) getPackedTitleUpdateBoolStatKey.Call(native, index, spStat, charStat, character);
		}

		public int GetPackedTitleUpdateIntStatKey(int index, bool spStat, bool charStat, int character)
		{
			if (getPackedTitleUpdateIntStatKey == null) getPackedTitleUpdateIntStatKey = (Function) native.GetObjectProperty("getPackedTitleUpdateIntStatKey");
			return (int) getPackedTitleUpdateIntStatKey.Call(native, index, spStat, charStat, character);
		}

		/// <summary>
		/// Needs more research. Gets the stat name of a masked bool?
		/// p4 - Usually "_NGPSTAT_BOOL" or "_NGTATPSTAT_BOOL". There may be more that I missed.
		/// </summary>
		public int GetNgstatBoolHash(int index, bool spStat, bool charStat, int character, string section)
		{
			if (getNgstatBoolHash == null) getNgstatBoolHash = (Function) native.GetObjectProperty("getNgstatBoolHash");
			return (int) getNgstatBoolHash.Call(native, index, spStat, charStat, character, section);
		}

		/// <summary>
		/// Needs more research. Gets the stat name of a masked int?
		/// p4 - Usually one of the following (there may be more that I missed):
		/// -----> "_APAPSTAT_INT"
		/// -----> "_LRPSTAT_INT"
		/// -----> "_NGPSTAT_INT"
		/// -----> "_MP_APAPSTAT_INT"
		/// -----> "_MP_LRPSTAT_INT"
		/// -----> "_MP_NGPSTAT_INT"
		/// </summary>
		public int GetNgstatIntHash(int index, bool spStat, bool charStat, int character, string section)
		{
			if (getNgstatIntHash == null) getNgstatIntHash = (Function) native.GetObjectProperty("getNgstatIntHash");
			return (int) getNgstatIntHash.Call(native, index, spStat, charStat, character, section);
		}

		/// <summary>
		/// p2 - Default value? Seems to be -1 most of the time.
		/// </summary>
		/// <param name="p2">Default value? Seems to be -1 most of the time.</param>
		public bool StatGetBoolMasked(int statName, int mask, int p2)
		{
			if (statGetBoolMasked == null) statGetBoolMasked = (Function) native.GetObjectProperty("statGetBoolMasked");
			return (bool) statGetBoolMasked.Call(native, statName, mask, p2);
		}

		public bool StatSetBoolMasked(int statName, bool value, int mask, bool save)
		{
			if (statSetBoolMasked == null) statSetBoolMasked = (Function) native.GetObjectProperty("statSetBoolMasked");
			return (bool) statSetBoolMasked.Call(native, statName, value, mask, save);
		}

		public void PlaystatsBackgroundScriptAction(string action, int value)
		{
			if (playstatsBackgroundScriptAction == null) playstatsBackgroundScriptAction = (Function) native.GetObjectProperty("playstatsBackgroundScriptAction");
			playstatsBackgroundScriptAction.Call(native, action, value);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsNpcInvite(object p0)
		{
			if (playstatsNpcInvite == null) playstatsNpcInvite = (Function) native.GetObjectProperty("playstatsNpcInvite");
			var results = (Array) playstatsNpcInvite.Call(native, p0);
			return (results[0], results[1]);
		}

		public void PlaystatsAwardXp(int amount, int type, int category)
		{
			if (playstatsAwardXp == null) playstatsAwardXp = (Function) native.GetObjectProperty("playstatsAwardXp");
			playstatsAwardXp.Call(native, amount, type, category);
		}

		public void PlaystatsRankUp(int rank)
		{
			if (playstatsRankUp == null) playstatsRankUp = (Function) native.GetObjectProperty("playstatsRankUp");
			playstatsRankUp.Call(native, rank);
		}

		public void PlaystatsStartOfflineMode()
		{
			if (playstatsStartOfflineMode == null) playstatsStartOfflineMode = (Function) native.GetObjectProperty("playstatsStartOfflineMode");
			playstatsStartOfflineMode.Call(native);
		}

		public void _0xA071E0ED98F91286(object p0, object p1)
		{
			if (__0xA071E0ED98F91286 == null) __0xA071E0ED98F91286 = (Function) native.GetObjectProperty("_0xA071E0ED98F91286");
			__0xA071E0ED98F91286.Call(native, p0, p1);
		}

		public void _0xC5BE134EC7BA96A0(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0xC5BE134EC7BA96A0 == null) __0xC5BE134EC7BA96A0 = (Function) native.GetObjectProperty("_0xC5BE134EC7BA96A0");
			__0xC5BE134EC7BA96A0.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsMissionStarted(object p0, object p1, object p2, bool p3)
		{
			if (playstatsMissionStarted == null) playstatsMissionStarted = (Function) native.GetObjectProperty("playstatsMissionStarted");
			var results = (Array) playstatsMissionStarted.Call(native, p0, p1, p2, p3);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsMissionOver(object p0, object p1, object p2, bool p3, bool p4, bool p5)
		{
			if (playstatsMissionOver == null) playstatsMissionOver = (Function) native.GetObjectProperty("playstatsMissionOver");
			var results = (Array) playstatsMissionOver.Call(native, p0, p1, p2, p3, p4, p5);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsMissionCheckpoint(object p0, object p1, object p2, object p3)
		{
			if (playstatsMissionCheckpoint == null) playstatsMissionCheckpoint = (Function) native.GetObjectProperty("playstatsMissionCheckpoint");
			var results = (Array) playstatsMissionCheckpoint.Call(native, p0, p1, p2, p3);
			return (results[0], results[1]);
		}

		public void PlaystatsRandomMissionDone(string name, object p1, object p2, object p3)
		{
			if (playstatsRandomMissionDone == null) playstatsRandomMissionDone = (Function) native.GetObjectProperty("playstatsRandomMissionDone");
			playstatsRandomMissionDone.Call(native, name, p1, p2, p3);
		}

		public void PlaystatsRosBet(int amount, int act, int player, double cm)
		{
			if (playstatsRosBet == null) playstatsRosBet = (Function) native.GetObjectProperty("playstatsRosBet");
			playstatsRosBet.Call(native, amount, act, player, cm);
		}

		public void PlaystatsRaceCheckpoint(object p0, object p1, object p2, object p3, object p4)
		{
			if (playstatsRaceCheckpoint == null) playstatsRaceCheckpoint = (Function) native.GetObjectProperty("playstatsRaceCheckpoint");
			playstatsRaceCheckpoint.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// PLAYSTATS_*
		/// </summary>
		/// <returns>Array<bool, int, int></returns>
		public (bool, int, int) _0x6DEE77AFF8C21BD1(int playerAccountId, int posixTime)
		{
			if (__0x6DEE77AFF8C21BD1 == null) __0x6DEE77AFF8C21BD1 = (Function) native.GetObjectProperty("_0x6DEE77AFF8C21BD1");
			var results = (Array) __0x6DEE77AFF8C21BD1.Call(native, playerAccountId, posixTime);
			return ((bool) results[0], (int) results[1], (int) results[2]);
		}

		public void PlaystatsMatchStarted(object p0, object p1, object p2)
		{
			if (playstatsMatchStarted == null) playstatsMatchStarted = (Function) native.GetObjectProperty("playstatsMatchStarted");
			playstatsMatchStarted.Call(native, p0, p1, p2);
		}

		public void PlaystatsShopItem(object p0, object p1, object p2, object p3, object p4)
		{
			if (playstatsShopItem == null) playstatsShopItem = (Function) native.GetObjectProperty("playstatsShopItem");
			playstatsShopItem.Call(native, p0, p1, p2, p3, p4);
		}

		public void PlaystatsCrateDrop(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7)
		{
			if (playstatsCrateDrop == null) playstatsCrateDrop = (Function) native.GetObjectProperty("playstatsCrateDrop");
			playstatsCrateDrop.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public void PlaystatsCrateCreated(double p0, double p1, double p2)
		{
			if (playstatsCrateCreated == null) playstatsCrateCreated = (Function) native.GetObjectProperty("playstatsCrateCreated");
			playstatsCrateCreated.Call(native, p0, p1, p2);
		}

		public void PlaystatsHoldUp(object p0, object p1, object p2, object p3)
		{
			if (playstatsHoldUp == null) playstatsHoldUp = (Function) native.GetObjectProperty("playstatsHoldUp");
			playstatsHoldUp.Call(native, p0, p1, p2, p3);
		}

		public void PlaystatsImpExp(object p0, object p1, object p2, object p3)
		{
			if (playstatsImpExp == null) playstatsImpExp = (Function) native.GetObjectProperty("playstatsImpExp");
			playstatsImpExp.Call(native, p0, p1, p2, p3);
		}

		public void PlaystatsRaceToPoint(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (playstatsRaceToPoint == null) playstatsRaceToPoint = (Function) native.GetObjectProperty("playstatsRaceToPoint");
			playstatsRaceToPoint.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		public void PlaystatsAcquiredHiddenPackage(object p0)
		{
			if (playstatsAcquiredHiddenPackage == null) playstatsAcquiredHiddenPackage = (Function) native.GetObjectProperty("playstatsAcquiredHiddenPackage");
			playstatsAcquiredHiddenPackage.Call(native, p0);
		}

		public void PlaystatsWebsiteVisited(int scaleformHash, int p1)
		{
			if (playstatsWebsiteVisited == null) playstatsWebsiteVisited = (Function) native.GetObjectProperty("playstatsWebsiteVisited");
			playstatsWebsiteVisited.Call(native, scaleformHash, p1);
		}

		public void PlaystatsFriendActivity(object p0, object p1)
		{
			if (playstatsFriendActivity == null) playstatsFriendActivity = (Function) native.GetObjectProperty("playstatsFriendActivity");
			playstatsFriendActivity.Call(native, p0, p1);
		}

		public void PlaystatsOddjobDone(object p0, object p1, object p2)
		{
			if (playstatsOddjobDone == null) playstatsOddjobDone = (Function) native.GetObjectProperty("playstatsOddjobDone");
			playstatsOddjobDone.Call(native, p0, p1, p2);
		}

		public void PlaystatsPropChange(object p0, object p1, object p2, object p3)
		{
			if (playstatsPropChange == null) playstatsPropChange = (Function) native.GetObjectProperty("playstatsPropChange");
			playstatsPropChange.Call(native, p0, p1, p2, p3);
		}

		public void PlaystatsClothChange(object p0, object p1, object p2, object p3, object p4)
		{
			if (playstatsClothChange == null) playstatsClothChange = (Function) native.GetObjectProperty("playstatsClothChange");
			playstatsClothChange.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
		/// </summary>
		public void PlaystatsWeaponModeChange(int weaponHash, int componentHashTo, int componentHashFrom)
		{
			if (playstatsWeaponModeChange == null) playstatsWeaponModeChange = (Function) native.GetObjectProperty("playstatsWeaponModeChange");
			playstatsWeaponModeChange.Call(native, weaponHash, componentHashTo, componentHashFrom);
		}

		public void PlaystatsCheatApplied(string cheat)
		{
			if (playstatsCheatApplied == null) playstatsCheatApplied = (Function) native.GetObjectProperty("playstatsCheatApplied");
			playstatsCheatApplied.Call(native, cheat);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object, object></returns>
		public (object, object, object, object, object) _0xF8C54A461C3E11DC(object p0, object p1, object p2, object p3)
		{
			if (__0xF8C54A461C3E11DC == null) __0xF8C54A461C3E11DC = (Function) native.GetObjectProperty("_0xF8C54A461C3E11DC");
			var results = (Array) __0xF8C54A461C3E11DC.Call(native, p0, p1, p2, p3);
			return (results[0], results[1], results[2], results[3], results[4]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object, object></returns>
		public (object, object, object, object, object) _0xF5BB8DAC426A52C0(object p0, object p1, object p2, object p3)
		{
			if (__0xF5BB8DAC426A52C0 == null) __0xF5BB8DAC426A52C0 = (Function) native.GetObjectProperty("_0xF5BB8DAC426A52C0");
			var results = (Array) __0xF5BB8DAC426A52C0.Call(native, p0, p1, p2, p3);
			return (results[0], results[1], results[2], results[3], results[4]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object, object></returns>
		public (object, object, object, object, object) _0xA736CF7FB7C5BFF4(object p0, object p1, object p2, object p3)
		{
			if (__0xA736CF7FB7C5BFF4 == null) __0xA736CF7FB7C5BFF4 = (Function) native.GetObjectProperty("_0xA736CF7FB7C5BFF4");
			var results = (Array) __0xA736CF7FB7C5BFF4.Call(native, p0, p1, p2, p3);
			return (results[0], results[1], results[2], results[3], results[4]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object, object></returns>
		public (object, object, object, object, object) _0x14E0B2D1AD1044E0(object p0, object p1, object p2, object p3)
		{
			if (__0x14E0B2D1AD1044E0 == null) __0x14E0B2D1AD1044E0 = (Function) native.GetObjectProperty("_0x14E0B2D1AD1044E0");
			var results = (Array) __0x14E0B2D1AD1044E0.Call(native, p0, p1, p2, p3);
			return (results[0], results[1], results[2], results[3], results[4]);
		}

		public void PlaystatsQuickfixTool(int element, string item)
		{
			if (playstatsQuickfixTool == null) playstatsQuickfixTool = (Function) native.GetObjectProperty("playstatsQuickfixTool");
			playstatsQuickfixTool.Call(native, element, item);
		}

		/// <summary>
		/// longest time being ilde?
		/// </summary>
		public void PlaystatsIdleKick(int time)
		{
			if (playstatsIdleKick == null) playstatsIdleKick = (Function) native.GetObjectProperty("playstatsIdleKick");
			playstatsIdleKick.Call(native, time);
		}

		/// <summary>
		/// PLAYSTATS_S*
		/// </summary>
		public void _0xD1032E482629049E(int p0)
		{
			if (__0xD1032E482629049E == null) __0xD1032E482629049E = (Function) native.GetObjectProperty("_0xD1032E482629049E");
			__0xD1032E482629049E.Call(native, p0);
		}

		public void PlaystatsHeistSaveCheat(int hash, int p1)
		{
			if (playstatsHeistSaveCheat == null) playstatsHeistSaveCheat = (Function) native.GetObjectProperty("playstatsHeistSaveCheat");
			playstatsHeistSaveCheat.Call(native, hash, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsDirectorMode(object p0)
		{
			if (playstatsDirectorMode == null) playstatsDirectorMode = (Function) native.GetObjectProperty("playstatsDirectorMode");
			var results = (Array) playstatsDirectorMode.Call(native, p0);
			return (results[0], results[1]);
		}

		public void PlaystatsAwardBadsport(int id)
		{
			if (playstatsAwardBadsport == null) playstatsAwardBadsport = (Function) native.GetObjectProperty("playstatsAwardBadsport");
			playstatsAwardBadsport.Call(native, id);
		}

		public void PlaystatsPegasaircraft(int modelHash)
		{
			if (playstatsPegasaircraft == null) playstatsPegasaircraft = (Function) native.GetObjectProperty("playstatsPegasaircraft");
			playstatsPegasaircraft.Call(native, modelHash);
		}

		public void _0x6A60E43998228229(object p0)
		{
			if (__0x6A60E43998228229 == null) __0x6A60E43998228229 = (Function) native.GetObjectProperty("_0x6A60E43998228229");
			__0x6A60E43998228229.Call(native, p0);
		}

		public void _0xBFAFDB5FAAA5C5AB(object p0)
		{
			if (__0xBFAFDB5FAAA5C5AB == null) __0xBFAFDB5FAAA5C5AB = (Function) native.GetObjectProperty("_0xBFAFDB5FAAA5C5AB");
			__0xBFAFDB5FAAA5C5AB.Call(native, p0);
		}

		public void _0x8C9D11605E59D955(object p0)
		{
			if (__0x8C9D11605E59D955 == null) __0x8C9D11605E59D955 = (Function) native.GetObjectProperty("_0x8C9D11605E59D955");
			__0x8C9D11605E59D955.Call(native, p0);
		}

		public void _0x3DE3AA516FB126A4(object p0)
		{
			if (__0x3DE3AA516FB126A4 == null) __0x3DE3AA516FB126A4 = (Function) native.GetObjectProperty("_0x3DE3AA516FB126A4");
			__0x3DE3AA516FB126A4.Call(native, p0);
		}

		public void _0xBAA2F0490E146BE8(object p0)
		{
			if (__0xBAA2F0490E146BE8 == null) __0xBAA2F0490E146BE8 = (Function) native.GetObjectProperty("_0xBAA2F0490E146BE8");
			__0xBAA2F0490E146BE8.Call(native, p0);
		}

		public void _0x1A7CE7CD3E653485(object p0)
		{
			if (__0x1A7CE7CD3E653485 == null) __0x1A7CE7CD3E653485 = (Function) native.GetObjectProperty("_0x1A7CE7CD3E653485");
			__0x1A7CE7CD3E653485.Call(native, p0);
		}

		public void _0x419615486BBF1956(object p0)
		{
			if (__0x419615486BBF1956 == null) __0x419615486BBF1956 = (Function) native.GetObjectProperty("_0x419615486BBF1956");
			__0x419615486BBF1956.Call(native, p0);
		}

		public void _0x84DFC579C2FC214C(object p0)
		{
			if (__0x84DFC579C2FC214C == null) __0x84DFC579C2FC214C = (Function) native.GetObjectProperty("_0x84DFC579C2FC214C");
			__0x84DFC579C2FC214C.Call(native, p0);
		}

		public void _0x0A9C7F36E5D7B683(object p0)
		{
			if (__0x0A9C7F36E5D7B683 == null) __0x0A9C7F36E5D7B683 = (Function) native.GetObjectProperty("_0x0A9C7F36E5D7B683");
			__0x0A9C7F36E5D7B683.Call(native, p0);
		}

		public void _0x164C5FF663790845(object p0)
		{
			if (__0x164C5FF663790845 == null) __0x164C5FF663790845 = (Function) native.GetObjectProperty("_0x164C5FF663790845");
			__0x164C5FF663790845.Call(native, p0);
		}

		public void _0xEDBF6C9B0D2C65C8(object p0)
		{
			if (__0xEDBF6C9B0D2C65C8 == null) __0xEDBF6C9B0D2C65C8 = (Function) native.GetObjectProperty("_0xEDBF6C9B0D2C65C8");
			__0xEDBF6C9B0D2C65C8.Call(native, p0);
		}

		public void _0x6551B1F7F6CD46EA(object p0)
		{
			if (__0x6551B1F7F6CD46EA == null) __0x6551B1F7F6CD46EA = (Function) native.GetObjectProperty("_0x6551B1F7F6CD46EA");
			__0x6551B1F7F6CD46EA.Call(native, p0);
		}

		public void _0x2CD90358F67D0AA8(object p0)
		{
			if (__0x2CD90358F67D0AA8 == null) __0x2CD90358F67D0AA8 = (Function) native.GetObjectProperty("_0x2CD90358F67D0AA8");
			__0x2CD90358F67D0AA8.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsPiMenuHideSettings(object data)
		{
			if (playstatsPiMenuHideSettings == null) playstatsPiMenuHideSettings = (Function) native.GetObjectProperty("playstatsPiMenuHideSettings");
			var results = (Array) playstatsPiMenuHideSettings.Call(native, data);
			return (results[0], results[1]);
		}

		public object LeaderboardsGetNumberOfColumns(object p0, object p1)
		{
			if (leaderboardsGetNumberOfColumns == null) leaderboardsGetNumberOfColumns = (Function) native.GetObjectProperty("leaderboardsGetNumberOfColumns");
			return leaderboardsGetNumberOfColumns.Call(native, p0, p1);
		}

		public object LeaderboardsGetColumnId(object p0, object p1, object p2)
		{
			if (leaderboardsGetColumnId == null) leaderboardsGetColumnId = (Function) native.GetObjectProperty("leaderboardsGetColumnId");
			return leaderboardsGetColumnId.Call(native, p0, p1, p2);
		}

		public object LeaderboardsGetColumnType(object p0, object p1, object p2)
		{
			if (leaderboardsGetColumnType == null) leaderboardsGetColumnType = (Function) native.GetObjectProperty("leaderboardsGetColumnType");
			return leaderboardsGetColumnType.Call(native, p0, p1, p2);
		}

		public object LeaderboardsReadClearAll()
		{
			if (leaderboardsReadClearAll == null) leaderboardsReadClearAll = (Function) native.GetObjectProperty("leaderboardsReadClearAll");
			return leaderboardsReadClearAll.Call(native);
		}

		public object LeaderboardsReadClear(object p0, object p1, object p2)
		{
			if (leaderboardsReadClear == null) leaderboardsReadClear = (Function) native.GetObjectProperty("leaderboardsReadClear");
			return leaderboardsReadClear.Call(native, p0, p1, p2);
		}

		public bool LeaderboardsReadPending(object p0, object p1, object p2)
		{
			if (leaderboardsReadPending == null) leaderboardsReadPending = (Function) native.GetObjectProperty("leaderboardsReadPending");
			return (bool) leaderboardsReadPending.Call(native, p0, p1, p2);
		}

		public bool LeaderboardsReadAnyPending()
		{
			if (leaderboardsReadAnyPending == null) leaderboardsReadAnyPending = (Function) native.GetObjectProperty("leaderboardsReadAnyPending");
			return (bool) leaderboardsReadAnyPending.Call(native);
		}

		public bool LeaderboardsReadSuccessful(object p0, object p1, object p2)
		{
			if (leaderboardsReadSuccessful == null) leaderboardsReadSuccessful = (Function) native.GetObjectProperty("leaderboardsReadSuccessful");
			return (bool) leaderboardsReadSuccessful.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) Leaderboards2ReadFriendsByRow(object p0, object p1, object p2, bool p3, object p4, object p5)
		{
			if (leaderboards2ReadFriendsByRow == null) leaderboards2ReadFriendsByRow = (Function) native.GetObjectProperty("leaderboards2ReadFriendsByRow");
			var results = (Array) leaderboards2ReadFriendsByRow.Call(native, p0, p1, p2, p3, p4, p5);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) Leaderboards2ReadByHandle(object p0, object p1)
		{
			if (leaderboards2ReadByHandle == null) leaderboards2ReadByHandle = (Function) native.GetObjectProperty("leaderboards2ReadByHandle");
			var results = (Array) leaderboards2ReadByHandle.Call(native, p0, p1);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object, object, object></returns>
		public (bool, object, object, object, object) Leaderboards2ReadByRow(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (leaderboards2ReadByRow == null) leaderboards2ReadByRow = (Function) native.GetObjectProperty("leaderboards2ReadByRow");
			var results = (Array) leaderboards2ReadByRow.Call(native, p0, p1, p2, p3, p4, p5, p6);
			return ((bool) results[0], results[1], results[2], results[3], results[4]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) Leaderboards2ReadByRank(object p0, object p1, object p2)
		{
			if (leaderboards2ReadByRank == null) leaderboards2ReadByRank = (Function) native.GetObjectProperty("leaderboards2ReadByRank");
			var results = (Array) leaderboards2ReadByRank.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) Leaderboards2ReadByRadius(object p0, object p1, object p2)
		{
			if (leaderboards2ReadByRadius == null) leaderboards2ReadByRadius = (Function) native.GetObjectProperty("leaderboards2ReadByRadius");
			var results = (Array) leaderboards2ReadByRadius.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1], results[2]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) Leaderboards2ReadByScoreInt(object p0, object p1, object p2)
		{
			if (leaderboards2ReadByScoreInt == null) leaderboards2ReadByScoreInt = (Function) native.GetObjectProperty("leaderboards2ReadByScoreInt");
			var results = (Array) leaderboards2ReadByScoreInt.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) Leaderboards2ReadByScoreFloat(object p0, double p1, object p2)
		{
			if (leaderboards2ReadByScoreFloat == null) leaderboards2ReadByScoreFloat = (Function) native.GetObjectProperty("leaderboards2ReadByScoreFloat");
			var results = (Array) leaderboards2ReadByScoreFloat.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object, object></returns>
		public (bool, object, object, object) Leaderboards2ReadRankPrediction(object p0, object p1, object p2)
		{
			if (leaderboards2ReadRankPrediction == null) leaderboards2ReadRankPrediction = (Function) native.GetObjectProperty("leaderboards2ReadRankPrediction");
			var results = (Array) leaderboards2ReadRankPrediction.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1], results[2], results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) Leaderboards2ReadByPlatform(object p0, string gamerHandleCsv, string platformName)
		{
			if (leaderboards2ReadByPlatform == null) leaderboards2ReadByPlatform = (Function) native.GetObjectProperty("leaderboards2ReadByPlatform");
			var results = (Array) leaderboards2ReadByPlatform.Call(native, p0, gamerHandleCsv, platformName);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0xA0F93D5465B3094D(object p0)
		{
			if (__0xA0F93D5465B3094D == null) __0xA0F93D5465B3094D = (Function) native.GetObjectProperty("_0xA0F93D5465B3094D");
			var results = (Array) __0xA0F93D5465B3094D.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		public void _0x71B008056E5692D6()
		{
			if (__0x71B008056E5692D6 == null) __0x71B008056E5692D6 = (Function) native.GetObjectProperty("_0x71B008056E5692D6");
			__0x71B008056E5692D6.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) _0x34770B9CE0E03B91(object p0, object p1)
		{
			if (__0x34770B9CE0E03B91 == null) __0x34770B9CE0E03B91 = (Function) native.GetObjectProperty("_0x34770B9CE0E03B91");
			var results = (Array) __0x34770B9CE0E03B91.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		public object _0x88578F6EC36B4A3A(object p0, object p1)
		{
			if (__0x88578F6EC36B4A3A == null) __0x88578F6EC36B4A3A = (Function) native.GetObjectProperty("_0x88578F6EC36B4A3A");
			return __0x88578F6EC36B4A3A.Call(native, p0, p1);
		}

		public double _0x38491439B6BA7F7D(object p0, object p1)
		{
			if (__0x38491439B6BA7F7D == null) __0x38491439B6BA7F7D = (Function) native.GetObjectProperty("_0x38491439B6BA7F7D");
			return (double) __0x38491439B6BA7F7D.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) Leaderboards2WriteData(object p0)
		{
			if (leaderboards2WriteData == null) leaderboards2WriteData = (Function) native.GetObjectProperty("leaderboards2WriteData");
			var results = (Array) leaderboards2WriteData.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		public void LeaderboardsWriteAddColumn(object p0, object p1, double p2)
		{
			if (leaderboardsWriteAddColumn == null) leaderboardsWriteAddColumn = (Function) native.GetObjectProperty("leaderboardsWriteAddColumn");
			leaderboardsWriteAddColumn.Call(native, p0, p1, p2);
		}

		public void LeaderboardsWriteAddColumnLong(object p0, object p1, object p2)
		{
			if (leaderboardsWriteAddColumnLong == null) leaderboardsWriteAddColumnLong = (Function) native.GetObjectProperty("leaderboardsWriteAddColumnLong");
			leaderboardsWriteAddColumnLong.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) LeaderboardsCacheDataRow(object p0)
		{
			if (leaderboardsCacheDataRow == null) leaderboardsCacheDataRow = (Function) native.GetObjectProperty("leaderboardsCacheDataRow");
			var results = (Array) leaderboardsCacheDataRow.Call(native, p0);
			return ((bool) results[0], results[1]);
		}

		public void LeaderboardsClearCacheData()
		{
			if (leaderboardsClearCacheData == null) leaderboardsClearCacheData = (Function) native.GetObjectProperty("leaderboardsClearCacheData");
			leaderboardsClearCacheData.Call(native);
		}

		public void _0x8EC74CEB042E7CFF(object p0)
		{
			if (__0x8EC74CEB042E7CFF == null) __0x8EC74CEB042E7CFF = (Function) native.GetObjectProperty("_0x8EC74CEB042E7CFF");
			__0x8EC74CEB042E7CFF.Call(native, p0);
		}

		public bool LeaderboardsGetCacheExists(object p0)
		{
			if (leaderboardsGetCacheExists == null) leaderboardsGetCacheExists = (Function) native.GetObjectProperty("leaderboardsGetCacheExists");
			return (bool) leaderboardsGetCacheExists.Call(native, p0);
		}

		public object LeaderboardsGetCacheTime(object p0)
		{
			if (leaderboardsGetCacheTime == null) leaderboardsGetCacheTime = (Function) native.GetObjectProperty("leaderboardsGetCacheTime");
			return leaderboardsGetCacheTime.Call(native, p0);
		}

		public int LeaderboardsGetCacheNumberOfRows(object p0)
		{
			if (leaderboardsGetCacheNumberOfRows == null) leaderboardsGetCacheNumberOfRows = (Function) native.GetObjectProperty("leaderboardsGetCacheNumberOfRows");
			return (int) leaderboardsGetCacheNumberOfRows.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) LeaderboardsGetCacheDataRow(object p0, object p1, object p2)
		{
			if (leaderboardsGetCacheDataRow == null) leaderboardsGetCacheDataRow = (Function) native.GetObjectProperty("leaderboardsGetCacheDataRow");
			var results = (Array) leaderboardsGetCacheDataRow.Call(native, p0, p1, p2);
			return ((bool) results[0], results[1]);
		}

		public void UpdateStatInt(int statHash, int value, int p2)
		{
			if (updateStatInt == null) updateStatInt = (Function) native.GetObjectProperty("updateStatInt");
			updateStatInt.Call(native, statHash, value, p2);
		}

		public void UpdateStatFloat(int statHash, double value, int p2)
		{
			if (updateStatFloat == null) updateStatFloat = (Function) native.GetObjectProperty("updateStatFloat");
			updateStatFloat.Call(native, statHash, value, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) _0x6483C25849031C4F(object p0, object p1, object p2, object p3)
		{
			if (__0x6483C25849031C4F == null) __0x6483C25849031C4F = (Function) native.GetObjectProperty("_0x6483C25849031C4F");
			var results = (Array) __0x6483C25849031C4F.Call(native, p0, p1, p2, p3);
			return (results[0], results[1]);
		}

		/// <summary>
		/// example from completionpercentage_controller.ysc.c4
		/// if (STATS::_5EAD2BF6484852E4()) {
		/// GAMEPLAY::SET_BIT(g_17b95._f20df._ff10, 15);
		/// STATS::_11FF1C80276097ED(0xe9ec4dd1, 200, 0);
		/// }
		/// </summary>
		public bool _0x5EAD2BF6484852E4()
		{
			if (__0x5EAD2BF6484852E4 == null) __0x5EAD2BF6484852E4 = (Function) native.GetObjectProperty("_0x5EAD2BF6484852E4");
			return (bool) __0x5EAD2BF6484852E4.Call(native);
		}

		public void _0xC141B8917E0017EC()
		{
			if (__0xC141B8917E0017EC == null) __0xC141B8917E0017EC = (Function) native.GetObjectProperty("_0xC141B8917E0017EC");
			__0xC141B8917E0017EC.Call(native);
		}

		public void _0xB475F27C6A994D65()
		{
			if (__0xB475F27C6A994D65 == null) __0xB475F27C6A994D65 = (Function) native.GetObjectProperty("_0xB475F27C6A994D65");
			__0xB475F27C6A994D65.Call(native);
		}

		/// <summary>
		/// Sets profile setting 939
		/// </summary>
		public void _0xC67E2DA1CBE759E2()
		{
			if (__0xC67E2DA1CBE759E2 == null) __0xC67E2DA1CBE759E2 = (Function) native.GetObjectProperty("_0xC67E2DA1CBE759E2");
			__0xC67E2DA1CBE759E2.Call(native);
		}

		/// <summary>
		/// Sets profile setting 933
		/// </summary>
		public void _0xF1A1803D3476F215(int value)
		{
			if (__0xF1A1803D3476F215 == null) __0xF1A1803D3476F215 = (Function) native.GetObjectProperty("_0xF1A1803D3476F215");
			__0xF1A1803D3476F215.Call(native, value);
		}

		/// <summary>
		/// Sets profile setting 934
		/// </summary>
		public void _0x38BAAA5DD4C9D19F(int value)
		{
			if (__0x38BAAA5DD4C9D19F == null) __0x38BAAA5DD4C9D19F = (Function) native.GetObjectProperty("_0x38BAAA5DD4C9D19F");
			__0x38BAAA5DD4C9D19F.Call(native, value);
		}

		/// <summary>
		/// Sets profile setting 935
		/// </summary>
		public void _0x55384438FC55AD8E(int value)
		{
			if (__0x55384438FC55AD8E == null) __0x55384438FC55AD8E = (Function) native.GetObjectProperty("_0x55384438FC55AD8E");
			__0x55384438FC55AD8E.Call(native, value);
		}

		public void _0x723C1CE13FBFDB67(object p0, object p1)
		{
			if (__0x723C1CE13FBFDB67 == null) __0x723C1CE13FBFDB67 = (Function) native.GetObjectProperty("_0x723C1CE13FBFDB67");
			__0x723C1CE13FBFDB67.Call(native, p0, p1);
		}

		public void _0x0D01D20616FC73FB(object p0, object p1)
		{
			if (__0x0D01D20616FC73FB == null) __0x0D01D20616FC73FB = (Function) native.GetObjectProperty("_0x0D01D20616FC73FB");
			__0x0D01D20616FC73FB.Call(native, p0, p1);
		}

		public void _0x428EAF89E24F6C36(object p0, double p1)
		{
			if (__0x428EAF89E24F6C36 == null) __0x428EAF89E24F6C36 = (Function) native.GetObjectProperty("_0x428EAF89E24F6C36");
			__0x428EAF89E24F6C36.Call(native, p0, p1);
		}

		public void _0x047CBED6F6F8B63C()
		{
			if (__0x047CBED6F6F8B63C == null) __0x047CBED6F6F8B63C = (Function) native.GetObjectProperty("_0x047CBED6F6F8B63C");
			__0x047CBED6F6F8B63C.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object, object></returns>
		public (bool, object, object) Leaderboards2WriteDataForEventType(object p0, object p1)
		{
			if (leaderboards2WriteDataForEventType == null) leaderboards2WriteDataForEventType = (Function) native.GetObjectProperty("leaderboards2WriteDataForEventType");
			var results = (Array) leaderboards2WriteDataForEventType.Call(native, p0, p1);
			return ((bool) results[0], results[1], results[2]);
		}

		public void _0x6F361B8889A792A3()
		{
			if (__0x6F361B8889A792A3 == null) __0x6F361B8889A792A3 = (Function) native.GetObjectProperty("_0x6F361B8889A792A3");
			__0x6F361B8889A792A3.Call(native);
		}

		public void _0xC847B43F369AC0B5()
		{
			if (__0xC847B43F369AC0B5 == null) __0xC847B43F369AC0B5 = (Function) native.GetObjectProperty("_0xC847B43F369AC0B5");
			__0xC847B43F369AC0B5.Call(native);
		}

		/// <summary>
		/// platformName must be one of the following: ps3, xbox360, ps4, xboxone
		/// </summary>
		/// <param name="platformName">must be one of the following: ps3, xbox360, ps4, xboxone</param>
		public bool StatMigrateSave(string platformName)
		{
			if (statMigrateSave == null) statMigrateSave = (Function) native.GetObjectProperty("statMigrateSave");
			return (bool) statMigrateSave.Call(native, platformName);
		}

		public int _0x9A62EC95AE10E011()
		{
			if (__0x9A62EC95AE10E011 == null) __0x9A62EC95AE10E011 = (Function) native.GetObjectProperty("_0x9A62EC95AE10E011");
			return (int) __0x9A62EC95AE10E011.Call(native);
		}

		public object _0x4C89FE2BDEB3F169()
		{
			if (__0x4C89FE2BDEB3F169 == null) __0x4C89FE2BDEB3F169 = (Function) native.GetObjectProperty("_0x4C89FE2BDEB3F169");
			return __0x4C89FE2BDEB3F169.Call(native);
		}

		public object _0xC6E0E2616A7576BB()
		{
			if (__0xC6E0E2616A7576BB == null) __0xC6E0E2616A7576BB = (Function) native.GetObjectProperty("_0xC6E0E2616A7576BB");
			return __0xC6E0E2616A7576BB.Call(native);
		}

		public object _0x5BD5F255321C4AAF(object p0)
		{
			if (__0x5BD5F255321C4AAF == null) __0x5BD5F255321C4AAF = (Function) native.GetObjectProperty("_0x5BD5F255321C4AAF");
			return __0x5BD5F255321C4AAF.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object></returns>
		public (object, object) _0xDEAAF77EB3687E97(object p0, object p1)
		{
			if (__0xDEAAF77EB3687E97 == null) __0xDEAAF77EB3687E97 = (Function) native.GetObjectProperty("_0xDEAAF77EB3687E97");
			var results = (Array) __0xDEAAF77EB3687E97.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		public bool StatSaveMigrationStatusStart()
		{
			if (statSaveMigrationStatusStart == null) statSaveMigrationStatusStart = (Function) native.GetObjectProperty("statSaveMigrationStatusStart");
			return (bool) statSaveMigrationStatusStart.Call(native);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, object></returns>
		public (int, object) StatGetSaveMigrationStatus(object data)
		{
			if (statGetSaveMigrationStatus == null) statGetSaveMigrationStatus = (Function) native.GetObjectProperty("statGetSaveMigrationStatus");
			var results = (Array) statGetSaveMigrationStatus.Call(native, data);
			return ((int) results[0], results[1]);
		}

		public bool StatSaveMigrationCancel()
		{
			if (statSaveMigrationCancel == null) statSaveMigrationCancel = (Function) native.GetObjectProperty("statSaveMigrationCancel");
			return (bool) statSaveMigrationCancel.Call(native);
		}

		public int StatGetCancelSaveMigrationStatus()
		{
			if (statGetCancelSaveMigrationStatus == null) statGetCancelSaveMigrationStatus = (Function) native.GetObjectProperty("statGetCancelSaveMigrationStatus");
			return (int) statGetCancelSaveMigrationStatus.Call(native);
		}

		public bool StatSaveMigrationConsumeContentUnlock(int contentId, string srcPlatform, string srcGamerHandle)
		{
			if (statSaveMigrationConsumeContentUnlock == null) statSaveMigrationConsumeContentUnlock = (Function) native.GetObjectProperty("statSaveMigrationConsumeContentUnlock");
			return (bool) statSaveMigrationConsumeContentUnlock.Call(native, contentId, srcPlatform, srcGamerHandle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) StatGetSaveMigrationConsumeContentUnlockStatus(int p0)
		{
			if (statGetSaveMigrationConsumeContentUnlockStatus == null) statGetSaveMigrationConsumeContentUnlockStatus = (Function) native.GetObjectProperty("statGetSaveMigrationConsumeContentUnlockStatus");
			var results = (Array) statGetSaveMigrationConsumeContentUnlockStatus.Call(native, p0);
			return ((int) results[0], (int) results[1]);
		}

		public void _0x98E2BC1CA26287C3()
		{
			if (__0x98E2BC1CA26287C3 == null) __0x98E2BC1CA26287C3 = (Function) native.GetObjectProperty("_0x98E2BC1CA26287C3");
			__0x98E2BC1CA26287C3.Call(native);
		}

		public void _0x629526ABA383BCAA()
		{
			if (__0x629526ABA383BCAA == null) __0x629526ABA383BCAA = (Function) native.GetObjectProperty("_0x629526ABA383BCAA");
			__0x629526ABA383BCAA.Call(native);
		}

		public object _0xBE3DB208333D9844()
		{
			if (__0xBE3DB208333D9844 == null) __0xBE3DB208333D9844 = (Function) native.GetObjectProperty("_0xBE3DB208333D9844");
			return __0xBE3DB208333D9844.Call(native);
		}

		public object _0x33D72899E24C3365(object p0, object p1)
		{
			if (__0x33D72899E24C3365 == null) __0x33D72899E24C3365 = (Function) native.GetObjectProperty("_0x33D72899E24C3365");
			return __0x33D72899E24C3365.Call(native, p0, p1);
		}

		public object _0xA761D4AC6115623D()
		{
			if (__0xA761D4AC6115623D == null) __0xA761D4AC6115623D = (Function) native.GetObjectProperty("_0xA761D4AC6115623D");
			return __0xA761D4AC6115623D.Call(native);
		}

		public object _0xF11F01D98113536A(object p0)
		{
			if (__0xF11F01D98113536A == null) __0xF11F01D98113536A = (Function) native.GetObjectProperty("_0xF11F01D98113536A");
			return __0xF11F01D98113536A.Call(native, p0);
		}

		public object _0x8B9CDBD6C566C38C()
		{
			if (__0x8B9CDBD6C566C38C == null) __0x8B9CDBD6C566C38C = (Function) native.GetObjectProperty("_0x8B9CDBD6C566C38C");
			return __0x8B9CDBD6C566C38C.Call(native);
		}

		public object _0xE8853FBCE7D8D0D6()
		{
			if (__0xE8853FBCE7D8D0D6 == null) __0xE8853FBCE7D8D0D6 = (Function) native.GetObjectProperty("_0xE8853FBCE7D8D0D6");
			return __0xE8853FBCE7D8D0D6.Call(native);
		}

		public object _0xA943FD1722E11EFD()
		{
			if (__0xA943FD1722E11EFD == null) __0xA943FD1722E11EFD = (Function) native.GetObjectProperty("_0xA943FD1722E11EFD");
			return __0xA943FD1722E11EFD.Call(native);
		}

		public object _0x84A810B375E69C0E()
		{
			if (__0x84A810B375E69C0E == null) __0x84A810B375E69C0E = (Function) native.GetObjectProperty("_0x84A810B375E69C0E");
			return __0x84A810B375E69C0E.Call(native);
		}

		public object _0x9EC8858184CD253A()
		{
			if (__0x9EC8858184CD253A == null) __0x9EC8858184CD253A = (Function) native.GetObjectProperty("_0x9EC8858184CD253A");
			return __0x9EC8858184CD253A.Call(native);
		}

		public object _0xBA9749CC94C1FD85()
		{
			if (__0xBA9749CC94C1FD85 == null) __0xBA9749CC94C1FD85 = (Function) native.GetObjectProperty("_0xBA9749CC94C1FD85");
			return __0xBA9749CC94C1FD85.Call(native);
		}

		public object _0x55A8BECAF28A4EB7()
		{
			if (__0x55A8BECAF28A4EB7 == null) __0x55A8BECAF28A4EB7 = (Function) native.GetObjectProperty("_0x55A8BECAF28A4EB7");
			return __0x55A8BECAF28A4EB7.Call(native);
		}

		public object _0x32CAC93C9DE73D32()
		{
			if (__0x32CAC93C9DE73D32 == null) __0x32CAC93C9DE73D32 = (Function) native.GetObjectProperty("_0x32CAC93C9DE73D32");
			return __0x32CAC93C9DE73D32.Call(native);
		}

		public object _0xAFF47709F1D5DCCE()
		{
			if (__0xAFF47709F1D5DCCE == null) __0xAFF47709F1D5DCCE = (Function) native.GetObjectProperty("_0xAFF47709F1D5DCCE");
			return __0xAFF47709F1D5DCCE.Call(native);
		}

		public object _0x6E0A5253375C4584()
		{
			if (__0x6E0A5253375C4584 == null) __0x6E0A5253375C4584 = (Function) native.GetObjectProperty("_0x6E0A5253375C4584");
			return __0x6E0A5253375C4584.Call(native);
		}

		public object _0x1A8EA222F9C67DBB(object p0)
		{
			if (__0x1A8EA222F9C67DBB == null) __0x1A8EA222F9C67DBB = (Function) native.GetObjectProperty("_0x1A8EA222F9C67DBB");
			return __0x1A8EA222F9C67DBB.Call(native, p0);
		}

		public object _0xF9F2922717B819EC()
		{
			if (__0xF9F2922717B819EC == null) __0xF9F2922717B819EC = (Function) native.GetObjectProperty("_0xF9F2922717B819EC");
			return __0xF9F2922717B819EC.Call(native);
		}

		public object _0x0B8B7F74BF061C6D()
		{
			if (__0x0B8B7F74BF061C6D == null) __0x0B8B7F74BF061C6D = (Function) native.GetObjectProperty("_0x0B8B7F74BF061C6D");
			return __0x0B8B7F74BF061C6D.Call(native);
		}

		/// <summary>
		/// This function is hard-coded to always return 1.
		/// NETWORK_IS_*
		/// </summary>
		public bool _0xB3DA2606774A8E2D()
		{
			if (__0xB3DA2606774A8E2D == null) __0xB3DA2606774A8E2D = (Function) native.GetObjectProperty("_0xB3DA2606774A8E2D");
			return (bool) __0xB3DA2606774A8E2D.Call(native);
		}

		/// <summary>
		/// Sets profile setting 866
		/// SET_*
		/// </summary>
		public void SetHasContentUnlocksFlags(int value)
		{
			if (setHasContentUnlocksFlags == null) setHasContentUnlocksFlags = (Function) native.GetObjectProperty("setHasContentUnlocksFlags");
			setHasContentUnlocksFlags.Call(native, value);
		}

		/// <summary>
		/// Sets profile setting 501
		/// </summary>
		public void SetSaveMigrationTransactionId(int transactionId)
		{
			if (setSaveMigrationTransactionId == null) setSaveMigrationTransactionId = (Function) native.GetObjectProperty("setSaveMigrationTransactionId");
			setSaveMigrationTransactionId.Call(native, transactionId);
		}

		public void _0x6BC0ACD0673ACEBE(object p0, object p1, object p2)
		{
			if (__0x6BC0ACD0673ACEBE == null) __0x6BC0ACD0673ACEBE = (Function) native.GetObjectProperty("_0x6BC0ACD0673ACEBE");
			__0x6BC0ACD0673ACEBE.Call(native, p0, p1, p2);
		}

		public void _0x8D8ADB562F09A245(object p0)
		{
			if (__0x8D8ADB562F09A245 == null) __0x8D8ADB562F09A245 = (Function) native.GetObjectProperty("_0x8D8ADB562F09A245");
			__0x8D8ADB562F09A245.Call(native, p0);
		}

		public void _0xD1A1EE3B4FA8E760(object p0)
		{
			if (__0xD1A1EE3B4FA8E760 == null) __0xD1A1EE3B4FA8E760 = (Function) native.GetObjectProperty("_0xD1A1EE3B4FA8E760");
			__0xD1A1EE3B4FA8E760.Call(native, p0);
		}

		public void _0x88087EE1F28024AE(object p0)
		{
			if (__0x88087EE1F28024AE == null) __0x88087EE1F28024AE = (Function) native.GetObjectProperty("_0x88087EE1F28024AE");
			__0x88087EE1F28024AE.Call(native, p0);
		}

		public void _0xFCC228E07217FCAC(object p0)
		{
			if (__0xFCC228E07217FCAC == null) __0xFCC228E07217FCAC = (Function) native.GetObjectProperty("_0xFCC228E07217FCAC");
			__0xFCC228E07217FCAC.Call(native, p0);
		}

		public void _0x678F86D8FC040BDB(object p0)
		{
			if (__0x678F86D8FC040BDB == null) __0x678F86D8FC040BDB = (Function) native.GetObjectProperty("_0x678F86D8FC040BDB");
			__0x678F86D8FC040BDB.Call(native, p0);
		}

		public void _0xA6F54BB2FFCA35EA(object p0)
		{
			if (__0xA6F54BB2FFCA35EA == null) __0xA6F54BB2FFCA35EA = (Function) native.GetObjectProperty("_0xA6F54BB2FFCA35EA");
			__0xA6F54BB2FFCA35EA.Call(native, p0);
		}

		public void _0x5FF2C33B13A02A11(object p0)
		{
			if (__0x5FF2C33B13A02A11 == null) __0x5FF2C33B13A02A11 = (Function) native.GetObjectProperty("_0x5FF2C33B13A02A11");
			__0x5FF2C33B13A02A11.Call(native, p0);
		}

		public void _0x282B6739644F4347(object p0)
		{
			if (__0x282B6739644F4347 == null) __0x282B6739644F4347 = (Function) native.GetObjectProperty("_0x282B6739644F4347");
			__0x282B6739644F4347.Call(native, p0);
		}

		public void _0xF06A6F41CB445443(object p0)
		{
			if (__0xF06A6F41CB445443 == null) __0xF06A6F41CB445443 = (Function) native.GetObjectProperty("_0xF06A6F41CB445443");
			__0xF06A6F41CB445443.Call(native, p0);
		}

		public void _0x7B18DA61F6BAE9D5(object p0)
		{
			if (__0x7B18DA61F6BAE9D5 == null) __0x7B18DA61F6BAE9D5 = (Function) native.GetObjectProperty("_0x7B18DA61F6BAE9D5");
			__0x7B18DA61F6BAE9D5.Call(native, p0);
		}

		public void _0x06EAF70AE066441E(object p0)
		{
			if (__0x06EAF70AE066441E == null) __0x06EAF70AE066441E = (Function) native.GetObjectProperty("_0x06EAF70AE066441E");
			__0x06EAF70AE066441E.Call(native, p0);
		}

		public void _0x14EDA9EE27BD1626(object p0)
		{
			if (__0x14EDA9EE27BD1626 == null) __0x14EDA9EE27BD1626 = (Function) native.GetObjectProperty("_0x14EDA9EE27BD1626");
			__0x14EDA9EE27BD1626.Call(native, p0);
		}

		public void _0x930F504203F561C9(object p0)
		{
			if (__0x930F504203F561C9 == null) __0x930F504203F561C9 = (Function) native.GetObjectProperty("_0x930F504203F561C9");
			__0x930F504203F561C9.Call(native, p0);
		}

		public void _0xE3261D791EB44ACB(object p0)
		{
			if (__0xE3261D791EB44ACB == null) __0xE3261D791EB44ACB = (Function) native.GetObjectProperty("_0xE3261D791EB44ACB");
			__0xE3261D791EB44ACB.Call(native, p0);
		}

		public void _0x73001E34F85137F8(object p0)
		{
			if (__0x73001E34F85137F8 == null) __0x73001E34F85137F8 = (Function) native.GetObjectProperty("_0x73001E34F85137F8");
			__0x73001E34F85137F8.Call(native, p0);
		}

		public void _0x53CAE13E9B426993(object p0)
		{
			if (__0x53CAE13E9B426993 == null) __0x53CAE13E9B426993 = (Function) native.GetObjectProperty("_0x53CAE13E9B426993");
			__0x53CAE13E9B426993.Call(native, p0);
		}

		public void _0x7D36291161859389(object p0)
		{
			if (__0x7D36291161859389 == null) __0x7D36291161859389 = (Function) native.GetObjectProperty("_0x7D36291161859389");
			__0x7D36291161859389.Call(native, p0);
		}

		public void PlaystatsSpentPiCustomLoadout(int amount)
		{
			if (playstatsSpentPiCustomLoadout == null) playstatsSpentPiCustomLoadout = (Function) native.GetObjectProperty("playstatsSpentPiCustomLoadout");
			playstatsSpentPiCustomLoadout.Call(native, amount);
		}

		public void _0xD6781E42755531F7(object p0)
		{
			if (__0xD6781E42755531F7 == null) __0xD6781E42755531F7 = (Function) native.GetObjectProperty("_0xD6781E42755531F7");
			__0xD6781E42755531F7.Call(native, p0);
		}

		public void _0xC729991A9065376E(object p0)
		{
			if (__0xC729991A9065376E == null) __0xC729991A9065376E = (Function) native.GetObjectProperty("_0xC729991A9065376E");
			__0xC729991A9065376E.Call(native, p0);
		}

		public void _0x2605663BD4F23B5D(object p0)
		{
			if (__0x2605663BD4F23B5D == null) __0x2605663BD4F23B5D = (Function) native.GetObjectProperty("_0x2605663BD4F23B5D");
			__0x2605663BD4F23B5D.Call(native, p0);
		}

		public void _0x04D90BA8207ADA2D(object p0)
		{
			if (__0x04D90BA8207ADA2D == null) __0x04D90BA8207ADA2D = (Function) native.GetObjectProperty("_0x04D90BA8207ADA2D");
			__0x04D90BA8207ADA2D.Call(native, p0);
		}

		public void _0x60EEDC12AF66E846(object p0)
		{
			if (__0x60EEDC12AF66E846 == null) __0x60EEDC12AF66E846 = (Function) native.GetObjectProperty("_0x60EEDC12AF66E846");
			__0x60EEDC12AF66E846.Call(native, p0);
		}

		public void _0x3EBEAC6C3F81F6BD(object p0)
		{
			if (__0x3EBEAC6C3F81F6BD == null) __0x3EBEAC6C3F81F6BD = (Function) native.GetObjectProperty("_0x3EBEAC6C3F81F6BD");
			__0x3EBEAC6C3F81F6BD.Call(native, p0);
		}

		public void _0x96E6D5150DBF1C09(object p0, object p1, object p2)
		{
			if (__0x96E6D5150DBF1C09 == null) __0x96E6D5150DBF1C09 = (Function) native.GetObjectProperty("_0x96E6D5150DBF1C09");
			__0x96E6D5150DBF1C09.Call(native, p0, p1, p2);
		}

		public void _0xA3C53804BDB68ED2(object p0, object p1)
		{
			if (__0xA3C53804BDB68ED2 == null) __0xA3C53804BDB68ED2 = (Function) native.GetObjectProperty("_0xA3C53804BDB68ED2");
			__0xA3C53804BDB68ED2.Call(native, p0, p1);
		}

		public void _0x6BCCF9948492FD85(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0x6BCCF9948492FD85 == null) __0x6BCCF9948492FD85 = (Function) native.GetObjectProperty("_0x6BCCF9948492FD85");
			__0x6BCCF9948492FD85.Call(native, p0, p1, p2, p3, p4);
		}

		public void HiredLimo(object p0, object p1)
		{
			if (hiredLimo == null) hiredLimo = (Function) native.GetObjectProperty("hiredLimo");
			hiredLimo.Call(native, p0, p1);
		}

		public void OrderedBossVehicle(object p0, object p1, int vehicleHash)
		{
			if (orderedBossVehicle == null) orderedBossVehicle = (Function) native.GetObjectProperty("orderedBossVehicle");
			orderedBossVehicle.Call(native, p0, p1, vehicleHash);
		}

		public void _0xD1C9B92BDD3F151D(object p0, object p1, object p2)
		{
			if (__0xD1C9B92BDD3F151D == null) __0xD1C9B92BDD3F151D = (Function) native.GetObjectProperty("_0xD1C9B92BDD3F151D");
			__0xD1C9B92BDD3F151D.Call(native, p0, p1, p2);
		}

		public void _0x44919CC079BB60BF(object p0)
		{
			if (__0x44919CC079BB60BF == null) __0x44919CC079BB60BF = (Function) native.GetObjectProperty("_0x44919CC079BB60BF");
			__0x44919CC079BB60BF.Call(native, p0);
		}

		public void _0x7033EEFD9B28088E(object p0)
		{
			if (__0x7033EEFD9B28088E == null) __0x7033EEFD9B28088E = (Function) native.GetObjectProperty("_0x7033EEFD9B28088E");
			__0x7033EEFD9B28088E.Call(native, p0);
		}

		public void _0xAA525DFF66BB82F5(object p0, object p1, object p2)
		{
			if (__0xAA525DFF66BB82F5 == null) __0xAA525DFF66BB82F5 = (Function) native.GetObjectProperty("_0xAA525DFF66BB82F5");
			__0xAA525DFF66BB82F5.Call(native, p0, p1, p2);
		}

		public void _0x015B03EE1C43E6EC(object p0)
		{
			if (__0x015B03EE1C43E6EC == null) __0x015B03EE1C43E6EC = (Function) native.GetObjectProperty("_0x015B03EE1C43E6EC");
			__0x015B03EE1C43E6EC.Call(native, p0);
		}

		/// <summary>
		/// Allows CEventNetworkStuntPerformed to be triggered.
		/// </summary>
		public void PlaystatsStuntPerformedEventAllowTrigger()
		{
			if (playstatsStuntPerformedEventAllowTrigger == null) playstatsStuntPerformedEventAllowTrigger = (Function) native.GetObjectProperty("playstatsStuntPerformedEventAllowTrigger");
			playstatsStuntPerformedEventAllowTrigger.Call(native);
		}

		/// <summary>
		/// Disallows CEventNetworkStuntPerformed to be triggered.
		/// </summary>
		public void PlaystatsStuntPerformedEventDisallowTrigger()
		{
			if (playstatsStuntPerformedEventDisallowTrigger == null) playstatsStuntPerformedEventDisallowTrigger = (Function) native.GetObjectProperty("playstatsStuntPerformedEventDisallowTrigger");
			playstatsStuntPerformedEventDisallowTrigger.Call(native);
		}

		public void _0xBF371CD2B64212FD(object p0)
		{
			if (__0xBF371CD2B64212FD == null) __0xBF371CD2B64212FD = (Function) native.GetObjectProperty("_0xBF371CD2B64212FD");
			__0xBF371CD2B64212FD.Call(native, p0);
		}

		public void _0x7D8BA05688AD64C7(object p0)
		{
			if (__0x7D8BA05688AD64C7 == null) __0x7D8BA05688AD64C7 = (Function) native.GetObjectProperty("_0x7D8BA05688AD64C7");
			__0x7D8BA05688AD64C7.Call(native, p0);
		}

		public void _0x0B565B0AAE56A0E8(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0x0B565B0AAE56A0E8 == null) __0x0B565B0AAE56A0E8 = (Function) native.GetObjectProperty("_0x0B565B0AAE56A0E8");
			__0x0B565B0AAE56A0E8.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public void _0x28ECB8AC2F607DB2(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0x28ECB8AC2F607DB2 == null) __0x28ECB8AC2F607DB2 = (Function) native.GetObjectProperty("_0x28ECB8AC2F607DB2");
			__0x28ECB8AC2F607DB2.Call(native, p0, p1, p2, p3, p4);
		}

		public void PlaystatsChangeMcEmblem(object p0, object p1, object p2, object p3, object p4)
		{
			if (playstatsChangeMcEmblem == null) playstatsChangeMcEmblem = (Function) native.GetObjectProperty("playstatsChangeMcEmblem");
			playstatsChangeMcEmblem.Call(native, p0, p1, p2, p3, p4);
		}

		public void _0xCC25A4553DFBF9EA(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0xCC25A4553DFBF9EA == null) __0xCC25A4553DFBF9EA = (Function) native.GetObjectProperty("_0xCC25A4553DFBF9EA");
			__0xCC25A4553DFBF9EA.Call(native, p0, p1, p2, p3, p4);
		}

		public void _0xF534D94DFA2EAD26(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0xF534D94DFA2EAD26 == null) __0xF534D94DFA2EAD26 = (Function) native.GetObjectProperty("_0xF534D94DFA2EAD26");
			__0xF534D94DFA2EAD26.Call(native, p0, p1, p2, p3, p4);
		}

		public void _0xD558BEC0BBA7E8D2(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0xD558BEC0BBA7E8D2 == null) __0xD558BEC0BBA7E8D2 = (Function) native.GetObjectProperty("_0xD558BEC0BBA7E8D2");
			__0xD558BEC0BBA7E8D2.Call(native, p0, p1, p2, p3, p4);
		}

		public void PlaystatsEarnedMcPoints(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (playstatsEarnedMcPoints == null) playstatsEarnedMcPoints = (Function) native.GetObjectProperty("playstatsEarnedMcPoints");
			playstatsEarnedMcPoints.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void _0x03C2EEBB04B3FB72(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0x03C2EEBB04B3FB72 == null) __0x03C2EEBB04B3FB72 = (Function) native.GetObjectProperty("_0x03C2EEBB04B3FB72");
			__0x03C2EEBB04B3FB72.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public void _0x8989CBD7B4E82534(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (__0x8989CBD7B4E82534 == null) __0x8989CBD7B4E82534 = (Function) native.GetObjectProperty("_0x8989CBD7B4E82534");
			__0x8989CBD7B4E82534.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public void _0x27AA1C973CACFE63(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (__0x27AA1C973CACFE63 == null) __0x27AA1C973CACFE63 = (Function) native.GetObjectProperty("_0x27AA1C973CACFE63");
			__0x27AA1C973CACFE63.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		public void PlaystatsCopyRankIntoNewSlot(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (playstatsCopyRankIntoNewSlot == null) playstatsCopyRankIntoNewSlot = (Function) native.GetObjectProperty("playstatsCopyRankIntoNewSlot");
			playstatsCopyRankIntoNewSlot.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsDupeDetection(object data)
		{
			if (playstatsDupeDetection == null) playstatsDupeDetection = (Function) native.GetObjectProperty("playstatsDupeDetection");
			var results = (Array) playstatsDupeDetection.Call(native, data);
			return (results[0], results[1]);
		}

		public void PlaystatsBanAlert(int p0)
		{
			if (playstatsBanAlert == null) playstatsBanAlert = (Function) native.GetObjectProperty("playstatsBanAlert");
			playstatsBanAlert.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsGunrunMissionEnded(object data)
		{
			if (playstatsGunrunMissionEnded == null) playstatsGunrunMissionEnded = (Function) native.GetObjectProperty("playstatsGunrunMissionEnded");
			var results = (Array) playstatsGunrunMissionEnded.Call(native, data);
			return (results[0], results[1]);
		}

		public void _0xDAF80797FC534BEC(object p0)
		{
			if (__0xDAF80797FC534BEC == null) __0xDAF80797FC534BEC = (Function) native.GetObjectProperty("_0xDAF80797FC534BEC");
			__0xDAF80797FC534BEC.Call(native, p0);
		}

		public void _0x316DB59CD14C1774(object p0)
		{
			if (__0x316DB59CD14C1774 == null) __0x316DB59CD14C1774 = (Function) native.GetObjectProperty("_0x316DB59CD14C1774");
			__0x316DB59CD14C1774.Call(native, p0);
		}

		public void _0x2D7A9B577E72385E(object p0)
		{
			if (__0x2D7A9B577E72385E == null) __0x2D7A9B577E72385E = (Function) native.GetObjectProperty("_0x2D7A9B577E72385E");
			__0x2D7A9B577E72385E.Call(native, p0);
		}

		public void _0x830C3A44EB3F2CF9(object p0)
		{
			if (__0x830C3A44EB3F2CF9 == null) __0x830C3A44EB3F2CF9 = (Function) native.GetObjectProperty("_0x830C3A44EB3F2CF9");
			__0x830C3A44EB3F2CF9.Call(native, p0);
		}

		public void _0xB26F670685631727(object p0)
		{
			if (__0xB26F670685631727 == null) __0xB26F670685631727 = (Function) native.GetObjectProperty("_0xB26F670685631727");
			__0xB26F670685631727.Call(native, p0);
		}

		public void _0xC14BD9F5337219B2(object p0)
		{
			if (__0xC14BD9F5337219B2 == null) __0xC14BD9F5337219B2 = (Function) native.GetObjectProperty("_0xC14BD9F5337219B2");
			__0xC14BD9F5337219B2.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsStoneHatchetEnd(object data)
		{
			if (playstatsStoneHatchetEnd == null) playstatsStoneHatchetEnd = (Function) native.GetObjectProperty("playstatsStoneHatchetEnd");
			var results = (Array) playstatsStoneHatchetEnd.Call(native, data);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsSmugMissionEnded(object data)
		{
			if (playstatsSmugMissionEnded == null) playstatsSmugMissionEnded = (Function) native.GetObjectProperty("playstatsSmugMissionEnded");
			var results = (Array) playstatsSmugMissionEnded.Call(native, data);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsH2FmprepEnd(object data)
		{
			if (playstatsH2FmprepEnd == null) playstatsH2FmprepEnd = (Function) native.GetObjectProperty("playstatsH2FmprepEnd");
			var results = (Array) playstatsH2FmprepEnd.Call(native, data);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsH2InstanceEnd(object data, object p1, object p2, object p3)
		{
			if (playstatsH2InstanceEnd == null) playstatsH2InstanceEnd = (Function) native.GetObjectProperty("playstatsH2InstanceEnd");
			var results = (Array) playstatsH2InstanceEnd.Call(native, data, p1, p2, p3);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsDarMissionEnd(object data)
		{
			if (playstatsDarMissionEnd == null) playstatsDarMissionEnd = (Function) native.GetObjectProperty("playstatsDarMissionEnd");
			var results = (Array) playstatsDarMissionEnd.Call(native, data);
			return (results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsEnterSessionPack(object data)
		{
			if (playstatsEnterSessionPack == null) playstatsEnterSessionPack = (Function) native.GetObjectProperty("playstatsEnterSessionPack");
			var results = (Array) playstatsEnterSessionPack.Call(native, data);
			return (results[0], results[1]);
		}

		public void PlaystatsDroneUsage(int p0, int p1, int p2)
		{
			if (playstatsDroneUsage == null) playstatsDroneUsage = (Function) native.GetObjectProperty("playstatsDroneUsage");
			playstatsDroneUsage.Call(native, p0, p1, p2);
		}

		public void PlaystatsSpectatorWheelSpin(int p0, int p1, int p2, int p3)
		{
			if (playstatsSpectatorWheelSpin == null) playstatsSpectatorWheelSpin = (Function) native.GetObjectProperty("playstatsSpectatorWheelSpin");
			playstatsSpectatorWheelSpin.Call(native, p0, p1, p2, p3);
		}

		public void PlaystatsArenaWarSpectator(int p0, int p1, int p2, int p3, int p4)
		{
			if (playstatsArenaWarSpectator == null) playstatsArenaWarSpectator = (Function) native.GetObjectProperty("playstatsArenaWarSpectator");
			playstatsArenaWarSpectator.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsArenaWarsEnded(object data)
		{
			if (playstatsArenaWarsEnded == null) playstatsArenaWarsEnded = (Function) native.GetObjectProperty("playstatsArenaWarsEnded");
			var results = (Array) playstatsArenaWarsEnded.Call(native, data);
			return (results[0], results[1]);
		}

		public void PlaystatsPassiveMode(bool p0, int p1, int p2, int p3)
		{
			if (playstatsPassiveMode == null) playstatsPassiveMode = (Function) native.GetObjectProperty("playstatsPassiveMode");
			playstatsPassiveMode.Call(native, p0, p1, p2, p3);
		}

		public void PlaystatsCollectible(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (playstatsCollectible == null) playstatsCollectible = (Function) native.GetObjectProperty("playstatsCollectible");
			playstatsCollectible.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		public void PlaystatsCasinoStoryMissionEnded(object p0, object p1)
		{
			if (playstatsCasinoStoryMissionEnded == null) playstatsCasinoStoryMissionEnded = (Function) native.GetObjectProperty("playstatsCasinoStoryMissionEnded");
			playstatsCasinoStoryMissionEnded.Call(native, p0, p1);
		}

		public void PlaystatsCasinoChip(object p0)
		{
			if (playstatsCasinoChip == null) playstatsCasinoChip = (Function) native.GetObjectProperty("playstatsCasinoChip");
			playstatsCasinoChip.Call(native, p0);
		}

		public void PlaystatsCasinoRoulette(object p0)
		{
			if (playstatsCasinoRoulette == null) playstatsCasinoRoulette = (Function) native.GetObjectProperty("playstatsCasinoRoulette");
			playstatsCasinoRoulette.Call(native, p0);
		}

		public void PlaystatsCasinoBlackjack(object p0)
		{
			if (playstatsCasinoBlackjack == null) playstatsCasinoBlackjack = (Function) native.GetObjectProperty("playstatsCasinoBlackjack");
			playstatsCasinoBlackjack.Call(native, p0);
		}

		public void PlaystatsCasinoThreecardpoker(object p0)
		{
			if (playstatsCasinoThreecardpoker == null) playstatsCasinoThreecardpoker = (Function) native.GetObjectProperty("playstatsCasinoThreecardpoker");
			playstatsCasinoThreecardpoker.Call(native, p0);
		}

		public void PlaystatsCasinoSlotmachine(object p0)
		{
			if (playstatsCasinoSlotmachine == null) playstatsCasinoSlotmachine = (Function) native.GetObjectProperty("playstatsCasinoSlotmachine");
			playstatsCasinoSlotmachine.Call(native, p0);
		}

		public void PlaystatsCasinoInsidetrack(object p0)
		{
			if (playstatsCasinoInsidetrack == null) playstatsCasinoInsidetrack = (Function) native.GetObjectProperty("playstatsCasinoInsidetrack");
			playstatsCasinoInsidetrack.Call(native, p0);
		}

		public void PlaystatsCasinoLuckyseven(object p0)
		{
			if (playstatsCasinoLuckyseven == null) playstatsCasinoLuckyseven = (Function) native.GetObjectProperty("playstatsCasinoLuckyseven");
			playstatsCasinoLuckyseven.Call(native, p0);
		}

		public void PlaystatsCasinoRouletteLight(object p0)
		{
			if (playstatsCasinoRouletteLight == null) playstatsCasinoRouletteLight = (Function) native.GetObjectProperty("playstatsCasinoRouletteLight");
			playstatsCasinoRouletteLight.Call(native, p0);
		}

		public void PlaystatsCasinoBlackjackLight(object p0)
		{
			if (playstatsCasinoBlackjackLight == null) playstatsCasinoBlackjackLight = (Function) native.GetObjectProperty("playstatsCasinoBlackjackLight");
			playstatsCasinoBlackjackLight.Call(native, p0);
		}

		public void PlaystatsCasinoThreecardpokerLight(object p0)
		{
			if (playstatsCasinoThreecardpokerLight == null) playstatsCasinoThreecardpokerLight = (Function) native.GetObjectProperty("playstatsCasinoThreecardpokerLight");
			playstatsCasinoThreecardpokerLight.Call(native, p0);
		}

		public void PlaystatsCasinoSlotmachineLight(object p0)
		{
			if (playstatsCasinoSlotmachineLight == null) playstatsCasinoSlotmachineLight = (Function) native.GetObjectProperty("playstatsCasinoSlotmachineLight");
			playstatsCasinoSlotmachineLight.Call(native, p0);
		}

		public void PlaystatsCasinoInsidetrackLight(object p0)
		{
			if (playstatsCasinoInsidetrackLight == null) playstatsCasinoInsidetrackLight = (Function) native.GetObjectProperty("playstatsCasinoInsidetrackLight");
			playstatsCasinoInsidetrackLight.Call(native, p0);
		}

		public void PlaystatsArcadegame(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (playstatsArcadegame == null) playstatsArcadegame = (Function) native.GetObjectProperty("playstatsArcadegame");
			playstatsArcadegame.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) PlaystatsCasinoMissionEnded(object data)
		{
			if (playstatsCasinoMissionEnded == null) playstatsCasinoMissionEnded = (Function) native.GetObjectProperty("playstatsCasinoMissionEnded");
			var results = (Array) playstatsCasinoMissionEnded.Call(native, data);
			return (results[0], results[1]);
		}

		public void LoadAllObjectsNow()
		{
			if (loadAllObjectsNow == null) loadAllObjectsNow = (Function) native.GetObjectProperty("loadAllObjectsNow");
			loadAllObjectsNow.Call(native);
		}

		public void LoadScene(double x, double y, double z)
		{
			if (loadScene == null) loadScene = (Function) native.GetObjectProperty("loadScene");
			loadScene.Call(native, x, y, z);
		}

		public bool NetworkUpdateLoadScene()
		{
			if (networkUpdateLoadScene == null) networkUpdateLoadScene = (Function) native.GetObjectProperty("networkUpdateLoadScene");
			return (bool) networkUpdateLoadScene.Call(native);
		}

		public bool IsNetworkLoadingScene()
		{
			if (isNetworkLoadingScene == null) isNetworkLoadingScene = (Function) native.GetObjectProperty("isNetworkLoadingScene");
			return (bool) isNetworkLoadingScene.Call(native);
		}

		public void SetInteriorActive(int interiorID, bool toggle)
		{
			if (setInteriorActive == null) setInteriorActive = (Function) native.GetObjectProperty("setInteriorActive");
			setInteriorActive.Call(native, interiorID, toggle);
		}

		/// <summary>
		/// Request a model to be loaded into memory
		/// </summary>
		/// <returns>Looking it the disassembly, it seems like it actually returns the model if it's already loaded.</returns>
		public void RequestModel(int model)
		{
			if (requestModel == null) requestModel = (Function) native.GetObjectProperty("requestModel");
			requestModel.Call(native, model);
		}

		public void RequestMenuPedModel(int model)
		{
			if (requestMenuPedModel == null) requestMenuPedModel = (Function) native.GetObjectProperty("requestMenuPedModel");
			requestMenuPedModel.Call(native, model);
		}

		/// <summary>
		/// Checks if the specified model has loaded into memory.
		/// </summary>
		public bool HasModelLoaded(int model)
		{
			if (hasModelLoaded == null) hasModelLoaded = (Function) native.GetObjectProperty("hasModelLoaded");
			return (bool) hasModelLoaded.Call(native, model);
		}

		/// <summary>
		/// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
		/// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
		/// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
		/// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
		/// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
		/// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
		/// </summary>
		public void RequestModelsInRoom(int interior, string roomName)
		{
			if (requestModelsInRoom == null) requestModelsInRoom = (Function) native.GetObjectProperty("requestModelsInRoom");
			requestModelsInRoom.Call(native, interior, roomName);
		}

		/// <summary>
		/// Unloads model from memory
		/// </summary>
		public void SetModelAsNoLongerNeeded(int model)
		{
			if (setModelAsNoLongerNeeded == null) setModelAsNoLongerNeeded = (Function) native.GetObjectProperty("setModelAsNoLongerNeeded");
			setModelAsNoLongerNeeded.Call(native, model);
		}

		/// <summary>
		/// Check if model is in cdimage(rpf)
		/// </summary>
		public bool IsModelInCdimage(int model)
		{
			if (isModelInCdimage == null) isModelInCdimage = (Function) native.GetObjectProperty("isModelInCdimage");
			return (bool) isModelInCdimage.Call(native, model);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether the specified model exists in the game.</returns>
		public bool IsModelValid(int model)
		{
			if (isModelValid == null) isModelValid = (Function) native.GetObjectProperty("isModelValid");
			return (bool) isModelValid.Call(native, model);
		}

		public bool IsModelAPed(int model)
		{
			if (isModelAPed == null) isModelAPed = (Function) native.GetObjectProperty("isModelAPed");
			return (bool) isModelAPed.Call(native, model);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether the specified model represents a vehicle.</returns>
		public bool IsModelAVehicle(int model)
		{
			if (isModelAVehicle == null) isModelAVehicle = (Function) native.GetObjectProperty("isModelAVehicle");
			return (bool) isModelAVehicle.Call(native, model);
		}

		public void RequestCollisionAtCoord(double x, double y, double z)
		{
			if (requestCollisionAtCoord == null) requestCollisionAtCoord = (Function) native.GetObjectProperty("requestCollisionAtCoord");
			requestCollisionAtCoord.Call(native, x, y, z);
		}

		public void RequestCollisionForModel(int model)
		{
			if (requestCollisionForModel == null) requestCollisionForModel = (Function) native.GetObjectProperty("requestCollisionForModel");
			requestCollisionForModel.Call(native, model);
		}

		public bool HasCollisionForModelLoaded(int model)
		{
			if (hasCollisionForModelLoaded == null) hasCollisionForModelLoaded = (Function) native.GetObjectProperty("hasCollisionForModelLoaded");
			return (bool) hasCollisionForModelLoaded.Call(native, model);
		}

		/// <summary>
		/// MulleDK19: Alias of REQUEST_COLLISION_AT_COORD.
		/// </summary>
		public void RequestAdditionalCollisionAtCoord(double x, double y, double z)
		{
			if (requestAdditionalCollisionAtCoord == null) requestAdditionalCollisionAtCoord = (Function) native.GetObjectProperty("requestAdditionalCollisionAtCoord");
			requestAdditionalCollisionAtCoord.Call(native, x, y, z);
		}

		public bool DoesAnimDictExist(string animDict)
		{
			if (doesAnimDictExist == null) doesAnimDictExist = (Function) native.GetObjectProperty("doesAnimDictExist");
			return (bool) doesAnimDictExist.Call(native, animDict);
		}

		public void RequestAnimDict(string animDict)
		{
			if (requestAnimDict == null) requestAnimDict = (Function) native.GetObjectProperty("requestAnimDict");
			requestAnimDict.Call(native, animDict);
		}

		public bool HasAnimDictLoaded(string animDict)
		{
			if (hasAnimDictLoaded == null) hasAnimDictLoaded = (Function) native.GetObjectProperty("hasAnimDictLoaded");
			return (bool) hasAnimDictLoaded.Call(native, animDict);
		}

		public void RemoveAnimDict(string animDict)
		{
			if (removeAnimDict == null) removeAnimDict = (Function) native.GetObjectProperty("removeAnimDict");
			removeAnimDict.Call(native, animDict);
		}

		/// <summary>
		/// Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
		/// </summary>
		public void RequestAnimSet(string animSet)
		{
			if (requestAnimSet == null) requestAnimSet = (Function) native.GetObjectProperty("requestAnimSet");
			requestAnimSet.Call(native, animSet);
		}

		/// <summary>
		/// Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
		/// Animation set and clip set are synonymous.
		/// </summary>
		public bool HasAnimSetLoaded(string animSet)
		{
			if (hasAnimSetLoaded == null) hasAnimSetLoaded = (Function) native.GetObjectProperty("hasAnimSetLoaded");
			return (bool) hasAnimSetLoaded.Call(native, animSet);
		}

		/// <summary>
		/// Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
		/// Animation set and clip set are synonymous.
		/// </summary>
		public void RemoveAnimSet(string animSet)
		{
			if (removeAnimSet == null) removeAnimSet = (Function) native.GetObjectProperty("removeAnimSet");
			removeAnimSet.Call(native, animSet);
		}

		public void RequestClipSet(string clipSet)
		{
			if (requestClipSet == null) requestClipSet = (Function) native.GetObjectProperty("requestClipSet");
			requestClipSet.Call(native, clipSet);
		}

		/// <summary>
		/// Alias for HAS_ANIM_SET_LOADED.
		/// </summary>
		public bool HasClipSetLoaded(string clipSet)
		{
			if (hasClipSetLoaded == null) hasClipSetLoaded = (Function) native.GetObjectProperty("hasClipSetLoaded");
			return (bool) hasClipSetLoaded.Call(native, clipSet);
		}

		/// <summary>
		/// Alias for REMOVE_ANIM_SET.
		/// </summary>
		public void RemoveClipSet(string clipSet)
		{
			if (removeClipSet == null) removeClipSet = (Function) native.GetObjectProperty("removeClipSet");
			removeClipSet.Call(native, clipSet);
		}

		/// <summary>
		/// Exemple: REQUEST_IPL("TrevorsTrailerTrash");
		/// IPL + Coords: http://pastebin.com/FyV5mMma
		/// </summary>
		public void RequestIpl(string iplName)
		{
			if (requestIpl == null) requestIpl = (Function) native.GetObjectProperty("requestIpl");
			requestIpl.Call(native, iplName);
		}

		/// <summary>
		/// Removes an IPL from the map.
		/// IPL List: pastebin.com/pwkh0uRP
		/// Example:
		/// C#:
		/// Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
		/// C++:
		/// STREAMING::REMOVE_IPL("trevorstrailertidy");
		/// iplName = Name of IPL you want to remove.
		/// </summary>
		/// <param name="iplName">Name of IPL you want to remove.</param>
		public void RemoveIpl(string iplName)
		{
			if (removeIpl == null) removeIpl = (Function) native.GetObjectProperty("removeIpl");
			removeIpl.Call(native, iplName);
		}

		public bool IsIplActive(string iplName)
		{
			if (isIplActive == null) isIplActive = (Function) native.GetObjectProperty("isIplActive");
			return (bool) isIplActive.Call(native, iplName);
		}

		public void SetStreaming(bool toggle)
		{
			if (setStreaming == null) setStreaming = (Function) native.GetObjectProperty("setStreaming");
			setStreaming.Call(native, toggle);
		}

		public void SetGamePausesForStreaming(bool toggle)
		{
			if (setGamePausesForStreaming == null) setGamePausesForStreaming = (Function) native.GetObjectProperty("setGamePausesForStreaming");
			setGamePausesForStreaming.Call(native, toggle);
		}

		public void SetReducePedModelBudget(bool toggle)
		{
			if (setReducePedModelBudget == null) setReducePedModelBudget = (Function) native.GetObjectProperty("setReducePedModelBudget");
			setReducePedModelBudget.Call(native, toggle);
		}

		public void SetReduceVehicleModelBudget(bool toggle)
		{
			if (setReduceVehicleModelBudget == null) setReduceVehicleModelBudget = (Function) native.GetObjectProperty("setReduceVehicleModelBudget");
			setReduceVehicleModelBudget.Call(native, toggle);
		}

		/// <summary>
		/// This is a NOP function. It does nothing at all.
		/// </summary>
		public void SetDitchPoliceModels(bool toggle)
		{
			if (setDitchPoliceModels == null) setDitchPoliceModels = (Function) native.GetObjectProperty("setDitchPoliceModels");
			setDitchPoliceModels.Call(native, toggle);
		}

		public int GetNumberOfStreamingRequests()
		{
			if (getNumberOfStreamingRequests == null) getNumberOfStreamingRequests = (Function) native.GetObjectProperty("getNumberOfStreamingRequests");
			return (int) getNumberOfStreamingRequests.Call(native);
		}

		/// <summary>
		/// maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
		/// </summary>
		public void RequestPtfxAsset()
		{
			if (requestPtfxAsset == null) requestPtfxAsset = (Function) native.GetObjectProperty("requestPtfxAsset");
			requestPtfxAsset.Call(native);
		}

		public bool HasPtfxAssetLoaded()
		{
			if (hasPtfxAssetLoaded == null) hasPtfxAssetLoaded = (Function) native.GetObjectProperty("hasPtfxAssetLoaded");
			return (bool) hasPtfxAssetLoaded.Call(native);
		}

		public void RemovePtfxAsset()
		{
			if (removePtfxAsset == null) removePtfxAsset = (Function) native.GetObjectProperty("removePtfxAsset");
			removePtfxAsset.Call(native);
		}

		/// <summary>
		/// From the b678d decompiled scripts:
		/// STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
		/// STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
		/// STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
		/// STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
		/// STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
		/// STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
		/// STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
		/// STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB80D8756B4668AB6
		/// </summary>
		public void RequestNamedPtfxAsset(string fxName)
		{
			if (requestNamedPtfxAsset == null) requestNamedPtfxAsset = (Function) native.GetObjectProperty("requestNamedPtfxAsset");
			requestNamedPtfxAsset.Call(native, fxName);
		}

		public bool HasNamedPtfxAssetLoaded(string fxName)
		{
			if (hasNamedPtfxAssetLoaded == null) hasNamedPtfxAssetLoaded = (Function) native.GetObjectProperty("hasNamedPtfxAssetLoaded");
			return (bool) hasNamedPtfxAssetLoaded.Call(native, fxName);
		}

		public void RemoveNamedPtfxAsset(string fxName)
		{
			if (removeNamedPtfxAsset == null) removeNamedPtfxAsset = (Function) native.GetObjectProperty("removeNamedPtfxAsset");
			removeNamedPtfxAsset.Call(native, fxName);
		}

		public void SetVehiclePopulationBudget(int p0)
		{
			if (setVehiclePopulationBudget == null) setVehiclePopulationBudget = (Function) native.GetObjectProperty("setVehiclePopulationBudget");
			setVehiclePopulationBudget.Call(native, p0);
		}

		public void SetPedPopulationBudget(int p0)
		{
			if (setPedPopulationBudget == null) setPedPopulationBudget = (Function) native.GetObjectProperty("setPedPopulationBudget");
			setPedPopulationBudget.Call(native, p0);
		}

		public void ClearFocus()
		{
			if (clearFocus == null) clearFocus = (Function) native.GetObjectProperty("clearFocus");
			clearFocus.Call(native);
		}

		/// <summary>
		/// Override the area where the camera will render the terrain.
		/// p3, p4 and p5 are usually set to 0.0
		/// </summary>
		public void SetFocusPosAndVel(double x, double y, double z, double offsetX, double offsetY, double offsetZ)
		{
			if (setFocusPosAndVel == null) setFocusPosAndVel = (Function) native.GetObjectProperty("setFocusPosAndVel");
			setFocusPosAndVel.Call(native, x, y, z, offsetX, offsetY, offsetZ);
		}

		/// <summary>
		/// It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
		/// </summary>
		public void SetFocusEntity(int entity)
		{
			if (setFocusEntity == null) setFocusEntity = (Function) native.GetObjectProperty("setFocusEntity");
			setFocusEntity.Call(native, entity);
		}

		public bool IsEntityFocus(int entity)
		{
			if (isEntityFocus == null) isEntityFocus = (Function) native.GetObjectProperty("isEntityFocus");
			return (bool) isEntityFocus.Call(native, entity);
		}

		public void _0x0811381EF5062FEC(int p0)
		{
			if (__0x0811381EF5062FEC == null) __0x0811381EF5062FEC = (Function) native.GetObjectProperty("_0x0811381EF5062FEC");
			__0x0811381EF5062FEC.Call(native, p0);
		}

		/// <summary>
		/// Possible p0 values:
		/// "prologue"
		/// "Prologue_Main"
		/// </summary>
		public void SetMapdatacullboxEnabled(string name, bool toggle)
		{
			if (setMapdatacullboxEnabled == null) setMapdatacullboxEnabled = (Function) native.GetObjectProperty("setMapdatacullboxEnabled");
			setMapdatacullboxEnabled.Call(native, name, toggle);
		}

		public void _0x4E52E752C76E7E7A(object p0)
		{
			if (__0x4E52E752C76E7E7A == null) __0x4E52E752C76E7E7A = (Function) native.GetObjectProperty("_0x4E52E752C76E7E7A");
			__0x4E52E752C76E7E7A.Call(native, p0);
		}

		public object FormatFocusHeading(double x, double y, double z, double rad, object p4, object p5)
		{
			if (formatFocusHeading == null) formatFocusHeading = (Function) native.GetObjectProperty("formatFocusHeading");
			return formatFocusHeading.Call(native, x, y, z, rad, p4, p5);
		}

		public object _0x1F3F018BC3AFA77C(double p0, double p1, double p2, double p3, double p4, double p5, double p6, object p7, object p8)
		{
			if (__0x1F3F018BC3AFA77C == null) __0x1F3F018BC3AFA77C = (Function) native.GetObjectProperty("_0x1F3F018BC3AFA77C");
			return __0x1F3F018BC3AFA77C.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		public object _0x0AD9710CEE2F590F(double p0, double p1, double p2, double p3, double p4, double p5, object p6)
		{
			if (__0x0AD9710CEE2F590F == null) __0x0AD9710CEE2F590F = (Function) native.GetObjectProperty("_0x0AD9710CEE2F590F");
			return __0x0AD9710CEE2F590F.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public void _0x1EE7D8DF4425F053(object p0)
		{
			if (__0x1EE7D8DF4425F053 == null) __0x1EE7D8DF4425F053 = (Function) native.GetObjectProperty("_0x1EE7D8DF4425F053");
			__0x1EE7D8DF4425F053.Call(native, p0);
		}

		public object _0x7D41E9D2D17C5B2D(object p0)
		{
			if (__0x7D41E9D2D17C5B2D == null) __0x7D41E9D2D17C5B2D = (Function) native.GetObjectProperty("_0x7D41E9D2D17C5B2D");
			return __0x7D41E9D2D17C5B2D.Call(native, p0);
		}

		public object _0x07C313F94746702C(object p0)
		{
			if (__0x07C313F94746702C == null) __0x07C313F94746702C = (Function) native.GetObjectProperty("_0x07C313F94746702C");
			return __0x07C313F94746702C.Call(native, p0);
		}

		public object _0xBC9823AB80A3DCAC()
		{
			if (__0xBC9823AB80A3DCAC == null) __0xBC9823AB80A3DCAC = (Function) native.GetObjectProperty("_0xBC9823AB80A3DCAC");
			return __0xBC9823AB80A3DCAC.Call(native);
		}

		public bool NewLoadSceneStart(double p0, double p1, double p2, double p3, double p4, double p5, double p6, object p7)
		{
			if (newLoadSceneStart == null) newLoadSceneStart = (Function) native.GetObjectProperty("newLoadSceneStart");
			return (bool) newLoadSceneStart.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// if (!sub_8f12("START LOAD SCENE SAFE")) {
		/// if (CUTSCENE::GET_CUTSCENE_TIME() > 4178) {
		/// STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);
		/// sub_8e9e("START LOAD SCENE SAFE", 1);
		/// }
		/// }
		/// (Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)
		/// </summary>
		public bool NewLoadSceneStartSphere(double x, double y, double z, double radius, object p4)
		{
			if (newLoadSceneStartSphere == null) newLoadSceneStartSphere = (Function) native.GetObjectProperty("newLoadSceneStartSphere");
			return (bool) newLoadSceneStartSphere.Call(native, x, y, z, radius, p4);
		}

		public void NewLoadSceneStop()
		{
			if (newLoadSceneStop == null) newLoadSceneStop = (Function) native.GetObjectProperty("newLoadSceneStop");
			newLoadSceneStop.Call(native);
		}

		public bool IsNewLoadSceneActive()
		{
			if (isNewLoadSceneActive == null) isNewLoadSceneActive = (Function) native.GetObjectProperty("isNewLoadSceneActive");
			return (bool) isNewLoadSceneActive.Call(native);
		}

		public bool IsNewLoadSceneLoaded()
		{
			if (isNewLoadSceneLoaded == null) isNewLoadSceneLoaded = (Function) native.GetObjectProperty("isNewLoadSceneLoaded");
			return (bool) isNewLoadSceneLoaded.Call(native);
		}

		public object _0x71E7B2E657449AAD()
		{
			if (__0x71E7B2E657449AAD == null) __0x71E7B2E657449AAD = (Function) native.GetObjectProperty("_0x71E7B2E657449AAD");
			return __0x71E7B2E657449AAD.Call(native);
		}

		/// <summary>
		/// // this enum comes directly from R* so don't edit this
		/// enum ePlayerSwitchTypes
		/// {
		/// SWITCH_TYPE_AUTO,
		/// SWITCH_TYPE_LONG,
		/// SWITCH_TYPE_MEDIUM,
		/// SWITCH_TYPE_SHORT
		/// };
		/// Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFAA23F2CBA159D67
		/// </summary>
		public void StartPlayerSwitch(int from, int to, int flags, int switchType)
		{
			if (startPlayerSwitch == null) startPlayerSwitch = (Function) native.GetObjectProperty("startPlayerSwitch");
			startPlayerSwitch.Call(native, from, to, flags, switchType);
		}

		public void StopPlayerSwitch()
		{
			if (stopPlayerSwitch == null) stopPlayerSwitch = (Function) native.GetObjectProperty("stopPlayerSwitch");
			stopPlayerSwitch.Call(native);
		}

		/// <summary>
		/// (When the camera is in the sky moving from Trevor to Franklin for example)
		/// </summary>
		/// <returns>Returns true if the player is currently switching, false otherwise.</returns>
		public bool IsPlayerSwitchInProgress()
		{
			if (isPlayerSwitchInProgress == null) isPlayerSwitchInProgress = (Function) native.GetObjectProperty("isPlayerSwitchInProgress");
			return (bool) isPlayerSwitchInProgress.Call(native);
		}

		public int GetPlayerSwitchType()
		{
			if (getPlayerSwitchType == null) getPlayerSwitchType = (Function) native.GetObjectProperty("getPlayerSwitchType");
			return (int) getPlayerSwitchType.Call(native);
		}

		/// <summary>
		/// x1, y1, z1 -- Coords of your ped model
		/// x2, y2, z2 -- Coords of the ped you want to switch to
		/// </summary>
		public int GetIdealPlayerSwitchType(double x1, double y1, double z1, double x2, double y2, double z2)
		{
			if (getIdealPlayerSwitchType == null) getIdealPlayerSwitchType = (Function) native.GetObjectProperty("getIdealPlayerSwitchType");
			return (int) getIdealPlayerSwitchType.Call(native, x1, y1, z1, x2, y2, z2);
		}

		public int GetPlayerSwitchState()
		{
			if (getPlayerSwitchState == null) getPlayerSwitchState = (Function) native.GetObjectProperty("getPlayerSwitchState");
			return (int) getPlayerSwitchState.Call(native);
		}

		public int GetPlayerShortSwitchState()
		{
			if (getPlayerShortSwitchState == null) getPlayerShortSwitchState = (Function) native.GetObjectProperty("getPlayerShortSwitchState");
			return (int) getPlayerShortSwitchState.Call(native);
		}

		/// <summary>
		/// SET_PLAYER_*
		/// </summary>
		public void _0x5F2013F8BC24EE69(int p0)
		{
			if (__0x5F2013F8BC24EE69 == null) __0x5F2013F8BC24EE69 = (Function) native.GetObjectProperty("_0x5F2013F8BC24EE69");
			__0x5F2013F8BC24EE69.Call(native, p0);
		}

		public int GetPlayerSwitchJumpCutIndex()
		{
			if (getPlayerSwitchJumpCutIndex == null) getPlayerSwitchJumpCutIndex = (Function) native.GetObjectProperty("getPlayerSwitchJumpCutIndex");
			return (int) getPlayerSwitchJumpCutIndex.Call(native);
		}

		public void SetPlayerSwitchOutro(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, object p8)
		{
			if (setPlayerSwitchOutro == null) setPlayerSwitchOutro = (Function) native.GetObjectProperty("setPlayerSwitchOutro");
			setPlayerSwitchOutro.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		/// <summary>
		/// All names can be found in playerswitchestablishingshots.meta
		/// </summary>
		public void SetPlayerSwitchEstablishingShot(string name)
		{
			if (setPlayerSwitchEstablishingShot == null) setPlayerSwitchEstablishingShot = (Function) native.GetObjectProperty("setPlayerSwitchEstablishingShot");
			setPlayerSwitchEstablishingShot.Call(native, name);
		}

		public void _0x43D1680C6D19A8E9()
		{
			if (__0x43D1680C6D19A8E9 == null) __0x43D1680C6D19A8E9 = (Function) native.GetObjectProperty("_0x43D1680C6D19A8E9");
			__0x43D1680C6D19A8E9.Call(native);
		}

		public void _0x74DE2E8739086740()
		{
			if (__0x74DE2E8739086740 == null) __0x74DE2E8739086740 = (Function) native.GetObjectProperty("_0x74DE2E8739086740");
			__0x74DE2E8739086740.Call(native);
		}

		public void _0x8E2A065ABDAE6994()
		{
			if (__0x8E2A065ABDAE6994 == null) __0x8E2A065ABDAE6994 = (Function) native.GetObjectProperty("_0x8E2A065ABDAE6994");
			__0x8E2A065ABDAE6994.Call(native);
		}

		public void _0xAD5FDF34B81BFE79()
		{
			if (__0xAD5FDF34B81BFE79 == null) __0xAD5FDF34B81BFE79 = (Function) native.GetObjectProperty("_0xAD5FDF34B81BFE79");
			__0xAD5FDF34B81BFE79.Call(native);
		}

		public bool IsSwitchReadyForDescent()
		{
			if (isSwitchReadyForDescent == null) isSwitchReadyForDescent = (Function) native.GetObjectProperty("isSwitchReadyForDescent");
			return (bool) isSwitchReadyForDescent.Call(native);
		}

		public void EnableSwitchPauseBeforeDescent()
		{
			if (enableSwitchPauseBeforeDescent == null) enableSwitchPauseBeforeDescent = (Function) native.GetObjectProperty("enableSwitchPauseBeforeDescent");
			enableSwitchPauseBeforeDescent.Call(native);
		}

		public void DisableSwitchOutroFx()
		{
			if (disableSwitchOutroFx == null) disableSwitchOutroFx = (Function) native.GetObjectProperty("disableSwitchOutroFx");
			disableSwitchOutroFx.Call(native);
		}

		/// <summary>
		/// fucks up on mount chilliad
		/// </summary>
		public void SwitchOutPlayer(int ped, int flags, int unknown)
		{
			if (switchOutPlayer == null) switchOutPlayer = (Function) native.GetObjectProperty("switchOutPlayer");
			switchOutPlayer.Call(native, ped, flags, unknown);
		}

		public void SwitchInPlayer(int ped)
		{
			if (switchInPlayer == null) switchInPlayer = (Function) native.GetObjectProperty("switchInPlayer");
			switchInPlayer.Call(native, ped);
		}

		/// <summary>
		/// Probably IS_SWITCH_*
		/// </summary>
		public bool _0x933BBEEB8C61B5F4()
		{
			if (__0x933BBEEB8C61B5F4 == null) __0x933BBEEB8C61B5F4 = (Function) native.GetObjectProperty("_0x933BBEEB8C61B5F4");
			return (bool) __0x933BBEEB8C61B5F4.Call(native);
		}

		public int GetPlayerSwitchInterpOutDuration()
		{
			if (getPlayerSwitchInterpOutDuration == null) getPlayerSwitchInterpOutDuration = (Function) native.GetObjectProperty("getPlayerSwitchInterpOutDuration");
			return (int) getPlayerSwitchInterpOutDuration.Call(native);
		}

		public object _0x5B48A06DD0E792A5()
		{
			if (__0x5B48A06DD0E792A5 == null) __0x5B48A06DD0E792A5 = (Function) native.GetObjectProperty("_0x5B48A06DD0E792A5");
			return __0x5B48A06DD0E792A5.Call(native);
		}

		public bool IsSwitchSkippingDescent()
		{
			if (isSwitchSkippingDescent == null) isSwitchSkippingDescent = (Function) native.GetObjectProperty("isSwitchSkippingDescent");
			return (bool) isSwitchSkippingDescent.Call(native);
		}

		public void _0x1E9057A74FD73E23()
		{
			if (__0x1E9057A74FD73E23 == null) __0x1E9057A74FD73E23 = (Function) native.GetObjectProperty("_0x1E9057A74FD73E23");
			__0x1E9057A74FD73E23.Call(native);
		}

		public double _0x0C15B0E443B2349D()
		{
			if (__0x0C15B0E443B2349D == null) __0x0C15B0E443B2349D = (Function) native.GetObjectProperty("_0x0C15B0E443B2349D");
			return (double) __0x0C15B0E443B2349D.Call(native);
		}

		public void _0xA76359FC80B2438E(double p0)
		{
			if (__0xA76359FC80B2438E == null) __0xA76359FC80B2438E = (Function) native.GetObjectProperty("_0xA76359FC80B2438E");
			__0xA76359FC80B2438E.Call(native, p0);
		}

		public void _0xBED8CA5FF5E04113(double p0, double p1, double p2, double p3)
		{
			if (__0xBED8CA5FF5E04113 == null) __0xBED8CA5FF5E04113 = (Function) native.GetObjectProperty("_0xBED8CA5FF5E04113");
			__0xBED8CA5FF5E04113.Call(native, p0, p1, p2, p3);
		}

		public void _0x472397322E92A856()
		{
			if (__0x472397322E92A856 == null) __0x472397322E92A856 = (Function) native.GetObjectProperty("_0x472397322E92A856");
			__0x472397322E92A856.Call(native);
		}

		public void _0x40AEFD1A244741F2(bool p0)
		{
			if (__0x40AEFD1A244741F2 == null) __0x40AEFD1A244741F2 = (Function) native.GetObjectProperty("_0x40AEFD1A244741F2");
			__0x40AEFD1A244741F2.Call(native, p0);
		}

		public void _0x03F1A106BDA7DD3E()
		{
			if (__0x03F1A106BDA7DD3E == null) __0x03F1A106BDA7DD3E = (Function) native.GetObjectProperty("_0x03F1A106BDA7DD3E");
			__0x03F1A106BDA7DD3E.Call(native);
		}

		public void _0x95A7DABDDBB78AE7(string iplName1, string iplName2)
		{
			if (__0x95A7DABDDBB78AE7 == null) __0x95A7DABDDBB78AE7 = (Function) native.GetObjectProperty("_0x95A7DABDDBB78AE7");
			__0x95A7DABDDBB78AE7.Call(native, iplName1, iplName2);
		}

		public void _0x63EB2B972A218CAC()
		{
			if (__0x63EB2B972A218CAC == null) __0x63EB2B972A218CAC = (Function) native.GetObjectProperty("_0x63EB2B972A218CAC");
			__0x63EB2B972A218CAC.Call(native);
		}

		public bool _0xFB199266061F820A()
		{
			if (__0xFB199266061F820A == null) __0xFB199266061F820A = (Function) native.GetObjectProperty("_0xFB199266061F820A");
			return (bool) __0xFB199266061F820A.Call(native);
		}

		public void _0xF4A0DADB70F57FA6()
		{
			if (__0xF4A0DADB70F57FA6 == null) __0xF4A0DADB70F57FA6 = (Function) native.GetObjectProperty("_0xF4A0DADB70F57FA6");
			__0xF4A0DADB70F57FA6.Call(native);
		}

		public object _0x5068F488DDB54DD8()
		{
			if (__0x5068F488DDB54DD8 == null) __0x5068F488DDB54DD8 = (Function) native.GetObjectProperty("_0x5068F488DDB54DD8");
			return __0x5068F488DDB54DD8.Call(native);
		}

		public void PrefetchSrl(string srl)
		{
			if (prefetchSrl == null) prefetchSrl = (Function) native.GetObjectProperty("prefetchSrl");
			prefetchSrl.Call(native, srl);
		}

		public bool IsSrlLoaded()
		{
			if (isSrlLoaded == null) isSrlLoaded = (Function) native.GetObjectProperty("isSrlLoaded");
			return (bool) isSrlLoaded.Call(native);
		}

		public void BeginSrl()
		{
			if (beginSrl == null) beginSrl = (Function) native.GetObjectProperty("beginSrl");
			beginSrl.Call(native);
		}

		public void EndSrl()
		{
			if (endSrl == null) endSrl = (Function) native.GetObjectProperty("endSrl");
			endSrl.Call(native);
		}

		public void SetSrlTime(double p0)
		{
			if (setSrlTime == null) setSrlTime = (Function) native.GetObjectProperty("setSrlTime");
			setSrlTime.Call(native, p0);
		}

		public void _0xEF39EE20C537E98C(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (__0xEF39EE20C537E98C == null) __0xEF39EE20C537E98C = (Function) native.GetObjectProperty("_0xEF39EE20C537E98C");
			__0xEF39EE20C537E98C.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void _0xBEB2D9A1D9A8F55A(object p0, object p1, object p2, object p3)
		{
			if (__0xBEB2D9A1D9A8F55A == null) __0xBEB2D9A1D9A8F55A = (Function) native.GetObjectProperty("_0xBEB2D9A1D9A8F55A");
			__0xBEB2D9A1D9A8F55A.Call(native, p0, p1, p2, p3);
		}

		public void _0x20C6C7E4EB082A7F(bool p0)
		{
			if (__0x20C6C7E4EB082A7F == null) __0x20C6C7E4EB082A7F = (Function) native.GetObjectProperty("_0x20C6C7E4EB082A7F");
			__0x20C6C7E4EB082A7F.Call(native, p0);
		}

		public void _0xF8155A7F03DDFC8E(object p0)
		{
			if (__0xF8155A7F03DDFC8E == null) __0xF8155A7F03DDFC8E = (Function) native.GetObjectProperty("_0xF8155A7F03DDFC8E");
			__0xF8155A7F03DDFC8E.Call(native, p0);
		}

		public void SetHdArea(double x, double y, double z, double radius)
		{
			if (setHdArea == null) setHdArea = (Function) native.GetObjectProperty("setHdArea");
			setHdArea.Call(native, x, y, z, radius);
		}

		public void ClearHdArea()
		{
			if (clearHdArea == null) clearHdArea = (Function) native.GetObjectProperty("clearHdArea");
			clearHdArea.Call(native);
		}

		public void InitCreatorBudget()
		{
			if (initCreatorBudget == null) initCreatorBudget = (Function) native.GetObjectProperty("initCreatorBudget");
			initCreatorBudget.Call(native);
		}

		public void ShutdownCreatorBudget()
		{
			if (shutdownCreatorBudget == null) shutdownCreatorBudget = (Function) native.GetObjectProperty("shutdownCreatorBudget");
			shutdownCreatorBudget.Call(native);
		}

		public bool AddModelToCreatorBudget(int modelHash)
		{
			if (addModelToCreatorBudget == null) addModelToCreatorBudget = (Function) native.GetObjectProperty("addModelToCreatorBudget");
			return (bool) addModelToCreatorBudget.Call(native, modelHash);
		}

		public void RemoveModelFromCreatorBudget(int modelHash)
		{
			if (removeModelFromCreatorBudget == null) removeModelFromCreatorBudget = (Function) native.GetObjectProperty("removeModelFromCreatorBudget");
			removeModelFromCreatorBudget.Call(native, modelHash);
		}

		/// <summary>
		/// 0.0 = no memory used
		/// 1.0 = all memory used
		/// Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
		/// GET_*
		/// </summary>
		public double GetUsedCreatorModelMemoryPercentage()
		{
			if (getUsedCreatorModelMemoryPercentage == null) getUsedCreatorModelMemoryPercentage = (Function) native.GetObjectProperty("getUsedCreatorModelMemoryPercentage");
			return (double) getUsedCreatorModelMemoryPercentage.Call(native);
		}

		/// <summary>
		/// Stand still (?)
		/// </summary>
		public void TaskPause(int ped, int ms)
		{
			if (taskPause == null) taskPause = (Function) native.GetObjectProperty("taskPause");
			taskPause.Call(native, ped, ms);
		}

		/// <summary>
		/// Makes the specified ped stand still for (time) milliseconds.
		/// </summary>
		public void TaskStandStill(int ped, int time)
		{
			if (taskStandStill == null) taskStandStill = (Function) native.GetObjectProperty("taskStandStill");
			taskStandStill.Call(native, ped, time);
		}

		/// <summary>
		/// Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
		/// v350: Ped ped, bool unused
		/// v678: Ped ped, bool unused, bool flag1, bool flag2
		/// flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
		/// </summary>
		public void TaskJump(int ped, bool unused, object p2, object p3)
		{
			if (taskJump == null) taskJump = (Function) native.GetObjectProperty("taskJump");
			taskJump.Call(native, ped, unused, p2, p3);
		}

		public void TaskCower(int ped, int duration)
		{
			if (taskCower == null) taskCower = (Function) native.GetObjectProperty("taskCower");
			taskCower.Call(native, ped, duration);
		}

		/// <summary>
		/// In the scripts, p3 was always -1.
		/// p3 seems to be duration or timeout of turn animation.
		/// Also facingPed can be 0 or -1 so ped will just raise hands up.
		/// </summary>
		/// <param name="p3">seems to be duration or timeout of turn animation.</param>
		public void TaskHandsUp(int ped, int duration, int facingPed, int p3, bool p4)
		{
			if (taskHandsUp == null) taskHandsUp = (Function) native.GetObjectProperty("taskHandsUp");
			taskHandsUp.Call(native, ped, duration, facingPed, p3, p4);
		}

		public void UpdateTaskHandsUpDuration(int ped, int duration)
		{
			if (updateTaskHandsUpDuration == null) updateTaskHandsUpDuration = (Function) native.GetObjectProperty("updateTaskHandsUpDuration");
			updateTaskHandsUpDuration.Call(native, ped, duration);
		}

		public void TaskOpenVehicleDoor(int ped, int vehicle, int timeOut, int doorIndex, double speed)
		{
			if (taskOpenVehicleDoor == null) taskOpenVehicleDoor = (Function) native.GetObjectProperty("taskOpenVehicleDoor");
			taskOpenVehicleDoor.Call(native, ped, vehicle, timeOut, doorIndex, speed);
		}

		/// <summary>
		/// speed 1.0 = walk, 2.0 = run
		/// p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
		/// p6 is always 0
		/// Usage of seat
		/// -1 = driver
		/// 0 = passenger
		/// 1 = left back seat
		/// 2 = right back seat
		/// 3 = outside left
		/// 4 = outside right
		/// </summary>
		/// <param name="speed">1.0 = walk, 2.0 = run</param>
		/// <param name="p6">is always 0</param>
		public void TaskEnterVehicle(int ped, int vehicle, int timeout, int seat, double speed, int flag, object p6)
		{
			if (taskEnterVehicle == null) taskEnterVehicle = (Function) native.GetObjectProperty("taskEnterVehicle");
			taskEnterVehicle.Call(native, ped, vehicle, timeout, seat, speed, flag, p6);
		}

		/// <summary>
		/// Flags from decompiled scripts:
		/// 0 = normal exit and closes door.
		/// 1 = normal exit and closes door.
		/// 16 = teleports outside, door kept closed.
		/// 64 = normal exit and closes door, maybe a bit slower animation than 0.
		/// 256 = normal exit but does not close the door.
		/// 4160 = ped is throwing himself out, even when the vehicle is still.
		/// 262144 = ped moves to passenger seat first, then exits normally
		/// Others to be tried out: 320, 512, 131072.
		/// </summary>
		/// <param name="flags">Flags from decompiled scripts:</param>
		public void TaskLeaveVehicle(int ped, int vehicle, int flags)
		{
			if (taskLeaveVehicle == null) taskLeaveVehicle = (Function) native.GetObjectProperty("taskLeaveVehicle");
			taskLeaveVehicle.Call(native, ped, vehicle, flags);
		}

		public void TaskGetOffBoat(int ped, int boat)
		{
			if (taskGetOffBoat == null) taskGetOffBoat = (Function) native.GetObjectProperty("taskGetOffBoat");
			taskGetOffBoat.Call(native, ped, boat);
		}

		public void TaskSkyDive(int ped, bool p1)
		{
			if (taskSkyDive == null) taskSkyDive = (Function) native.GetObjectProperty("taskSkyDive");
			taskSkyDive.Call(native, ped, p1);
		}

		/// <summary>
		/// Second parameter is unused.
		/// second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
		/// </summary>
		public void TaskParachute(int ped, bool p1, bool p2)
		{
			if (taskParachute == null) taskParachute = (Function) native.GetObjectProperty("taskParachute");
			taskParachute.Call(native, ped, p1, p2);
		}

		/// <summary>
		/// makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
		/// </summary>
		public void TaskParachuteToTarget(int ped, double x, double y, double z)
		{
			if (taskParachuteToTarget == null) taskParachuteToTarget = (Function) native.GetObjectProperty("taskParachuteToTarget");
			taskParachuteToTarget.Call(native, ped, x, y, z);
		}

		public void SetParachuteTaskTarget(int ped, double x, double y, double z)
		{
			if (setParachuteTaskTarget == null) setParachuteTaskTarget = (Function) native.GetObjectProperty("setParachuteTaskTarget");
			setParachuteTaskTarget.Call(native, ped, x, y, z);
		}

		public void SetParachuteTaskThrust(int ped, double thrust)
		{
			if (setParachuteTaskThrust == null) setParachuteTaskThrust = (Function) native.GetObjectProperty("setParachuteTaskThrust");
			setParachuteTaskThrust.Call(native, ped, thrust);
		}

		/// <summary>
		/// Only appears twice in the scripts.
		/// TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 0x41200000);
		/// TASK::TASK_RAPPEL_FROM_HELI(a_0, 0x41200000);
		/// </summary>
		public void TaskRappelFromHeli(int ped, double p1)
		{
			if (taskRappelFromHeli == null) taskRappelFromHeli = (Function) native.GetObjectProperty("taskRappelFromHeli");
			taskRappelFromHeli.Call(native, ped, p1);
		}

		/// <summary>
		/// info about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/
		/// ---------------------------------------------------------------
		/// Passing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something.
		/// P10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.
		/// Here the e.g. code I used
		/// Function.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);
		/// </summary>
		/// <param name="p10">P10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.</param>
		public void TaskVehicleDriveToCoord(int ped, int vehicle, double x, double y, double z, double speed, object p6, int vehicleModel, int drivingMode, double stopRange, double p10)
		{
			if (taskVehicleDriveToCoord == null) taskVehicleDriveToCoord = (Function) native.GetObjectProperty("taskVehicleDriveToCoord");
			taskVehicleDriveToCoord.Call(native, ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10);
		}

		public void TaskVehicleDriveToCoordLongrange(int ped, int vehicle, double x, double y, double z, double speed, int driveMode, double stopRange)
		{
			if (taskVehicleDriveToCoordLongrange == null) taskVehicleDriveToCoordLongrange = (Function) native.GetObjectProperty("taskVehicleDriveToCoordLongrange");
			taskVehicleDriveToCoordLongrange.Call(native, ped, vehicle, x, y, z, speed, driveMode, stopRange);
		}

		public void TaskVehicleDriveWander(int ped, int vehicle, double speed, int drivingStyle)
		{
			if (taskVehicleDriveWander == null) taskVehicleDriveWander = (Function) native.GetObjectProperty("taskVehicleDriveWander");
			taskVehicleDriveWander.Call(native, ped, vehicle, speed, drivingStyle);
		}

		/// <summary>
		/// p6 always -1
		/// p7 always 10.0
		/// p8 always 1
		/// </summary>
		public void TaskFollowToOffsetOfEntity(int ped, int entity, double offsetX, double offsetY, double offsetZ, double movementSpeed, int timeout, double stoppingRange, bool persistFollowing)
		{
			if (taskFollowToOffsetOfEntity == null) taskFollowToOffsetOfEntity = (Function) native.GetObjectProperty("taskFollowToOffsetOfEntity");
			taskFollowToOffsetOfEntity.Call(native, ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);
		}

		public void TaskGoStraightToCoord(int ped, double x, double y, double z, double speed, int timeout, double targetHeading, double distanceToSlide)
		{
			if (taskGoStraightToCoord == null) taskGoStraightToCoord = (Function) native.GetObjectProperty("taskGoStraightToCoord");
			taskGoStraightToCoord.Call(native, ped, x, y, z, speed, timeout, targetHeading, distanceToSlide);
		}

		public void TaskGoStraightToCoordRelativeToEntity(int entity1, int entity2, double p2, double p3, double p4, double p5, object p6)
		{
			if (taskGoStraightToCoordRelativeToEntity == null) taskGoStraightToCoordRelativeToEntity = (Function) native.GetObjectProperty("taskGoStraightToCoordRelativeToEntity");
			taskGoStraightToCoordRelativeToEntity.Call(native, entity1, entity2, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// Makes the specified ped achieve the specified heading.
		/// pedHandle: The handle of the ped to assign the task to.
		/// heading: The desired heading.
		/// timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
		/// </summary>
		/// <param name="heading">The desired heading.</param>
		/// <param name="timeout">The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.</param>
		public void TaskAchieveHeading(int ped, double heading, int timeout)
		{
			if (taskAchieveHeading == null) taskAchieveHeading = (Function) native.GetObjectProperty("taskAchieveHeading");
			taskAchieveHeading.Call(native, ped, heading, timeout);
		}

		/// <summary>
		/// MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
		/// </summary>
		public void TaskFlushRoute()
		{
			if (taskFlushRoute == null) taskFlushRoute = (Function) native.GetObjectProperty("taskFlushRoute");
			taskFlushRoute.Call(native);
		}

		/// <summary>
		/// MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
		/// A maximum of 8 points can be added.
		/// </summary>
		public void TaskExtendRoute(double x, double y, double z)
		{
			if (taskExtendRoute == null) taskExtendRoute = (Function) native.GetObjectProperty("taskExtendRoute");
			taskExtendRoute.Call(native, x, y, z);
		}

		/// <summary>
		/// MulleKD19: Makes the ped go on the created point route.
		/// ped: The ped to give the task to.
		/// speed: The speed to move at in m/s.
		/// int: Unknown. Can be 0, 1, 2 or 3.
		/// Example:
		/// TASK_FLUSH_ROUTE();
		/// TASK_EXTEND_ROUTE(0f, 0f, 70f);
		/// TASK_EXTEND_ROUTE(10f, 0f, 70f);
		/// TASK_EXTEND_ROUTE(10f, 10f, 70f);
		/// TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
		/// </summary>
		/// <param name="ped">The ped to give the task to.</param>
		/// <param name="speed">The speed to move at in m/s.</param>
		public void TaskFollowPointRoute(int ped, double speed, int unknown)
		{
			if (taskFollowPointRoute == null) taskFollowPointRoute = (Function) native.GetObjectProperty("taskFollowPointRoute");
			taskFollowPointRoute.Call(native, ped, speed, unknown);
		}

		/// <summary>
		/// The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
		/// Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
		/// Example: AI::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
		/// Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
		/// </summary>
		/// <param name="duration">Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with -1, the task duration will be ignored).</param>
		/// <param name="p5">The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0</param>
		/// <param name="p6">The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and 0</param>
		public void TaskGoToEntity(int entity, int target, int duration, double distance, double speed, double p5, int p6)
		{
			if (taskGoToEntity == null) taskGoToEntity = (Function) native.GetObjectProperty("taskGoToEntity");
			taskGoToEntity.Call(native, entity, target, duration, distance, speed, p5, p6);
		}

		/// <summary>
		/// Makes the specified ped flee the specified distance from the specified position.
		/// </summary>
		public void TaskSmartFleeCoord(int ped, double x, double y, double z, double distance, int time, bool p6, bool p7)
		{
			if (taskSmartFleeCoord == null) taskSmartFleeCoord = (Function) native.GetObjectProperty("taskSmartFleeCoord");
			taskSmartFleeCoord.Call(native, ped, x, y, z, distance, time, p6, p7);
		}

		/// <summary>
		/// Makes a ped run away from another ped (fleeTarget).
		/// distance = ped will flee this distance.
		/// fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
		/// </summary>
		/// <param name="distance">ped will flee this distance.</param>
		/// <param name="fleeTime">ped will flee for this amount of time, set to "-1" to flee forever</param>
		public void TaskSmartFleePed(int ped, int fleeTarget, double distance, object fleeTime, bool p4, bool p5)
		{
			if (taskSmartFleePed == null) taskSmartFleePed = (Function) native.GetObjectProperty("taskSmartFleePed");
			taskSmartFleePed.Call(native, ped, fleeTarget, distance, fleeTime, p4, p5);
		}

		public void TaskReactAndFleePed(int ped, int fleeTarget)
		{
			if (taskReactAndFleePed == null) taskReactAndFleePed = (Function) native.GetObjectProperty("taskReactAndFleePed");
			taskReactAndFleePed.Call(native, ped, fleeTarget);
		}

		public void TaskShockingEventReact(int ped, int eventHandle)
		{
			if (taskShockingEventReact == null) taskShockingEventReact = (Function) native.GetObjectProperty("taskShockingEventReact");
			taskShockingEventReact.Call(native, ped, eventHandle);
		}

		public void TaskWanderInArea(int ped, double x, double y, double z, double radius, double minimalLength, double timeBetweenWalks)
		{
			if (taskWanderInArea == null) taskWanderInArea = (Function) native.GetObjectProperty("taskWanderInArea");
			taskWanderInArea.Call(native, ped, x, y, z, radius, minimalLength, timeBetweenWalks);
		}

		/// <summary>
		/// Makes ped walk around the area.
		/// set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
		/// </summary>
		public void TaskWanderStandard(int ped, double p1, int p2)
		{
			if (taskWanderStandard == null) taskWanderStandard = (Function) native.GetObjectProperty("taskWanderStandard");
			taskWanderStandard.Call(native, ped, p1, p2);
		}

		/// <summary>
		/// Modes:
		/// 0 - ignore heading
		/// 1 - park forward
		/// 2 - park backwards
		/// Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
		/// Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
		/// </summary>
		/// <param name="radius">Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the is measured in centimeters or something.</param>
		public void TaskVehiclePark(int ped, int vehicle, double x, double y, double z, double heading, int mode, double radius, bool keepEngineOn)
		{
			if (taskVehiclePark == null) taskVehiclePark = (Function) native.GetObjectProperty("taskVehiclePark");
			taskVehiclePark.Call(native, ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn);
		}

		/// <summary>
		/// known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
		/// </summary>
		public void TaskStealthKill(int killer, int target, int actionType, double p3, object p4)
		{
			if (taskStealthKill == null) taskStealthKill = (Function) native.GetObjectProperty("taskStealthKill");
			taskStealthKill.Call(native, killer, target, actionType, p3, p4);
		}

		public void TaskPlantBomb(int ped, double x, double y, double z, double heading)
		{
			if (taskPlantBomb == null) taskPlantBomb = (Function) native.GetObjectProperty("taskPlantBomb");
			taskPlantBomb.Call(native, ped, x, y, z, heading);
		}

		/// <summary>
		/// If no timeout, set timeout to -1.
		/// </summary>
		public void TaskFollowNavMeshToCoord(int ped, double x, double y, double z, double speed, int timeout, double stoppingRange, bool persistFollowing, double unk)
		{
			if (taskFollowNavMeshToCoord == null) taskFollowNavMeshToCoord = (Function) native.GetObjectProperty("taskFollowNavMeshToCoord");
			taskFollowNavMeshToCoord.Call(native, ped, x, y, z, speed, timeout, stoppingRange, persistFollowing, unk);
		}

		public void TaskFollowNavMeshToCoordAdvanced(int ped, double x, double y, double z, double speed, int timeout, double unkFloat, int unkInt, double unkX, double unkY, double unkZ, double unk_40000f)
		{
			if (taskFollowNavMeshToCoordAdvanced == null) taskFollowNavMeshToCoordAdvanced = (Function) native.GetObjectProperty("taskFollowNavMeshToCoordAdvanced");
			taskFollowNavMeshToCoordAdvanced.Call(native, ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f);
		}

		public void SetPedPathCanUseClimbovers(int ped, bool Toggle)
		{
			if (setPedPathCanUseClimbovers == null) setPedPathCanUseClimbovers = (Function) native.GetObjectProperty("setPedPathCanUseClimbovers");
			setPedPathCanUseClimbovers.Call(native, ped, Toggle);
		}

		public void SetPedPathCanUseLadders(int ped, bool Toggle)
		{
			if (setPedPathCanUseLadders == null) setPedPathCanUseLadders = (Function) native.GetObjectProperty("setPedPathCanUseLadders");
			setPedPathCanUseLadders.Call(native, ped, Toggle);
		}

		public void SetPedPathCanDropFromHeight(int ped, bool Toggle)
		{
			if (setPedPathCanDropFromHeight == null) setPedPathCanDropFromHeight = (Function) native.GetObjectProperty("setPedPathCanDropFromHeight");
			setPedPathCanDropFromHeight.Call(native, ped, Toggle);
		}

		/// <summary>
		/// SET_PED_PATH_*
		/// Could be the move speed on the path. Needs testing.
		/// Default is 1.0 and maximum is 10.0
		/// SET_PED_PATH_CLIMB_COST_MODIFIER ?
		/// </summary>
		public void _0x88E32DB8C1A4AA4B(int ped, double p1)
		{
			if (__0x88E32DB8C1A4AA4B == null) __0x88E32DB8C1A4AA4B = (Function) native.GetObjectProperty("_0x88E32DB8C1A4AA4B");
			__0x88E32DB8C1A4AA4B.Call(native, ped, p1);
		}

		public void SetPedPathMayEnterWater(int ped, bool mayEnterWater)
		{
			if (setPedPathMayEnterWater == null) setPedPathMayEnterWater = (Function) native.GetObjectProperty("setPedPathMayEnterWater");
			setPedPathMayEnterWater.Call(native, ped, mayEnterWater);
		}

		public void SetPedPathPreferToAvoidWater(int ped, bool avoidWater)
		{
			if (setPedPathPreferToAvoidWater == null) setPedPathPreferToAvoidWater = (Function) native.GetObjectProperty("setPedPathPreferToAvoidWater");
			setPedPathPreferToAvoidWater.Call(native, ped, avoidWater);
		}

		public void SetPedPathAvoidFire(int ped, bool avoidFire)
		{
			if (setPedPathAvoidFire == null) setPedPathAvoidFire = (Function) native.GetObjectProperty("setPedPathAvoidFire");
			setPedPathAvoidFire.Call(native, ped, avoidFire);
		}

		/// <summary>
		/// Needs to be looped! And yes, it does work and is not a hash collision.
		/// Birds will try to reach the given height.
		/// </summary>
		public void SetGlobalMinBirdFlightHeight(double height)
		{
			if (setGlobalMinBirdFlightHeight == null) setGlobalMinBirdFlightHeight = (Function) native.GetObjectProperty("setGlobalMinBirdFlightHeight");
			setGlobalMinBirdFlightHeight.Call(native, height);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<object, object, object></returns>
		public (object, object, object) GetNavmeshRouteDistanceRemaining(int ped, object p1, object p2)
		{
			if (getNavmeshRouteDistanceRemaining == null) getNavmeshRouteDistanceRemaining = (Function) native.GetObjectProperty("getNavmeshRouteDistanceRemaining");
			var results = (Array) getNavmeshRouteDistanceRemaining.Call(native, ped, p1, p2);
			return (results[0], results[1], results[2]);
		}

		public int GetNavmeshRouteResult(int ped)
		{
			if (getNavmeshRouteResult == null) getNavmeshRouteResult = (Function) native.GetObjectProperty("getNavmeshRouteResult");
			return (int) getNavmeshRouteResult.Call(native, ped);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool _0x3E38E28A1D80DDF6(int ped)
		{
			if (__0x3E38E28A1D80DDF6 == null) __0x3E38E28A1D80DDF6 = (Function) native.GetObjectProperty("_0x3E38E28A1D80DDF6");
			return (bool) __0x3E38E28A1D80DDF6.Call(native, ped);
		}

		/// <summary>
		/// example from fm_mission_controller
		/// AI::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
		/// </summary>
		public void TaskGoToCoordAnyMeans(int ped, double x, double y, double z, double speed, object p5, bool p6, int walkingStyle, double p8)
		{
			if (taskGoToCoordAnyMeans == null) taskGoToCoordAnyMeans = (Function) native.GetObjectProperty("taskGoToCoordAnyMeans");
			taskGoToCoordAnyMeans.Call(native, ped, x, y, z, speed, p5, p6, walkingStyle, p8);
		}

		public void TaskGoToCoordAnyMeansExtraParams(int ped, double x, double y, double z, double speed, object p5, bool p6, int walkingStyle, double p8, object p9, object p10, object p11, object p12)
		{
			if (taskGoToCoordAnyMeansExtraParams == null) taskGoToCoordAnyMeansExtraParams = (Function) native.GetObjectProperty("taskGoToCoordAnyMeansExtraParams");
			taskGoToCoordAnyMeansExtraParams.Call(native, ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12);
		}

		public void TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(int ped, double x, double y, double z, double speed, object p5, bool p6, int walkingStyle, double p8, object p9, object p10, object p11, object p12, object p13)
		{
			if (taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed == null) taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed = (Function) native.GetObjectProperty("taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed");
			taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed.Call(native, ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12, p13);
		}

		/// <summary>
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// float speed > normal speed is 8.0f
		/// ----------------------
		/// float speedMultiplier > multiply the playback speed
		/// ----------------------
		/// int duration: time in millisecond
		/// ----------------------
		/// -1 _ _ _ _ _ _ _> Default (see flag)
		/// 0 _ _ _ _ _ _ _ > Not play at all
		/// See NativeDB for reference: http://natives.altv.mp/#/0xEA47FE3719165B94
		/// </summary>
		/// <param name="duration">int time in millisecond</param>
		public void TaskPlayAnim(int ped, string animDictionary, string animationName, double speed, double speedMultiplier, int duration, int flag, double playbackRate, bool lockX, bool lockY, bool lockZ)
		{
			if (taskPlayAnim == null) taskPlayAnim = (Function) native.GetObjectProperty("taskPlayAnim");
			taskPlayAnim.Call(native, ped, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, lockX, lockY, lockZ);
		}

		/// <summary>
		/// It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position). animTime is a float from 0.0 -> 1.0, lets you start an animation from given point. The rest as in AI::TASK_PLAY_ANIM.
		/// Rotation information : rotX and rotY don't seem to have any effect, only rotZ works.
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		public void TaskPlayAnimAdvanced(int ped, string animDict, string animName, double posX, double posY, double posZ, double rotX, double rotY, double rotZ, double speed, double speedMultiplier, int duration, object flag, double animTime, object p14, object p15)
		{
			if (taskPlayAnimAdvanced == null) taskPlayAnimAdvanced = (Function) native.GetObjectProperty("taskPlayAnimAdvanced");
			taskPlayAnimAdvanced.Call(native, ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, speed, speedMultiplier, duration, flag, animTime, p14, p15);
		}

		public void StopAnimTask(int ped, string animDictionary, string animationName, double p3)
		{
			if (stopAnimTask == null) stopAnimTask = (Function) native.GetObjectProperty("stopAnimTask");
			stopAnimTask.Call(native, ped, animDictionary, animationName, p3);
		}

		/// <summary>
		/// From fm_mission_controller.c:
		/// reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
		/// vVar28 = {0.094f, 0.02f, -0.005f};
		/// vVar29 = {-92.24f, 63.64f, 150.24f};
		/// func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
		/// set_entity_lod_dist(net_to_ent(uVar30), 500);
		/// attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
		/// Var31.imm_4 = 1065353216;
		/// Var31.imm_5 = 1065353216;
		/// See NativeDB for reference: http://natives.altv.mp/#/0x126EF75F1E17ABE5
		/// </summary>
		/// <returns>Array<void, object, object, object></returns>
		public (object, object, object, object) TaskScriptedAnimation(int ped, object p1, object p2, object p3, double p4, double p5)
		{
			if (taskScriptedAnimation == null) taskScriptedAnimation = (Function) native.GetObjectProperty("taskScriptedAnimation");
			var results = (Array) taskScriptedAnimation.Call(native, ped, p1, p2, p3, p4, p5);
			return (results[0], results[1], results[2], results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object></returns>
		public (object, object, object, object) PlayEntityScriptedAnim(object p0, object p1, object p2, object p3, double p4, double p5)
		{
			if (playEntityScriptedAnim == null) playEntityScriptedAnim = (Function) native.GetObjectProperty("playEntityScriptedAnim");
			var results = (Array) playEntityScriptedAnim.Call(native, p0, p1, p2, p3, p4, p5);
			return (results[0], results[1], results[2], results[3]);
		}

		public void StopAnimPlayback(int ped, int p1, bool p2)
		{
			if (stopAnimPlayback == null) stopAnimPlayback = (Function) native.GetObjectProperty("stopAnimPlayback");
			stopAnimPlayback.Call(native, ped, p1, p2);
		}

		public void SetAnimWeight(object p0, double p1, object p2, object p3, bool p4)
		{
			if (setAnimWeight == null) setAnimWeight = (Function) native.GetObjectProperty("setAnimWeight");
			setAnimWeight.Call(native, p0, p1, p2, p3, p4);
		}

		public void SetAnimRate(object p0, double p1, object p2, bool p3)
		{
			if (setAnimRate == null) setAnimRate = (Function) native.GetObjectProperty("setAnimRate");
			setAnimRate.Call(native, p0, p1, p2, p3);
		}

		public void SetAnimLooped(object p0, bool p1, object p2, bool p3)
		{
			if (setAnimLooped == null) setAnimLooped = (Function) native.GetObjectProperty("setAnimLooped");
			setAnimLooped.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// Example from the scripts:
		/// AI::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);
		/// =========================================================
		/// ^^ No offense, but Idk how that would really help anyone.
		/// As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
		/// Known boneMaskTypes'
		/// "BONEMASK_HEADONLY"
		/// "BONEMASK_HEAD_NECK_AND_ARMS"
		/// "BONEMASK_HEAD_NECK_AND_L_ARM"
		/// See NativeDB for reference: http://natives.altv.mp/#/0x8FBB6758B3B3E9EC
		/// </summary>
		public void TaskPlayPhoneGestureAnimation(int ped, string animDict, string animation, string boneMaskType, double p4, double p5, bool p6, bool p7)
		{
			if (taskPlayPhoneGestureAnimation == null) taskPlayPhoneGestureAnimation = (Function) native.GetObjectProperty("taskPlayPhoneGestureAnimation");
			taskPlayPhoneGestureAnimation.Call(native, ped, animDict, animation, boneMaskType, p4, p5, p6, p7);
		}

		public void TaskStopPhoneGestureAnimation(int ped, object p1)
		{
			if (taskStopPhoneGestureAnimation == null) taskStopPhoneGestureAnimation = (Function) native.GetObjectProperty("taskStopPhoneGestureAnimation");
			taskStopPhoneGestureAnimation.Call(native, ped, p1);
		}

		public bool IsPlayingPhoneGestureAnim(int ped)
		{
			if (isPlayingPhoneGestureAnim == null) isPlayingPhoneGestureAnim = (Function) native.GetObjectProperty("isPlayingPhoneGestureAnim");
			return (bool) isPlayingPhoneGestureAnim.Call(native, ped);
		}

		public double GetPhoneGestureAnimCurrentTime(int ped)
		{
			if (getPhoneGestureAnimCurrentTime == null) getPhoneGestureAnimCurrentTime = (Function) native.GetObjectProperty("getPhoneGestureAnimCurrentTime");
			return (double) getPhoneGestureAnimCurrentTime.Call(native, ped);
		}

		public double GetPhoneGestureAnimTotalTime(int ped)
		{
			if (getPhoneGestureAnimTotalTime == null) getPhoneGestureAnimTotalTime = (Function) native.GetObjectProperty("getPhoneGestureAnimTotalTime");
			return (double) getPhoneGestureAnimTotalTime.Call(native, ped);
		}

		/// <summary>
		/// Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
		/// Here's how its used -
		/// AI::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");
		/// AI::TASK_VEHICLE_PLAY_ANIM(l_556[01], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");
		/// FYI : Speedo is the name of van in which chop was put in the mission.
		/// </summary>
		public void TaskVehiclePlayAnim(int vehicle, string animation_set, string animation_name)
		{
			if (taskVehiclePlayAnim == null) taskVehiclePlayAnim = (Function) native.GetObjectProperty("taskVehiclePlayAnim");
			taskVehiclePlayAnim.Call(native, vehicle, animation_set, animation_name);
		}

		/// <summary>
		/// p5 = 0, p6 = 2
		/// </summary>
		/// <param name="p5">0, p6 = 2</param>
		/// <param name="p6">p5 = 0, 2</param>
		public void TaskLookAtCoord(int entity, double x, double y, double z, double duration, object p5, object p6)
		{
			if (taskLookAtCoord == null) taskLookAtCoord = (Function) native.GetObjectProperty("taskLookAtCoord");
			taskLookAtCoord.Call(native, entity, x, y, z, duration, p5, p6);
		}

		/// <summary>
		/// param3: duration in ms, use -1 to look forever
		/// param4: using 2048 is fine
		/// param5: using 3 is fine
		/// </summary>
		public void TaskLookAtEntity(int ped, int lookAt, int duration, int unknown1, int unknown2)
		{
			if (taskLookAtEntity == null) taskLookAtEntity = (Function) native.GetObjectProperty("taskLookAtEntity");
			taskLookAtEntity.Call(native, ped, lookAt, duration, unknown1, unknown2);
		}

		/// <summary>
		/// Not clear what it actually does, but here's how script uses it -
		/// if (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...)
		/// {
		/// if(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))
		/// {
		/// AI::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID());
		/// }
		/// ...
		/// }
		/// See NativeDB for reference: http://natives.altv.mp/#/0x0F804F1DB19B9689
		/// </summary>
		public void TaskClearLookAt(int ped)
		{
			if (taskClearLookAt == null) taskClearLookAt = (Function) native.GetObjectProperty("taskClearLookAt");
			taskClearLookAt.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) OpenSequenceTask(int taskSequenceId)
		{
			if (openSequenceTask == null) openSequenceTask = (Function) native.GetObjectProperty("openSequenceTask");
			var results = (Array) openSequenceTask.Call(native, taskSequenceId);
			return (results[0], (int) results[1]);
		}

		public void CloseSequenceTask(int taskSequenceId)
		{
			if (closeSequenceTask == null) closeSequenceTask = (Function) native.GetObjectProperty("closeSequenceTask");
			closeSequenceTask.Call(native, taskSequenceId);
		}

		public void TaskPerformSequence(int ped, int taskSequenceId)
		{
			if (taskPerformSequence == null) taskPerformSequence = (Function) native.GetObjectProperty("taskPerformSequence");
			taskPerformSequence.Call(native, ped, taskSequenceId);
		}

		public void TaskPerformSequenceLocally(int ped, int taskSequenceId)
		{
			if (taskPerformSequenceLocally == null) taskPerformSequenceLocally = (Function) native.GetObjectProperty("taskPerformSequenceLocally");
			taskPerformSequenceLocally.Call(native, ped, taskSequenceId);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) ClearSequenceTask(int taskSequenceId)
		{
			if (clearSequenceTask == null) clearSequenceTask = (Function) native.GetObjectProperty("clearSequenceTask");
			var results = (Array) clearSequenceTask.Call(native, taskSequenceId);
			return (results[0], (int) results[1]);
		}

		public void SetSequenceToRepeat(int taskSequenceId, bool repeat)
		{
			if (setSequenceToRepeat == null) setSequenceToRepeat = (Function) native.GetObjectProperty("setSequenceToRepeat");
			setSequenceToRepeat.Call(native, taskSequenceId, repeat);
		}

		/// <summary>
		/// returned values:
		/// 0 to 7 = task that's currently in progress, 0 meaning the first one.
		/// -1 no task sequence in progress.
		/// </summary>
		public int GetSequenceProgress(int ped)
		{
			if (getSequenceProgress == null) getSequenceProgress = (Function) native.GetObjectProperty("getSequenceProgress");
			return (int) getSequenceProgress.Call(native, ped);
		}

		/// <summary>
		/// Task index enum: https://pastebin.com/K5t9T3ky
		/// </summary>
		public bool GetIsTaskActive(int ped, int taskIndex)
		{
			if (getIsTaskActive == null) getIsTaskActive = (Function) native.GetObjectProperty("getIsTaskActive");
			return (bool) getIsTaskActive.Call(native, ped, taskIndex);
		}

		/// <summary>
		/// Gets the status of a script-assigned task.
		/// taskHash: hash of SCRIPT_ + task name (e.g. SCRIPT_TASK_GO_STRAIGHT_TO_COORD)
		/// </summary>
		/// <param name="taskHash">hash of SCRIPT_ + task name (e.g. SCRIPT_TASK_GO_STRAIGHT_TO_COORD)</param>
		public int GetScriptTaskStatus(int targetPed, int taskHash)
		{
			if (getScriptTaskStatus == null) getScriptTaskStatus = (Function) native.GetObjectProperty("getScriptTaskStatus");
			return (int) getScriptTaskStatus.Call(native, targetPed, taskHash);
		}

		public int GetActiveVehicleMissionType(int vehicle)
		{
			if (getActiveVehicleMissionType == null) getActiveVehicleMissionType = (Function) native.GetObjectProperty("getActiveVehicleMissionType");
			return (int) getActiveVehicleMissionType.Call(native, vehicle);
		}

		public void TaskLeaveAnyVehicle(int ped, int p1, int p2)
		{
			if (taskLeaveAnyVehicle == null) taskLeaveAnyVehicle = (Function) native.GetObjectProperty("taskLeaveAnyVehicle");
			taskLeaveAnyVehicle.Call(native, ped, p1, p2);
		}

		public void TaskAimGunScripted(int ped, int scriptTask, bool p2, bool p3)
		{
			if (taskAimGunScripted == null) taskAimGunScripted = (Function) native.GetObjectProperty("taskAimGunScripted");
			taskAimGunScripted.Call(native, ped, scriptTask, p2, p3);
		}

		public void TaskAimGunScriptedWithTarget(object p0, object p1, double p2, double p3, double p4, object p5, bool p6, bool p7)
		{
			if (taskAimGunScriptedWithTarget == null) taskAimGunScriptedWithTarget = (Function) native.GetObjectProperty("taskAimGunScriptedWithTarget");
			taskAimGunScriptedWithTarget.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public void UpdateTaskAimGunScriptedTarget(int p0, int p1, double p2, double p3, double p4, bool p5)
		{
			if (updateTaskAimGunScriptedTarget == null) updateTaskAimGunScriptedTarget = (Function) native.GetObjectProperty("updateTaskAimGunScriptedTarget");
			updateTaskAimGunScriptedTarget.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public string GetClipSetForScriptedGunTask(int p0)
		{
			if (getClipSetForScriptedGunTask == null) getClipSetForScriptedGunTask = (Function) native.GetObjectProperty("getClipSetForScriptedGunTask");
			return (string) getClipSetForScriptedGunTask.Call(native, p0);
		}

		/// <summary>
		/// duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
		/// </summary>
		/// <param name="duration">the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped</param>
		public void TaskAimGunAtEntity(int ped, int entity, int duration, bool p3)
		{
			if (taskAimGunAtEntity == null) taskAimGunAtEntity = (Function) native.GetObjectProperty("taskAimGunAtEntity");
			taskAimGunAtEntity.Call(native, ped, entity, duration, p3);
		}

		/// <summary>
		/// duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
		/// </summary>
		/// <param name="duration">the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped</param>
		public void TaskTurnPedToFaceEntity(int ped, int entity, int duration)
		{
			if (taskTurnPedToFaceEntity == null) taskTurnPedToFaceEntity = (Function) native.GetObjectProperty("taskTurnPedToFaceEntity");
			taskTurnPedToFaceEntity.Call(native, ped, entity, duration);
		}

		public void TaskAimGunAtCoord(int ped, double x, double y, double z, int time, bool p5, bool p6)
		{
			if (taskAimGunAtCoord == null) taskAimGunAtCoord = (Function) native.GetObjectProperty("taskAimGunAtCoord");
			taskAimGunAtCoord.Call(native, ped, x, y, z, time, p5, p6);
		}

		public void TaskShootAtCoord(int ped, double x, double y, double z, int duration, int firingPattern)
		{
			if (taskShootAtCoord == null) taskShootAtCoord = (Function) native.GetObjectProperty("taskShootAtCoord");
			taskShootAtCoord.Call(native, ped, x, y, z, duration, firingPattern);
		}

		/// <summary>
		/// Makes the specified ped shuffle to the next vehicle seat.
		/// The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
		/// </summary>
		public void TaskShuffleToNextVehicleSeat(int ped, int vehicle, object p2)
		{
			if (taskShuffleToNextVehicleSeat == null) taskShuffleToNextVehicleSeat = (Function) native.GetObjectProperty("taskShuffleToNextVehicleSeat");
			taskShuffleToNextVehicleSeat.Call(native, ped, vehicle, p2);
		}

		public void ClearPedTasks(int ped)
		{
			if (clearPedTasks == null) clearPedTasks = (Function) native.GetObjectProperty("clearPedTasks");
			clearPedTasks.Call(native, ped);
		}

		public void ClearPedSecondaryTask(int ped)
		{
			if (clearPedSecondaryTask == null) clearPedSecondaryTask = (Function) native.GetObjectProperty("clearPedSecondaryTask");
			clearPedSecondaryTask.Call(native, ped);
		}

		public void TaskEveryoneLeaveVehicle(int vehicle)
		{
			if (taskEveryoneLeaveVehicle == null) taskEveryoneLeaveVehicle = (Function) native.GetObjectProperty("taskEveryoneLeaveVehicle");
			taskEveryoneLeaveVehicle.Call(native, vehicle);
		}

		public void TaskGotoEntityOffset(int ped, object p1, object p2, double x, double y, double z, int duration)
		{
			if (taskGotoEntityOffset == null) taskGotoEntityOffset = (Function) native.GetObjectProperty("taskGotoEntityOffset");
			taskGotoEntityOffset.Call(native, ped, p1, p2, x, y, z, duration);
		}

		public void TaskGotoEntityOffsetXy(int p0, int oed, int duration, double p3, double p4, double p5, double p6, bool p7)
		{
			if (taskGotoEntityOffsetXy == null) taskGotoEntityOffsetXy = (Function) native.GetObjectProperty("taskGotoEntityOffsetXy");
			taskGotoEntityOffsetXy.Call(native, p0, oed, duration, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// duration in milliseconds
		/// </summary>
		/// <param name="duration">in milliseconds</param>
		public void TaskTurnPedToFaceCoord(int ped, double x, double y, double z, int duration)
		{
			if (taskTurnPedToFaceCoord == null) taskTurnPedToFaceCoord = (Function) native.GetObjectProperty("taskTurnPedToFaceCoord");
			taskTurnPedToFaceCoord.Call(native, ped, x, y, z, duration);
		}

		/// <summary>
		/// '1 - brake
		/// '3 - brake + reverse
		/// '4 - turn left 90 + braking
		/// '5 - turn right 90 + braking
		/// '6 - brake strong (handbrake?) until time ends
		/// '7 - turn left + accelerate
		/// '7 - turn right + accelerate
		/// '9 - weak acceleration
		/// '10 - turn left + restore wheel pos to center in the end
		/// See NativeDB for reference: http://natives.altv.mp/#/0xC429DCEEB339E129
		/// </summary>
		public void TaskVehicleTempAction(int driver, int vehicle, int action, int time)
		{
			if (taskVehicleTempAction == null) taskVehicleTempAction = (Function) native.GetObjectProperty("taskVehicleTempAction");
			taskVehicleTempAction.Call(native, driver, vehicle, action, time);
		}

		public void TaskVehicleMission(int p0, int p1, int veh, object p3, double p4, object p5, double p6, double p7, bool p8)
		{
			if (taskVehicleMission == null) taskVehicleMission = (Function) native.GetObjectProperty("taskVehicleMission");
			taskVehicleMission.Call(native, p0, p1, veh, p3, p4, p5, p6, p7, p8);
		}

		/// <summary>
		/// Modes:
		/// 8= flees
		/// 1=drives around the ped
		/// 4=drives and stops near
		/// 7=follows
		/// 10=follows to the left
		/// 11=follows to the  right
		/// 12 = follows behind
		/// 13=follows ahead
		/// 14=follows, stop when near
		/// </summary>
		public void TaskVehicleMissionPedTarget(int ped, int vehicle, int pedTarget, int mode, double maxSpeed, int drivingStyle, double minDistance, double p7, bool p8)
		{
			if (taskVehicleMissionPedTarget == null) taskVehicleMissionPedTarget = (Function) native.GetObjectProperty("taskVehicleMissionPedTarget");
			taskVehicleMissionPedTarget.Call(native, ped, vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, p7, p8);
		}

		/// <summary>
		/// Example from fm_mission_controller.c4:
		/// AI::TASK_VEHICLE_MISSION_COORS_TARGET(l_65E1, l_65E2, 324.84588623046875, 325.09619140625, 104.3525, 4, 15.0, 802987, 5.0, 5.0, 0);
		/// </summary>
		public void TaskVehicleMissionCoorsTarget(int ped, int vehicle, double x, double y, double z, int p5, int p6, int p7, double p8, double p9, bool p10)
		{
			if (taskVehicleMissionCoorsTarget == null) taskVehicleMissionCoorsTarget = (Function) native.GetObjectProperty("taskVehicleMissionCoorsTarget");
			taskVehicleMissionCoorsTarget.Call(native, ped, vehicle, x, y, z, p5, p6, p7, p8, p9, p10);
		}

		/// <summary>
		/// Makes a ped follow the targetVehicle with <minDistance> in between.
		/// note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
		/// Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
		/// -1 = behind
		/// 0 = ahead
		/// 1 = left
		/// 2 = right
		/// 3 = back left
		/// 4 = back right
		/// See NativeDB for reference: http://natives.altv.mp/#/0x0FA6E4B75F302400
		/// </summary>
		/// <param name="mode">Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.</param>
		public void TaskVehicleEscort(int ped, int vehicle, int targetVehicle, int mode, double speed, int drivingStyle, double minDistance, int p7, double noRoadsDistance)
		{
			if (taskVehicleEscort == null) taskVehicleEscort = (Function) native.GetObjectProperty("taskVehicleEscort");
			taskVehicleEscort.Call(native, ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);
		}

		/// <summary>
		/// Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
		/// drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
		/// </summary>
		/// <param name="drivingStyle">http://gtaforums.com/topic/822314-guide-driving-styles/</param>
		public void TaskVehicleFollow(int driver, int vehicle, int targetEntity, double speed, int drivingStyle, int minDistance)
		{
			if (taskVehicleFollow == null) taskVehicleFollow = (Function) native.GetObjectProperty("taskVehicleFollow");
			taskVehicleFollow.Call(native, driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
		}

		/// <summary>
		/// chases targetEnt fast and aggressively
		/// --
		/// Makes ped (needs to be in vehicle) chase targetEnt.
		/// </summary>
		public void TaskVehicleChase(int driver, int targetEnt)
		{
			if (taskVehicleChase == null) taskVehicleChase = (Function) native.GetObjectProperty("taskVehicleChase");
			taskVehicleChase.Call(native, driver, targetEnt);
		}

		/// <summary>
		/// pilot, vehicle and altitude are rather self-explanatory.
		/// p4: is unused variable in the function.
		/// entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
		/// 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
		/// 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
		/// NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
		/// NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
		/// </summary>
		/// <param name="entityToFollow">you can provide a Vehicle entity or a Ped entity, the heli will protect them.</param>
		/// <param name="p4">is unused variable in the function.</param>
		public void TaskVehicleHeliProtect(int pilot, int vehicle, int entityToFollow, double targetSpeed, int p4, double radius, int altitude, int p7)
		{
			if (taskVehicleHeliProtect == null) taskVehicleHeliProtect = (Function) native.GetObjectProperty("taskVehicleHeliProtect");
			taskVehicleHeliProtect.Call(native, pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7);
		}

		public void SetTaskVehicleChaseBehaviorFlag(int ped, int flag, bool set)
		{
			if (setTaskVehicleChaseBehaviorFlag == null) setTaskVehicleChaseBehaviorFlag = (Function) native.GetObjectProperty("setTaskVehicleChaseBehaviorFlag");
			setTaskVehicleChaseBehaviorFlag.Call(native, ped, flag, set);
		}

		public void SetTaskVehicleChaseIdealPursuitDistance(int ped, double distance)
		{
			if (setTaskVehicleChaseIdealPursuitDistance == null) setTaskVehicleChaseIdealPursuitDistance = (Function) native.GetObjectProperty("setTaskVehicleChaseIdealPursuitDistance");
			setTaskVehicleChaseIdealPursuitDistance.Call(native, ped, distance);
		}

		/// <summary>
		/// Ped pilot should be in a heli.
		/// EntityToFollow can be a vehicle or Ped.
		/// x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
		/// NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
		/// </summary>
		/// <param name="entityToFollow">EntityToFollow can be a vehicle or Ped.</param>
		public void TaskHeliChase(int pilot, int entityToFollow, double x, double y, double z)
		{
			if (taskHeliChase == null) taskHeliChase = (Function) native.GetObjectProperty("taskHeliChase");
			taskHeliChase.Call(native, pilot, entityToFollow, x, y, z);
		}

		public void TaskPlaneChase(int pilot, int entityToFollow, double x, double y, double z)
		{
			if (taskPlaneChase == null) taskPlaneChase = (Function) native.GetObjectProperty("taskPlaneChase");
			taskPlaneChase.Call(native, pilot, entityToFollow, x, y, z);
		}

		public void TaskPlaneLand(int pilot, int plane, double runwayStartX, double runwayStartY, double runwayStartZ, double runwayEndX, double runwayEndY, double runwayEndZ)
		{
			if (taskPlaneLand == null) taskPlaneLand = (Function) native.GetObjectProperty("taskPlaneLand");
			taskPlaneLand.Call(native, pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
		}

		/// <summary>
		/// CLEAR_*
		/// </summary>
		public void _0xDBBC7A2432524127(int vehicle)
		{
			if (__0xDBBC7A2432524127 == null) __0xDBBC7A2432524127 = (Function) native.GetObjectProperty("_0xDBBC7A2432524127");
			__0xDBBC7A2432524127.Call(native, vehicle);
		}

		/// <summary>
		/// CLEAR_*
		/// </summary>
		public void _0x53DDC75BC3AC0A90(int vehicle)
		{
			if (__0x53DDC75BC3AC0A90 == null) __0x53DDC75BC3AC0A90 = (Function) native.GetObjectProperty("_0x53DDC75BC3AC0A90");
			__0x53DDC75BC3AC0A90.Call(native, vehicle);
		}

		public void TaskPlaneGotoPreciseVtol(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (taskPlaneGotoPreciseVtol == null) taskPlaneGotoPreciseVtol = (Function) native.GetObjectProperty("taskPlaneGotoPreciseVtol");
			taskPlaneGotoPreciseVtol.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		/// <summary>
		/// Needs more research.
		/// Default value of p13 is -1.0 or 0xBF800000.
		/// Default value of p14 is 0.
		/// Modified examples from "fm_mission_controller.ysc", line ~203551:
		/// AI::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 10, 10, 5.0, 0);
		/// AI::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 0, ?, 5.0, 4096);
		/// int mode seams to set mission type 4 = coords target, 23 = ped target.
		/// int 14 set to 32 = ped will land at destination.
		/// My findings:
		/// See NativeDB for reference: http://natives.altv.mp/#/0xDAD029E187A2BEB4
		/// </summary>
		public void TaskHeliMission(int pilot, int aircraft, int targetVehicle, int targetPed, double destinationX, double destinationY, double destinationZ, int missionFlag, double maxSpeed, double landingRadius, double targetHeading, int unk1, int unk2, int unk3, int landingFlags)
		{
			if (taskHeliMission == null) taskHeliMission = (Function) native.GetObjectProperty("taskHeliMission");
			taskHeliMission.Call(native, pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, landingRadius, targetHeading, unk1, unk2, unk3, landingFlags);
		}

		public void TaskHeliEscortHeli(int pilot, int heli1, int heli2, double p3, double p4, double p5)
		{
			if (taskHeliEscortHeli == null) taskHeliEscortHeli = (Function) native.GetObjectProperty("taskHeliEscortHeli");
			taskHeliEscortHeli.Call(native, pilot, heli1, heli2, p3, p4, p5);
		}

		/// <summary>
		/// EXAMPLE USAGE:
		/// Fly around target (Precautiously, keeps high altitude):
		/// Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
		/// Fly around target (Dangerously, keeps VERY low altitude):
		/// Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
		/// Fly directly into target:
		/// Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
		/// EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
		/// 'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
		/// See NativeDB for reference: http://natives.altv.mp/#/0x23703CD154E83B88
		/// </summary>
		public void TaskPlaneMission(int pilot, int aircraft, int targetVehicle, int targetPed, double destinationX, double destinationY, double destinationZ, int missionFlag, double angularDrag, double unk, double targetHeading, double maxZ, double minZ, object p13)
		{
			if (taskPlaneMission == null) taskPlaneMission = (Function) native.GetObjectProperty("taskPlaneMission");
			taskPlaneMission.Call(native, pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13);
		}

		public void TaskPlaneTaxi(object p0, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (taskPlaneTaxi == null) taskPlaneTaxi = (Function) native.GetObjectProperty("taskPlaneTaxi");
			taskPlaneTaxi.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.
		/// Working example
		/// float vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
		/// AI::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
		/// PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);
		/// P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
		/// </summary>
		/// <param name="maxSpeed">float vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));</param>
		public void TaskBoatMission(int pedDriver, int boat, object p2, object p3, double x, double y, double z, object p7, double maxSpeed, int drivingStyle, double p10, object p11)
		{
			if (taskBoatMission == null) taskBoatMission = (Function) native.GetObjectProperty("taskBoatMission");
			taskBoatMission.Call(native, pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11);
		}

		/// <summary>
		/// Example:
		/// AI::TASK_DRIVE_BY(l_467[122], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
		/// Needs working example. Doesn't seem to do anything.
		/// I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
		/// I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
		/// I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
		/// </summary>
		public void TaskDriveBy(int driverPed, int targetPed, int targetVehicle, double targetX, double targetY, double targetZ, double distanceToShoot, int pedAccuracy, bool p8, int firingPattern)
		{
			if (taskDriveBy == null) taskDriveBy = (Function) native.GetObjectProperty("taskDriveBy");
			taskDriveBy.Call(native, driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern);
		}

		/// <summary>
		/// For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
		/// </summary>
		public void SetDrivebyTaskTarget(int shootingPed, int targetPed, int targetVehicle, double x, double y, double z)
		{
			if (setDrivebyTaskTarget == null) setDrivebyTaskTarget = (Function) native.GetObjectProperty("setDrivebyTaskTarget");
			setDrivebyTaskTarget.Call(native, shootingPed, targetPed, targetVehicle, x, y, z);
		}

		public void ClearDrivebyTaskUnderneathDrivingTask(int ped)
		{
			if (clearDrivebyTaskUnderneathDrivingTask == null) clearDrivebyTaskUnderneathDrivingTask = (Function) native.GetObjectProperty("clearDrivebyTaskUnderneathDrivingTask");
			clearDrivebyTaskUnderneathDrivingTask.Call(native, ped);
		}

		public bool IsDrivebyTaskUnderneathDrivingTask(int ped)
		{
			if (isDrivebyTaskUnderneathDrivingTask == null) isDrivebyTaskUnderneathDrivingTask = (Function) native.GetObjectProperty("isDrivebyTaskUnderneathDrivingTask");
			return (bool) isDrivebyTaskUnderneathDrivingTask.Call(native, ped);
		}

		/// <summary>
		/// Forces the ped to use the mounted weapon.
		/// </summary>
		/// <returns>Returns false if task is not possible.</returns>
		public bool ControlMountedWeapon(int ped)
		{
			if (controlMountedWeapon == null) controlMountedWeapon = (Function) native.GetObjectProperty("controlMountedWeapon");
			return (bool) controlMountedWeapon.Call(native, ped);
		}

		/// <summary>
		/// Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
		/// </summary>
		public void SetMountedWeaponTarget(int shootingPed, int targetPed, int targetVehicle, double x, double y, double z, object p6, object p7)
		{
			if (setMountedWeaponTarget == null) setMountedWeaponTarget = (Function) native.GetObjectProperty("setMountedWeaponTarget");
			setMountedWeaponTarget.Call(native, shootingPed, targetPed, targetVehicle, x, y, z, p6, p7);
		}

		public bool IsMountedWeaponTaskUnderneathDrivingTask(int ped)
		{
			if (isMountedWeaponTaskUnderneathDrivingTask == null) isMountedWeaponTaskUnderneathDrivingTask = (Function) native.GetObjectProperty("isMountedWeaponTaskUnderneathDrivingTask");
			return (bool) isMountedWeaponTaskUnderneathDrivingTask.Call(native, ped);
		}

		/// <summary>
		/// Actually has 3 params, not 2.
		/// p0: Ped
		/// p1: int (or bool?)
		/// p2: int
		/// </summary>
		/// <param name="p1">int (or bool?)</param>
		/// <param name="p2">int</param>
		public void TaskUseMobilePhone(int ped, int p1, object p2)
		{
			if (taskUseMobilePhone == null) taskUseMobilePhone = (Function) native.GetObjectProperty("taskUseMobilePhone");
			taskUseMobilePhone.Call(native, ped, p1, p2);
		}

		public void TaskUseMobilePhoneTimed(int ped, int duration)
		{
			if (taskUseMobilePhoneTimed == null) taskUseMobilePhoneTimed = (Function) native.GetObjectProperty("taskUseMobilePhoneTimed");
			taskUseMobilePhoneTimed.Call(native, ped, duration);
		}

		/// <summary>
		/// p2 tend to be 16, 17 or 1
		/// p3 to p7 tend to be 0.0
		/// </summary>
		/// <param name="p2">tend to be 16, 17 or 1</param>
		/// <param name="p3">to p7 tend to be 0.0</param>
		public void TaskChatToPed(int ped, int target, object p2, double p3, double p4, double p5, double p6, double p7)
		{
			if (taskChatToPed == null) taskChatToPed = (Function) native.GetObjectProperty("taskChatToPed");
			taskChatToPed.Call(native, ped, target, p2, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// Seat Numbers
		/// -------------------------------
		/// Driver = -1
		/// Any = -2
		/// Left-Rear = 1
		/// Right-Front = 0
		/// Right-Rear = 2
		/// Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
		/// </summary>
		/// <param name="seat">Seat Numbers</param>
		public void TaskWarpPedIntoVehicle(int ped, int vehicle, int seat)
		{
			if (taskWarpPedIntoVehicle == null) taskWarpPedIntoVehicle = (Function) native.GetObjectProperty("taskWarpPedIntoVehicle");
			taskWarpPedIntoVehicle.Call(native, ped, vehicle, seat);
		}

		/// <summary>
		/// //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
		/// Entity aimedentity;
		/// Player player = PLAYER::PLAYER_ID();
		/// PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);
		/// //bg is an array of peds
		/// AI::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, GAMEPLAY::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
		/// in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
		/// </summary>
		/// <param name="entity">Entity aimedentity;</param>
		public void TaskShootAtEntity(int entity, int target, int duration, int firingPattern)
		{
			if (taskShootAtEntity == null) taskShootAtEntity = (Function) native.GetObjectProperty("taskShootAtEntity");
			taskShootAtEntity.Call(native, entity, target, duration, firingPattern);
		}

		/// <summary>
		/// Climbs or vaults the nearest thing.
		/// </summary>
		public void TaskClimb(int ped, bool unused)
		{
			if (taskClimb == null) taskClimb = (Function) native.GetObjectProperty("taskClimb");
			taskClimb.Call(native, ped, unused);
		}

		public void TaskClimbLadder(int ped, int p1)
		{
			if (taskClimbLadder == null) taskClimbLadder = (Function) native.GetObjectProperty("taskClimbLadder");
			taskClimbLadder.Call(native, ped, p1);
		}

		/// <summary>
		/// Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
		/// </summary>
		public void ClearPedTasksImmediately(int ped)
		{
			if (clearPedTasksImmediately == null) clearPedTasksImmediately = (Function) native.GetObjectProperty("clearPedTasksImmediately");
			clearPedTasksImmediately.Call(native, ped);
		}

		public void TaskPerformSequenceFromProgress(object p0, object p1, object p2, object p3)
		{
			if (taskPerformSequenceFromProgress == null) taskPerformSequenceFromProgress = (Function) native.GetObjectProperty("taskPerformSequenceFromProgress");
			taskPerformSequenceFromProgress.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// Not used in the scripts.
		/// Bullshit! It's used in spawn_activities
		/// </summary>
		public void SetNextDesiredMoveState(double p0)
		{
			if (setNextDesiredMoveState == null) setNextDesiredMoveState = (Function) native.GetObjectProperty("setNextDesiredMoveState");
			setNextDesiredMoveState.Call(native, p0);
		}

		public void SetPedDesiredMoveBlendRatio(int ped, double p1)
		{
			if (setPedDesiredMoveBlendRatio == null) setPedDesiredMoveBlendRatio = (Function) native.GetObjectProperty("setPedDesiredMoveBlendRatio");
			setPedDesiredMoveBlendRatio.Call(native, ped, p1);
		}

		public double GetPedDesiredMoveBlendRatio(int ped)
		{
			if (getPedDesiredMoveBlendRatio == null) getPedDesiredMoveBlendRatio = (Function) native.GetObjectProperty("getPedDesiredMoveBlendRatio");
			return (double) getPedDesiredMoveBlendRatio.Call(native, ped);
		}

		/// <summary>
		/// eg
		/// AI::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);
		/// ped = Ped you want to perform this task.
		/// target = the Entity they should aim at.
		/// distanceToStopAt = distance from the target, where the ped should stop to aim.
		/// StartAimingDist = distance where the ped should start to aim.
		/// </summary>
		/// <param name="ped">Ped you want to perform this task.</param>
		/// <param name="target">the Entity they should aim at.</param>
		/// <param name="distanceToStopAt">distance from the target, where the ped should stop to aim.</param>
		/// <param name="StartAimingDist">distance where the ped should start to aim.</param>
		public void TaskGotoEntityAiming(int ped, int target, double distanceToStopAt, double StartAimingDist)
		{
			if (taskGotoEntityAiming == null) taskGotoEntityAiming = (Function) native.GetObjectProperty("taskGotoEntityAiming");
			taskGotoEntityAiming.Call(native, ped, target, distanceToStopAt, StartAimingDist);
		}

		/// <summary>
		/// p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
		/// </summary>
		/// <param name="p1">is always GET_HASH_KEY("empty") in scripts, for the rare times this is used</param>
		public void TaskSetDecisionMaker(int ped, int p1)
		{
			if (taskSetDecisionMaker == null) taskSetDecisionMaker = (Function) native.GetObjectProperty("taskSetDecisionMaker");
			taskSetDecisionMaker.Call(native, ped, p1);
		}

		public void TaskSetSphereDefensiveArea(object p0, double p1, double p2, double p3, double p4)
		{
			if (taskSetSphereDefensiveArea == null) taskSetSphereDefensiveArea = (Function) native.GetObjectProperty("taskSetSphereDefensiveArea");
			taskSetSphereDefensiveArea.Call(native, p0, p1, p2, p3, p4);
		}

		public void TaskClearDefensiveArea(object p0)
		{
			if (taskClearDefensiveArea == null) taskClearDefensiveArea = (Function) native.GetObjectProperty("taskClearDefensiveArea");
			taskClearDefensiveArea.Call(native, p0);
		}

		public void TaskPedSlideToCoord(int ped, double x, double y, double z, double heading, double p5)
		{
			if (taskPedSlideToCoord == null) taskPedSlideToCoord = (Function) native.GetObjectProperty("taskPedSlideToCoord");
			taskPedSlideToCoord.Call(native, ped, x, y, z, heading, p5);
		}

		public void TaskPedSlideToCoordHdgRate(int ped, double x, double y, double z, double heading, double p5, double p6)
		{
			if (taskPedSlideToCoordHdgRate == null) taskPedSlideToCoordHdgRate = (Function) native.GetObjectProperty("taskPedSlideToCoordHdgRate");
			taskPedSlideToCoordHdgRate.Call(native, ped, x, y, z, heading, p5, p6);
		}

		public int AddCoverPoint(double p0, double p1, double p2, double p3, object p4, object p5, object p6, bool p7)
		{
			if (addCoverPoint == null) addCoverPoint = (Function) native.GetObjectProperty("addCoverPoint");
			return (int) addCoverPoint.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		public void RemoveCoverPoint(int coverpoint)
		{
			if (removeCoverPoint == null) removeCoverPoint = (Function) native.GetObjectProperty("removeCoverPoint");
			removeCoverPoint.Call(native, coverpoint);
		}

		/// <summary>
		/// Checks if there is a cover point at position
		/// </summary>
		public bool DoesScriptedCoverPointExistAtCoords(double x, double y, double z)
		{
			if (doesScriptedCoverPointExistAtCoords == null) doesScriptedCoverPointExistAtCoords = (Function) native.GetObjectProperty("doesScriptedCoverPointExistAtCoords");
			return (bool) doesScriptedCoverPointExistAtCoords.Call(native, x, y, z);
		}

		public Vector3 GetScriptedCoverPointCoords(int coverpoint)
		{
			if (getScriptedCoverPointCoords == null) getScriptedCoverPointCoords = (Function) native.GetObjectProperty("getScriptedCoverPointCoords");
			return JSObjectToVector3(getScriptedCoverPointCoords.Call(native, coverpoint));
		}

		/// <summary>
		/// Makes the specified ped attack the target ped.
		/// p2 should be 0
		/// p3 should be 16
		/// </summary>
		/// <param name="p2">should be 0</param>
		/// <param name="p3">should be 16</param>
		public void TaskCombatPed(int ped, int targetPed, int p2, int p3)
		{
			if (taskCombatPed == null) taskCombatPed = (Function) native.GetObjectProperty("taskCombatPed");
			taskCombatPed.Call(native, ped, targetPed, p2, p3);
		}

		public void TaskCombatPedTimed(object p0, int ped, int p2, object p3)
		{
			if (taskCombatPedTimed == null) taskCombatPedTimed = (Function) native.GetObjectProperty("taskCombatPedTimed");
			taskCombatPedTimed.Call(native, p0, ped, p2, p3);
		}

		public void TaskSeekCoverFromPos(int ped, double x, double y, double z, int duration, bool p5)
		{
			if (taskSeekCoverFromPos == null) taskSeekCoverFromPos = (Function) native.GetObjectProperty("taskSeekCoverFromPos");
			taskSeekCoverFromPos.Call(native, ped, x, y, z, duration, p5);
		}

		public void TaskSeekCoverFromPed(int ped, int target, int duration, bool p3)
		{
			if (taskSeekCoverFromPed == null) taskSeekCoverFromPed = (Function) native.GetObjectProperty("taskSeekCoverFromPed");
			taskSeekCoverFromPed.Call(native, ped, target, duration, p3);
		}

		public void TaskSeekCoverToCoverPoint(object p0, object p1, double p2, double p3, double p4, object p5, bool p6)
		{
			if (taskSeekCoverToCoverPoint == null) taskSeekCoverToCoverPoint = (Function) native.GetObjectProperty("taskSeekCoverToCoverPoint");
			taskSeekCoverToCoverPoint.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// from michael2:
		/// AI::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);
		/// appears to be shorter variation
		/// from michael3:
		/// AI::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
		/// </summary>
		public void TaskSeekCoverToCoords(int ped, double x1, double y1, double z1, double x2, double y2, double z2, object p7, bool p8)
		{
			if (taskSeekCoverToCoords == null) taskSeekCoverToCoords = (Function) native.GetObjectProperty("taskSeekCoverToCoords");
			taskSeekCoverToCoords.Call(native, ped, x1, y1, z1, x2, y2, z2, p7, p8);
		}

		public void TaskPutPedDirectlyIntoCover(int ped, double x, double y, double z, object timeout, bool p5, double p6, bool p7, bool p8, object p9, bool p10)
		{
			if (taskPutPedDirectlyIntoCover == null) taskPutPedDirectlyIntoCover = (Function) native.GetObjectProperty("taskPutPedDirectlyIntoCover");
			taskPutPedDirectlyIntoCover.Call(native, ped, x, y, z, timeout, p5, p6, p7, p8, p9, p10);
		}

		public void TaskExitCover(object p0, object p1, double p2, double p3, double p4)
		{
			if (taskExitCover == null) taskExitCover = (Function) native.GetObjectProperty("taskExitCover");
			taskExitCover.Call(native, p0, p1, p2, p3, p4);
		}

		/// <summary>
		/// from armenian3.c4
		/// AI::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
		/// </summary>
		public void TaskPutPedDirectlyIntoMelee(int ped, int meleeTarget, double p2, double p3, double p4, bool p5)
		{
			if (taskPutPedDirectlyIntoMelee == null) taskPutPedDirectlyIntoMelee = (Function) native.GetObjectProperty("taskPutPedDirectlyIntoMelee");
			taskPutPedDirectlyIntoMelee.Call(native, ped, meleeTarget, p2, p3, p4, p5);
		}

		/// <summary>
		/// used in sequence task
		/// both parameters seems to be always 0
		/// </summary>
		public void TaskToggleDuck(bool p0, bool p1)
		{
			if (taskToggleDuck == null) taskToggleDuck = (Function) native.GetObjectProperty("taskToggleDuck");
			taskToggleDuck.Call(native, p0, p1);
		}

		/// <summary>
		/// From re_prisonvanbreak:
		/// AI::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
		/// </summary>
		public void TaskGuardCurrentPosition(int p0, double p1, double p2, bool p3)
		{
			if (taskGuardCurrentPosition == null) taskGuardCurrentPosition = (Function) native.GetObjectProperty("taskGuardCurrentPosition");
			taskGuardCurrentPosition.Call(native, p0, p1, p2, p3);
		}

		public void TaskGuardAssignedDefensiveArea(object p0, double p1, double p2, double p3, double p4, double p5, object p6)
		{
			if (taskGuardAssignedDefensiveArea == null) taskGuardAssignedDefensiveArea = (Function) native.GetObjectProperty("taskGuardAssignedDefensiveArea");
			taskGuardAssignedDefensiveArea.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// p0 - Guessing PedID
		/// p1, p2, p3 - XYZ?
		/// p4 - ???
		/// p5 - Maybe the size of sphere from XYZ?
		/// p6 - ???
		/// p7, p8, p9 - XYZ again?
		/// p10 - Maybe the size of sphere from second XYZ?
		/// </summary>
		/// <param name="p0">Guessing PedID</param>
		/// <param name="p3">p1, p2, XYZ?</param>
		/// <param name="p4">???</param>
		/// <param name="p5">Maybe the size of sphere from XYZ?</param>
		/// <param name="p6">???</param>
		/// <param name="p9">p7, p8, XYZ again?</param>
		/// <param name="p10">Maybe the size of sphere from second XYZ?</param>
		public void TaskGuardSphereDefensiveArea(int p0, double p1, double p2, double p3, double p4, double p5, object p6, double p7, double p8, double p9, double p10)
		{
			if (taskGuardSphereDefensiveArea == null) taskGuardSphereDefensiveArea = (Function) native.GetObjectProperty("taskGuardSphereDefensiveArea");
			taskGuardSphereDefensiveArea.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		}

		/// <summary>
		/// scenarioName example: "WORLD_HUMAN_GUARD_STAND"
		/// </summary>
		/// <param name="scenarioName">example: "WORLD_HUMAN_GUARD_STAND"</param>
		public void TaskStandGuard(int ped, double x, double y, double z, double heading, string scenarioName)
		{
			if (taskStandGuard == null) taskStandGuard = (Function) native.GetObjectProperty("taskStandGuard");
			taskStandGuard.Call(native, ped, x, y, z, heading, scenarioName);
		}

		public void SetDriveTaskCruiseSpeed(int driver, double cruiseSpeed)
		{
			if (setDriveTaskCruiseSpeed == null) setDriveTaskCruiseSpeed = (Function) native.GetObjectProperty("setDriveTaskCruiseSpeed");
			setDriveTaskCruiseSpeed.Call(native, driver, cruiseSpeed);
		}

		public void SetDriveTaskMaxCruiseSpeed(object p0, double p1)
		{
			if (setDriveTaskMaxCruiseSpeed == null) setDriveTaskMaxCruiseSpeed = (Function) native.GetObjectProperty("setDriveTaskMaxCruiseSpeed");
			setDriveTaskMaxCruiseSpeed.Call(native, p0, p1);
		}

		/// <summary>
		/// This native is used to set the driving style for specific ped.
		/// Driving styles id seems to be:
		/// 786468
		/// 262144
		/// 786469
		/// http://gtaforums.com/topic/822314-guide-driving-styles/
		/// </summary>
		public void SetDriveTaskDrivingStyle(int ped, int drivingStyle)
		{
			if (setDriveTaskDrivingStyle == null) setDriveTaskDrivingStyle = (Function) native.GetObjectProperty("setDriveTaskDrivingStyle");
			setDriveTaskDrivingStyle.Call(native, ped, drivingStyle);
		}

		public void AddCoverBlockingArea(double playerX, double playerY, double playerZ, double radiusX, double radiusY, double radiusZ, bool p6, bool p7, bool p8, bool p9)
		{
			if (addCoverBlockingArea == null) addCoverBlockingArea = (Function) native.GetObjectProperty("addCoverBlockingArea");
			addCoverBlockingArea.Call(native, playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9);
		}

		public void RemoveAllCoverBlockingAreas()
		{
			if (removeAllCoverBlockingAreas == null) removeAllCoverBlockingAreas = (Function) native.GetObjectProperty("removeAllCoverBlockingAreas");
			removeAllCoverBlockingAreas.Call(native);
		}

		/// <summary>
		/// REMOVE_*
		/// </summary>
		public void _0xFA83CA6776038F64(double x, double y, double z)
		{
			if (__0xFA83CA6776038F64 == null) __0xFA83CA6776038F64 = (Function) native.GetObjectProperty("_0xFA83CA6776038F64");
			__0xFA83CA6776038F64.Call(native, x, y, z);
		}

		public void _0x1F351CF1C6475734(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9)
		{
			if (__0x1F351CF1C6475734 == null) __0x1F351CF1C6475734 = (Function) native.GetObjectProperty("_0x1F351CF1C6475734");
			__0x1F351CF1C6475734.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}

		/// <summary>
		/// Plays a scenario on a Ped at their current location.
		/// unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
		/// playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
		/// ----
		/// From "am_hold_up.ysc.c4" at line 339:
		/// AI::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);
		/// WORLD_HUMAN_SMOKING
		/// WORLD_HUMAN_HANG_OUT_STREET
		/// WORLD_HUMAN_STAND_MOBILE
		/// See NativeDB for reference: http://natives.altv.mp/#/0x142A02425FF02BD9
		/// </summary>
		/// <param name="unkDelay">Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.</param>
		/// <param name="playEnterAnim">Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.</param>
		/// <returns>I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:</returns>
		public void TaskStartScenarioInPlace(int ped, string scenarioName, int unkDelay, bool playEnterAnim)
		{
			if (taskStartScenarioInPlace == null) taskStartScenarioInPlace = (Function) native.GetObjectProperty("taskStartScenarioInPlace");
			taskStartScenarioInPlace.Call(native, ped, scenarioName, unkDelay, playEnterAnim);
		}

		/// <summary>
		/// List of scenarioNames: pastebin.com/6mrYTdQv
		/// Also a few more listed at AI::TASK_START_SCENARIO_IN_PLACE just above.
		/// ---------------
		/// The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.
		/// The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
		/// I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
		/// I have no idea what the last 3 parameters are, but I'll try to find out.
		/// -going on the last 3 parameters, they appear to always be "0, 0, 1"
		/// p6 -1 also used in scrips
		/// See NativeDB for reference: http://natives.altv.mp/#/0xFA4EFC79F69D4F07
		/// </summary>
		public void TaskStartScenarioAtPosition(int ped, string scenarioName, double x, double y, double z, double heading, int duration, bool sittingScenario, bool teleport)
		{
			if (taskStartScenarioAtPosition == null) taskStartScenarioAtPosition = (Function) native.GetObjectProperty("taskStartScenarioAtPosition");
			taskStartScenarioAtPosition.Call(native, ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport);
		}

		/// <summary>
		/// Updated variables
		/// An alternative to AI::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
		/// </summary>
		public void TaskUseNearestScenarioToCoord(int ped, double x, double y, double z, double distance, int duration)
		{
			if (taskUseNearestScenarioToCoord == null) taskUseNearestScenarioToCoord = (Function) native.GetObjectProperty("taskUseNearestScenarioToCoord");
			taskUseNearestScenarioToCoord.Call(native, ped, x, y, z, distance, duration);
		}

		public void TaskUseNearestScenarioToCoordWarp(int ped, double x, double y, double z, double radius, object p5)
		{
			if (taskUseNearestScenarioToCoordWarp == null) taskUseNearestScenarioToCoordWarp = (Function) native.GetObjectProperty("taskUseNearestScenarioToCoordWarp");
			taskUseNearestScenarioToCoordWarp.Call(native, ped, x, y, z, radius, p5);
		}

		public void TaskUseNearestScenarioChainToCoord(object p0, double p1, double p2, double p3, double p4, object p5)
		{
			if (taskUseNearestScenarioChainToCoord == null) taskUseNearestScenarioChainToCoord = (Function) native.GetObjectProperty("taskUseNearestScenarioChainToCoord");
			taskUseNearestScenarioChainToCoord.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void TaskUseNearestScenarioChainToCoordWarp(object p0, double p1, double p2, double p3, double p4, object p5)
		{
			if (taskUseNearestScenarioChainToCoordWarp == null) taskUseNearestScenarioChainToCoordWarp = (Function) native.GetObjectProperty("taskUseNearestScenarioChainToCoordWarp");
			taskUseNearestScenarioChainToCoordWarp.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public bool DoesScenarioExistInArea(double x, double y, double z, double radius, bool b)
		{
			if (doesScenarioExistInArea == null) doesScenarioExistInArea = (Function) native.GetObjectProperty("doesScenarioExistInArea");
			return (bool) doesScenarioExistInArea.Call(native, x, y, z, radius, b);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) DoesScenarioOfTypeExistInArea(double p0, double p1, double p2, object p3, double p4, bool p5)
		{
			if (doesScenarioOfTypeExistInArea == null) doesScenarioOfTypeExistInArea = (Function) native.GetObjectProperty("doesScenarioOfTypeExistInArea");
			var results = (Array) doesScenarioOfTypeExistInArea.Call(native, p0, p1, p2, p3, p4, p5);
			return ((bool) results[0], results[1]);
		}

		public bool IsScenarioOccupied(double p0, double p1, double p2, double p3, bool p4)
		{
			if (isScenarioOccupied == null) isScenarioOccupied = (Function) native.GetObjectProperty("isScenarioOccupied");
			return (bool) isScenarioOccupied.Call(native, p0, p1, p2, p3, p4);
		}

		public bool PedHasUseScenarioTask(int ped)
		{
			if (pedHasUseScenarioTask == null) pedHasUseScenarioTask = (Function) native.GetObjectProperty("pedHasUseScenarioTask");
			return (bool) pedHasUseScenarioTask.Call(native, ped);
		}

		/// <summary>
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		public void PlayAnimOnRunningScenario(int ped, string animDict, string animName)
		{
			if (playAnimOnRunningScenario == null) playAnimOnRunningScenario = (Function) native.GetObjectProperty("playAnimOnRunningScenario");
			playAnimOnRunningScenario.Call(native, ped, animDict, animName);
		}

		/// <summary>
		/// Occurrences in the b617d scripts:
		/// "ARMY_GUARD",
		/// "ARMY_HELI",
		/// "Cinema_Downtown",
		/// "Cinema_Morningwood",
		/// "Cinema_Textile",
		/// "City_Banks",
		/// "Countryside_Banks",
		/// "DEALERSHIP",
		/// See NativeDB for reference: http://natives.altv.mp/#/0xF9034C136C9E00D3
		/// </summary>
		public bool DoesScenarioGroupExist(string scenarioGroup)
		{
			if (doesScenarioGroupExist == null) doesScenarioGroupExist = (Function) native.GetObjectProperty("doesScenarioGroupExist");
			return (bool) doesScenarioGroupExist.Call(native, scenarioGroup);
		}

		/// <summary>
		/// Occurrences in the b617d scripts:
		/// "ARMY_GUARD",
		/// "ARMY_HELI",
		/// "BLIMP",
		/// "Cinema_Downtown",
		/// "Cinema_Morningwood",
		/// "Cinema_Textile",
		/// "City_Banks",
		/// "Countryside_Banks",
		/// See NativeDB for reference: http://natives.altv.mp/#/0x367A09DED4E05B99
		/// </summary>
		public bool IsScenarioGroupEnabled(string scenarioGroup)
		{
			if (isScenarioGroupEnabled == null) isScenarioGroupEnabled = (Function) native.GetObjectProperty("isScenarioGroupEnabled");
			return (bool) isScenarioGroupEnabled.Call(native, scenarioGroup);
		}

		/// <summary>
		/// Occurrences in the b617d scripts: pastebin.com/Tvg2PRHU
		/// </summary>
		public void SetScenarioGroupEnabled(string scenarioGroup, bool p1)
		{
			if (setScenarioGroupEnabled == null) setScenarioGroupEnabled = (Function) native.GetObjectProperty("setScenarioGroupEnabled");
			setScenarioGroupEnabled.Call(native, scenarioGroup, p1);
		}

		public void ResetScenarioGroupsEnabled()
		{
			if (resetScenarioGroupsEnabled == null) resetScenarioGroupsEnabled = (Function) native.GetObjectProperty("resetScenarioGroupsEnabled");
			resetScenarioGroupsEnabled.Call(native);
		}

		/// <summary>
		/// Groups found in the scripts used with this native:
		/// "AMMUNATION",
		/// "QUARRY",
		/// "Triathlon_1",
		/// "Triathlon_2",
		/// "Triathlon_3"
		/// </summary>
		public void SetExclusiveScenarioGroup(string scenarioGroup)
		{
			if (setExclusiveScenarioGroup == null) setExclusiveScenarioGroup = (Function) native.GetObjectProperty("setExclusiveScenarioGroup");
			setExclusiveScenarioGroup.Call(native, scenarioGroup);
		}

		public void ResetExclusiveScenarioGroup()
		{
			if (resetExclusiveScenarioGroup == null) resetExclusiveScenarioGroup = (Function) native.GetObjectProperty("resetExclusiveScenarioGroup");
			resetExclusiveScenarioGroup.Call(native);
		}

		/// <summary>
		/// Occurrences in the b617d scripts:
		/// "PROP_HUMAN_SEAT_CHAIR",
		/// "WORLD_HUMAN_DRINKING",
		/// "WORLD_HUMAN_HANG_OUT_STREET",
		/// "WORLD_HUMAN_SMOKING",
		/// "WORLD_MOUNTAIN_LION_WANDER",
		/// "WORLD_HUMAN_DRINKING"
		/// Sometimes used together with GAMEPLAY::IS_STRING_NULL_OR_EMPTY in the scripts.
		/// scenarioType could be the same as scenarioName, used in for example AI::TASK_START_SCENARIO_AT_POSITION.
		/// </summary>
		/// <param name="scenarioType">could be the same as scenarioName, used in for example AI::TASK_START_SCENARIO_AT_POSITION.</param>
		public bool IsScenarioTypeEnabled(string scenarioType)
		{
			if (isScenarioTypeEnabled == null) isScenarioTypeEnabled = (Function) native.GetObjectProperty("isScenarioTypeEnabled");
			return (bool) isScenarioTypeEnabled.Call(native, scenarioType);
		}

		/// <summary>
		/// seems to enable/disable specific scenario-types from happening in the game world.
		/// Here are some scenario types from the scripts:
		/// "WORLD_MOUNTAIN_LION_REST"
		/// "WORLD_MOUNTAIN_LION_WANDER"
		/// "DRIVE"
		/// "WORLD_VEHICLE_POLICE_BIKE"
		/// "WORLD_VEHICLE_POLICE_CAR"
		/// "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
		/// "WORLD_VEHICLE_DRIVE_SOLO"
		/// See NativeDB for reference: http://natives.altv.mp/#/0xEB47EC4E34FB7EE1
		/// </summary>
		public void SetScenarioTypeEnabled(string scenarioType, bool toggle)
		{
			if (setScenarioTypeEnabled == null) setScenarioTypeEnabled = (Function) native.GetObjectProperty("setScenarioTypeEnabled");
			setScenarioTypeEnabled.Call(native, scenarioType, toggle);
		}

		public void ResetScenarioTypesEnabled()
		{
			if (resetScenarioTypesEnabled == null) resetScenarioTypesEnabled = (Function) native.GetObjectProperty("resetScenarioTypesEnabled");
			resetScenarioTypesEnabled.Call(native);
		}

		public bool IsPedActiveInScenario(int ped)
		{
			if (isPedActiveInScenario == null) isPedActiveInScenario = (Function) native.GetObjectProperty("isPedActiveInScenario");
			return (bool) isPedActiveInScenario.Call(native, ped);
		}

		/// <summary>
		/// Used only once (am_mp_property_int)
		/// ped was PLAYER_PED_ID()
		/// Related to CTaskAmbientClips.
		/// IS_PED_*
		/// </summary>
		/// <param name="ped">was PLAYER_PED_ID()</param>
		public bool _0x621C6E4729388E41(int ped)
		{
			if (__0x621C6E4729388E41 == null) __0x621C6E4729388E41 = (Function) native.GetObjectProperty("_0x621C6E4729388E41");
			return (bool) __0x621C6E4729388E41.Call(native, ped);
		}

		/// <summary>
		/// Appears only in fm_mission_controller and used only 3 times.
		/// ped was always PLAYER_PED_ID()
		/// p1 was always true
		/// p2 was always true
		/// </summary>
		/// <param name="ped">was always PLAYER_PED_ID()</param>
		/// <param name="p1">was always true</param>
		/// <param name="p2">was always true</param>
		public void SetPedCanPlayAmbientIdles(int ped, bool p1, bool p2)
		{
			if (setPedCanPlayAmbientIdles == null) setPedCanPlayAmbientIdles = (Function) native.GetObjectProperty("setPedCanPlayAmbientIdles");
			setPedCanPlayAmbientIdles.Call(native, ped, p1, p2);
		}

		/// <summary>
		/// Despite its name, it only attacks ONE hated target. The one closest to the specified position.
		/// </summary>
		public void TaskCombatHatedTargetsInArea(int ped, double x, double y, double z, double radius, object p5)
		{
			if (taskCombatHatedTargetsInArea == null) taskCombatHatedTargetsInArea = (Function) native.GetObjectProperty("taskCombatHatedTargetsInArea");
			taskCombatHatedTargetsInArea.Call(native, ped, x, y, z, radius, p5);
		}

		/// <summary>
		/// Despite its name, it only attacks ONE hated target. The one closest hated target.
		/// p2 seems to be always 0
		/// </summary>
		/// <param name="p2">seems to be always 0</param>
		public void TaskCombatHatedTargetsAroundPed(int ped, double radius, int p2)
		{
			if (taskCombatHatedTargetsAroundPed == null) taskCombatHatedTargetsAroundPed = (Function) native.GetObjectProperty("taskCombatHatedTargetsAroundPed");
			taskCombatHatedTargetsAroundPed.Call(native, ped, radius, p2);
		}

		public void TaskCombatHatedTargetsAroundPedTimed(object p0, double p1, object p2, object p3)
		{
			if (taskCombatHatedTargetsAroundPedTimed == null) taskCombatHatedTargetsAroundPedTimed = (Function) native.GetObjectProperty("taskCombatHatedTargetsAroundPedTimed");
			taskCombatHatedTargetsAroundPedTimed.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
		/// The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
		/// ---
		/// It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
		/// It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
		/// ----------------------------------------------------
		/// The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
		/// </summary>
		public void TaskThrowProjectile(int ped, double x, double y, double z, object p4, object p5)
		{
			if (taskThrowProjectile == null) taskThrowProjectile = (Function) native.GetObjectProperty("taskThrowProjectile");
			taskThrowProjectile.Call(native, ped, x, y, z, p4, p5);
		}

		public void TaskSwapWeapon(int ped, bool p1)
		{
			if (taskSwapWeapon == null) taskSwapWeapon = (Function) native.GetObjectProperty("taskSwapWeapon");
			taskSwapWeapon.Call(native, ped, p1);
		}

		/// <summary>
		/// The 2nd param (unused) is not implemented.
		/// -----------------------------------------------------------------------
		/// The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
		/// if (((v_3 < v_4) && (AI::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
		/// AI::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
		/// }
		/// </summary>
		public void TaskReloadWeapon(int ped, bool unused)
		{
			if (taskReloadWeapon == null) taskReloadWeapon = (Function) native.GetObjectProperty("taskReloadWeapon");
			taskReloadWeapon.Call(native, ped, unused);
		}

		public bool IsPedGettingUp(int ped)
		{
			if (isPedGettingUp == null) isPedGettingUp = (Function) native.GetObjectProperty("isPedGettingUp");
			return (bool) isPedGettingUp.Call(native, ped);
		}

		/// <summary>
		/// EX: Function.Call(Ped1, Ped2, Time, 0);
		/// The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
		/// MulleDK19: Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
		/// </summary>
		public void TaskWrithe(int ped, int target, int time, int p3, object p4, object p5)
		{
			if (taskWrithe == null) taskWrithe = (Function) native.GetObjectProperty("taskWrithe");
			taskWrithe.Call(native, ped, target, time, p3, p4, p5);
		}

		/// <summary>
		/// </summary>
		/// <returns>returns true is the ped is on the ground whining like a little female dog from a gunshot wound</returns>
		public bool IsPedInWrithe(int ped)
		{
			if (isPedInWrithe == null) isPedInWrithe = (Function) native.GetObjectProperty("isPedInWrithe");
			return (bool) isPedInWrithe.Call(native, ped);
		}

		/// <summary>
		/// patrolRoutes found in the b617d scripts:
		/// "miss_Ass0",
		/// "miss_Ass1",
		/// "miss_Ass2",
		/// "miss_Ass3",
		/// "miss_Ass4",
		/// "miss_Ass5",
		/// "miss_Ass6",
		/// "MISS_PATROL_6",
		/// See NativeDB for reference: http://natives.altv.mp/#/0xA36BFB5EE89F3D82
		/// </summary>
		public void OpenPatrolRoute(string patrolRoute)
		{
			if (openPatrolRoute == null) openPatrolRoute = (Function) native.GetObjectProperty("openPatrolRoute");
			openPatrolRoute.Call(native, patrolRoute);
		}

		public void ClosePatrolRoute()
		{
			if (closePatrolRoute == null) closePatrolRoute = (Function) native.GetObjectProperty("closePatrolRoute");
			closePatrolRoute.Call(native);
		}

		/// <summary>
		/// Example:
		/// AI::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);
		/// p0 is between 0 and 4 in the scripts.
		/// p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
		/// p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.
		/// Examples:
		/// AI::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[73], 0.0, 0.0, 0.0, 0);
		/// AI::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[1744]._f3, l_B0[1744]._f3, 2000);
		/// p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
		/// p8 is an int, often random set to for example: GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000).
		/// </summary>
		/// <param name="p0">is between 0 and 4 in the scripts.</param>
		/// <param name="p1">is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".</param>
		/// <param name="p8">is an int, often random set to for example: GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000).</param>
		public void AddPatrolRouteNode(int p0, string p1, double x1, double y1, double z1, double x2, double y2, double z2, int p8)
		{
			if (addPatrolRouteNode == null) addPatrolRouteNode = (Function) native.GetObjectProperty("addPatrolRouteNode");
			addPatrolRouteNode.Call(native, p0, p1, x1, y1, z1, x2, y2, z2, p8);
		}

		public void AddPatrolRouteLink(object p0, object p1)
		{
			if (addPatrolRouteLink == null) addPatrolRouteLink = (Function) native.GetObjectProperty("addPatrolRouteLink");
			addPatrolRouteLink.Call(native, p0, p1);
		}

		public void CreatePatrolRoute()
		{
			if (createPatrolRoute == null) createPatrolRoute = (Function) native.GetObjectProperty("createPatrolRoute");
			createPatrolRoute.Call(native);
		}

		/// <summary>
		/// From the b617d scripts:
		/// AI::DELETE_PATROL_ROUTE("miss_merc0");
		/// AI::DELETE_PATROL_ROUTE("miss_merc1");
		/// AI::DELETE_PATROL_ROUTE("miss_merc2");
		/// AI::DELETE_PATROL_ROUTE("miss_dock");
		/// </summary>
		public void DeletePatrolRoute(string patrolRoute)
		{
			if (deletePatrolRoute == null) deletePatrolRoute = (Function) native.GetObjectProperty("deletePatrolRoute");
			deletePatrolRoute.Call(native, patrolRoute);
		}

		/// <summary>
		/// After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
		/// "miss_Tower_01" (this went from 01 - 10)
		/// "miss_Ass0" (0, 4, 6, 3)
		/// "MISS_PATROL_8"
		/// I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
		/// As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
		/// From the scripts
		/// AI::OPEN_PATROL_ROUTE("miss_Ass0");
		/// AI::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[03], -139.4076690673828, -993.4732055664062, 26.2754, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000));
		/// See NativeDB for reference: http://natives.altv.mp/#/0xBDA5DF49D080FE4E
		/// </summary>
		public void TaskPatrol(int ped, string p1, object p2, bool p3, bool p4)
		{
			if (taskPatrol == null) taskPatrol = (Function) native.GetObjectProperty("taskPatrol");
			taskPatrol.Call(native, ped, p1, p2, p3, p4);
		}

		/// <summary>
		/// Makes the ped run to take cover
		/// </summary>
		public void TaskStayInCover(int ped)
		{
			if (taskStayInCover == null) taskStayInCover = (Function) native.GetObjectProperty("taskStayInCover");
			taskStayInCover.Call(native, ped);
		}

		/// <summary>
		/// x, y, z: offset in world coords from some entity.
		/// </summary>
		/// <param name="z">x, y, offset in world coords from some entity.</param>
		public void AddVehicleSubtaskAttackCoord(int ped, double x, double y, double z)
		{
			if (addVehicleSubtaskAttackCoord == null) addVehicleSubtaskAttackCoord = (Function) native.GetObjectProperty("addVehicleSubtaskAttackCoord");
			addVehicleSubtaskAttackCoord.Call(native, ped, x, y, z);
		}

		public void AddVehicleSubtaskAttackPed(int ped, int ped2)
		{
			if (addVehicleSubtaskAttackPed == null) addVehicleSubtaskAttackPed = (Function) native.GetObjectProperty("addVehicleSubtaskAttackPed");
			addVehicleSubtaskAttackPed.Call(native, ped, ped2);
		}

		public void TaskVehicleShootAtPed(int ped, int target, double p2)
		{
			if (taskVehicleShootAtPed == null) taskVehicleShootAtPed = (Function) native.GetObjectProperty("taskVehicleShootAtPed");
			taskVehicleShootAtPed.Call(native, ped, target, p2);
		}

		public void TaskVehicleAimAtPed(int ped, int target)
		{
			if (taskVehicleAimAtPed == null) taskVehicleAimAtPed = (Function) native.GetObjectProperty("taskVehicleAimAtPed");
			taskVehicleAimAtPed.Call(native, ped, target);
		}

		public void TaskVehicleShootAtCoord(int ped, double x, double y, double z, double p4)
		{
			if (taskVehicleShootAtCoord == null) taskVehicleShootAtCoord = (Function) native.GetObjectProperty("taskVehicleShootAtCoord");
			taskVehicleShootAtCoord.Call(native, ped, x, y, z, p4);
		}

		public void TaskVehicleAimAtCoord(int ped, double x, double y, double z)
		{
			if (taskVehicleAimAtCoord == null) taskVehicleAimAtCoord = (Function) native.GetObjectProperty("taskVehicleAimAtCoord");
			taskVehicleAimAtCoord.Call(native, ped, x, y, z);
		}

		/// <summary>
		/// Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
		/// WARNING:
		/// A behaviorFlag value of 0 will result in a clunky, stupid driver!
		/// Recommended settings:
		/// speed = 30.0f,
		/// behaviorFlag = 156,
		/// stoppingRange = 5.0f;
		/// If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
		/// If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
		/// EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
		/// </summary>
		/// <param name="speed">30.0f,</param>
		/// <param name="behaviorFlag">156, </param>
		/// <param name="stoppingRange">5.0f;</param>
		public void TaskVehicleGotoNavmesh(int ped, int vehicle, double x, double y, double z, double speed, int behaviorFlag, double stoppingRange)
		{
			if (taskVehicleGotoNavmesh == null) taskVehicleGotoNavmesh = (Function) native.GetObjectProperty("taskVehicleGotoNavmesh");
			taskVehicleGotoNavmesh.Call(native, ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
		}

		/// <summary>
		/// movement_speed: mostly 2f, but also 1/1.2f, etc.
		/// p8: always false
		/// p9: 2f
		/// p10: 0.5f
		/// p11: true
		/// p12: 0 / 512 / 513, etc.
		/// p13: 0
		/// firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
		/// </summary>
		/// <param name="p8">always false</param>
		/// <param name="p9">2f</param>
		/// <param name="p10">0.5f</param>
		/// <param name="p11">true</param>
		/// <param name="p13">0</param>
		public void TaskGoToCoordWhileAimingAtCoord(int ped, double x, double y, double z, double aimAtX, double aimAtY, double aimAtZ, double moveSpeed, bool p8, double p9, double p10, bool p11, object flags, bool p13, int firingPattern)
		{
			if (taskGoToCoordWhileAimingAtCoord == null) taskGoToCoordWhileAimingAtCoord = (Function) native.GetObjectProperty("taskGoToCoordWhileAimingAtCoord");
			taskGoToCoordWhileAimingAtCoord.Call(native, ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern);
		}

		public void TaskGoToCoordWhileAimingAtEntity(object p0, double p1, double p2, double p3, object p4, double p5, bool p6, double p7, double p8, bool p9, object p10, bool p11, object p12, object p13)
		{
			if (taskGoToCoordWhileAimingAtEntity == null) taskGoToCoordWhileAimingAtEntity = (Function) native.GetObjectProperty("taskGoToCoordWhileAimingAtEntity");
			taskGoToCoordWhileAimingAtEntity.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
		}

		/// <summary>
		/// The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
		/// If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
		/// If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
		/// The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
		/// I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
		/// I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
		/// Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
		/// The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
		/// Example:
		/// See NativeDB for reference: http://natives.altv.mp/#/0xA55547801EB331FC
		/// </summary>
		/// <param name="shootAtEnemies">The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if true to any enemy in his path.</param>
		/// <param name="unkFlag">Note: After some testing, using 16 (0x10) enables the use of sidewalks while moving towards goToLocation.</param>
		public void TaskGoToCoordAndAimAtHatedEntitiesNearCoord(int pedHandle, double goToLocationX, double goToLocationY, double goToLocationZ, double focusLocationX, double focusLocationY, double focusLocationZ, double speed, bool shootAtEnemies, double distanceToStopAt, double noRoadsDistance, bool unkTrue, int unkFlag, int aimingFlag, int firingPattern)
		{
			if (taskGoToCoordAndAimAtHatedEntitiesNearCoord == null) taskGoToCoordAndAimAtHatedEntitiesNearCoord = (Function) native.GetObjectProperty("taskGoToCoordAndAimAtHatedEntitiesNearCoord");
			taskGoToCoordAndAimAtHatedEntitiesNearCoord.Call(native, pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern);
		}

		public void TaskGoToEntityWhileAimingAtCoord(object p0, object p1, double p2, double p3, double p4, double p5, bool p6, double p7, double p8, bool p9, bool p10, object p11)
		{
			if (taskGoToEntityWhileAimingAtCoord == null) taskGoToEntityWhileAimingAtCoord = (Function) native.GetObjectProperty("taskGoToEntityWhileAimingAtCoord");
			taskGoToEntityWhileAimingAtCoord.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		}

		/// <summary>
		/// shootatEntity:
		/// If true, peds will shoot at Entity till it is dead.
		/// If false, peds will just walk till they reach the entity and will cease shooting.
		/// </summary>
		public void TaskGoToEntityWhileAimingAtEntity(int ped, int entityToWalkTo, int entityToAimAt, double speed, bool shootatEntity, double p5, double p6, bool p7, bool p8, int firingPattern)
		{
			if (taskGoToEntityWhileAimingAtEntity == null) taskGoToEntityWhileAimingAtEntity = (Function) native.GetObjectProperty("taskGoToEntityWhileAimingAtEntity");
			taskGoToEntityWhileAimingAtEntity.Call(native, ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern);
		}

		/// <summary>
		/// Makes the ped ragdoll like when falling from a great height
		/// </summary>
		public void SetHighFallTask(int ped, object p1, object p2, object p3)
		{
			if (setHighFallTask == null) setHighFallTask = (Function) native.GetObjectProperty("setHighFallTask");
			setHighFallTask.Call(native, ped, p1, p2, p3);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/Tp0XpBMN
		/// For a full list of the points, see here: goo.gl/wIH0vn
		/// Max number of loaded recordings is 32.
		/// </summary>
		public void RequestWaypointRecording(string name)
		{
			if (requestWaypointRecording == null) requestWaypointRecording = (Function) native.GetObjectProperty("requestWaypointRecording");
			requestWaypointRecording.Call(native, name);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/Tp0XpBMN
		/// </summary>
		public bool GetIsWaypointRecordingLoaded(string name)
		{
			if (getIsWaypointRecordingLoaded == null) getIsWaypointRecordingLoaded = (Function) native.GetObjectProperty("getIsWaypointRecordingLoaded");
			return (bool) getIsWaypointRecordingLoaded.Call(native, name);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/Tp0XpBMN
		/// </summary>
		public void RemoveWaypointRecording(string name)
		{
			if (removeWaypointRecording == null) removeWaypointRecording = (Function) native.GetObjectProperty("removeWaypointRecording");
			removeWaypointRecording.Call(native, name);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/Tp0XpBMN
		/// For a full list of the points, see here: goo.gl/wIH0vn
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) WaypointRecordingGetNumPoints(string name, int points)
		{
			if (waypointRecordingGetNumPoints == null) waypointRecordingGetNumPoints = (Function) native.GetObjectProperty("waypointRecordingGetNumPoints");
			var results = (Array) waypointRecordingGetNumPoints.Call(native, name, points);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/Tp0XpBMN
		/// For a full list of the points, see here: goo.gl/wIH0vn
		/// </summary>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) WaypointRecordingGetCoord(string name, int point, Vector3 coord)
		{
			if (waypointRecordingGetCoord == null) waypointRecordingGetCoord = (Function) native.GetObjectProperty("waypointRecordingGetCoord");
			var results = (Array) waypointRecordingGetCoord.Call(native, name, point, coord);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		public double WaypointRecordingGetSpeedAtPoint(string name, int point)
		{
			if (waypointRecordingGetSpeedAtPoint == null) waypointRecordingGetSpeedAtPoint = (Function) native.GetObjectProperty("waypointRecordingGetSpeedAtPoint");
			return (double) waypointRecordingGetSpeedAtPoint.Call(native, name, point);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/Tp0XpBMN
		/// For a full list of the points, see here: goo.gl/wIH0vn
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) WaypointRecordingGetClosestWaypoint(string name, double x, double y, double z, int point)
		{
			if (waypointRecordingGetClosestWaypoint == null) waypointRecordingGetClosestWaypoint = (Function) native.GetObjectProperty("waypointRecordingGetClosestWaypoint");
			var results = (Array) waypointRecordingGetClosestWaypoint.Call(native, name, x, y, z, point);
			return ((bool) results[0], (int) results[1]);
		}

		public void TaskFollowWaypointRecording(object p0, object p1, object p2, object p3, object p4)
		{
			if (taskFollowWaypointRecording == null) taskFollowWaypointRecording = (Function) native.GetObjectProperty("taskFollowWaypointRecording");
			taskFollowWaypointRecording.Call(native, p0, p1, p2, p3, p4);
		}

		public bool IsWaypointPlaybackGoingOnForPed(object p0)
		{
			if (isWaypointPlaybackGoingOnForPed == null) isWaypointPlaybackGoingOnForPed = (Function) native.GetObjectProperty("isWaypointPlaybackGoingOnForPed");
			return (bool) isWaypointPlaybackGoingOnForPed.Call(native, p0);
		}

		public int GetPedWaypointProgress(int ped)
		{
			if (getPedWaypointProgress == null) getPedWaypointProgress = (Function) native.GetObjectProperty("getPedWaypointProgress");
			return (int) getPedWaypointProgress.Call(native, ped);
		}

		public double GetPedWaypointDistance(object p0)
		{
			if (getPedWaypointDistance == null) getPedWaypointDistance = (Function) native.GetObjectProperty("getPedWaypointDistance");
			return (double) getPedWaypointDistance.Call(native, p0);
		}

		public object SetPedWaypointRouteOffset(object p0, object p1, object p2, object p3)
		{
			if (setPedWaypointRouteOffset == null) setPedWaypointRouteOffset = (Function) native.GetObjectProperty("setPedWaypointRouteOffset");
			return setPedWaypointRouteOffset.Call(native, p0, p1, p2, p3);
		}

		public double GetWaypointDistanceAlongRoute(string p0, int p1)
		{
			if (getWaypointDistanceAlongRoute == null) getWaypointDistanceAlongRoute = (Function) native.GetObjectProperty("getWaypointDistanceAlongRoute");
			return (double) getWaypointDistanceAlongRoute.Call(native, p0, p1);
		}

		public bool WaypointPlaybackGetIsPaused(object p0)
		{
			if (waypointPlaybackGetIsPaused == null) waypointPlaybackGetIsPaused = (Function) native.GetObjectProperty("waypointPlaybackGetIsPaused");
			return (bool) waypointPlaybackGetIsPaused.Call(native, p0);
		}

		public void WaypointPlaybackPause(object p0, bool p1, bool p2)
		{
			if (waypointPlaybackPause == null) waypointPlaybackPause = (Function) native.GetObjectProperty("waypointPlaybackPause");
			waypointPlaybackPause.Call(native, p0, p1, p2);
		}

		public void WaypointPlaybackResume(object p0, bool p1, object p2, object p3)
		{
			if (waypointPlaybackResume == null) waypointPlaybackResume = (Function) native.GetObjectProperty("waypointPlaybackResume");
			waypointPlaybackResume.Call(native, p0, p1, p2, p3);
		}

		public void WaypointPlaybackOverrideSpeed(object p0, double p1, bool p2)
		{
			if (waypointPlaybackOverrideSpeed == null) waypointPlaybackOverrideSpeed = (Function) native.GetObjectProperty("waypointPlaybackOverrideSpeed");
			waypointPlaybackOverrideSpeed.Call(native, p0, p1, p2);
		}

		public void WaypointPlaybackUseDefaultSpeed(object p0)
		{
			if (waypointPlaybackUseDefaultSpeed == null) waypointPlaybackUseDefaultSpeed = (Function) native.GetObjectProperty("waypointPlaybackUseDefaultSpeed");
			waypointPlaybackUseDefaultSpeed.Call(native, p0);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) UseWaypointRecordingAsAssistedMovementRoute(object p0, bool p1, double p2, double p3)
		{
			if (useWaypointRecordingAsAssistedMovementRoute == null) useWaypointRecordingAsAssistedMovementRoute = (Function) native.GetObjectProperty("useWaypointRecordingAsAssistedMovementRoute");
			var results = (Array) useWaypointRecordingAsAssistedMovementRoute.Call(native, p0, p1, p2, p3);
			return (results[0], results[1]);
		}

		public void WaypointPlaybackStartAimingAtPed(object p0, object p1, bool p2)
		{
			if (waypointPlaybackStartAimingAtPed == null) waypointPlaybackStartAimingAtPed = (Function) native.GetObjectProperty("waypointPlaybackStartAimingAtPed");
			waypointPlaybackStartAimingAtPed.Call(native, p0, p1, p2);
		}

		public void WaypointPlaybackStartAimingAtCoord(object p0, double p1, double p2, double p3, bool p4)
		{
			if (waypointPlaybackStartAimingAtCoord == null) waypointPlaybackStartAimingAtCoord = (Function) native.GetObjectProperty("waypointPlaybackStartAimingAtCoord");
			waypointPlaybackStartAimingAtCoord.Call(native, p0, p1, p2, p3, p4);
		}

		public void WaypointPlaybackStartShootingAtPed(object p0, object p1, bool p2, object p3)
		{
			if (waypointPlaybackStartShootingAtPed == null) waypointPlaybackStartShootingAtPed = (Function) native.GetObjectProperty("waypointPlaybackStartShootingAtPed");
			waypointPlaybackStartShootingAtPed.Call(native, p0, p1, p2, p3);
		}

		public void WaypointPlaybackStartShootingAtCoord(object p0, double p1, double p2, double p3, bool p4, object p5)
		{
			if (waypointPlaybackStartShootingAtCoord == null) waypointPlaybackStartShootingAtCoord = (Function) native.GetObjectProperty("waypointPlaybackStartShootingAtCoord");
			waypointPlaybackStartShootingAtCoord.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void WaypointPlaybackStopAimingOrShooting(object p0)
		{
			if (waypointPlaybackStopAimingOrShooting == null) waypointPlaybackStopAimingOrShooting = (Function) native.GetObjectProperty("waypointPlaybackStopAimingOrShooting");
			waypointPlaybackStopAimingOrShooting.Call(native, p0);
		}

		/// <summary>
		/// Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
		/// </summary>
		public void AssistedMovementRequestRoute(string route)
		{
			if (assistedMovementRequestRoute == null) assistedMovementRequestRoute = (Function) native.GetObjectProperty("assistedMovementRequestRoute");
			assistedMovementRequestRoute.Call(native, route);
		}

		public void AssistedMovementRemoveRoute(string route)
		{
			if (assistedMovementRemoveRoute == null) assistedMovementRemoveRoute = (Function) native.GetObjectProperty("assistedMovementRemoveRoute");
			assistedMovementRemoveRoute.Call(native, route);
		}

		public bool AssistedMovementIsRouteLoaded(string route)
		{
			if (assistedMovementIsRouteLoaded == null) assistedMovementIsRouteLoaded = (Function) native.GetObjectProperty("assistedMovementIsRouteLoaded");
			return (bool) assistedMovementIsRouteLoaded.Call(native, route);
		}

		public void AssistedMovementSetRouteProperties(string route, int props)
		{
			if (assistedMovementSetRouteProperties == null) assistedMovementSetRouteProperties = (Function) native.GetObjectProperty("assistedMovementSetRouteProperties");
			assistedMovementSetRouteProperties.Call(native, route, props);
		}

		public void AssistedMovementOverrideLoadDistanceThisFrame(double dist)
		{
			if (assistedMovementOverrideLoadDistanceThisFrame == null) assistedMovementOverrideLoadDistanceThisFrame = (Function) native.GetObjectProperty("assistedMovementOverrideLoadDistanceThisFrame");
			assistedMovementOverrideLoadDistanceThisFrame.Call(native, dist);
		}

		/// <summary>
		/// task_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)
		/// p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
		/// p3 = 786468
		/// p4 = 0
		/// p5 = 16
		/// p6 = -1 (angle?)
		/// p7/8/9 = usually v3.zero
		/// p10 = bool (repeat?)
		/// p11 = 1073741824
		/// -khorio
		/// </summary>
		/// <param name="p3">786468</param>
		/// <param name="p4">0</param>
		/// <param name="p5">16</param>
		/// <param name="p6">-1 (angle?)</param>
		public void TaskVehicleFollowWaypointRecording(int ped, int vehicle, string WPRecording, int p3, int p4, int p5, int p6, double p7, bool p8, double p9)
		{
			if (taskVehicleFollowWaypointRecording == null) taskVehicleFollowWaypointRecording = (Function) native.GetObjectProperty("taskVehicleFollowWaypointRecording");
			taskVehicleFollowWaypointRecording.Call(native, ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9);
		}

		public bool IsWaypointPlaybackGoingOnForVehicle(int vehicle)
		{
			if (isWaypointPlaybackGoingOnForVehicle == null) isWaypointPlaybackGoingOnForVehicle = (Function) native.GetObjectProperty("isWaypointPlaybackGoingOnForVehicle");
			return (bool) isWaypointPlaybackGoingOnForVehicle.Call(native, vehicle);
		}

		public int GetVehicleWaypointProgress(int vehicle)
		{
			if (getVehicleWaypointProgress == null) getVehicleWaypointProgress = (Function) native.GetObjectProperty("getVehicleWaypointProgress");
			return (int) getVehicleWaypointProgress.Call(native, vehicle);
		}

		public int GetVehicleWaypointTargetPoint(int vehicle)
		{
			if (getVehicleWaypointTargetPoint == null) getVehicleWaypointTargetPoint = (Function) native.GetObjectProperty("getVehicleWaypointTargetPoint");
			return (int) getVehicleWaypointTargetPoint.Call(native, vehicle);
		}

		public void VehicleWaypointPlaybackPause(int vehicle)
		{
			if (vehicleWaypointPlaybackPause == null) vehicleWaypointPlaybackPause = (Function) native.GetObjectProperty("vehicleWaypointPlaybackPause");
			vehicleWaypointPlaybackPause.Call(native, vehicle);
		}

		public void VehicleWaypointPlaybackResume(int vehicle)
		{
			if (vehicleWaypointPlaybackResume == null) vehicleWaypointPlaybackResume = (Function) native.GetObjectProperty("vehicleWaypointPlaybackResume");
			vehicleWaypointPlaybackResume.Call(native, vehicle);
		}

		public void VehicleWaypointPlaybackUseDefaultSpeed(int vehicle)
		{
			if (vehicleWaypointPlaybackUseDefaultSpeed == null) vehicleWaypointPlaybackUseDefaultSpeed = (Function) native.GetObjectProperty("vehicleWaypointPlaybackUseDefaultSpeed");
			vehicleWaypointPlaybackUseDefaultSpeed.Call(native, vehicle);
		}

		public void VehicleWaypointPlaybackOverrideSpeed(int vehicle, double speed)
		{
			if (vehicleWaypointPlaybackOverrideSpeed == null) vehicleWaypointPlaybackOverrideSpeed = (Function) native.GetObjectProperty("vehicleWaypointPlaybackOverrideSpeed");
			vehicleWaypointPlaybackOverrideSpeed.Call(native, vehicle, speed);
		}

		/// <summary>
		/// I cant believe I have to define this, this is one of the best natives.
		/// It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
		/// Since it is a task, every time the native is called the ped will stop for a moment.
		/// </summary>
		public void TaskSetBlockingOfNonTemporaryEvents(int ped, bool toggle)
		{
			if (taskSetBlockingOfNonTemporaryEvents == null) taskSetBlockingOfNonTemporaryEvents = (Function) native.GetObjectProperty("taskSetBlockingOfNonTemporaryEvents");
			taskSetBlockingOfNonTemporaryEvents.Call(native, ped, toggle);
		}

		/// <summary>
		/// p2 always false
		/// [30/03/2017] ins1de :
		/// See FORCE_PED_MOTION_STATE
		/// </summary>
		/// <param name="p2">always false</param>
		public void TaskForceMotionState(int ped, int state, bool p2)
		{
			if (taskForceMotionState == null) taskForceMotionState = (Function) native.GetObjectProperty("taskForceMotionState");
			taskForceMotionState.Call(native, ped, state, p2);
		}

		/// <summary>
		/// Example:
		/// TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);
		/// </summary>
		public void TaskMoveNetworkByName(int ped, string task, double multiplier, bool p3, string animDict, int flags)
		{
			if (taskMoveNetworkByName == null) taskMoveNetworkByName = (Function) native.GetObjectProperty("taskMoveNetworkByName");
			taskMoveNetworkByName.Call(native, ped, task, multiplier, p3, animDict, flags);
		}

		/// <summary>
		/// Example:
		/// TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
		/// </summary>
		public void TaskMoveNetworkAdvancedByName(int ped, string p1, double p2, double p3, double p4, double p5, double p6, double p7, object p8, double p9, bool p10, string animDict, int flags)
		{
			if (taskMoveNetworkAdvancedByName == null) taskMoveNetworkAdvancedByName = (Function) native.GetObjectProperty("taskMoveNetworkAdvancedByName");
			taskMoveNetworkAdvancedByName.Call(native, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags);
		}

		/// <summary>
		/// Used only once in the scripts (am_mp_nightclub)
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) TaskMoveNetworkByNameWithInitParams(int ped, string p1, object data, double p3, bool p4, string animDict, int flags)
		{
			if (taskMoveNetworkByNameWithInitParams == null) taskMoveNetworkByNameWithInitParams = (Function) native.GetObjectProperty("taskMoveNetworkByNameWithInitParams");
			var results = (Array) taskMoveNetworkByNameWithInitParams.Call(native, ped, p1, data, p3, p4, animDict, flags);
			return (results[0], results[1]);
		}

		public bool IsTaskMoveNetworkActive(int ped)
		{
			if (isTaskMoveNetworkActive == null) isTaskMoveNetworkActive = (Function) native.GetObjectProperty("isTaskMoveNetworkActive");
			return (bool) isTaskMoveNetworkActive.Call(native, ped);
		}

		public bool IsTaskMoveNetworkReadyForTransition(int ped)
		{
			if (isTaskMoveNetworkReadyForTransition == null) isTaskMoveNetworkReadyForTransition = (Function) native.GetObjectProperty("isTaskMoveNetworkReadyForTransition");
			return (bool) isTaskMoveNetworkReadyForTransition.Call(native, ped);
		}

		public bool RequestTaskMoveNetworkStateTransition(int ped, string name)
		{
			if (requestTaskMoveNetworkStateTransition == null) requestTaskMoveNetworkStateTransition = (Function) native.GetObjectProperty("requestTaskMoveNetworkStateTransition");
			return (bool) requestTaskMoveNetworkStateTransition.Call(native, ped, name);
		}

		/// <summary>
		/// Used only once in the scripts (fm_mission_controller) like so:
		/// TASK::_0xAB13A5565480B6D9(iLocal_3160, "Cutting");
		/// SET_*
		/// </summary>
		public object _0xAB13A5565480B6D9(int ped, string p1)
		{
			if (__0xAB13A5565480B6D9 == null) __0xAB13A5565480B6D9 = (Function) native.GetObjectProperty("_0xAB13A5565480B6D9");
			return __0xAB13A5565480B6D9.Call(native, ped, p1);
		}

		public string GetTaskMoveNetworkState(int ped)
		{
			if (getTaskMoveNetworkState == null) getTaskMoveNetworkState = (Function) native.GetObjectProperty("getTaskMoveNetworkState");
			return (string) getTaskMoveNetworkState.Call(native, ped);
		}

		public void _0x8423541E8B3A1589(object p0, object p1, object p2)
		{
			if (__0x8423541E8B3A1589 == null) __0x8423541E8B3A1589 = (Function) native.GetObjectProperty("_0x8423541E8B3A1589");
			__0x8423541E8B3A1589.Call(native, p0, p1, p2);
		}

		/// <summary>
		/// p0 - PLAYER::PLAYER_PED_ID();
		/// p1 - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
		/// p2 - From what i can see it goes up to 1f (maybe).
		/// -LcGamingHD
		/// Example: AI::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
		/// </summary>
		public void SetTaskMoveNetworkSignalFloat(int ped, string signalName, double value)
		{
			if (setTaskMoveNetworkSignalFloat == null) setTaskMoveNetworkSignalFloat = (Function) native.GetObjectProperty("setTaskMoveNetworkSignalFloat");
			setTaskMoveNetworkSignalFloat.Call(native, ped, signalName, value);
		}

		public void SetTaskMoveNetworkSignalFloat2(int ped, string signalName, double value)
		{
			if (setTaskMoveNetworkSignalFloat2 == null) setTaskMoveNetworkSignalFloat2 = (Function) native.GetObjectProperty("setTaskMoveNetworkSignalFloat2");
			setTaskMoveNetworkSignalFloat2.Call(native, ped, signalName, value);
		}

		public void _0x8634CEF2522D987B(int ped, string p1, double value)
		{
			if (__0x8634CEF2522D987B == null) __0x8634CEF2522D987B = (Function) native.GetObjectProperty("_0x8634CEF2522D987B");
			__0x8634CEF2522D987B.Call(native, ped, p1, value);
		}

		public void SetTaskMoveNetworkSignalBool(int ped, string signalName, bool value)
		{
			if (setTaskMoveNetworkSignalBool == null) setTaskMoveNetworkSignalBool = (Function) native.GetObjectProperty("setTaskMoveNetworkSignalBool");
			setTaskMoveNetworkSignalBool.Call(native, ped, signalName, value);
		}

		public double GetTaskMoveNetworkSignalFloat(int ped, string signalName)
		{
			if (getTaskMoveNetworkSignalFloat == null) getTaskMoveNetworkSignalFloat = (Function) native.GetObjectProperty("getTaskMoveNetworkSignalFloat");
			return (double) getTaskMoveNetworkSignalFloat.Call(native, ped, signalName);
		}

		public bool GetTaskMoveNetworkSignalBool(int ped, string signalName)
		{
			if (getTaskMoveNetworkSignalBool == null) getTaskMoveNetworkSignalBool = (Function) native.GetObjectProperty("getTaskMoveNetworkSignalBool");
			return (bool) getTaskMoveNetworkSignalBool.Call(native, ped, signalName);
		}

		public bool GetTaskMoveNetworkEvent(int ped, string eventName)
		{
			if (getTaskMoveNetworkEvent == null) getTaskMoveNetworkEvent = (Function) native.GetObjectProperty("getTaskMoveNetworkEvent");
			return (bool) getTaskMoveNetworkEvent.Call(native, ped, eventName);
		}

		public bool IsMoveBlendRatioStill(int ped)
		{
			if (isMoveBlendRatioStill == null) isMoveBlendRatioStill = (Function) native.GetObjectProperty("isMoveBlendRatioStill");
			return (bool) isMoveBlendRatioStill.Call(native, ped);
		}

		public bool IsMoveBlendRatioWalking(int ped)
		{
			if (isMoveBlendRatioWalking == null) isMoveBlendRatioWalking = (Function) native.GetObjectProperty("isMoveBlendRatioWalking");
			return (bool) isMoveBlendRatioWalking.Call(native, ped);
		}

		public bool IsMoveBlendRatioRunning(int ped)
		{
			if (isMoveBlendRatioRunning == null) isMoveBlendRatioRunning = (Function) native.GetObjectProperty("isMoveBlendRatioRunning");
			return (bool) isMoveBlendRatioRunning.Call(native, ped);
		}

		public bool IsMoveBlendRatioSprinting(int ped)
		{
			if (isMoveBlendRatioSprinting == null) isMoveBlendRatioSprinting = (Function) native.GetObjectProperty("isMoveBlendRatioSprinting");
			return (bool) isMoveBlendRatioSprinting.Call(native, ped);
		}

		public bool IsPedStill(int ped)
		{
			if (isPedStill == null) isPedStill = (Function) native.GetObjectProperty("isPedStill");
			return (bool) isPedStill.Call(native, ped);
		}

		public bool IsPedWalking(int ped)
		{
			if (isPedWalking == null) isPedWalking = (Function) native.GetObjectProperty("isPedWalking");
			return (bool) isPedWalking.Call(native, ped);
		}

		public bool IsPedRunning(int ped)
		{
			if (isPedRunning == null) isPedRunning = (Function) native.GetObjectProperty("isPedRunning");
			return (bool) isPedRunning.Call(native, ped);
		}

		public bool IsPedSprinting(int ped)
		{
			if (isPedSprinting == null) isPedSprinting = (Function) native.GetObjectProperty("isPedSprinting");
			return (bool) isPedSprinting.Call(native, ped);
		}

		/// <summary>
		/// What's strafing?
		/// </summary>
		public bool IsPedStrafing(int ped)
		{
			if (isPedStrafing == null) isPedStrafing = (Function) native.GetObjectProperty("isPedStrafing");
			return (bool) isPedStrafing.Call(native, ped);
		}

		/// <summary>
		/// AI::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
		/// Animations List : www.ls-multiplayer.com/dev/index.php?section=3
		/// </summary>
		public void TaskSynchronizedScene(int ped, int scene, string animDictionary, string animationName, double speed, double speedMultiplier, int duration, int flag, double playbackRate, object p9)
		{
			if (taskSynchronizedScene == null) taskSynchronizedScene = (Function) native.GetObjectProperty("taskSynchronizedScene");
			taskSynchronizedScene.Call(native, ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9);
		}

		public void TaskAgitatedAction(int ped, int ped2)
		{
			if (taskAgitatedAction == null) taskAgitatedAction = (Function) native.GetObjectProperty("taskAgitatedAction");
			taskAgitatedAction.Call(native, ped, ped2);
		}

		/// <summary>
		/// This function is called on peds in vehicles.
		/// anim: animation name
		/// p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
		/// p5: no idea what it does but is usually -1
		/// </summary>
		/// <param name="anim">animation name</param>
		/// <param name="p4">p2, p3, "sweep_low", "sweep_med" or "sweep_high"</param>
		/// <param name="p5">no idea what it does but is usually -1</param>
		public void TaskSweepAimEntity(int ped, string anim, string p2, string p3, string p4, int p5, int vehicle, double p7, double p8)
		{
			if (taskSweepAimEntity == null) taskSweepAimEntity = (Function) native.GetObjectProperty("taskSweepAimEntity");
			taskSweepAimEntity.Call(native, ped, anim, p2, p3, p4, p5, vehicle, p7, p8);
		}

		public void UpdateTaskSweepAimEntity(int ped, int entity)
		{
			if (updateTaskSweepAimEntity == null) updateTaskSweepAimEntity = (Function) native.GetObjectProperty("updateTaskSweepAimEntity");
			updateTaskSweepAimEntity.Call(native, ped, entity);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object, object, object, object></returns>
		public (object, object, object, object, object) TaskSweepAimPosition(object p0, object p1, object p2, object p3, object p4, object p5, double p6, double p7, double p8, double p9, double p10)
		{
			if (taskSweepAimPosition == null) taskSweepAimPosition = (Function) native.GetObjectProperty("taskSweepAimPosition");
			var results = (Array) taskSweepAimPosition.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
			return (results[0], results[1], results[2], results[3], results[4]);
		}

		public void UpdateTaskSweepAimPosition(object p0, double p1, double p2, double p3)
		{
			if (updateTaskSweepAimPosition == null) updateTaskSweepAimPosition = (Function) native.GetObjectProperty("updateTaskSweepAimPosition");
			updateTaskSweepAimPosition.Call(native, p0, p1, p2, p3);
		}

		/// <summary>
		/// Example from "me_amanda1.ysc.c4":
		/// AI::TASK_ARREST_PED(l_19F  This is a Ped  , PLAYER::PLAYER_PED_ID());
		/// Example from "armenian1.ysc.c4":
		/// if (!PED::IS_PED_INJURED(l_B18[01])) {
		/// AI::TASK_ARREST_PED(l_B18[01], PLAYER::PLAYER_PED_ID());
		/// }
		/// I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
		/// Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
		/// </summary>
		public void TaskArrestPed(int ped, int target)
		{
			if (taskArrestPed == null) taskArrestPed = (Function) native.GetObjectProperty("taskArrestPed");
			taskArrestPed.Call(native, ped, target);
		}

		public bool IsPedRunningArrestTask(int ped)
		{
			if (isPedRunningArrestTask == null) isPedRunningArrestTask = (Function) native.GetObjectProperty("isPedRunningArrestTask");
			return (bool) isPedRunningArrestTask.Call(native, ped);
		}

		/// <summary>
		/// This function is hard-coded to always return 0.
		/// </summary>
		public bool IsPedBeingArrested(int ped)
		{
			if (isPedBeingArrested == null) isPedBeingArrested = (Function) native.GetObjectProperty("isPedBeingArrested");
			return (bool) isPedBeingArrested.Call(native, ped);
		}

		public void UncuffPed(int ped)
		{
			if (uncuffPed == null) uncuffPed = (Function) native.GetObjectProperty("uncuffPed");
			uncuffPed.Call(native, ped);
		}

		public bool IsPedCuffed(int ped)
		{
			if (isPedCuffed == null) isPedCuffed = (Function) native.GetObjectProperty("isPedCuffed");
			return (bool) isPedCuffed.Call(native, ped);
		}

		public int CreateVehicle(int modelHash, double x, double y, double z, double heading, bool isNetwork, bool thisScriptCheck, bool p7)
		{
			if (createVehicle == null) createVehicle = (Function) native.GetObjectProperty("createVehicle");
			return (int) createVehicle.Call(native, modelHash, x, y, z, heading, isNetwork, thisScriptCheck, p7);
		}

		/// <summary>
		/// Deletes a vehicle.
		/// The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
		/// eg how to use:
		/// SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
		/// DELETE_VEHICLE(&vehicle);
		/// Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) DeleteVehicle(int vehicle)
		{
			if (deleteVehicle == null) deleteVehicle = (Function) native.GetObjectProperty("deleteVehicle");
			var results = (Array) deleteVehicle.Call(native, vehicle);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// SET_VEHICLE_AL*
		/// </summary>
		public void _0x7D6F9A3EF26136A0(int vehicle, bool toggle, bool p2)
		{
			if (__0x7D6F9A3EF26136A0 == null) __0x7D6F9A3EF26136A0 = (Function) native.GetObjectProperty("_0x7D6F9A3EF26136A0");
			__0x7D6F9A3EF26136A0.Call(native, vehicle, toggle, p2);
		}

		/// <summary>
		/// SET_VEHICLE_AL*
		/// </summary>
		public void SetVehicleCanBeLockedOn(int vehicle, bool canBeLockedOn, bool unk)
		{
			if (setVehicleCanBeLockedOn == null) setVehicleCanBeLockedOn = (Function) native.GetObjectProperty("setVehicleCanBeLockedOn");
			setVehicleCanBeLockedOn.Call(native, vehicle, canBeLockedOn, unk);
		}

		/// <summary>
		/// Makes the vehicle accept no passengers.
		/// </summary>
		public void SetVehicleAllowNoPassengersLockon(int veh, bool toggle)
		{
			if (setVehicleAllowNoPassengersLockon == null) setVehicleAllowNoPassengersLockon = (Function) native.GetObjectProperty("setVehicleAllowNoPassengersLockon");
			setVehicleAllowNoPassengersLockon.Call(native, veh, toggle);
		}

		/// <summary>
		/// GET_VEHICLE_*
		/// </summary>
		public int _0xE6B0E8CFC3633BF0(int vehicle)
		{
			if (__0xE6B0E8CFC3633BF0 == null) __0xE6B0E8CFC3633BF0 = (Function) native.GetObjectProperty("_0xE6B0E8CFC3633BF0");
			return (int) __0xE6B0E8CFC3633BF0.Call(native, vehicle);
		}

		public object _0x6EAAEFC76ACC311F(object p0)
		{
			if (__0x6EAAEFC76ACC311F == null) __0x6EAAEFC76ACC311F = (Function) native.GetObjectProperty("_0x6EAAEFC76ACC311F");
			return __0x6EAAEFC76ACC311F.Call(native, p0);
		}

		public void _0x407DC5E97DB1A4D3(object p0, object p1)
		{
			if (__0x407DC5E97DB1A4D3 == null) __0x407DC5E97DB1A4D3 = (Function) native.GetObjectProperty("_0x407DC5E97DB1A4D3");
			__0x407DC5E97DB1A4D3.Call(native, p0, p1);
		}

		public bool IsVehicleModel(int vehicle, int model)
		{
			if (isVehicleModel == null) isVehicleModel = (Function) native.GetObjectProperty("isVehicleModel");
			return (bool) isVehicleModel.Call(native, vehicle, model);
		}

		public bool DoesScriptVehicleGeneratorExist(int vehicleGenerator)
		{
			if (doesScriptVehicleGeneratorExist == null) doesScriptVehicleGeneratorExist = (Function) native.GetObjectProperty("doesScriptVehicleGeneratorExist");
			return (bool) doesScriptVehicleGeneratorExist.Call(native, vehicleGenerator);
		}

		/// <summary>
		/// Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
		/// Parameters:
		/// x/y/z - Generator position
		/// heading - Generator heading
		/// p4 - Unknown (always 5.0)
		/// p5 - Unknown (always 3.0)
		/// modelHash - Vehicle model hash
		/// p7/8/9/10 - Unknown (always -1)
		/// p11 - Unknown (usually TRUE, only one instance of FALSE)
		/// See NativeDB for reference: http://natives.altv.mp/#/0x9DEF883114668116
		/// </summary>
		/// <param name="z">x/y/Generator position</param>
		/// <param name="heading">Generator heading</param>
		/// <param name="p4">Unknown (always 5.0)</param>
		/// <param name="p5">Unknown (always 3.0)</param>
		/// <param name="modelHash">Vehicle model hash</param>
		/// <param name="p11">Unknown (usually TRUE, only one instance of FALSE)</param>
		public int CreateScriptVehicleGenerator(double x, double y, double z, double heading, double p4, double p5, int modelHash, int p7, int p8, int p9, int p10, bool p11, bool p12, bool p13, bool p14, bool p15, int p16)
		{
			if (createScriptVehicleGenerator == null) createScriptVehicleGenerator = (Function) native.GetObjectProperty("createScriptVehicleGenerator");
			return (int) createScriptVehicleGenerator.Call(native, x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
		}

		public void DeleteScriptVehicleGenerator(int vehicleGenerator)
		{
			if (deleteScriptVehicleGenerator == null) deleteScriptVehicleGenerator = (Function) native.GetObjectProperty("deleteScriptVehicleGenerator");
			deleteScriptVehicleGenerator.Call(native, vehicleGenerator);
		}

		/// <summary>
		/// Only called once in the decompiled scripts. Presumably activates the specified generator.
		/// </summary>
		public void SetScriptVehicleGenerator(int vehicleGenerator, bool enabled)
		{
			if (setScriptVehicleGenerator == null) setScriptVehicleGenerator = (Function) native.GetObjectProperty("setScriptVehicleGenerator");
			setScriptVehicleGenerator.Call(native, vehicleGenerator, enabled);
		}

		public void SetAllVehicleGeneratorsActiveInArea(double x1, double y1, double z1, double x2, double y2, double z2, bool p6, bool p7)
		{
			if (setAllVehicleGeneratorsActiveInArea == null) setAllVehicleGeneratorsActiveInArea = (Function) native.GetObjectProperty("setAllVehicleGeneratorsActiveInArea");
			setAllVehicleGeneratorsActiveInArea.Call(native, x1, y1, z1, x2, y2, z2, p6, p7);
		}

		public void SetAllVehicleGeneratorsActive()
		{
			if (setAllVehicleGeneratorsActive == null) setAllVehicleGeneratorsActive = (Function) native.GetObjectProperty("setAllVehicleGeneratorsActive");
			setAllVehicleGeneratorsActive.Call(native);
		}

		public void SetAllLowPriorityVehicleGeneratorsActive(bool active)
		{
			if (setAllLowPriorityVehicleGeneratorsActive == null) setAllLowPriorityVehicleGeneratorsActive = (Function) native.GetObjectProperty("setAllLowPriorityVehicleGeneratorsActive");
			setAllLowPriorityVehicleGeneratorsActive.Call(native, active);
		}

		/// <summary>
		/// SET_VEHICLE_*
		/// </summary>
		public void _0x9A75585FB2E54FAD(double x, double y, double z, double p3)
		{
			if (__0x9A75585FB2E54FAD == null) __0x9A75585FB2E54FAD = (Function) native.GetObjectProperty("_0x9A75585FB2E54FAD");
			__0x9A75585FB2E54FAD.Call(native, x, y, z, p3);
		}

		/// <summary>
		/// CLEAR_VEHICLE_*
		/// </summary>
		public void _0x0A436B8643716D14()
		{
			if (__0x0A436B8643716D14 == null) __0x0A436B8643716D14 = (Function) native.GetObjectProperty("_0x0A436B8643716D14");
			__0x0A436B8643716D14.Call(native);
		}

		/// <summary>
		/// sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
		/// </summary>
		/// <returns>Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.</returns>
		public bool SetVehicleOnGroundProperly(int vehicle, double p1)
		{
			if (setVehicleOnGroundProperly == null) setVehicleOnGroundProperly = (Function) native.GetObjectProperty("setVehicleOnGroundProperly");
			return (bool) setVehicleOnGroundProperly.Call(native, vehicle, p1);
		}

		public object SetVehicleUseCutsceneWheelCompression(int p0, bool p1, bool p2, bool p3)
		{
			if (setVehicleUseCutsceneWheelCompression == null) setVehicleUseCutsceneWheelCompression = (Function) native.GetObjectProperty("setVehicleUseCutsceneWheelCompression");
			return setVehicleUseCutsceneWheelCompression.Call(native, p0, p1, p2, p3);
		}

		public bool IsVehicleStuckOnRoof(int vehicle)
		{
			if (isVehicleStuckOnRoof == null) isVehicleStuckOnRoof = (Function) native.GetObjectProperty("isVehicleStuckOnRoof");
			return (bool) isVehicleStuckOnRoof.Call(native, vehicle);
		}

		public void AddVehicleUpsidedownCheck(int vehicle)
		{
			if (addVehicleUpsidedownCheck == null) addVehicleUpsidedownCheck = (Function) native.GetObjectProperty("addVehicleUpsidedownCheck");
			addVehicleUpsidedownCheck.Call(native, vehicle);
		}

		public void RemoveVehicleUpsidedownCheck(int vehicle)
		{
			if (removeVehicleUpsidedownCheck == null) removeVehicleUpsidedownCheck = (Function) native.GetObjectProperty("removeVehicleUpsidedownCheck");
			removeVehicleUpsidedownCheck.Call(native, vehicle);
		}

		/// <summary>
		/// For some vehicles it returns true if the current speed is <= 0.00039999999.
		/// </summary>
		/// <returns>Returns true if the vehicle's current speed is less than, or equal to 0.0025f.</returns>
		public bool IsVehicleStopped(int vehicle)
		{
			if (isVehicleStopped == null) isVehicleStopped = (Function) native.GetObjectProperty("isVehicleStopped");
			return (bool) isVehicleStopped.Call(native, vehicle);
		}

		/// <summary>
		/// Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
		/// </summary>
		public int GetVehicleNumberOfPassengers(int vehicle)
		{
			if (getVehicleNumberOfPassengers == null) getVehicleNumberOfPassengers = (Function) native.GetObjectProperty("getVehicleNumberOfPassengers");
			return (int) getVehicleNumberOfPassengers.Call(native, vehicle);
		}

		public int GetVehicleMaxNumberOfPassengers(int vehicle)
		{
			if (getVehicleMaxNumberOfPassengers == null) getVehicleMaxNumberOfPassengers = (Function) native.GetObjectProperty("getVehicleMaxNumberOfPassengers");
			return (int) getVehicleMaxNumberOfPassengers.Call(native, vehicle);
		}

		/// <summary>
		/// For a full list, see here: pastebin.com/MdETCS1j
		/// </summary>
		/// <returns>Returns max number of passengers (including the driver) for the specified vehicle model.</returns>
		public int GetVehicleModelNumberOfSeats(int modelHash)
		{
			if (getVehicleModelNumberOfSeats == null) getVehicleModelNumberOfSeats = (Function) native.GetObjectProperty("getVehicleModelNumberOfSeats");
			return (int) getVehicleModelNumberOfSeats.Call(native, modelHash);
		}

		public bool IsSeatWarpOnly(int vehicle, int seatIndex)
		{
			if (isSeatWarpOnly == null) isSeatWarpOnly = (Function) native.GetObjectProperty("isSeatWarpOnly");
			return (bool) isSeatWarpOnly.Call(native, vehicle, seatIndex);
		}

		public bool IsTurretSeat(int vehicle, int seatIndex)
		{
			if (isTurretSeat == null) isTurretSeat = (Function) native.GetObjectProperty("isTurretSeat");
			return (bool) isTurretSeat.Call(native, vehicle, seatIndex);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.</returns>
		public bool DoesVehicleAllowRappel(int vehicle)
		{
			if (doesVehicleAllowRappel == null) doesVehicleAllowRappel = (Function) native.GetObjectProperty("doesVehicleAllowRappel");
			return (bool) doesVehicleAllowRappel.Call(native, vehicle);
		}

		public void SetVehicleDensityMultiplierThisFrame(double multiplier)
		{
			if (setVehicleDensityMultiplierThisFrame == null) setVehicleDensityMultiplierThisFrame = (Function) native.GetObjectProperty("setVehicleDensityMultiplierThisFrame");
			setVehicleDensityMultiplierThisFrame.Call(native, multiplier);
		}

		public void SetRandomVehicleDensityMultiplierThisFrame(double multiplier)
		{
			if (setRandomVehicleDensityMultiplierThisFrame == null) setRandomVehicleDensityMultiplierThisFrame = (Function) native.GetObjectProperty("setRandomVehicleDensityMultiplierThisFrame");
			setRandomVehicleDensityMultiplierThisFrame.Call(native, multiplier);
		}

		public void SetParkedVehicleDensityMultiplierThisFrame(double multiplier)
		{
			if (setParkedVehicleDensityMultiplierThisFrame == null) setParkedVehicleDensityMultiplierThisFrame = (Function) native.GetObjectProperty("setParkedVehicleDensityMultiplierThisFrame");
			setParkedVehicleDensityMultiplierThisFrame.Call(native, multiplier);
		}

		public void SetDisableRandomTrainsThisFrame(bool toggle)
		{
			if (setDisableRandomTrainsThisFrame == null) setDisableRandomTrainsThisFrame = (Function) native.GetObjectProperty("setDisableRandomTrainsThisFrame");
			setDisableRandomTrainsThisFrame.Call(native, toggle);
		}

		public void SetAmbientVehicleRangeMultiplierThisFrame(double value)
		{
			if (setAmbientVehicleRangeMultiplierThisFrame == null) setAmbientVehicleRangeMultiplierThisFrame = (Function) native.GetObjectProperty("setAmbientVehicleRangeMultiplierThisFrame");
			setAmbientVehicleRangeMultiplierThisFrame.Call(native, value);
		}

		public void SetFarDrawVehicles(bool toggle)
		{
			if (setFarDrawVehicles == null) setFarDrawVehicles = (Function) native.GetObjectProperty("setFarDrawVehicles");
			setFarDrawVehicles.Call(native, toggle);
		}

		public void SetNumberOfParkedVehicles(int value)
		{
			if (setNumberOfParkedVehicles == null) setNumberOfParkedVehicles = (Function) native.GetObjectProperty("setNumberOfParkedVehicles");
			setNumberOfParkedVehicles.Call(native, value);
		}

		/// <summary>
		/// 0 - CARLOCK_NONE
		/// 1 - CARLOCK_UNLOCKED
		/// 2 - CARLOCK_LOCKED (locked)
		/// 3 - CARLOCK_LOCKOUT_PLAYER_ONLY
		/// 4 - CARLOCK_LOCKED_PLAYER_INSIDE (can get in, can't leave)
		/// (maybe, these are leftovers from GTA:VC)
		/// 5 - CARLOCK_LOCKED_INITIALLY
		/// 6 - CARLOCK_FORCE_SHUT_DOORS
		/// 7 - CARLOCK_LOCKED_BUT_CAN_BE_DAMAGED
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB664292EAECF7FA6
		/// </summary>
		public void SetVehicleDoorsLocked(int vehicle, int doorLockStatus)
		{
			if (setVehicleDoorsLocked == null) setVehicleDoorsLocked = (Function) native.GetObjectProperty("setVehicleDoorsLocked");
			setVehicleDoorsLocked.Call(native, vehicle, doorLockStatus);
		}

		/// <summary>
		/// destroyType is 1 for opens on damage, 2 for breaks on damage.
		/// </summary>
		/// <param name="destroyType">is 1 for opens on damage, 2 for breaks on damage.</param>
		public void SetVehicleDoorDestroyType(int vehicle, int doorIndex, int destroyType)
		{
			if (setVehicleDoorDestroyType == null) setVehicleDoorDestroyType = (Function) native.GetObjectProperty("setVehicleDoorDestroyType");
			setVehicleDoorDestroyType.Call(native, vehicle, doorIndex, destroyType);
		}

		/// <summary>
		/// if set to true, prevents vehicle sirens from having sound, leaving only the lights.
		/// </summary>
		public void SetVehicleHasMutedSirens(int vehicle, bool toggle)
		{
			if (setVehicleHasMutedSirens == null) setVehicleHasMutedSirens = (Function) native.GetObjectProperty("setVehicleHasMutedSirens");
			setVehicleHasMutedSirens.Call(native, vehicle, toggle);
		}

		public void SetVehicleDoorsLockedForPlayer(int vehicle, int player, bool toggle)
		{
			if (setVehicleDoorsLockedForPlayer == null) setVehicleDoorsLockedForPlayer = (Function) native.GetObjectProperty("setVehicleDoorsLockedForPlayer");
			setVehicleDoorsLockedForPlayer.Call(native, vehicle, player, toggle);
		}

		public bool GetVehicleDoorsLockedForPlayer(int vehicle, int player)
		{
			if (getVehicleDoorsLockedForPlayer == null) getVehicleDoorsLockedForPlayer = (Function) native.GetObjectProperty("getVehicleDoorsLockedForPlayer");
			return (bool) getVehicleDoorsLockedForPlayer.Call(native, vehicle, player);
		}

		/// <summary>
		/// After some analysis, I've decided that these are what the parameters are.
		/// We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
		/// l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
		/// ...
		/// VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);
		/// </summary>
		public void SetVehicleDoorsLockedForAllPlayers(int vehicle, bool toggle)
		{
			if (setVehicleDoorsLockedForAllPlayers == null) setVehicleDoorsLockedForAllPlayers = (Function) native.GetObjectProperty("setVehicleDoorsLockedForAllPlayers");
			setVehicleDoorsLockedForAllPlayers.Call(native, vehicle, toggle);
		}

		public void SetVehicleDoorsLockedForNonScriptPlayers(int vehicle, bool toggle)
		{
			if (setVehicleDoorsLockedForNonScriptPlayers == null) setVehicleDoorsLockedForNonScriptPlayers = (Function) native.GetObjectProperty("setVehicleDoorsLockedForNonScriptPlayers");
			setVehicleDoorsLockedForNonScriptPlayers.Call(native, vehicle, toggle);
		}

		public void SetVehicleDoorsLockedForTeam(int vehicle, int team, bool toggle)
		{
			if (setVehicleDoorsLockedForTeam == null) setVehicleDoorsLockedForTeam = (Function) native.GetObjectProperty("setVehicleDoorsLockedForTeam");
			setVehicleDoorsLockedForTeam.Call(native, vehicle, team, toggle);
		}

		public void SetVehicleDoorsLockedForUnk(int vehicle, bool toggle)
		{
			if (setVehicleDoorsLockedForUnk == null) setVehicleDoorsLockedForUnk = (Function) native.GetObjectProperty("setVehicleDoorsLockedForUnk");
			setVehicleDoorsLockedForUnk.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// SET_VEHICLE_*
		/// </summary>
		public void _0x76D26A22750E849E(int vehicle)
		{
			if (__0x76D26A22750E849E == null) __0x76D26A22750E849E = (Function) native.GetObjectProperty("_0x76D26A22750E849E");
			__0x76D26A22750E849E.Call(native, vehicle);
		}

		/// <summary>
		/// Explodes a selected vehicle.
		/// Vehicle vehicle = Vehicle you want to explode.
		/// BOOL isAudible = If explosion makes a sound.
		/// BOOL isInvisible = If the explosion is invisible or not.
		/// First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
		/// </summary>
		/// <param name="vehicle">Vehicle Vehicle you want to explode.</param>
		/// <param name="isAudible">BOOL If explosion makes a sound.</param>
		/// <param name="isInvisible">BOOL If the explosion is invisible or not.</param>
		public void ExplodeVehicle(int vehicle, bool isAudible, bool isInvisible)
		{
			if (explodeVehicle == null) explodeVehicle = (Function) native.GetObjectProperty("explodeVehicle");
			explodeVehicle.Call(native, vehicle, isAudible, isInvisible);
		}

		/// <summary>
		/// Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
		/// </summary>
		public void SetVehicleOutOfControl(int vehicle, bool killDriver, bool explodeOnImpact)
		{
			if (setVehicleOutOfControl == null) setVehicleOutOfControl = (Function) native.GetObjectProperty("setVehicleOutOfControl");
			setVehicleOutOfControl.Call(native, vehicle, killDriver, explodeOnImpact);
		}

		public void SetVehicleTimedExplosion(int vehicle, int ped, bool toggle)
		{
			if (setVehicleTimedExplosion == null) setVehicleTimedExplosion = (Function) native.GetObjectProperty("setVehicleTimedExplosion");
			setVehicleTimedExplosion.Call(native, vehicle, ped, toggle);
		}

		public void AddVehiclePhoneExplosiveDevice(int vehicle)
		{
			if (addVehiclePhoneExplosiveDevice == null) addVehiclePhoneExplosiveDevice = (Function) native.GetObjectProperty("addVehiclePhoneExplosiveDevice");
			addVehiclePhoneExplosiveDevice.Call(native, vehicle);
		}

		public void ClearVehiclePhoneExplosiveDevice()
		{
			if (clearVehiclePhoneExplosiveDevice == null) clearVehiclePhoneExplosiveDevice = (Function) native.GetObjectProperty("clearVehiclePhoneExplosiveDevice");
			clearVehiclePhoneExplosiveDevice.Call(native);
		}

		public bool HasVehiclePhoneExplosiveDevice()
		{
			if (hasVehiclePhoneExplosiveDevice == null) hasVehiclePhoneExplosiveDevice = (Function) native.GetObjectProperty("hasVehiclePhoneExplosiveDevice");
			return (bool) hasVehiclePhoneExplosiveDevice.Call(native);
		}

		public void DetonateVehiclePhoneExplosiveDevice()
		{
			if (detonateVehiclePhoneExplosiveDevice == null) detonateVehiclePhoneExplosiveDevice = (Function) native.GetObjectProperty("detonateVehiclePhoneExplosiveDevice");
			detonateVehiclePhoneExplosiveDevice.Call(native);
		}

		/// <summary>
		/// This is not tested - it's just an assumption.
		/// - Nac
		/// Doesn't seem to work.  I'll try with an int instead. --JT
		/// Read the scripts, im dumpass.
		/// if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
		/// VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
		/// }
		/// </summary>
		public void SetTaxiLights(int vehicle, bool state)
		{
			if (setTaxiLights == null) setTaxiLights = (Function) native.GetObjectProperty("setTaxiLights");
			setTaxiLights.Call(native, vehicle, state);
		}

		public bool IsTaxiLightOn(int vehicle)
		{
			if (isTaxiLightOn == null) isTaxiLightOn = (Function) native.GetObjectProperty("isTaxiLightOn");
			return (bool) isTaxiLightOn.Call(native, vehicle);
		}

		/// <summary>
		/// garageName example "Michael - Beverly Hills"
		/// For a full list, see here: pastebin.com/73VfwsmS
		/// </summary>
		/// <param name="garageName">example "Michael - Beverly Hills"</param>
		public bool IsVehicleInGarageArea(string garageName, int vehicle)
		{
			if (isVehicleInGarageArea == null) isVehicleInGarageArea = (Function) native.GetObjectProperty("isVehicleInGarageArea");
			return (bool) isVehicleInGarageArea.Call(native, garageName, vehicle);
		}

		/// <summary>
		/// colorPrimary & colorSecondary are the paint index for the vehicle.
		/// For a list of valid paint indexes, view: pastebin.com/pwHci0xK
		/// -------------------------------------------------------------------------
		/// Use this to get the number of color indices: pastebin.com/RQEeqTSM
		/// Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
		/// </summary>
		/// <param name="colorPrimary">& colorSecondary are the paint index for the vehicle.</param>
		public void SetVehicleColours(int vehicle, int colorPrimary, int colorSecondary)
		{
			if (setVehicleColours == null) setVehicleColours = (Function) native.GetObjectProperty("setVehicleColours");
			setVehicleColours.Call(native, vehicle, colorPrimary, colorSecondary);
		}

		/// <summary>
		/// It switch to highbeam when p1 is set to true.
		/// </summary>
		public void SetVehicleFullbeam(int vehicle, bool toggle)
		{
			if (setVehicleFullbeam == null) setVehicleFullbeam = (Function) native.GetObjectProperty("setVehicleFullbeam");
			setVehicleFullbeam.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
		/// </summary>
		public void SetVehicleIsRacing(int vehicle, bool toggle)
		{
			if (setVehicleIsRacing == null) setVehicleIsRacing = (Function) native.GetObjectProperty("setVehicleIsRacing");
			setVehicleIsRacing.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
		/// </summary>
		public void SetVehicleCustomPrimaryColour(int vehicle, int r, int g, int b)
		{
			if (setVehicleCustomPrimaryColour == null) setVehicleCustomPrimaryColour = (Function) native.GetObjectProperty("setVehicleCustomPrimaryColour");
			setVehicleCustomPrimaryColour.Call(native, vehicle, r, g, b);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetVehicleCustomPrimaryColour(int vehicle, int r, int g, int b)
		{
			if (getVehicleCustomPrimaryColour == null) getVehicleCustomPrimaryColour = (Function) native.GetObjectProperty("getVehicleCustomPrimaryColour");
			var results = (Array) getVehicleCustomPrimaryColour.Call(native, vehicle, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		public void ClearVehicleCustomPrimaryColour(int vehicle)
		{
			if (clearVehicleCustomPrimaryColour == null) clearVehicleCustomPrimaryColour = (Function) native.GetObjectProperty("clearVehicleCustomPrimaryColour");
			clearVehicleCustomPrimaryColour.Call(native, vehicle);
		}

		public bool GetIsVehiclePrimaryColourCustom(int vehicle)
		{
			if (getIsVehiclePrimaryColourCustom == null) getIsVehiclePrimaryColourCustom = (Function) native.GetObjectProperty("getIsVehiclePrimaryColourCustom");
			return (bool) getIsVehiclePrimaryColourCustom.Call(native, vehicle);
		}

		/// <summary>
		/// p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
		/// </summary>
		public void SetVehicleCustomSecondaryColour(int vehicle, int r, int g, int b)
		{
			if (setVehicleCustomSecondaryColour == null) setVehicleCustomSecondaryColour = (Function) native.GetObjectProperty("setVehicleCustomSecondaryColour");
			setVehicleCustomSecondaryColour.Call(native, vehicle, r, g, b);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetVehicleCustomSecondaryColour(int vehicle, int r, int g, int b)
		{
			if (getVehicleCustomSecondaryColour == null) getVehicleCustomSecondaryColour = (Function) native.GetObjectProperty("getVehicleCustomSecondaryColour");
			var results = (Array) getVehicleCustomSecondaryColour.Call(native, vehicle, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		public void ClearVehicleCustomSecondaryColour(int vehicle)
		{
			if (clearVehicleCustomSecondaryColour == null) clearVehicleCustomSecondaryColour = (Function) native.GetObjectProperty("clearVehicleCustomSecondaryColour");
			clearVehicleCustomSecondaryColour.Call(native, vehicle);
		}

		/// <summary>
		/// Check if Vehicle Secondary is avaliable for customize
		/// </summary>
		public bool GetIsVehicleSecondaryColourCustom(int vehicle)
		{
			if (getIsVehicleSecondaryColourCustom == null) getIsVehicleSecondaryColourCustom = (Function) native.GetObjectProperty("getIsVehicleSecondaryColourCustom");
			return (bool) getIsVehicleSecondaryColourCustom.Call(native, vehicle);
		}

		/// <summary>
		/// formerly known as _SET_VEHICLE_PAINT_FADE
		/// The parameter fade is a value from 0-1, where 0 is fresh paint.
		/// </summary>
		public void SetVehicleEnveffScale(int vehicle, double fade)
		{
			if (setVehicleEnveffScale == null) setVehicleEnveffScale = (Function) native.GetObjectProperty("setVehicleEnveffScale");
			setVehicleEnveffScale.Call(native, vehicle, fade);
		}

		/// <summary>
		/// formerly known as _GET_VEHICLE_PAINT_FADE
		/// The result is a value from 0-1, where 0 is fresh paint.
		/// </summary>
		public double GetVehicleEnveffScale(int vehicle)
		{
			if (getVehicleEnveffScale == null) getVehicleEnveffScale = (Function) native.GetObjectProperty("getVehicleEnveffScale");
			return (double) getVehicleEnveffScale.Call(native, vehicle);
		}

		/// <summary>
		/// Hardcoded to not work in multiplayer.
		/// </summary>
		public void SetCanResprayVehicle(int vehicle, bool state)
		{
			if (setCanResprayVehicle == null) setCanResprayVehicle = (Function) native.GetObjectProperty("setCanResprayVehicle");
			setCanResprayVehicle.Call(native, vehicle, state);
		}

		public void _0xAB31EF4DE6800CE9(object p0, object p1)
		{
			if (__0xAB31EF4DE6800CE9 == null) __0xAB31EF4DE6800CE9 = (Function) native.GetObjectProperty("_0xAB31EF4DE6800CE9");
			__0xAB31EF4DE6800CE9.Call(native, p0, p1);
		}

		/// <summary>
		/// Sets a value that appears to affect door opening behavior when damaged.
		/// SET_*
		/// </summary>
		public void _0x1B212B26DD3C04DF(int vehicle, bool toggle)
		{
			if (__0x1B212B26DD3C04DF == null) __0x1B212B26DD3C04DF = (Function) native.GetObjectProperty("_0x1B212B26DD3C04DF");
			__0x1B212B26DD3C04DF.Call(native, vehicle, toggle);
		}

		public void ForceSubmarineSurfaceMode(int vehicle, bool toggle)
		{
			if (forceSubmarineSurfaceMode == null) forceSubmarineSurfaceMode = (Function) native.GetObjectProperty("forceSubmarineSurfaceMode");
			forceSubmarineSurfaceMode.Call(native, vehicle, toggle);
		}

		public void SetSubmarineCrushDepths(int vehicle, bool p1, double depth1, double depth2, double depth3)
		{
			if (setSubmarineCrushDepths == null) setSubmarineCrushDepths = (Function) native.GetObjectProperty("setSubmarineCrushDepths");
			setSubmarineCrushDepths.Call(native, vehicle, p1, depth1, depth2, depth3);
		}

		public void _0xED5EDE9E676643C9(object p0, object p1)
		{
			if (__0xED5EDE9E676643C9 == null) __0xED5EDE9E676643C9 = (Function) native.GetObjectProperty("_0xED5EDE9E676643C9");
			__0xED5EDE9E676643C9.Call(native, p0, p1);
		}

		public void SetBoatAnchor(int vehicle, bool toggle)
		{
			if (setBoatAnchor == null) setBoatAnchor = (Function) native.GetObjectProperty("setBoatAnchor");
			setBoatAnchor.Call(native, vehicle, toggle);
		}

		public bool CanAnchorBoatHere(int vehicle)
		{
			if (canAnchorBoatHere == null) canAnchorBoatHere = (Function) native.GetObjectProperty("canAnchorBoatHere");
			return (bool) canAnchorBoatHere.Call(native, vehicle);
		}

		public bool CanAnchorBoatHere2(int vehicle)
		{
			if (canAnchorBoatHere2 == null) canAnchorBoatHere2 = (Function) native.GetObjectProperty("canAnchorBoatHere2");
			return (bool) canAnchorBoatHere2.Call(native, vehicle);
		}

		public void SetBoatFrozenWhenAnchored(int vehicle, bool toggle)
		{
			if (setBoatFrozenWhenAnchored == null) setBoatFrozenWhenAnchored = (Function) native.GetObjectProperty("setBoatFrozenWhenAnchored");
			setBoatFrozenWhenAnchored.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// No observed effect.
		/// </summary>
		public void _0xB28B1FE5BFADD7F5(int vehicle, bool p1)
		{
			if (__0xB28B1FE5BFADD7F5 == null) __0xB28B1FE5BFADD7F5 = (Function) native.GetObjectProperty("_0xB28B1FE5BFADD7F5");
			__0xB28B1FE5BFADD7F5.Call(native, vehicle, p1);
		}

		public void SetBoatMovementResistance(int vehicle, double value)
		{
			if (setBoatMovementResistance == null) setBoatMovementResistance = (Function) native.GetObjectProperty("setBoatMovementResistance");
			setBoatMovementResistance.Call(native, vehicle, value);
		}

		/// <summary>
		/// IS_*
		/// </summary>
		public bool IsBoatAnchoredAndFrozen(int vehicle)
		{
			if (isBoatAnchoredAndFrozen == null) isBoatAnchoredAndFrozen = (Function) native.GetObjectProperty("isBoatAnchoredAndFrozen");
			return (bool) isBoatAnchoredAndFrozen.Call(native, vehicle);
		}

		public void SetBoatSinksWhenWrecked(int vehicle, bool toggle)
		{
			if (setBoatSinksWhenWrecked == null) setBoatSinksWhenWrecked = (Function) native.GetObjectProperty("setBoatSinksWhenWrecked");
			setBoatSinksWhenWrecked.Call(native, vehicle, toggle);
		}

		public void SetBoatIsSinking(object p0)
		{
			if (setBoatIsSinking == null) setBoatIsSinking = (Function) native.GetObjectProperty("setBoatIsSinking");
			setBoatIsSinking.Call(native, p0);
		}

		/// <summary>
		/// Activate siren on vehicle (Only works if the vehicle has a siren).
		/// </summary>
		public void SetVehicleSiren(int vehicle, bool toggle)
		{
			if (setVehicleSiren == null) setVehicleSiren = (Function) native.GetObjectProperty("setVehicleSiren");
			setVehicleSiren.Call(native, vehicle, toggle);
		}

		public bool IsVehicleSirenOn(int vehicle)
		{
			if (isVehicleSirenOn == null) isVehicleSirenOn = (Function) native.GetObjectProperty("isVehicleSirenOn");
			return (bool) isVehicleSirenOn.Call(native, vehicle);
		}

		public bool IsVehicleSirenAudioOn(int vehicle)
		{
			if (isVehicleSirenAudioOn == null) isVehicleSirenAudioOn = (Function) native.GetObjectProperty("isVehicleSirenAudioOn");
			return (bool) isVehicleSirenAudioOn.Call(native, vehicle);
		}

		/// <summary>
		/// If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
		/// </summary>
		public void SetVehicleStrong(int vehicle, bool toggle)
		{
			if (setVehicleStrong == null) setVehicleStrong = (Function) native.GetObjectProperty("setVehicleStrong");
			setVehicleStrong.Call(native, vehicle, toggle);
		}

		public void RemoveVehicleStuckCheck(int vehicle)
		{
			if (removeVehicleStuckCheck == null) removeVehicleStuckCheck = (Function) native.GetObjectProperty("removeVehicleStuckCheck");
			removeVehicleStuckCheck.Call(native, vehicle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int></returns>
		public (object, int, int) GetVehicleColours(int vehicle, int colorPrimary, int colorSecondary)
		{
			if (getVehicleColours == null) getVehicleColours = (Function) native.GetObjectProperty("getVehicleColours");
			var results = (Array) getVehicleColours.Call(native, vehicle, colorPrimary, colorSecondary);
			return (results[0], (int) results[1], (int) results[2]);
		}

		/// <summary>
		/// Has an additional BOOL parameter since version [???].
		/// Check if a vehicle seat is free.
		/// -1 being the driver seat.
		/// Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
		/// </summary>
		public bool IsVehicleSeatFree(int vehicle, int seatIndex, bool p2)
		{
			if (isVehicleSeatFree == null) isVehicleSeatFree = (Function) native.GetObjectProperty("isVehicleSeatFree");
			return (bool) isVehicleSeatFree.Call(native, vehicle, seatIndex, p2);
		}

		/// <summary>
		/// -1 (driver) <= index < GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle)
		/// </summary>
		public int GetPedInVehicleSeat(int vehicle, int index, object p2)
		{
			if (getPedInVehicleSeat == null) getPedInVehicleSeat = (Function) native.GetObjectProperty("getPedInVehicleSeat");
			return (int) getPedInVehicleSeat.Call(native, vehicle, index, p2);
		}

		public int GetLastPedInVehicleSeat(int vehicle, int seatIndex)
		{
			if (getLastPedInVehicleSeat == null) getLastPedInVehicleSeat = (Function) native.GetObjectProperty("getLastPedInVehicleSeat");
			return (int) getLastPedInVehicleSeat.Call(native, vehicle, seatIndex);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, bool, bool></returns>
		public (bool, bool, bool) GetVehicleLightsState(int vehicle, bool lightsOn, bool highbeamsOn)
		{
			if (getVehicleLightsState == null) getVehicleLightsState = (Function) native.GetObjectProperty("getVehicleLightsState");
			var results = (Array) getVehicleLightsState.Call(native, vehicle, lightsOn, highbeamsOn);
			return ((bool) results[0], (bool) results[1], (bool) results[2]);
		}

		/// <summary>
		/// wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
		/// completely - is to check if tire completely gone from rim.
		/// '0 = wheel_lf / bike, plane or jet front
		/// '1 = wheel_rf
		/// '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
		/// '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
		/// '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
		/// '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
		/// '45 = 6 wheels trailer mid wheel left
		/// '47 = 6 wheels trailer mid wheel right
		/// </summary>
		/// <param name="wheelID">used for 4 wheelers seem to be (0, 1, 4, 5)</param>
		/// <param name="completely">is to check if tire completely gone from rim.</param>
		public bool IsVehicleTyreBurst(int vehicle, int wheelID, bool completely)
		{
			if (isVehicleTyreBurst == null) isVehicleTyreBurst = (Function) native.GetObjectProperty("isVehicleTyreBurst");
			return (bool) isVehicleTyreBurst.Call(native, vehicle, wheelID, completely);
		}

		/// <summary>
		/// SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
		/// Speed is in meters per second
		/// You can convert meters/s to mph here:
		/// http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
		/// </summary>
		/// <param name="speed">Speed is in meters per second</param>
		public void SetVehicleForwardSpeed(int vehicle, double speed)
		{
			if (setVehicleForwardSpeed == null) setVehicleForwardSpeed = (Function) native.GetObjectProperty("setVehicleForwardSpeed");
			setVehicleForwardSpeed.Call(native, vehicle, speed);
		}

		public void _0x6501129C9E0FFA05(object p0, object p1)
		{
			if (__0x6501129C9E0FFA05 == null) __0x6501129C9E0FFA05 = (Function) native.GetObjectProperty("_0x6501129C9E0FFA05");
			__0x6501129C9E0FFA05.Call(native, p0, p1);
		}

		/// <summary>
		/// This native makes the vehicle stop immediately, as happens when we enter a MP garage.
		/// . distance defines how far it will travel until stopping. Garage doors use 3.0.
		/// . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
		/// </summary>
		public void BringVehicleToHalt(int vehicle, double distance, int duration, bool unknown)
		{
			if (bringVehicleToHalt == null) bringVehicleToHalt = (Function) native.GetObjectProperty("bringVehicleToHalt");
			bringVehicleToHalt.Call(native, vehicle, distance, duration, unknown);
		}

		public void _0xDCE97BDF8A0EABC8(object p0, object p1)
		{
			if (__0xDCE97BDF8A0EABC8 == null) __0xDCE97BDF8A0EABC8 = (Function) native.GetObjectProperty("_0xDCE97BDF8A0EABC8");
			__0xDCE97BDF8A0EABC8.Call(native, p0, p1);
		}

		public void _0x9849DE24FCF23CCC(object p0, object p1)
		{
			if (__0x9849DE24FCF23CCC == null) __0x9849DE24FCF23CCC = (Function) native.GetObjectProperty("_0x9849DE24FCF23CCC");
			__0x9849DE24FCF23CCC.Call(native, p0, p1);
		}

		public void _0x7C06330BFDDA182E(object p0)
		{
			if (__0x7C06330BFDDA182E == null) __0x7C06330BFDDA182E = (Function) native.GetObjectProperty("_0x7C06330BFDDA182E");
			__0x7C06330BFDDA182E.Call(native, p0);
		}

		public object _0xC69BB1D832A710EF(object p0)
		{
			if (__0xC69BB1D832A710EF == null) __0xC69BB1D832A710EF = (Function) native.GetObjectProperty("_0xC69BB1D832A710EF");
			return __0xC69BB1D832A710EF.Call(native, p0);
		}

		/// <summary>
		/// 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
		/// </summary>
		public void SetForkliftForkHeight(int vehicle, double height)
		{
			if (setForkliftForkHeight == null) setForkliftForkHeight = (Function) native.GetObjectProperty("setForkliftForkHeight");
			setForkliftForkHeight.Call(native, vehicle, height);
		}

		public bool IsEntityAttachedToHandlerFrame(int vehicle, int entity)
		{
			if (isEntityAttachedToHandlerFrame == null) isEntityAttachedToHandlerFrame = (Function) native.GetObjectProperty("isEntityAttachedToHandlerFrame");
			return (bool) isEntityAttachedToHandlerFrame.Call(native, vehicle, entity);
		}

		public bool _0x62CA17B74C435651(int vehicle)
		{
			if (__0x62CA17B74C435651 == null) __0x62CA17B74C435651 = (Function) native.GetObjectProperty("_0x62CA17B74C435651");
			return (bool) __0x62CA17B74C435651.Call(native, vehicle);
		}

		/// <summary>
		/// Finds the vehicle that is carrying this entity with a handler frame.
		/// The model of the entity must be prop_contr_03b_ld or the function will return 0.
		/// </summary>
		public int FindVehicleCarryingThisEntity(int entity)
		{
			if (findVehicleCarryingThisEntity == null) findVehicleCarryingThisEntity = (Function) native.GetObjectProperty("findVehicleCarryingThisEntity");
			return (int) findVehicleCarryingThisEntity.Call(native, entity);
		}

		public bool IsHandlerFrameAboveContainer(int vehicle, int entity)
		{
			if (isHandlerFrameAboveContainer == null) isHandlerFrameAboveContainer = (Function) native.GetObjectProperty("isHandlerFrameAboveContainer");
			return (bool) isHandlerFrameAboveContainer.Call(native, vehicle, entity);
		}

		public void _0x6A98C2ECF57FA5D4(int vehicle, int entity)
		{
			if (__0x6A98C2ECF57FA5D4 == null) __0x6A98C2ECF57FA5D4 = (Function) native.GetObjectProperty("_0x6A98C2ECF57FA5D4");
			__0x6A98C2ECF57FA5D4.Call(native, vehicle, entity);
		}

		public void DetachContainerFromHandlerFrame(int vehicle)
		{
			if (detachContainerFromHandlerFrame == null) detachContainerFromHandlerFrame = (Function) native.GetObjectProperty("detachContainerFromHandlerFrame");
			detachContainerFromHandlerFrame.Call(native, vehicle);
		}

		public void _0x8AA9180DE2FEDD45(int vehicle, bool p1)
		{
			if (__0x8AA9180DE2FEDD45 == null) __0x8AA9180DE2FEDD45 = (Function) native.GetObjectProperty("_0x8AA9180DE2FEDD45");
			__0x8AA9180DE2FEDD45.Call(native, vehicle, p1);
		}

		public void SetBoatDisableAvoidance(int vehicle, bool p1)
		{
			if (setBoatDisableAvoidance == null) setBoatDisableAvoidance = (Function) native.GetObjectProperty("setBoatDisableAvoidance");
			setBoatDisableAvoidance.Call(native, vehicle, p1);
		}

		public bool IsHeliLandingAreaBlocked(int vehicle)
		{
			if (isHeliLandingAreaBlocked == null) isHeliLandingAreaBlocked = (Function) native.GetObjectProperty("isHeliLandingAreaBlocked");
			return (bool) isHeliLandingAreaBlocked.Call(native, vehicle);
		}

		public void _0x107A473D7A6647A9(object p0)
		{
			if (__0x107A473D7A6647A9 == null) __0x107A473D7A6647A9 = (Function) native.GetObjectProperty("_0x107A473D7A6647A9");
			__0x107A473D7A6647A9.Call(native, p0);
		}

		public void SetHeliTurbulenceScalar(int vehicle, double p1)
		{
			if (setHeliTurbulenceScalar == null) setHeliTurbulenceScalar = (Function) native.GetObjectProperty("setHeliTurbulenceScalar");
			setHeliTurbulenceScalar.Call(native, vehicle, p1);
		}

		/// <summary>
		/// Initially used in Max Payne 3, that's why we know the name.
		/// </summary>
		public void SetCarBootOpen(int vehicle)
		{
			if (setCarBootOpen == null) setCarBootOpen = (Function) native.GetObjectProperty("setCarBootOpen");
			setCarBootOpen.Call(native, vehicle);
		}

		/// <summary>
		/// "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
		/// to burst all tyres type it 8 times where p1 = 0 to 7.
		/// p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
		/// '0 = wheel_lf / bike, plane or jet front
		/// '1 = wheel_rf
		/// '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
		/// '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
		/// '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
		/// '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
		/// See NativeDB for reference: http://natives.altv.mp/#/0xEC6A202EE4960385
		/// </summary>
		/// <param name="p3">seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.</param>
		public void SetVehicleTyreBurst(int vehicle, int index, bool onRim, double p3)
		{
			if (setVehicleTyreBurst == null) setVehicleTyreBurst = (Function) native.GetObjectProperty("setVehicleTyreBurst");
			setVehicleTyreBurst.Call(native, vehicle, index, onRim, p3);
		}

		/// <summary>
		/// Closes all doors of a vehicle:
		/// </summary>
		public void SetVehicleDoorsShut(int vehicle, bool closeInstantly)
		{
			if (setVehicleDoorsShut == null) setVehicleDoorsShut = (Function) native.GetObjectProperty("setVehicleDoorsShut");
			setVehicleDoorsShut.Call(native, vehicle, closeInstantly);
		}

		/// <summary>
		/// Allows you to toggle bulletproof tires.
		/// </summary>
		public void SetVehicleTyresCanBurst(int vehicle, bool toggle)
		{
			if (setVehicleTyresCanBurst == null) setVehicleTyresCanBurst = (Function) native.GetObjectProperty("setVehicleTyresCanBurst");
			setVehicleTyresCanBurst.Call(native, vehicle, toggle);
		}

		public bool GetVehicleTyresCanBurst(int vehicle)
		{
			if (getVehicleTyresCanBurst == null) getVehicleTyresCanBurst = (Function) native.GetObjectProperty("getVehicleTyresCanBurst");
			return (bool) getVehicleTyresCanBurst.Call(native, vehicle);
		}

		public void SetVehicleWheelsCanBreak(int vehicle, bool enabled)
		{
			if (setVehicleWheelsCanBreak == null) setVehicleWheelsCanBreak = (Function) native.GetObjectProperty("setVehicleWheelsCanBreak");
			setVehicleWheelsCanBreak.Call(native, vehicle, enabled);
		}

		/// <summary>
		/// doorIndex:
		/// 0 = Front Left Door
		/// 1 = Front Right Door
		/// 2 = Back Left Door
		/// 3 = Back Right Door
		/// 4 = Hood
		/// 5 = Trunk
		/// 6 = Back
		/// 7 = Back2
		/// </summary>
		public void SetVehicleDoorOpen(int vehicle, int doorIndex, bool loose, bool openInstantly)
		{
			if (setVehicleDoorOpen == null) setVehicleDoorOpen = (Function) native.GetObjectProperty("setVehicleDoorOpen");
			setVehicleDoorOpen.Call(native, vehicle, doorIndex, loose, openInstantly);
		}

		public void _0x3B458DDB57038F08(object p0, object p1, object p2)
		{
			if (__0x3B458DDB57038F08 == null) __0x3B458DDB57038F08 = (Function) native.GetObjectProperty("_0x3B458DDB57038F08");
			__0x3B458DDB57038F08.Call(native, p0, p1, p2);
		}

		public void _0xA247F9EF01D8082E(object p0)
		{
			if (__0xA247F9EF01D8082E == null) __0xA247F9EF01D8082E = (Function) native.GetObjectProperty("_0xA247F9EF01D8082E");
			__0xA247F9EF01D8082E.Call(native, p0);
		}

		/// <summary>
		/// windowIndex:
		/// 0 = Front Right Window
		/// 1 = Front Left Window
		/// 2 = Back Right Window
		/// 3 = Back Left Window
		/// </summary>
		public void RemoveVehicleWindow(int vehicle, int windowIndex)
		{
			if (removeVehicleWindow == null) removeVehicleWindow = (Function) native.GetObjectProperty("removeVehicleWindow");
			removeVehicleWindow.Call(native, vehicle, windowIndex);
		}

		/// <summary>
		/// Roll down all the windows of the vehicle passed through the first parameter.
		/// </summary>
		public void RollDownWindows(int vehicle)
		{
			if (rollDownWindows == null) rollDownWindows = (Function) native.GetObjectProperty("rollDownWindows");
			rollDownWindows.Call(native, vehicle);
		}

		/// <summary>
		/// windowIndex:
		/// 0 = Front Right Window
		/// 1 = Front Left Window
		/// 2 = Back Right Window
		/// 3 = Back Left Window
		/// </summary>
		public void RollDownWindow(int vehicle, int windowIndex)
		{
			if (rollDownWindow == null) rollDownWindow = (Function) native.GetObjectProperty("rollDownWindow");
			rollDownWindow.Call(native, vehicle, windowIndex);
		}

		/// <summary>
		/// 0 = Front Right Window
		/// 1 = Front Left Window
		/// 2 = Back Right Window
		/// 3 = Back Left Window
		/// </summary>
		public void RollUpWindow(int vehicle, int windowIndex)
		{
			if (rollUpWindow == null) rollUpWindow = (Function) native.GetObjectProperty("rollUpWindow");
			rollUpWindow.Call(native, vehicle, windowIndex);
		}

		public void SmashVehicleWindow(int vehicle, int index)
		{
			if (smashVehicleWindow == null) smashVehicleWindow = (Function) native.GetObjectProperty("smashVehicleWindow");
			smashVehicleWindow.Call(native, vehicle, index);
		}

		public void FixVehicleWindow(int vehicle, int index)
		{
			if (fixVehicleWindow == null) fixVehicleWindow = (Function) native.GetObjectProperty("fixVehicleWindow");
			fixVehicleWindow.Call(native, vehicle, index);
		}

		/// <summary>
		/// Detaches the vehicle's windscreen.
		/// For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
		/// </summary>
		public void DetachVehicleWindscreen(int vehicle)
		{
			if (detachVehicleWindscreen == null) detachVehicleWindscreen = (Function) native.GetObjectProperty("detachVehicleWindscreen");
			detachVehicleWindscreen.Call(native, vehicle);
		}

		public void EjectJb700Roof(int vehicle, double x, double y, double z)
		{
			if (ejectJb700Roof == null) ejectJb700Roof = (Function) native.GetObjectProperty("ejectJb700Roof");
			ejectJb700Roof.Call(native, vehicle, x, y, z);
		}

		/// <summary>
		/// set's if the vehicle has lights or not.
		/// not an on off toggle.
		/// p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
		/// p1 = 1 ;vehicle doesn't have lights, always off
		/// p1 = 2 ;vehicle has always on lights
		/// p1 = 3 ;or even larger like 4,5,... normal lights like =1
		/// note1: when using =2 on day it's lowbeam,highbeam
		/// but at night it's lowbeam,lowbeam,highbeam
		/// note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
		/// </summary>
		public void SetVehicleLights(int vehicle, int state)
		{
			if (setVehicleLights == null) setVehicleLights = (Function) native.GetObjectProperty("setVehicleLights");
			setVehicleLights.Call(native, vehicle, state);
		}

		public void SetVehicleUsePlayerLightSettings(int vehicle, bool p1)
		{
			if (setVehicleUsePlayerLightSettings == null) setVehicleUsePlayerLightSettings = (Function) native.GetObjectProperty("setVehicleUsePlayerLightSettings");
			setVehicleUsePlayerLightSettings.Call(native, vehicle, p1);
		}

		/// <summary>
		/// p1 can be either 0, 1 or 2.
		/// Determines how vehicle lights behave when toggled.
		/// 0 = Default (Lights can be toggled between off, normal and high beams)
		/// 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
		/// 2 = Always On (Lights can be toggled between normal and high beams)
		/// </summary>
		/// <param name="p1">can be either 0, 1 or 2.</param>
		public void SetVehicleLightsMode(int vehicle, int p1)
		{
			if (setVehicleLightsMode == null) setVehicleLightsMode = (Function) native.GetObjectProperty("setVehicleLightsMode");
			setVehicleLightsMode.Call(native, vehicle, p1);
		}

		public void SetVehicleAlarm(int vehicle, bool state)
		{
			if (setVehicleAlarm == null) setVehicleAlarm = (Function) native.GetObjectProperty("setVehicleAlarm");
			setVehicleAlarm.Call(native, vehicle, state);
		}

		public void StartVehicleAlarm(int vehicle)
		{
			if (startVehicleAlarm == null) startVehicleAlarm = (Function) native.GetObjectProperty("startVehicleAlarm");
			startVehicleAlarm.Call(native, vehicle);
		}

		public bool IsVehicleAlarmActivated(int vehicle)
		{
			if (isVehicleAlarmActivated == null) isVehicleAlarmActivated = (Function) native.GetObjectProperty("isVehicleAlarmActivated");
			return (bool) isVehicleAlarmActivated.Call(native, vehicle);
		}

		public void SetVehicleInteriorlight(int vehicle, bool toggle)
		{
			if (setVehicleInteriorlight == null) setVehicleInteriorlight = (Function) native.GetObjectProperty("setVehicleInteriorlight");
			setVehicleInteriorlight.Call(native, vehicle, toggle);
		}

		public void _0x8821196D91FA2DE5(object p0, object p1)
		{
			if (__0x8821196D91FA2DE5 == null) __0x8821196D91FA2DE5 = (Function) native.GetObjectProperty("_0x8821196D91FA2DE5");
			__0x8821196D91FA2DE5.Call(native, p0, p1);
		}

		/// <summary>
		/// multiplier = brightness of head lights.
		/// this value isn't capped afaik.
		/// multiplier = 0.0 no lights
		/// multiplier = 1.0 default game value
		/// </summary>
		/// <param name="multiplier">1.0 default game value</param>
		public void SetVehicleLightMultiplier(int vehicle, double multiplier)
		{
			if (setVehicleLightMultiplier == null) setVehicleLightMultiplier = (Function) native.GetObjectProperty("setVehicleLightMultiplier");
			setVehicleLightMultiplier.Call(native, vehicle, multiplier);
		}

		public void AttachVehicleToTrailer(int vehicle, int trailer, double radius)
		{
			if (attachVehicleToTrailer == null) attachVehicleToTrailer = (Function) native.GetObjectProperty("attachVehicleToTrailer");
			attachVehicleToTrailer.Call(native, vehicle, trailer, radius);
		}

		public void AttachVehicleOnToTrailer(int vehicle, int trailer, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11)
		{
			if (attachVehicleOnToTrailer == null) attachVehicleOnToTrailer = (Function) native.GetObjectProperty("attachVehicleOnToTrailer");
			attachVehicleOnToTrailer.Call(native, vehicle, trailer, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		}

		public void StabiliseEntityAttachedToHeli(int vehicle, int entity, double p2)
		{
			if (stabiliseEntityAttachedToHeli == null) stabiliseEntityAttachedToHeli = (Function) native.GetObjectProperty("stabiliseEntityAttachedToHeli");
			stabiliseEntityAttachedToHeli.Call(native, vehicle, entity, p2);
		}

		public void DetachVehicleFromTrailer(int vehicle)
		{
			if (detachVehicleFromTrailer == null) detachVehicleFromTrailer = (Function) native.GetObjectProperty("detachVehicleFromTrailer");
			detachVehicleFromTrailer.Call(native, vehicle);
		}

		public bool IsVehicleAttachedToTrailer(int vehicle)
		{
			if (isVehicleAttachedToTrailer == null) isVehicleAttachedToTrailer = (Function) native.GetObjectProperty("isVehicleAttachedToTrailer");
			return (bool) isVehicleAttachedToTrailer.Call(native, vehicle);
		}

		public void SetTrailerInverseMassScale(int vehicle, double p1)
		{
			if (setTrailerInverseMassScale == null) setTrailerInverseMassScale = (Function) native.GetObjectProperty("setTrailerInverseMassScale");
			setTrailerInverseMassScale.Call(native, vehicle, p1);
		}

		/// <summary>
		/// in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
		/// </summary>
		public void SetTrailerLegsRaised(int vehicle)
		{
			if (setTrailerLegsRaised == null) setTrailerLegsRaised = (Function) native.GetObjectProperty("setTrailerLegsRaised");
			setTrailerLegsRaised.Call(native, vehicle);
		}

		public void SetTrailerLegsLowered(object p0)
		{
			if (setTrailerLegsLowered == null) setTrailerLegsLowered = (Function) native.GetObjectProperty("setTrailerLegsLowered");
			setTrailerLegsLowered.Call(native, p0);
		}

		/// <summary>
		/// tyreIndex = 0 to 4 on normal vehicles
		/// '0 = wheel_lf / bike, plane or jet front
		/// '1 = wheel_rf
		/// '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
		/// '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
		/// '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
		/// '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
		/// '45 = 6 wheels trailer mid wheel left
		/// '47 = 6 wheels trailer mid wheel right
		/// </summary>
		/// <param name="tyreIndex">0 to 4 on normal vehicles</param>
		public void SetVehicleTyreFixed(int vehicle, int tyreIndex)
		{
			if (setVehicleTyreFixed == null) setVehicleTyreFixed = (Function) native.GetObjectProperty("setVehicleTyreFixed");
			setVehicleTyreFixed.Call(native, vehicle, tyreIndex);
		}

		/// <summary>
		/// Sets a vehicle's license plate text.  8 chars maximum.
		/// Example:
		/// Ped playerPed = PLAYER::PLAYER_PED_ID();
		/// Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
		/// char *plateText = "KING";
		/// VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);
		/// </summary>
		/// <param name="vehicle">Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);</param>
		/// <param name="plateText">char *"KING";</param>
		public void SetVehicleNumberPlateText(int vehicle, string plateText)
		{
			if (setVehicleNumberPlateText == null) setVehicleNumberPlateText = (Function) native.GetObjectProperty("setVehicleNumberPlateText");
			setVehicleNumberPlateText.Call(native, vehicle, plateText);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the license plate text from a vehicle.  8 chars maximum.</returns>
		public string GetVehicleNumberPlateText(int vehicle)
		{
			if (getVehicleNumberPlateText == null) getVehicleNumberPlateText = (Function) native.GetObjectProperty("getVehicleNumberPlateText");
			return (string) getVehicleNumberPlateText.Call(native, vehicle);
		}

		public int GetNumberOfVehicleNumberPlates()
		{
			if (getNumberOfVehicleNumberPlates == null) getNumberOfVehicleNumberPlates = (Function) native.GetObjectProperty("getNumberOfVehicleNumberPlates");
			return (int) getNumberOfVehicleNumberPlates.Call(native);
		}

		/// <summary>
		/// Plates:
		/// Blue/White - 0
		/// Yellow/black - 1
		/// Yellow/Blue - 2
		/// Blue/White2 - 3
		/// Blue/White3 - 4
		/// Yankton - 5
		/// </summary>
		public void SetVehicleNumberPlateTextIndex(int vehicle, int plateIndex)
		{
			if (setVehicleNumberPlateTextIndex == null) setVehicleNumberPlateTextIndex = (Function) native.GetObjectProperty("setVehicleNumberPlateTextIndex");
			setVehicleNumberPlateTextIndex.Call(native, vehicle, plateIndex);
		}

		/// <summary>
		/// Blue_on_White_1 = 3,
		/// Blue_on_White_2 = 0,
		/// Blue_on_White_3 = 4,
		/// Yellow_on_Blue = 2,
		/// Yellow_on_Black = 1,
		/// North_Yankton = 5,
		/// </summary>
		/// <returns>Returns the PlateType of a vehicle</returns>
		public int GetVehicleNumberPlateTextIndex(int vehicle)
		{
			if (getVehicleNumberPlateTextIndex == null) getVehicleNumberPlateTextIndex = (Function) native.GetObjectProperty("getVehicleNumberPlateTextIndex");
			return (int) getVehicleNumberPlateTextIndex.Call(native, vehicle);
		}

		public void SetRandomTrains(bool toggle)
		{
			if (setRandomTrains == null) setRandomTrains = (Function) native.GetObjectProperty("setRandomTrains");
			setRandomTrains.Call(native, toggle);
		}

		/// <summary>
		/// Train models HAVE TO be loaded (requested) before you use this.
		/// For variation 15 - request:
		/// freight
		/// freightcar
		/// freightgrain
		/// freightcont1
		/// freightcont2
		/// freighttrailer
		/// </summary>
		public int CreateMissionTrain(int variation, double x, double y, double z, bool direction)
		{
			if (createMissionTrain == null) createMissionTrain = (Function) native.GetObjectProperty("createMissionTrain");
			return (int) createMissionTrain.Call(native, variation, x, y, z, direction);
		}

		public void SwitchTrainTrack(int intersectionId, bool state)
		{
			if (switchTrainTrack == null) switchTrainTrack = (Function) native.GetObjectProperty("switchTrainTrack");
			switchTrainTrack.Call(native, intersectionId, state);
		}

		/// <summary>
		/// Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000
		/// trackIndex: 0 - 26
		/// </summary>
		/// <param name="trackIndex">0 - 26</param>
		public void SetTrainTrackSpawnFrequency(int trackIndex, int frequency)
		{
			if (setTrainTrackSpawnFrequency == null) setTrainTrackSpawnFrequency = (Function) native.GetObjectProperty("setTrainTrackSpawnFrequency");
			setTrainTrackSpawnFrequency.Call(native, trackIndex, frequency);
		}

		public void DeleteAllTrains()
		{
			if (deleteAllTrains == null) deleteAllTrains = (Function) native.GetObjectProperty("deleteAllTrains");
			deleteAllTrains.Call(native);
		}

		public void SetTrainSpeed(int train, double speed)
		{
			if (setTrainSpeed == null) setTrainSpeed = (Function) native.GetObjectProperty("setTrainSpeed");
			setTrainSpeed.Call(native, train, speed);
		}

		public void SetTrainCruiseSpeed(int train, double speed)
		{
			if (setTrainCruiseSpeed == null) setTrainCruiseSpeed = (Function) native.GetObjectProperty("setTrainCruiseSpeed");
			setTrainCruiseSpeed.Call(native, train, speed);
		}

		public void SetRandomBoats(bool toggle)
		{
			if (setRandomBoats == null) setRandomBoats = (Function) native.GetObjectProperty("setRandomBoats");
			setRandomBoats.Call(native, toggle);
		}

		public void SetGarbageTrucks(bool toggle)
		{
			if (setGarbageTrucks == null) setGarbageTrucks = (Function) native.GetObjectProperty("setGarbageTrucks");
			setGarbageTrucks.Call(native, toggle);
		}

		/// <summary>
		/// Maximum amount of vehicles with vehicle stuck check appears to be 16.
		/// </summary>
		public bool DoesVehicleHaveStuckVehicleCheck(int vehicle)
		{
			if (doesVehicleHaveStuckVehicleCheck == null) doesVehicleHaveStuckVehicleCheck = (Function) native.GetObjectProperty("doesVehicleHaveStuckVehicleCheck");
			return (bool) doesVehicleHaveStuckVehicleCheck.Call(native, vehicle);
		}

		public int GetVehicleRecordingId(int p0, string p1)
		{
			if (getVehicleRecordingId == null) getVehicleRecordingId = (Function) native.GetObjectProperty("getVehicleRecordingId");
			return (int) getVehicleRecordingId.Call(native, p0, p1);
		}

		public void RequestVehicleRecording(int i, string name)
		{
			if (requestVehicleRecording == null) requestVehicleRecording = (Function) native.GetObjectProperty("requestVehicleRecording");
			requestVehicleRecording.Call(native, i, name);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) HasVehicleRecordingBeenLoaded(object p0, object p1)
		{
			if (hasVehicleRecordingBeenLoaded == null) hasVehicleRecordingBeenLoaded = (Function) native.GetObjectProperty("hasVehicleRecordingBeenLoaded");
			var results = (Array) hasVehicleRecordingBeenLoaded.Call(native, p0, p1);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) RemoveVehicleRecording(object p0, object p1)
		{
			if (removeVehicleRecording == null) removeVehicleRecording = (Function) native.GetObjectProperty("removeVehicleRecording");
			var results = (Array) removeVehicleRecording.Call(native, p0, p1);
			return (results[0], results[1]);
		}

		public Vector3 GetPositionOfVehicleRecordingIdAtTime(int id, double time)
		{
			if (getPositionOfVehicleRecordingIdAtTime == null) getPositionOfVehicleRecordingIdAtTime = (Function) native.GetObjectProperty("getPositionOfVehicleRecordingIdAtTime");
			return JSObjectToVector3(getPositionOfVehicleRecordingIdAtTime.Call(native, id, time));
		}

		/// <summary>
		/// p1 is some kind of tolerance
		/// </summary>
		/// <param name="p1">is some kind of tolerance</param>
		public Vector3 GetPositionOfVehicleRecordingAtTime(int p0, double p1, string p2)
		{
			if (getPositionOfVehicleRecordingAtTime == null) getPositionOfVehicleRecordingAtTime = (Function) native.GetObjectProperty("getPositionOfVehicleRecordingAtTime");
			return JSObjectToVector3(getPositionOfVehicleRecordingAtTime.Call(native, p0, p1, p2));
		}

		public Vector3 GetRotationOfVehicleRecordingIdAtTime(int id, double time)
		{
			if (getRotationOfVehicleRecordingIdAtTime == null) getRotationOfVehicleRecordingIdAtTime = (Function) native.GetObjectProperty("getRotationOfVehicleRecordingIdAtTime");
			return JSObjectToVector3(getRotationOfVehicleRecordingIdAtTime.Call(native, id, time));
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<Vector3, object></returns>
		public (Vector3, object) GetRotationOfVehicleRecordingAtTime(object p0, double p1, object p2)
		{
			if (getRotationOfVehicleRecordingAtTime == null) getRotationOfVehicleRecordingAtTime = (Function) native.GetObjectProperty("getRotationOfVehicleRecordingAtTime");
			var results = (Array) getRotationOfVehicleRecordingAtTime.Call(native, p0, p1, p2);
			return (JSObjectToVector3(results[0]), results[1]);
		}

		public double GetTotalDurationOfVehicleRecordingId(object p0)
		{
			if (getTotalDurationOfVehicleRecordingId == null) getTotalDurationOfVehicleRecordingId = (Function) native.GetObjectProperty("getTotalDurationOfVehicleRecordingId");
			return (double) getTotalDurationOfVehicleRecordingId.Call(native, p0);
		}

		public double GetTotalDurationOfVehicleRecording(object p0, object p1)
		{
			if (getTotalDurationOfVehicleRecording == null) getTotalDurationOfVehicleRecording = (Function) native.GetObjectProperty("getTotalDurationOfVehicleRecording");
			return (double) getTotalDurationOfVehicleRecording.Call(native, p0, p1);
		}

		public double GetPositionInRecording(object p0)
		{
			if (getPositionInRecording == null) getPositionInRecording = (Function) native.GetObjectProperty("getPositionInRecording");
			return (double) getPositionInRecording.Call(native, p0);
		}

		public double GetTimePositionInRecording(object p0)
		{
			if (getTimePositionInRecording == null) getTimePositionInRecording = (Function) native.GetObjectProperty("getTimePositionInRecording");
			return (double) getTimePositionInRecording.Call(native, p0);
		}

		public void StartPlaybackRecordedVehicle(int vehicle, int p1, string playback, bool p3)
		{
			if (startPlaybackRecordedVehicle == null) startPlaybackRecordedVehicle = (Function) native.GetObjectProperty("startPlaybackRecordedVehicle");
			startPlaybackRecordedVehicle.Call(native, vehicle, p1, playback, p3);
		}

		public void StartPlaybackRecordedVehicleWithFlags(int vehicle, object p1, string playback, object p3, object p4, object p5)
		{
			if (startPlaybackRecordedVehicleWithFlags == null) startPlaybackRecordedVehicleWithFlags = (Function) native.GetObjectProperty("startPlaybackRecordedVehicleWithFlags");
			startPlaybackRecordedVehicleWithFlags.Call(native, vehicle, p1, playback, p3, p4, p5);
		}

		public void _0x1F2E4E06DEA8992B(int vehicle, bool p1)
		{
			if (__0x1F2E4E06DEA8992B == null) __0x1F2E4E06DEA8992B = (Function) native.GetObjectProperty("_0x1F2E4E06DEA8992B");
			__0x1F2E4E06DEA8992B.Call(native, vehicle, p1);
		}

		public void StopPlaybackRecordedVehicle(int vehicle)
		{
			if (stopPlaybackRecordedVehicle == null) stopPlaybackRecordedVehicle = (Function) native.GetObjectProperty("stopPlaybackRecordedVehicle");
			stopPlaybackRecordedVehicle.Call(native, vehicle);
		}

		public void PausePlaybackRecordedVehicle(int vehicle)
		{
			if (pausePlaybackRecordedVehicle == null) pausePlaybackRecordedVehicle = (Function) native.GetObjectProperty("pausePlaybackRecordedVehicle");
			pausePlaybackRecordedVehicle.Call(native, vehicle);
		}

		public void UnpausePlaybackRecordedVehicle(int vehicle)
		{
			if (unpausePlaybackRecordedVehicle == null) unpausePlaybackRecordedVehicle = (Function) native.GetObjectProperty("unpausePlaybackRecordedVehicle");
			unpausePlaybackRecordedVehicle.Call(native, vehicle);
		}

		public bool IsPlaybackGoingOnForVehicle(int vehicle)
		{
			if (isPlaybackGoingOnForVehicle == null) isPlaybackGoingOnForVehicle = (Function) native.GetObjectProperty("isPlaybackGoingOnForVehicle");
			return (bool) isPlaybackGoingOnForVehicle.Call(native, vehicle);
		}

		public bool IsPlaybackUsingAiGoingOnForVehicle(int vehicle)
		{
			if (isPlaybackUsingAiGoingOnForVehicle == null) isPlaybackUsingAiGoingOnForVehicle = (Function) native.GetObjectProperty("isPlaybackUsingAiGoingOnForVehicle");
			return (bool) isPlaybackUsingAiGoingOnForVehicle.Call(native, vehicle);
		}

		public int GetCurrentPlaybackForVehicle(int vehicle)
		{
			if (getCurrentPlaybackForVehicle == null) getCurrentPlaybackForVehicle = (Function) native.GetObjectProperty("getCurrentPlaybackForVehicle");
			return (int) getCurrentPlaybackForVehicle.Call(native, vehicle);
		}

		public void SkipToEndAndStopPlaybackRecordedVehicle(int vehicle)
		{
			if (skipToEndAndStopPlaybackRecordedVehicle == null) skipToEndAndStopPlaybackRecordedVehicle = (Function) native.GetObjectProperty("skipToEndAndStopPlaybackRecordedVehicle");
			skipToEndAndStopPlaybackRecordedVehicle.Call(native, vehicle);
		}

		public void SetPlaybackSpeed(int vehicle, double speed)
		{
			if (setPlaybackSpeed == null) setPlaybackSpeed = (Function) native.GetObjectProperty("setPlaybackSpeed");
			setPlaybackSpeed.Call(native, vehicle, speed);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, object></returns>
		public (object, object) StartPlaybackRecordedVehicleUsingAi(object p0, object p1, object p2, double p3, object p4)
		{
			if (startPlaybackRecordedVehicleUsingAi == null) startPlaybackRecordedVehicleUsingAi = (Function) native.GetObjectProperty("startPlaybackRecordedVehicleUsingAi");
			var results = (Array) startPlaybackRecordedVehicleUsingAi.Call(native, p0, p1, p2, p3, p4);
			return (results[0], results[1]);
		}

		public void SkipTimeInPlaybackRecordedVehicle(object p0, double p1)
		{
			if (skipTimeInPlaybackRecordedVehicle == null) skipTimeInPlaybackRecordedVehicle = (Function) native.GetObjectProperty("skipTimeInPlaybackRecordedVehicle");
			skipTimeInPlaybackRecordedVehicle.Call(native, p0, p1);
		}

		public void SetPlaybackToUseAi(int vehicle, int flag)
		{
			if (setPlaybackToUseAi == null) setPlaybackToUseAi = (Function) native.GetObjectProperty("setPlaybackToUseAi");
			setPlaybackToUseAi.Call(native, vehicle, flag);
		}

		public void SetPlaybackToUseAiTryToRevertBackLater(object p0, object p1, object p2, bool p3)
		{
			if (setPlaybackToUseAiTryToRevertBackLater == null) setPlaybackToUseAiTryToRevertBackLater = (Function) native.GetObjectProperty("setPlaybackToUseAiTryToRevertBackLater");
			setPlaybackToUseAiTryToRevertBackLater.Call(native, p0, p1, p2, p3);
		}

		public void _0x5845066D8A1EA7F7(int vehicle, double x, double y, double z, object p4)
		{
			if (__0x5845066D8A1EA7F7 == null) __0x5845066D8A1EA7F7 = (Function) native.GetObjectProperty("_0x5845066D8A1EA7F7");
			__0x5845066D8A1EA7F7.Call(native, vehicle, x, y, z, p4);
		}

		public void _0x796A877E459B99EA(object p0, double p1, double p2, double p3)
		{
			if (__0x796A877E459B99EA == null) __0x796A877E459B99EA = (Function) native.GetObjectProperty("_0x796A877E459B99EA");
			__0x796A877E459B99EA.Call(native, p0, p1, p2, p3);
		}

		public void _0xFAF2A78061FD9EF4(object p0, double p1, double p2, double p3)
		{
			if (__0xFAF2A78061FD9EF4 == null) __0xFAF2A78061FD9EF4 = (Function) native.GetObjectProperty("_0xFAF2A78061FD9EF4");
			__0xFAF2A78061FD9EF4.Call(native, p0, p1, p2, p3);
		}

		public void _0x063AE2B2CC273588(object p0, bool p1)
		{
			if (__0x063AE2B2CC273588 == null) __0x063AE2B2CC273588 = (Function) native.GetObjectProperty("_0x063AE2B2CC273588");
			__0x063AE2B2CC273588.Call(native, p0, p1);
		}

		public void ExplodeVehicleInCutscene(int vehicle, bool p1)
		{
			if (explodeVehicleInCutscene == null) explodeVehicleInCutscene = (Function) native.GetObjectProperty("explodeVehicleInCutscene");
			explodeVehicleInCutscene.Call(native, vehicle, p1);
		}

		public void AddVehicleStuckCheckWithWarp(object p0, double p1, object p2, bool p3, bool p4, bool p5, object p6)
		{
			if (addVehicleStuckCheckWithWarp == null) addVehicleStuckCheckWithWarp = (Function) native.GetObjectProperty("addVehicleStuckCheckWithWarp");
			addVehicleStuckCheckWithWarp.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// seems to make the vehicle stop spawning naturally in traffic. Here's an essential example:
		/// VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(GAMEPLAY::GET_HASH_KEY("taco"), true);
		/// god I hate taco vans
		/// Confirmed to work? Needs to be looped? Can not get it to work.
		/// </summary>
		public void SetVehicleModelIsSuppressed(int model, bool suppressed)
		{
			if (setVehicleModelIsSuppressed == null) setVehicleModelIsSuppressed = (Function) native.GetObjectProperty("setVehicleModelIsSuppressed");
			setVehicleModelIsSuppressed.Call(native, model, suppressed);
		}

		/// <summary>
		/// Gets a random vehicle in a sphere at the specified position, of the specified radius.
		/// x: The X-component of the position of the sphere.
		/// y: The Y-component of the position of the sphere.
		/// z: The Z-component of the position of the sphere.
		/// radius: The radius of the sphere. Max is 9999.9004.
		/// modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
		/// flags: The bitwise flags that modifies the behaviour of this function.
		/// </summary>
		/// <param name="x">The X-component of the position of the sphere.</param>
		/// <param name="y">The Y-component of the position of the sphere.</param>
		/// <param name="z">The Z-component of the position of the sphere.</param>
		/// <param name="radius">The radius of the sphere. Max is 9999.9004.</param>
		/// <param name="modelHash">The vehicle model to limit the selection to. Pass 0 for any model.</param>
		/// <param name="flags">The bitwise flags that modifies the behaviour of this function.</param>
		public int GetRandomVehicleInSphere(double x, double y, double z, double radius, int modelHash, int flags)
		{
			if (getRandomVehicleInSphere == null) getRandomVehicleInSphere = (Function) native.GetObjectProperty("getRandomVehicleInSphere");
			return (int) getRandomVehicleInSphere.Call(native, x, y, z, radius, modelHash, flags);
		}

		public int GetRandomVehicleFrontBumperInSphere(double p0, double p1, double p2, double p3, int p4, int p5, int p6)
		{
			if (getRandomVehicleFrontBumperInSphere == null) getRandomVehicleFrontBumperInSphere = (Function) native.GetObjectProperty("getRandomVehicleFrontBumperInSphere");
			return (int) getRandomVehicleFrontBumperInSphere.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public int GetRandomVehicleBackBumperInSphere(double p0, double p1, double p2, double p3, int p4, int p5, int p6)
		{
			if (getRandomVehicleBackBumperInSphere == null) getRandomVehicleBackBumperInSphere = (Function) native.GetObjectProperty("getRandomVehicleBackBumperInSphere");
			return (int) getRandomVehicleBackBumperInSphere.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// Example usage
		/// VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)
		/// x, y, z: Position to get closest vehicle to.
		/// radius: Max radius to get a vehicle.
		/// modelHash: Limit to vehicles with this model. 0 for any.
		/// flags: The bitwise flags altering the function's behaviour.
		/// Does not return police cars or helicopters.
		/// It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
		/// These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
		/// See NativeDB for reference: http://natives.altv.mp/#/0xF73EB622C4F1689B
		/// </summary>
		/// <param name="z">x, y, Position to get closest vehicle to.</param>
		/// <param name="radius">Max radius to get a vehicle.</param>
		/// <param name="modelHash">Limit to vehicles with this model. 0 for any.</param>
		/// <param name="flags">The bitwise flags altering the function's behaviour.</param>
		/// <returns>Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.</returns>
		public int GetClosestVehicle(double x, double y, double z, double radius, int modelHash, int flags)
		{
			if (getClosestVehicle == null) getClosestVehicle = (Function) native.GetObjectProperty("getClosestVehicle");
			return (int) getClosestVehicle.Call(native, x, y, z, radius, modelHash, flags);
		}

		/// <summary>
		/// Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
		/// </summary>
		public int GetTrainCarriage(int train, int trailerNumber)
		{
			if (getTrainCarriage == null) getTrainCarriage = (Function) native.GetObjectProperty("getTrainCarriage");
			return (int) getTrainCarriage.Call(native, train, trailerNumber);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) DeleteMissionTrain(int train)
		{
			if (deleteMissionTrain == null) deleteMissionTrain = (Function) native.GetObjectProperty("deleteMissionTrain");
			var results = (Array) deleteMissionTrain.Call(native, train);
			return (results[0], (int) results[1]);
		}

		/// <summary>
		/// p1 is always 0
		/// </summary>
		/// <param name="p1">is always 0</param>
		/// <returns>Array<void, int></returns>
		public (object, int) SetMissionTrainAsNoLongerNeeded(int train, bool p1)
		{
			if (setMissionTrainAsNoLongerNeeded == null) setMissionTrainAsNoLongerNeeded = (Function) native.GetObjectProperty("setMissionTrainAsNoLongerNeeded");
			var results = (Array) setMissionTrainAsNoLongerNeeded.Call(native, train, p1);
			return (results[0], (int) results[1]);
		}

		public void SetMissionTrainCoords(int train, double x, double y, double z)
		{
			if (setMissionTrainCoords == null) setMissionTrainCoords = (Function) native.GetObjectProperty("setMissionTrainCoords");
			setMissionTrainCoords.Call(native, train, x, y, z);
		}

		public bool IsThisModelABoat(int model)
		{
			if (isThisModelABoat == null) isThisModelABoat = (Function) native.GetObjectProperty("isThisModelABoat");
			return (bool) isThisModelABoat.Call(native, model);
		}

		/// <summary>
		/// Checks if model is a boat, then checks for FLAG_IS_JETSKI.
		/// </summary>
		public bool IsThisModelAJetski(int model)
		{
			if (isThisModelAJetski == null) isThisModelAJetski = (Function) native.GetObjectProperty("isThisModelAJetski");
			return (bool) isThisModelAJetski.Call(native, model);
		}

		public bool IsThisModelAPlane(int model)
		{
			if (isThisModelAPlane == null) isThisModelAPlane = (Function) native.GetObjectProperty("isThisModelAPlane");
			return (bool) isThisModelAPlane.Call(native, model);
		}

		public bool IsThisModelAHeli(int model)
		{
			if (isThisModelAHeli == null) isThisModelAHeli = (Function) native.GetObjectProperty("isThisModelAHeli");
			return (bool) isThisModelAHeli.Call(native, model);
		}

		/// <summary>
		/// To check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)
		/// </summary>
		public bool IsThisModelACar(int model)
		{
			if (isThisModelACar == null) isThisModelACar = (Function) native.GetObjectProperty("isThisModelACar");
			return (bool) isThisModelACar.Call(native, model);
		}

		public bool IsThisModelATrain(int model)
		{
			if (isThisModelATrain == null) isThisModelATrain = (Function) native.GetObjectProperty("isThisModelATrain");
			return (bool) isThisModelATrain.Call(native, model);
		}

		public bool IsThisModelABike(int model)
		{
			if (isThisModelABike == null) isThisModelABike = (Function) native.GetObjectProperty("isThisModelABike");
			return (bool) isThisModelABike.Call(native, model);
		}

		public bool IsThisModelABicycle(int model)
		{
			if (isThisModelABicycle == null) isThisModelABicycle = (Function) native.GetObjectProperty("isThisModelABicycle");
			return (bool) isThisModelABicycle.Call(native, model);
		}

		public bool IsThisModelAQuadbike(int model)
		{
			if (isThisModelAQuadbike == null) isThisModelAQuadbike = (Function) native.GetObjectProperty("isThisModelAQuadbike");
			return (bool) isThisModelAQuadbike.Call(native, model);
		}

		public bool IsThisModelAnAmphibiousCar(int model)
		{
			if (isThisModelAnAmphibiousCar == null) isThisModelAnAmphibiousCar = (Function) native.GetObjectProperty("isThisModelAnAmphibiousCar");
			return (bool) isThisModelAnAmphibiousCar.Call(native, model);
		}

		public bool IsThisModelAnAmphibiousQuadbike(int model)
		{
			if (isThisModelAnAmphibiousQuadbike == null) isThisModelAnAmphibiousQuadbike = (Function) native.GetObjectProperty("isThisModelAnAmphibiousQuadbike");
			return (bool) isThisModelAnAmphibiousQuadbike.Call(native, model);
		}

		/// <summary>
		/// Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
		/// this native works on planes to?
		/// </summary>
		public void SetHeliBladesFullSpeed(int vehicle)
		{
			if (setHeliBladesFullSpeed == null) setHeliBladesFullSpeed = (Function) native.GetObjectProperty("setHeliBladesFullSpeed");
			setHeliBladesFullSpeed.Call(native, vehicle);
		}

		/// <summary>
		/// Sets the speed of the helicopter blades in percentage of the full speed.
		/// vehicleHandle: The helicopter.
		/// speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
		/// </summary>
		/// <param name="speed">The speed in percentage, 0.0f being 0% and 1.0f being 100%.</param>
		public void SetHeliBladesSpeed(int vehicle, double speed)
		{
			if (setHeliBladesSpeed == null) setHeliBladesSpeed = (Function) native.GetObjectProperty("setHeliBladesSpeed");
			setHeliBladesSpeed.Call(native, vehicle, speed);
		}

		public void _0x99CAD8E7AFDB60FA(int vehicle, double p1, double p2)
		{
			if (__0x99CAD8E7AFDB60FA == null) __0x99CAD8E7AFDB60FA = (Function) native.GetObjectProperty("_0x99CAD8E7AFDB60FA");
			__0x99CAD8E7AFDB60FA.Call(native, vehicle, p1, p2);
		}

		/// <summary>
		/// This has not yet been tested - it's just an assumption of what the types could be.
		/// </summary>
		public void SetVehicleCanBeTargetted(int vehicle, bool state)
		{
			if (setVehicleCanBeTargetted == null) setVehicleCanBeTargetted = (Function) native.GetObjectProperty("setVehicleCanBeTargetted");
			setVehicleCanBeTargetted.Call(native, vehicle, state);
		}

		/// <summary>
		/// Related to locking the vehicle or something similar.
		/// In the decompiled scripts, its always called after
		/// VEHICLE::_SET_EXCLUSIVE_DRIVER(a_0, 0, 0);
		/// VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(a_0, 1);
		/// VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a_0, PLAYER::PLAYER_ID(), 0);
		/// -->VEHICLE::_DBC631F109350B8C(a_0, 1);
		/// </summary>
		public void _0xDBC631F109350B8C(int vehicle, bool p1)
		{
			if (__0xDBC631F109350B8C == null) __0xDBC631F109350B8C = (Function) native.GetObjectProperty("_0xDBC631F109350B8C");
			__0xDBC631F109350B8C.Call(native, vehicle, p1);
		}

		public void SetVehicleCanBeVisiblyDamaged(int vehicle, bool state)
		{
			if (setVehicleCanBeVisiblyDamaged == null) setVehicleCanBeVisiblyDamaged = (Function) native.GetObjectProperty("setVehicleCanBeVisiblyDamaged");
			setVehicleCanBeVisiblyDamaged.Call(native, vehicle, state);
		}

		public void SetVehicleLightsCanBeVisiblyDamaged(int vehicle, bool p1)
		{
			if (setVehicleLightsCanBeVisiblyDamaged == null) setVehicleLightsCanBeVisiblyDamaged = (Function) native.GetObjectProperty("setVehicleLightsCanBeVisiblyDamaged");
			setVehicleLightsCanBeVisiblyDamaged.Call(native, vehicle, p1);
		}

		public void _0x2311DD7159F00582(int vehicle, bool p1)
		{
			if (__0x2311DD7159F00582 == null) __0x2311DD7159F00582 = (Function) native.GetObjectProperty("_0x2311DD7159F00582");
			__0x2311DD7159F00582.Call(native, vehicle, p1);
		}

		public void _0x065D03A9D6B2C6B5(object p0, object p1)
		{
			if (__0x065D03A9D6B2C6B5 == null) __0x065D03A9D6B2C6B5 = (Function) native.GetObjectProperty("_0x065D03A9D6B2C6B5");
			__0x065D03A9D6B2C6B5.Call(native, p0, p1);
		}

		/// <summary>
		/// Dirt level 0..15
		/// </summary>
		public double GetVehicleDirtLevel(int vehicle)
		{
			if (getVehicleDirtLevel == null) getVehicleDirtLevel = (Function) native.GetObjectProperty("getVehicleDirtLevel");
			return (double) getVehicleDirtLevel.Call(native, vehicle);
		}

		/// <summary>
		/// You can't use values greater than 15.0
		/// You can see why here: pastebin.com/Wbn34fGD
		/// Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
		/// </summary>
		public void SetVehicleDirtLevel(int vehicle, double dirtLevel)
		{
			if (setVehicleDirtLevel == null) setVehicleDirtLevel = (Function) native.GetObjectProperty("setVehicleDirtLevel");
			setVehicleDirtLevel.Call(native, vehicle, dirtLevel);
		}

		/// <summary>
		/// Appears to return true if the vehicle has any damage, including cosmetically.
		/// GET_*
		/// </summary>
		public bool IsVehicleDamaged(int vehicle)
		{
			if (isVehicleDamaged == null) isVehicleDamaged = (Function) native.GetObjectProperty("isVehicleDamaged");
			return (bool) isVehicleDamaged.Call(native, vehicle);
		}

		/// <summary>
		/// doorIndex:
		/// 0 = Front Left Door
		/// 1 = Front Right Door
		/// 2 = Back Left Door
		/// 3 = Back Right Door
		/// 4 = Hood
		/// 5 = Trunk
		/// 6 = Trunk2
		/// </summary>
		public bool IsVehicleDoorFullyOpen(int vehicle, int doorIndex)
		{
			if (isVehicleDoorFullyOpen == null) isVehicleDoorFullyOpen = (Function) native.GetObjectProperty("isVehicleDoorFullyOpen");
			return (bool) isVehicleDoorFullyOpen.Call(native, vehicle, doorIndex);
		}

		/// <summary>
		/// Starts or stops the engine on the specified vehicle.
		/// vehicle: The vehicle to start or stop the engine on.
		/// value: true to turn the vehicle on; false to turn it off.
		/// instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
		/// --------------------------------------
		/// from what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?
		/// --------------------------------------
		/// And what's with BOOL otherwise, what does it do???
		/// </summary>
		/// <param name="vehicle">The vehicle to start or stop the engine on.</param>
		/// <param name="value">true to turn the vehicle on; false to turn it off.</param>
		/// <param name="instantly">if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.</param>
		public void SetVehicleEngineOn(int vehicle, bool value, bool instantly, bool noAutoTurnOn)
		{
			if (setVehicleEngineOn == null) setVehicleEngineOn = (Function) native.GetObjectProperty("setVehicleEngineOn");
			setVehicleEngineOn.Call(native, vehicle, value, instantly, noAutoTurnOn);
		}

		public void SetVehicleUndriveable(int vehicle, bool toggle)
		{
			if (setVehicleUndriveable == null) setVehicleUndriveable = (Function) native.GetObjectProperty("setVehicleUndriveable");
			setVehicleUndriveable.Call(native, vehicle, toggle);
		}

		public void SetVehicleProvidesCover(int vehicle, bool toggle)
		{
			if (setVehicleProvidesCover == null) setVehicleProvidesCover = (Function) native.GetObjectProperty("setVehicleProvidesCover");
			setVehicleProvidesCover.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// doorIndex:
		/// 0 = Front Left Door (driver door)
		/// 1 = Front Right Door
		/// 2 = Back Left Door
		/// 3 = Back Right Door
		/// 4 = Hood
		/// 5 = Trunk
		/// 6 = Trunk2
		/// p2:
		/// See NativeDB for reference: http://natives.altv.mp/#/0xF2BFA0430F0A0FCB
		/// </summary>
		public void SetVehicleDoorControl(int vehicle, int doorIndex, int speed, double angle)
		{
			if (setVehicleDoorControl == null) setVehicleDoorControl = (Function) native.GetObjectProperty("setVehicleDoorControl");
			setVehicleDoorControl.Call(native, vehicle, doorIndex, speed, angle);
		}

		public void SetVehicleDoorLatched(int vehicle, int doorIndex, bool p2, bool p3, bool p4)
		{
			if (setVehicleDoorLatched == null) setVehicleDoorLatched = (Function) native.GetObjectProperty("setVehicleDoorLatched");
			setVehicleDoorLatched.Call(native, vehicle, doorIndex, p2, p3, p4);
		}

		/// <summary>
		/// example in vb:
		/// Public Shared Function Get_Vehicle_Door_Angle(Vehicle As Vehicle, Door As VehicleDoor) As Single
		/// Return Native.Function.Call(Of Single)(Hash.GET_VEHICLE_DOOR_ANGLE_RATIO, Vehicle.Handle, Door)
		/// End Function
		/// I'm Not MentaL
		/// </summary>
		public double GetVehicleDoorAngleRatio(int vehicle, int door)
		{
			if (getVehicleDoorAngleRatio == null) getVehicleDoorAngleRatio = (Function) native.GetObjectProperty("getVehicleDoorAngleRatio");
			return (double) getVehicleDoorAngleRatio.Call(native, vehicle, door);
		}

		public int GetPedUsingVehicleDoor(int vehicle, int doorIndex)
		{
			if (getPedUsingVehicleDoor == null) getPedUsingVehicleDoor = (Function) native.GetObjectProperty("getPedUsingVehicleDoor");
			return (int) getPedUsingVehicleDoor.Call(native, vehicle, doorIndex);
		}

		/// <summary>
		/// doorIndex:
		/// 0 = Front Left Door
		/// 1 = Front Right Door
		/// 2 = Back Left Door
		/// 3 = Back Right Door
		/// 4 = Hood
		/// 5 = Trunk
		/// 6 = Trunk2
		/// </summary>
		public void SetVehicleDoorShut(int vehicle, int doorIndex, bool closeInstantly)
		{
			if (setVehicleDoorShut == null) setVehicleDoorShut = (Function) native.GetObjectProperty("setVehicleDoorShut");
			setVehicleDoorShut.Call(native, vehicle, doorIndex, closeInstantly);
		}

		/// <summary>
		/// doorIndex:
		/// 0 = Front Right Door
		/// 1 = Front Left Door
		/// 2 = Back Right Door
		/// 3 = Back Left Door
		/// 4 = Hood
		/// 5 = Trunk
		/// Changed last paramater from CreateDoorObject To NoDoorOnTheFloor because when on false, the door object is created,and not created when on true...the former parameter name was counter intuitive...(by Calderon)
		/// Calderon is a moron.
		/// </summary>
		public void SetVehicleDoorBroken(int vehicle, int doorIndex, bool deleteDoor)
		{
			if (setVehicleDoorBroken == null) setVehicleDoorBroken = (Function) native.GetObjectProperty("setVehicleDoorBroken");
			setVehicleDoorBroken.Call(native, vehicle, doorIndex, deleteDoor);
		}

		public void SetVehicleCanBreak(int vehicle, bool toggle)
		{
			if (setVehicleCanBreak == null) setVehicleCanBreak = (Function) native.GetObjectProperty("setVehicleCanBreak");
			setVehicleCanBreak.Call(native, vehicle, toggle);
		}

		public bool DoesVehicleHaveRoof(int vehicle)
		{
			if (doesVehicleHaveRoof == null) doesVehicleHaveRoof = (Function) native.GetObjectProperty("doesVehicleHaveRoof");
			return (bool) doesVehicleHaveRoof.Call(native, vehicle);
		}

		public void _0xC4B3347BD68BD609(object p0)
		{
			if (__0xC4B3347BD68BD609 == null) __0xC4B3347BD68BD609 = (Function) native.GetObjectProperty("_0xC4B3347BD68BD609");
			__0xC4B3347BD68BD609.Call(native, p0);
		}

		public void _0xD3301660A57C9272(object p0)
		{
			if (__0xD3301660A57C9272 == null) __0xD3301660A57C9272 = (Function) native.GetObjectProperty("_0xD3301660A57C9272");
			__0xD3301660A57C9272.Call(native, p0);
		}

		public void _0xB9562064627FF9DB(object p0, object p1)
		{
			if (__0xB9562064627FF9DB == null) __0xB9562064627FF9DB = (Function) native.GetObjectProperty("_0xB9562064627FF9DB");
			__0xB9562064627FF9DB.Call(native, p0, p1);
		}

		public bool IsBigVehicle(int vehicle)
		{
			if (isBigVehicle == null) isBigVehicle = (Function) native.GetObjectProperty("isBigVehicle");
			return (bool) isBigVehicle.Call(native, vehicle);
		}

		/// <summary>
		/// Actually number of color combinations
		/// </summary>
		public int GetNumberOfVehicleColours(int vehicle)
		{
			if (getNumberOfVehicleColours == null) getNumberOfVehicleColours = (Function) native.GetObjectProperty("getNumberOfVehicleColours");
			return (int) getNumberOfVehicleColours.Call(native, vehicle);
		}

		public void SetVehicleColourCombination(int vehicle, int colorCombination)
		{
			if (setVehicleColourCombination == null) setVehicleColourCombination = (Function) native.GetObjectProperty("setVehicleColourCombination");
			setVehicleColourCombination.Call(native, vehicle, colorCombination);
		}

		public int GetVehicleColourCombination(int vehicle)
		{
			if (getVehicleColourCombination == null) getVehicleColourCombination = (Function) native.GetObjectProperty("getVehicleColourCombination");
			return (int) getVehicleColourCombination.Call(native, vehicle);
		}

		public void SetVehicleXenonLightsColor(int vehicle, int colorIndex)
		{
			if (setVehicleXenonLightsColor == null) setVehicleXenonLightsColor = (Function) native.GetObjectProperty("setVehicleXenonLightsColor");
			setVehicleXenonLightsColor.Call(native, vehicle, colorIndex);
		}

		public int GetVehicleXenonLightsColor(int vehicle)
		{
			if (getVehicleXenonLightsColor == null) getVehicleXenonLightsColor = (Function) native.GetObjectProperty("getVehicleXenonLightsColor");
			return (int) getVehicleXenonLightsColor.Call(native, vehicle);
		}

		/// <summary>
		/// Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
		/// </summary>
		public void SetVehicleIsConsideredByPlayer(int vehicle, bool toggle)
		{
			if (setVehicleIsConsideredByPlayer == null) setVehicleIsConsideredByPlayer = (Function) native.GetObjectProperty("setVehicleIsConsideredByPlayer");
			setVehicleIsConsideredByPlayer.Call(native, vehicle, toggle);
		}

		public void _0xBE5C1255A1830FF5(int vehicle, bool toggle)
		{
			if (__0xBE5C1255A1830FF5 == null) __0xBE5C1255A1830FF5 = (Function) native.GetObjectProperty("_0xBE5C1255A1830FF5");
			__0xBE5C1255A1830FF5.Call(native, vehicle, toggle);
		}

		public void _0x9BECD4B9FEF3F8A6(int vehicle, bool p1)
		{
			if (__0x9BECD4B9FEF3F8A6 == null) __0x9BECD4B9FEF3F8A6 = (Function) native.GetObjectProperty("_0x9BECD4B9FEF3F8A6");
			__0x9BECD4B9FEF3F8A6.Call(native, vehicle, p1);
		}

		public void _0x88BC673CA9E0AE99(int vehicle, bool p1)
		{
			if (__0x88BC673CA9E0AE99 == null) __0x88BC673CA9E0AE99 = (Function) native.GetObjectProperty("_0x88BC673CA9E0AE99");
			__0x88BC673CA9E0AE99.Call(native, vehicle, p1);
		}

		public void _0xE851E480B814D4BA(int vehicle, bool p1)
		{
			if (__0xE851E480B814D4BA == null) __0xE851E480B814D4BA = (Function) native.GetObjectProperty("_0xE851E480B814D4BA");
			__0xE851E480B814D4BA.Call(native, vehicle, p1);
		}

		/// <summary>
		/// Not present in the retail version! It's just a nullsub.
		/// p0 always true (except in one case)
		/// successIndicator: 0 if success, -1 if failed
		/// </summary>
		/// <param name="p0">always true (except in one case)</param>
		/// <param name="successIndicator">0 if success, -1 if failed</param>
		/// <returns>Array<void, int, int></returns>
		public (object, int, int) GetRandomVehicleModelInMemory(bool p0, int modelHash, int successIndicator)
		{
			if (getRandomVehicleModelInMemory == null) getRandomVehicleModelInMemory = (Function) native.GetObjectProperty("getRandomVehicleModelInMemory");
			var results = (Array) getRandomVehicleModelInMemory.Call(native, p0, modelHash, successIndicator);
			return (results[0], (int) results[1], (int) results[2]);
		}

		/// <summary>
		/// 2 seems to disable getting vehicle in modshop
		/// </summary>
		public int GetVehicleDoorLockStatus(int vehicle)
		{
			if (getVehicleDoorLockStatus == null) getVehicleDoorLockStatus = (Function) native.GetObjectProperty("getVehicleDoorLockStatus");
			return (int) getVehicleDoorLockStatus.Call(native, vehicle);
		}

		public object _0xCA4AC3EAAE46EC7B(object p0, object p1)
		{
			if (__0xCA4AC3EAAE46EC7B == null) __0xCA4AC3EAAE46EC7B = (Function) native.GetObjectProperty("_0xCA4AC3EAAE46EC7B");
			return __0xCA4AC3EAAE46EC7B.Call(native, p0, p1);
		}

		/// <summary>
		/// doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
		/// </summary>
		/// <param name="doorID">starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.</param>
		public bool IsVehicleDoorDamaged(int veh, int doorID)
		{
			if (isVehicleDoorDamaged == null) isVehicleDoorDamaged = (Function) native.GetObjectProperty("isVehicleDoorDamaged");
			return (bool) isVehicleDoorDamaged.Call(native, veh, doorID);
		}

		/// <summary>
		/// Keeps Vehicle Doors/Hood/Trunk from breaking off
		/// </summary>
		public void SetVehicleDoorCanBreak(int vehicle, int doorIndex, bool isBreakable)
		{
			if (setVehicleDoorCanBreak == null) setVehicleDoorCanBreak = (Function) native.GetObjectProperty("setVehicleDoorCanBreak");
			setVehicleDoorCanBreak.Call(native, vehicle, doorIndex, isBreakable);
		}

		public bool IsVehicleBumperBouncing(int vehicle, bool frontBumper)
		{
			if (isVehicleBumperBouncing == null) isVehicleBumperBouncing = (Function) native.GetObjectProperty("isVehicleBumperBouncing");
			return (bool) isVehicleBumperBouncing.Call(native, vehicle, frontBumper);
		}

		public bool IsVehicleBumperBrokenOff(int vehicle, bool front)
		{
			if (isVehicleBumperBrokenOff == null) isVehicleBumperBrokenOff = (Function) native.GetObjectProperty("isVehicleBumperBrokenOff");
			return (bool) isVehicleBumperBrokenOff.Call(native, vehicle, front);
		}

		/// <summary>
		/// Usage:
		/// public bool isCopInRange(Vector3 Location, float Range)
		/// {
		/// return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
		/// }
		/// </summary>
		public bool IsCopVehicleInArea3d(double x1, double x2, double y1, double y2, double z1, double z2)
		{
			if (isCopVehicleInArea3d == null) isCopVehicleInArea3d = (Function) native.GetObjectProperty("isCopVehicleInArea3d");
			return (bool) isCopVehicleInArea3d.Call(native, x1, x2, y1, y2, z1, z2);
		}

		/// <summary>
		/// Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
		/// Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
		/// End Function
		/// </summary>
		public bool IsVehicleOnAllWheels(int vehicle)
		{
			if (isVehicleOnAllWheels == null) isVehicleOnAllWheels = (Function) native.GetObjectProperty("isVehicleOnAllWheels");
			return (bool) isVehicleOnAllWheels.Call(native, vehicle);
		}

		public object _0x5873C14A52D74236(object p0)
		{
			if (__0x5873C14A52D74236 == null) __0x5873C14A52D74236 = (Function) native.GetObjectProperty("_0x5873C14A52D74236");
			return __0x5873C14A52D74236.Call(native, p0);
		}

		public int GetVehicleLayoutHash(int vehicle)
		{
			if (getVehicleLayoutHash == null) getVehicleLayoutHash = (Function) native.GetObjectProperty("getVehicleLayoutHash");
			return (int) getVehicleLayoutHash.Call(native, vehicle);
		}

		public object _0xA01BC64DD4BFBBAC(int vehicle, int p1)
		{
			if (__0xA01BC64DD4BFBBAC == null) __0xA01BC64DD4BFBBAC = (Function) native.GetObjectProperty("_0xA01BC64DD4BFBBAC");
			return __0xA01BC64DD4BFBBAC.Call(native, vehicle, p1);
		}

		/// <summary>
		/// makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
		/// </summary>
		public void SetRenderTrainAsDerailed(int train, bool toggle)
		{
			if (setRenderTrainAsDerailed == null) setRenderTrainAsDerailed = (Function) native.GetObjectProperty("setRenderTrainAsDerailed");
			setRenderTrainAsDerailed.Call(native, train, toggle);
		}

		/// <summary>
		/// They use the same color indexs as SET_VEHICLE_COLOURS.
		/// </summary>
		public void SetVehicleExtraColours(int vehicle, int pearlescentColor, int wheelColor)
		{
			if (setVehicleExtraColours == null) setVehicleExtraColours = (Function) native.GetObjectProperty("setVehicleExtraColours");
			setVehicleExtraColours.Call(native, vehicle, pearlescentColor, wheelColor);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int></returns>
		public (object, int, int) GetVehicleExtraColours(int vehicle, int pearlescentColor, int wheelColor)
		{
			if (getVehicleExtraColours == null) getVehicleExtraColours = (Function) native.GetObjectProperty("getVehicleExtraColours");
			var results = (Array) getVehicleExtraColours.Call(native, vehicle, pearlescentColor, wheelColor);
			return (results[0], (int) results[1], (int) results[2]);
		}

		public void SetVehicleInteriorColor(int vehicle, int color)
		{
			if (setVehicleInteriorColor == null) setVehicleInteriorColor = (Function) native.GetObjectProperty("setVehicleInteriorColor");
			setVehicleInteriorColor.Call(native, vehicle, color);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) GetVehicleInteriorColor(int vehicle, int color)
		{
			if (getVehicleInteriorColor == null) getVehicleInteriorColor = (Function) native.GetObjectProperty("getVehicleInteriorColor");
			var results = (Array) getVehicleInteriorColor.Call(native, vehicle, color);
			return (results[0], (int) results[1]);
		}

		public void SetVehicleDashboardColor(int vehicle, int color)
		{
			if (setVehicleDashboardColor == null) setVehicleDashboardColor = (Function) native.GetObjectProperty("setVehicleDashboardColor");
			setVehicleDashboardColor.Call(native, vehicle, color);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int></returns>
		public (object, int) GetVehicleDashboardColor(int vehicle, int color)
		{
			if (getVehicleDashboardColor == null) getVehicleDashboardColor = (Function) native.GetObjectProperty("getVehicleDashboardColor");
			var results = (Array) getVehicleDashboardColor.Call(native, vehicle, color);
			return (results[0], (int) results[1]);
		}

		public void StopAllGarageActivity()
		{
			if (stopAllGarageActivity == null) stopAllGarageActivity = (Function) native.GetObjectProperty("stopAllGarageActivity");
			stopAllGarageActivity.Call(native);
		}

		/// <summary>
		/// This fixes a vehicle.
		/// If the vehicle's engine's broken then you cannot fix it with this native.
		/// </summary>
		public void SetVehicleFixed(int vehicle)
		{
			if (setVehicleFixed == null) setVehicleFixed = (Function) native.GetObjectProperty("setVehicleFixed");
			setVehicleFixed.Call(native, vehicle);
		}

		/// <summary>
		/// This fixes the deformation of a vehicle but the vehicle health doesn't improve
		/// </summary>
		public void SetVehicleDeformationFixed(int vehicle)
		{
			if (setVehicleDeformationFixed == null) setVehicleDeformationFixed = (Function) native.GetObjectProperty("setVehicleDeformationFixed");
			setVehicleDeformationFixed.Call(native, vehicle);
		}

		public void SetVehicleCanEngineOperateOnFire(int vehicle, bool toggle)
		{
			if (setVehicleCanEngineOperateOnFire == null) setVehicleCanEngineOperateOnFire = (Function) native.GetObjectProperty("setVehicleCanEngineOperateOnFire");
			setVehicleCanEngineOperateOnFire.Call(native, vehicle, toggle);
		}

		public void SetVehicleCanLeakOil(int vehicle, bool toggle)
		{
			if (setVehicleCanLeakOil == null) setVehicleCanLeakOil = (Function) native.GetObjectProperty("setVehicleCanLeakOil");
			setVehicleCanLeakOil.Call(native, vehicle, toggle);
		}

		public void SetVehicleCanLeakPetrol(int vehicle, bool toggle)
		{
			if (setVehicleCanLeakPetrol == null) setVehicleCanLeakPetrol = (Function) native.GetObjectProperty("setVehicleCanLeakPetrol");
			setVehicleCanLeakPetrol.Call(native, vehicle, toggle);
		}

		public void SetDisableVehiclePetrolTankFires(int vehicle, bool toggle)
		{
			if (setDisableVehiclePetrolTankFires == null) setDisableVehiclePetrolTankFires = (Function) native.GetObjectProperty("setDisableVehiclePetrolTankFires");
			setDisableVehiclePetrolTankFires.Call(native, vehicle, toggle);
		}

		public void SetDisableVehiclePetrolTankDamage(int vehicle, bool toggle)
		{
			if (setDisableVehiclePetrolTankDamage == null) setDisableVehiclePetrolTankDamage = (Function) native.GetObjectProperty("setDisableVehiclePetrolTankDamage");
			setDisableVehiclePetrolTankDamage.Call(native, vehicle, toggle);
		}

		public void SetDisableVehicleEngineFires(int vehicle, bool toggle)
		{
			if (setDisableVehicleEngineFires == null) setDisableVehicleEngineFires = (Function) native.GetObjectProperty("setDisableVehicleEngineFires");
			setDisableVehicleEngineFires.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// SET_VEHICLE_LI*
		/// </summary>
		public void _0xC50CE861B55EAB8B(int vehicle, bool p1)
		{
			if (__0xC50CE861B55EAB8B == null) __0xC50CE861B55EAB8B = (Function) native.GetObjectProperty("_0xC50CE861B55EAB8B");
			__0xC50CE861B55EAB8B.Call(native, vehicle, p1);
		}

		/// <summary>
		/// sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly:
		/// CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
		/// {
		/// CVehicle *result; // rax@1
		/// result = EntityAsCVehicle(a1);
		/// if ( result )
		/// {
		/// result->field_886 &= 0xEFu;
		/// result->field_886 |= 16 * (a2 & 1);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x6EBFB22D646FFC18
		/// </summary>
		public void _0x6EBFB22D646FFC18(int vehicle, bool p1)
		{
			if (__0x6EBFB22D646FFC18 == null) __0x6EBFB22D646FFC18 = (Function) native.GetObjectProperty("_0x6EBFB22D646FFC18");
			__0x6EBFB22D646FFC18.Call(native, vehicle, p1);
		}

		public void SetDisablePretendOccupants(int vehicle, bool toggle)
		{
			if (setDisablePretendOccupants == null) setDisablePretendOccupants = (Function) native.GetObjectProperty("setDisablePretendOccupants");
			setDisablePretendOccupants.Call(native, vehicle, toggle);
		}

		public void RemoveVehiclesFromGeneratorsInArea(double x1, double y1, double z1, double x2, double y2, double z2, object unk)
		{
			if (removeVehiclesFromGeneratorsInArea == null) removeVehiclesFromGeneratorsInArea = (Function) native.GetObjectProperty("removeVehiclesFromGeneratorsInArea");
			removeVehiclesFromGeneratorsInArea.Call(native, x1, y1, z1, x2, y2, z2, unk);
		}

		/// <summary>
		/// Locks the vehicle's steering to the desired angle, explained below.
		/// Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
		/// Steer bias:
		/// -1.0 = full right
		/// 0.0 = centered steering
		/// 1.0 = full left
		/// </summary>
		public void SetVehicleSteerBias(int vehicle, double value)
		{
			if (setVehicleSteerBias == null) setVehicleSteerBias = (Function) native.GetObjectProperty("setVehicleSteerBias");
			setVehicleSteerBias.Call(native, vehicle, value);
		}

		public bool IsVehicleExtraTurnedOn(int vehicle, int extraId)
		{
			if (isVehicleExtraTurnedOn == null) isVehicleExtraTurnedOn = (Function) native.GetObjectProperty("isVehicleExtraTurnedOn");
			return (bool) isVehicleExtraTurnedOn.Call(native, vehicle, extraId);
		}

		/// <summary>
		/// Note: only some vehicle have extras
		/// extra ids are from 1 - 9 depending on the vehicle
		/// -------------------------------------------------
		/// ^ not sure if outdated or simply wrong. Max extra ID for b944 is 14
		/// -------------------------------------------------
		/// p2 is not a on/off toggle. mostly 0 means on and 1 means off.
		/// not sure if it really should be a BOOL.
		/// </summary>
		public void SetVehicleExtra(int vehicle, int extraId, bool disable)
		{
			if (setVehicleExtra == null) setVehicleExtra = (Function) native.GetObjectProperty("setVehicleExtra");
			setVehicleExtra.Call(native, vehicle, extraId, disable);
		}

		/// <summary>
		/// Checks via CVehicleModelInfo
		/// </summary>
		public bool DoesExtraExist(int vehicle, int extraId)
		{
			if (doesExtraExist == null) doesExtraExist = (Function) native.GetObjectProperty("doesExtraExist");
			return (bool) doesExtraExist.Call(native, vehicle, extraId);
		}

		public object _0x534E36D4DB9ECC5D(object p0, object p1)
		{
			if (__0x534E36D4DB9ECC5D == null) __0x534E36D4DB9ECC5D = (Function) native.GetObjectProperty("_0x534E36D4DB9ECC5D");
			return __0x534E36D4DB9ECC5D.Call(native, p0, p1);
		}

		public void SetConvertibleRoof(int vehicle, bool p1)
		{
			if (setConvertibleRoof == null) setConvertibleRoof = (Function) native.GetObjectProperty("setConvertibleRoof");
			setConvertibleRoof.Call(native, vehicle, p1);
		}

		public void LowerConvertibleRoof(int vehicle, bool instantlyLower)
		{
			if (lowerConvertibleRoof == null) lowerConvertibleRoof = (Function) native.GetObjectProperty("lowerConvertibleRoof");
			lowerConvertibleRoof.Call(native, vehicle, instantlyLower);
		}

		public void RaiseConvertibleRoof(int vehicle, bool instantlyRaise)
		{
			if (raiseConvertibleRoof == null) raiseConvertibleRoof = (Function) native.GetObjectProperty("raiseConvertibleRoof");
			raiseConvertibleRoof.Call(native, vehicle, instantlyRaise);
		}

		/// <summary>
		/// 0 -> up
		/// 1 -> lowering down
		/// 2 -> down
		/// 3 -> raising up
		/// </summary>
		public int GetConvertibleRoofState(int vehicle)
		{
			if (getConvertibleRoofState == null) getConvertibleRoofState = (Function) native.GetObjectProperty("getConvertibleRoofState");
			return (int) getConvertibleRoofState.Call(native, vehicle);
		}

		/// <summary>
		/// p1 is false almost always.
		/// However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF
		/// </summary>
		/// <param name="p1">is false almost always.</param>
		public bool IsVehicleAConvertible(int vehicle, bool p1)
		{
			if (isVehicleAConvertible == null) isVehicleAConvertible = (Function) native.GetObjectProperty("isVehicleAConvertible");
			return (bool) isVehicleAConvertible.Call(native, vehicle, p1);
		}

		public void TransformVehicleToSubmarine(int vehicle, bool noAnimation)
		{
			if (transformVehicleToSubmarine == null) transformVehicleToSubmarine = (Function) native.GetObjectProperty("transformVehicleToSubmarine");
			transformVehicleToSubmarine.Call(native, vehicle, noAnimation);
		}

		public void TransformSubmarineToVehicle(int vehicle, bool noAnimation)
		{
			if (transformSubmarineToVehicle == null) transformSubmarineToVehicle = (Function) native.GetObjectProperty("transformSubmarineToVehicle");
			transformSubmarineToVehicle.Call(native, vehicle, noAnimation);
		}

		public bool GetIsSubmarineVehicleTransformed(int vehicle)
		{
			if (getIsSubmarineVehicleTransformed == null) getIsSubmarineVehicleTransformed = (Function) native.GetObjectProperty("getIsSubmarineVehicleTransformed");
			return (bool) getIsSubmarineVehicleTransformed.Call(native, vehicle);
		}

		/// <summary>
		/// is this for red lights only?  more testing required.
		/// </summary>
		public bool IsVehicleStoppedAtTrafficLights(int vehicle)
		{
			if (isVehicleStoppedAtTrafficLights == null) isVehicleStoppedAtTrafficLights = (Function) native.GetObjectProperty("isVehicleStoppedAtTrafficLights");
			return (bool) isVehicleStoppedAtTrafficLights.Call(native, vehicle);
		}

		/// <summary>
		/// Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
		/// Radius of effect damage applied in a sphere at impact location
		/// </summary>
		/// <param name="radius">Radius of effect damage applied in a sphere at impact location</param>
		public void SetVehicleDamage(int vehicle, double xOffset, double yOffset, double zOffset, double damage, double radius, bool p6)
		{
			if (setVehicleDamage == null) setVehicleDamage = (Function) native.GetObjectProperty("setVehicleDamage");
			setVehicleDamage.Call(native, vehicle, xOffset, yOffset, zOffset, damage, radius, p6);
		}

		public void _0x35BB21DE06784373(object p0, object p1)
		{
			if (__0x35BB21DE06784373 == null) __0x35BB21DE06784373 = (Function) native.GetObjectProperty("_0x35BB21DE06784373");
			__0x35BB21DE06784373.Call(native, p0, p1);
		}

		/// <summary>
		/// Minimum: -4000
		/// Maximum: 1000
		/// -4000: Engine is destroyed
		/// 0 and below: Engine catches fire and health rapidly declines
		/// 300: Engine is smoking and losing functionality
		/// 1000: Engine is perfect
		/// </summary>
		/// <returns>Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.</returns>
		public double GetVehicleEngineHealth(int vehicle)
		{
			if (getVehicleEngineHealth == null) getVehicleEngineHealth = (Function) native.GetObjectProperty("getVehicleEngineHealth");
			return (double) getVehicleEngineHealth.Call(native, vehicle);
		}

		/// <summary>
		/// 1000 is max health
		/// Begins leaking gas at around 650 health
		/// -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement
		/// -------------------------
		/// Minimum: -4000
		/// Maximum: 1000
		/// -4000: Engine is destroyed
		/// 0 and below: Engine catches fire and health rapidly declines
		/// 300: Engine is smoking and losing functionality
		/// 1000: Engine is perfect
		/// </summary>
		public void SetVehicleEngineHealth(int vehicle, double health)
		{
			if (setVehicleEngineHealth == null) setVehicleEngineHealth = (Function) native.GetObjectProperty("setVehicleEngineHealth");
			setVehicleEngineHealth.Call(native, vehicle, health);
		}

		public void _0x2A86A0475B6A1434(object p0, object p1)
		{
			if (__0x2A86A0475B6A1434 == null) __0x2A86A0475B6A1434 = (Function) native.GetObjectProperty("_0x2A86A0475B6A1434");
			__0x2A86A0475B6A1434.Call(native, p0, p1);
		}

		/// <summary>
		/// 1000 is max health
		/// Begins leaking gas at around 650 health
		/// -999.90002441406 appears to be minimum health, although nothing special occurs
		/// </summary>
		public double GetVehiclePetrolTankHealth(int vehicle)
		{
			if (getVehiclePetrolTankHealth == null) getVehiclePetrolTankHealth = (Function) native.GetObjectProperty("getVehiclePetrolTankHealth");
			return (double) getVehiclePetrolTankHealth.Call(native, vehicle);
		}

		/// <summary>
		/// 1000 is max health
		/// Begins leaking gas at around 650 health
		/// -999.90002441406 appears to be minimum health, although nothing special occurs
		/// </summary>
		public void SetVehiclePetrolTankHealth(int vehicle, double health)
		{
			if (setVehiclePetrolTankHealth == null) setVehiclePetrolTankHealth = (Function) native.GetObjectProperty("setVehiclePetrolTankHealth");
			setVehiclePetrolTankHealth.Call(native, vehicle, health);
		}

		/// <summary>
		/// p1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.
		/// </summary>
		/// <param name="p1">can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.</param>
		public bool IsVehicleStuckTimerUp(int vehicle, int p1, int p2)
		{
			if (isVehicleStuckTimerUp == null) isVehicleStuckTimerUp = (Function) native.GetObjectProperty("isVehicleStuckTimerUp");
			return (bool) isVehicleStuckTimerUp.Call(native, vehicle, p1, p2);
		}

		/// <summary>
		/// The inner function has a switch on the second parameter. It's the stuck timer index.
		/// Here's some pseudo code I wrote for the inner function:
		/// void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
		/// {
		/// switch (timerIndex)
		/// {
		/// case 0:
		/// unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
		/// case 1:
		/// See NativeDB for reference: http://natives.altv.mp/#/0xD7591B0065AFAA7A
		/// </summary>
		public void ResetVehicleStuckTimer(int vehicle, int nullAttributes)
		{
			if (resetVehicleStuckTimer == null) resetVehicleStuckTimer = (Function) native.GetObjectProperty("resetVehicleStuckTimer");
			resetVehicleStuckTimer.Call(native, vehicle, nullAttributes);
		}

		/// <summary>
		/// p1 is always 0 in the scripts.
		/// p1 = check if vehicle is on fire
		/// </summary>
		public bool IsVehicleDriveable(int vehicle, bool isOnFireCheck)
		{
			if (isVehicleDriveable == null) isVehicleDriveable = (Function) native.GetObjectProperty("isVehicleDriveable");
			return (bool) isVehicleDriveable.Call(native, vehicle, isOnFireCheck);
		}

		public void SetVehicleHasBeenOwnedByPlayer(int vehicle, bool owned)
		{
			if (setVehicleHasBeenOwnedByPlayer == null) setVehicleHasBeenOwnedByPlayer = (Function) native.GetObjectProperty("setVehicleHasBeenOwnedByPlayer");
			setVehicleHasBeenOwnedByPlayer.Call(native, vehicle, owned);
		}

		public void SetVehicleNeedsToBeHotwired(int vehicle, bool toggle)
		{
			if (setVehicleNeedsToBeHotwired == null) setVehicleNeedsToBeHotwired = (Function) native.GetObjectProperty("setVehicleNeedsToBeHotwired");
			setVehicleNeedsToBeHotwired.Call(native, vehicle, toggle);
		}

		public void _0x9F3F689B814F2599(int vehicle, bool p1)
		{
			if (__0x9F3F689B814F2599 == null) __0x9F3F689B814F2599 = (Function) native.GetObjectProperty("_0x9F3F689B814F2599");
			__0x9F3F689B814F2599.Call(native, vehicle, p1);
		}

		public void _0x4E74E62E0A97E901(int vehicle, bool p1)
		{
			if (__0x4E74E62E0A97E901 == null) __0x4E74E62E0A97E901 = (Function) native.GetObjectProperty("_0x4E74E62E0A97E901");
			__0x4E74E62E0A97E901.Call(native, vehicle, p1);
		}

		/// <summary>
		/// Sounds the horn for the specified vehicle.
		/// vehicle: The vehicle to activate the horn for.
		/// mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
		/// duration: The duration to sound the horn, in milliseconds.
		/// Note: If a player is in the vehicle, it will only sound briefly.
		/// </summary>
		/// <param name="vehicle">The vehicle to activate the horn for.</param>
		/// <param name="duration">The duration to sound the horn, in milliseconds.</param>
		/// <param name="mode">The hash of "NORMAL" or "HELDDOWN". Can be 0.</param>
		public void StartVehicleHorn(int vehicle, int duration, int mode, bool forever)
		{
			if (startVehicleHorn == null) startVehicleHorn = (Function) native.GetObjectProperty("startVehicleHorn");
			startVehicleHorn.Call(native, vehicle, duration, mode, forever);
		}

		/// <summary>
		/// If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
		/// -Doesn't seem to suppress door noises for me, at least with the vehicle add-on I tried
		/// </summary>
		public void SetVehicleSilent(int vehicle, bool toggle)
		{
			if (setVehicleSilent == null) setVehicleSilent = (Function) native.GetObjectProperty("setVehicleSilent");
			setVehicleSilent.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// if true, axles won't bend.
		/// </summary>
		public void SetVehicleHasStrongAxles(int vehicle, bool toggle)
		{
			if (setVehicleHasStrongAxles == null) setVehicleHasStrongAxles = (Function) native.GetObjectProperty("setVehicleHasStrongAxles");
			setVehicleHasStrongAxles.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// -----------------------------------------------------------------------------------------------------------------------------------------
		/// While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
		/// -----------------------------------------------------------------------------------------------------------------------------------------
		/// Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
		/// Using UI::_GET_LABEL_TEXT, you can get the localized name.
		/// For a full list, see here: pastebin.com/wvpyS4kS (pastebin.com/dA3TbkZw)
		/// </summary>
		/// <returns>Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.</returns>
		public string GetDisplayNameFromVehicleModel(int modelHash)
		{
			if (getDisplayNameFromVehicleModel == null) getDisplayNameFromVehicleModel = (Function) native.GetObjectProperty("getDisplayNameFromVehicleModel");
			return (string) getDisplayNameFromVehicleModel.Call(native, modelHash);
		}

		/// <summary>
		/// The only example I can find of this function in the scripts, is this:
		/// struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);
		/// -----------------------------------------------------------------------------------------------------------------------------------------
		/// PC scripts:
		/// v_5{3} = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
		/// </summary>
		public Vector3 GetVehicleDeformationAtPos(int vehicle, double offsetX, double offsetY, double offsetZ)
		{
			if (getVehicleDeformationAtPos == null) getVehicleDeformationAtPos = (Function) native.GetObjectProperty("getVehicleDeformationAtPos");
			return JSObjectToVector3(getVehicleDeformationAtPos.Call(native, vehicle, offsetX, offsetY, offsetZ));
		}

		/// <summary>
		/// Note: Only seems to work on Emergency Vehicles
		/// </summary>
		public void SetVehicleLivery(int vehicle, int livery)
		{
			if (setVehicleLivery == null) setVehicleLivery = (Function) native.GetObjectProperty("setVehicleLivery");
			setVehicleLivery.Call(native, vehicle, livery);
		}

		/// <summary>
		/// -1 = no livery
		/// </summary>
		public int GetVehicleLivery(int trailers2)
		{
			if (getVehicleLivery == null) getVehicleLivery = (Function) native.GetObjectProperty("getVehicleLivery");
			return (int) getVehicleLivery.Call(native, trailers2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns -1 if the vehicle has no livery</returns>
		public int GetVehicleLiveryCount(int vehicle)
		{
			if (getVehicleLiveryCount == null) getVehicleLiveryCount = (Function) native.GetObjectProperty("getVehicleLiveryCount");
			return (int) getVehicleLiveryCount.Call(native, vehicle);
		}

		public void SetVehicleRoofLivery(int vehicle, int livery)
		{
			if (setVehicleRoofLivery == null) setVehicleRoofLivery = (Function) native.GetObjectProperty("setVehicleRoofLivery");
			setVehicleRoofLivery.Call(native, vehicle, livery);
		}

		public int GetVehicleRoofLivery(int vehicle)
		{
			if (getVehicleRoofLivery == null) getVehicleRoofLivery = (Function) native.GetObjectProperty("getVehicleRoofLivery");
			return (int) getVehicleRoofLivery.Call(native, vehicle);
		}

		public int GetVehicleRoofLiveryCount(int vehicle)
		{
			if (getVehicleRoofLiveryCount == null) getVehicleRoofLiveryCount = (Function) native.GetObjectProperty("getVehicleRoofLiveryCount");
			return (int) getVehicleRoofLiveryCount.Call(native, vehicle);
		}

		public bool IsVehicleWindowIntact(int vehicle, int windowIndex)
		{
			if (isVehicleWindowIntact == null) isVehicleWindowIntact = (Function) native.GetObjectProperty("isVehicleWindowIntact");
			return (bool) isVehicleWindowIntact.Call(native, vehicle, windowIndex);
		}

		/// <summary>
		/// Appears to return false if any window is broken.
		/// </summary>
		public bool AreAllVehicleWindowsIntact(int vehicle)
		{
			if (areAllVehicleWindowsIntact == null) areAllVehicleWindowsIntact = (Function) native.GetObjectProperty("areAllVehicleWindowsIntact");
			return (bool) areAllVehicleWindowsIntact.Call(native, vehicle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns false if every seat is occupied.</returns>
		public bool AreAnyVehicleSeatsFree(int vehicle)
		{
			if (areAnyVehicleSeatsFree == null) areAnyVehicleSeatsFree = (Function) native.GetObjectProperty("areAnyVehicleSeatsFree");
			return (bool) areAnyVehicleSeatsFree.Call(native, vehicle);
		}

		public void ResetVehicleWheels(int vehicle, bool toggle)
		{
			if (resetVehicleWheels == null) resetVehicleWheels = (Function) native.GetObjectProperty("resetVehicleWheels");
			resetVehicleWheels.Call(native, vehicle, toggle);
		}

		public bool IsHeliPartBroken(int vehicle, bool p1, bool p2, bool p3)
		{
			if (isHeliPartBroken == null) isHeliPartBroken = (Function) native.GetObjectProperty("isHeliPartBroken");
			return (bool) isHeliPartBroken.Call(native, vehicle, p1, p2, p3);
		}

		/// <summary>
		/// Max 1000.
		/// At 0 the main rotor will stall.
		/// </summary>
		public double GetHeliMainRotorHealth(int vehicle)
		{
			if (getHeliMainRotorHealth == null) getHeliMainRotorHealth = (Function) native.GetObjectProperty("getHeliMainRotorHealth");
			return (double) getHeliMainRotorHealth.Call(native, vehicle);
		}

		/// <summary>
		/// Max 1000.
		/// At 0 the tail rotor will stall.
		/// </summary>
		public double GetHeliTailRotorHealth(int vehicle)
		{
			if (getHeliTailRotorHealth == null) getHeliTailRotorHealth = (Function) native.GetObjectProperty("getHeliTailRotorHealth");
			return (double) getHeliTailRotorHealth.Call(native, vehicle);
		}

		/// <summary>
		/// Max 1000.
		/// At -100 both helicopter rotors will stall.
		/// </summary>
		public double GetHeliTailBoomHealth(int vehicle)
		{
			if (getHeliTailBoomHealth == null) getHeliTailBoomHealth = (Function) native.GetObjectProperty("getHeliTailBoomHealth");
			return (double) getHeliTailBoomHealth.Call(native, vehicle);
		}

		public void _0x4056EA1105F5ABD7(object p0, object p1)
		{
			if (__0x4056EA1105F5ABD7 == null) __0x4056EA1105F5ABD7 = (Function) native.GetObjectProperty("_0x4056EA1105F5ABD7");
			__0x4056EA1105F5ABD7.Call(native, p0, p1);
		}

		public void SetHeliTailRotorHealth(object p0, object p1)
		{
			if (setHeliTailRotorHealth == null) setHeliTailRotorHealth = (Function) native.GetObjectProperty("setHeliTailRotorHealth");
			setHeliTailRotorHealth.Call(native, p0, p1);
		}

		public void SetHeliTailExplodeThrowDashboard(int vehicle, bool p1)
		{
			if (setHeliTailExplodeThrowDashboard == null) setHeliTailExplodeThrowDashboard = (Function) native.GetObjectProperty("setHeliTailExplodeThrowDashboard");
			setHeliTailExplodeThrowDashboard.Call(native, vehicle, p1);
		}

		/// <summary>
		/// NOTE: Debugging functions are not present in the retail version of the game.
		/// </summary>
		public void SetVehicleNameDebug(int vehicle, string name)
		{
			if (setVehicleNameDebug == null) setVehicleNameDebug = (Function) native.GetObjectProperty("setVehicleNameDebug");
			setVehicleNameDebug.Call(native, vehicle, name);
		}

		/// <summary>
		/// Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
		/// </summary>
		public void SetVehicleExplodesOnHighExplosionDamage(int vehicle, bool toggle)
		{
			if (setVehicleExplodesOnHighExplosionDamage == null) setVehicleExplodesOnHighExplosionDamage = (Function) native.GetObjectProperty("setVehicleExplodesOnHighExplosionDamage");
			setVehicleExplodesOnHighExplosionDamage.Call(native, vehicle, toggle);
		}

		public void _0xD565F438137F0E10(object p0, object p1)
		{
			if (__0xD565F438137F0E10 == null) __0xD565F438137F0E10 = (Function) native.GetObjectProperty("_0xD565F438137F0E10");
			__0xD565F438137F0E10.Call(native, p0, p1);
		}

		public void _0x3441CAD2F2231923(int vehicle, bool p1)
		{
			if (__0x3441CAD2F2231923 == null) __0x3441CAD2F2231923 = (Function) native.GetObjectProperty("_0x3441CAD2F2231923");
			__0x3441CAD2F2231923.Call(native, vehicle, p1);
		}

		public void SetVehicleDisableTowing(int vehicle, bool toggle)
		{
			if (setVehicleDisableTowing == null) setVehicleDisableTowing = (Function) native.GetObjectProperty("setVehicleDisableTowing");
			setVehicleDisableTowing.Call(native, vehicle, toggle);
		}

		public bool DoesVehicleHaveLandingGear(int vehicle)
		{
			if (doesVehicleHaveLandingGear == null) doesVehicleHaveLandingGear = (Function) native.GetObjectProperty("doesVehicleHaveLandingGear");
			return (bool) doesVehicleHaveLandingGear.Call(native, vehicle);
		}

		/// <summary>
		/// Works for vehicles with a retractable landing gear
		/// landing gear states:
		/// 0: Deployed
		/// 1: Closing
		/// 2: Opening
		/// 3: Retracted
		/// what can I use to make the hydra thing forward?
		/// </summary>
		public void ControlLandingGear(int vehicle, int state)
		{
			if (controlLandingGear == null) controlLandingGear = (Function) native.GetObjectProperty("controlLandingGear");
			controlLandingGear.Call(native, vehicle, state);
		}

		/// <summary>
		/// landing gear states:
		/// 0: Deployed
		/// 1: Closing
		/// 2: Opening
		/// 3: Retracted
		/// </summary>
		public int GetLandingGearState(int vehicle)
		{
			if (getLandingGearState == null) getLandingGearState = (Function) native.GetObjectProperty("getLandingGearState");
			return (int) getLandingGearState.Call(native, vehicle);
		}

		public bool IsAnyVehicleNearPoint(double x, double y, double z, double radius)
		{
			if (isAnyVehicleNearPoint == null) isAnyVehicleNearPoint = (Function) native.GetObjectProperty("isAnyVehicleNearPoint");
			return (bool) isAnyVehicleNearPoint.Call(native, x, y, z, radius);
		}

		public void RequestVehicleHighDetailModel(int vehicle)
		{
			if (requestVehicleHighDetailModel == null) requestVehicleHighDetailModel = (Function) native.GetObjectProperty("requestVehicleHighDetailModel");
			requestVehicleHighDetailModel.Call(native, vehicle);
		}

		public void RemoveVehicleHighDetailModel(int vehicle)
		{
			if (removeVehicleHighDetailModel == null) removeVehicleHighDetailModel = (Function) native.GetObjectProperty("removeVehicleHighDetailModel");
			removeVehicleHighDetailModel.Call(native, vehicle);
		}

		public bool IsVehicleHighDetail(int vehicle)
		{
			if (isVehicleHighDetail == null) isVehicleHighDetail = (Function) native.GetObjectProperty("isVehicleHighDetail");
			return (bool) isVehicleHighDetail.Call(native, vehicle);
		}

		/// <summary>
		/// REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
		/// vehicle found that have asset's:
		/// cargobob3
		/// submersible
		/// blazer
		/// </summary>
		public void RequestVehicleAsset(int vehicleHash, int vehicleAsset)
		{
			if (requestVehicleAsset == null) requestVehicleAsset = (Function) native.GetObjectProperty("requestVehicleAsset");
			requestVehicleAsset.Call(native, vehicleHash, vehicleAsset);
		}

		public bool HasVehicleAssetLoaded(int vehicleAsset)
		{
			if (hasVehicleAssetLoaded == null) hasVehicleAssetLoaded = (Function) native.GetObjectProperty("hasVehicleAssetLoaded");
			return (bool) hasVehicleAssetLoaded.Call(native, vehicleAsset);
		}

		public void RemoveVehicleAsset(int vehicleAsset)
		{
			if (removeVehicleAsset == null) removeVehicleAsset = (Function) native.GetObjectProperty("removeVehicleAsset");
			removeVehicleAsset.Call(native, vehicleAsset);
		}

		/// <summary>
		/// Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
		/// </summary>
		public void SetVehicleTowTruckArmPosition(int vehicle, double position)
		{
			if (setVehicleTowTruckArmPosition == null) setVehicleTowTruckArmPosition = (Function) native.GetObjectProperty("setVehicleTowTruckArmPosition");
			setVehicleTowTruckArmPosition.Call(native, vehicle, position);
		}

		/// <summary>
		/// HookOffset defines where the hook is attached. leave at 0 for default attachment.
		/// </summary>
		public void AttachVehicleToTowTruck(int towTruck, int vehicle, bool rear, double hookOffsetX, double hookOffsetY, double hookOffsetZ)
		{
			if (attachVehicleToTowTruck == null) attachVehicleToTowTruck = (Function) native.GetObjectProperty("attachVehicleToTowTruck");
			attachVehicleToTowTruck.Call(native, towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);
		}

		/// <summary>
		/// First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
		/// </summary>
		public void DetachVehicleFromTowTruck(int towTruck, int vehicle)
		{
			if (detachVehicleFromTowTruck == null) detachVehicleFromTowTruck = (Function) native.GetObjectProperty("detachVehicleFromTowTruck");
			detachVehicleFromTowTruck.Call(native, towTruck, vehicle);
		}

		public bool DetachVehicleFromAnyTowTruck(int vehicle)
		{
			if (detachVehicleFromAnyTowTruck == null) detachVehicleFromAnyTowTruck = (Function) native.GetObjectProperty("detachVehicleFromAnyTowTruck");
			return (bool) detachVehicleFromAnyTowTruck.Call(native, vehicle);
		}

		/// <summary>
		/// Scripts verify that towTruck is the first parameter, not the second.
		/// </summary>
		public bool IsVehicleAttachedToTowTruck(int towTruck, int vehicle)
		{
			if (isVehicleAttachedToTowTruck == null) isVehicleAttachedToTowTruck = (Function) native.GetObjectProperty("isVehicleAttachedToTowTruck");
			return (bool) isVehicleAttachedToTowTruck.Call(native, towTruck, vehicle);
		}

		public int GetEntityAttachedToTowTruck(int towTruck)
		{
			if (getEntityAttachedToTowTruck == null) getEntityAttachedToTowTruck = (Function) native.GetObjectProperty("getEntityAttachedToTowTruck");
			return (int) getEntityAttachedToTowTruck.Call(native, towTruck);
		}

		/// <summary>
		/// Please change to void.
		/// </summary>
		public object SetVehicleAutomaticallyAttaches(int vehicle, bool p1, object p2)
		{
			if (setVehicleAutomaticallyAttaches == null) setVehicleAutomaticallyAttaches = (Function) native.GetObjectProperty("setVehicleAutomaticallyAttaches");
			return setVehicleAutomaticallyAttaches.Call(native, vehicle, p1, p2);
		}

		public void SetVehicleBulldozerArmPosition(int vehicle, double position, bool p2)
		{
			if (setVehicleBulldozerArmPosition == null) setVehicleBulldozerArmPosition = (Function) native.GetObjectProperty("setVehicleBulldozerArmPosition");
			setVehicleBulldozerArmPosition.Call(native, vehicle, position, p2);
		}

		public void SetVehicleTankTurretPosition(int vehicle, double position, bool p2)
		{
			if (setVehicleTankTurretPosition == null) setVehicleTankTurretPosition = (Function) native.GetObjectProperty("setVehicleTankTurretPosition");
			setVehicleTankTurretPosition.Call(native, vehicle, position, p2);
		}

		public void _0x0581730AB9380412(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (__0x0581730AB9380412 == null) __0x0581730AB9380412 = (Function) native.GetObjectProperty("_0x0581730AB9380412");
			__0x0581730AB9380412.Call(native, p0, p1, p2, p3, p4, p5);
		}

		public void _0x737E398138550FFF(object p0, object p1)
		{
			if (__0x737E398138550FFF == null) __0x737E398138550FFF = (Function) native.GetObjectProperty("_0x737E398138550FFF");
			__0x737E398138550FFF.Call(native, p0, p1);
		}

		public void _0x1093408B4B9D1146(object p0, double p1)
		{
			if (__0x1093408B4B9D1146 == null) __0x1093408B4B9D1146 = (Function) native.GetObjectProperty("_0x1093408B4B9D1146");
			__0x1093408B4B9D1146.Call(native, p0, p1);
		}

		public void DisableVehicleTurretMovementThisFrame(object p0)
		{
			if (disableVehicleTurretMovementThisFrame == null) disableVehicleTurretMovementThisFrame = (Function) native.GetObjectProperty("disableVehicleTurretMovementThisFrame");
			disableVehicleTurretMovementThisFrame.Call(native, p0);
		}

		public void SetVehicleFlightNozzlePosition(int vehicle, double angleRatio)
		{
			if (setVehicleFlightNozzlePosition == null) setVehicleFlightNozzlePosition = (Function) native.GetObjectProperty("setVehicleFlightNozzlePosition");
			setVehicleFlightNozzlePosition.Call(native, vehicle, angleRatio);
		}

		public void SetVehicleFlightNozzlePositionImmediate(int vehicle, double angle)
		{
			if (setVehicleFlightNozzlePositionImmediate == null) setVehicleFlightNozzlePositionImmediate = (Function) native.GetObjectProperty("setVehicleFlightNozzlePositionImmediate");
			setVehicleFlightNozzlePositionImmediate.Call(native, vehicle, angle);
		}

		public double GetVehicleFlightNozzlePosition(int plane)
		{
			if (getVehicleFlightNozzlePosition == null) getVehicleFlightNozzlePosition = (Function) native.GetObjectProperty("getVehicleFlightNozzlePosition");
			return (double) getVehicleFlightNozzlePosition.Call(native, plane);
		}

		public void SetDisableVehicleFlightNozzlePosition(object p0, object p1)
		{
			if (setDisableVehicleFlightNozzlePosition == null) setDisableVehicleFlightNozzlePosition = (Function) native.GetObjectProperty("setDisableVehicleFlightNozzlePosition");
			setDisableVehicleFlightNozzlePosition.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, Vector3, Vector3></returns>
		public (bool, Vector3, Vector3) _0xA4822F1CF23F4810(Vector3 outVec, object p1, Vector3 outVec1, object p3, object p4, object p5, object p6, object p7, object p8)
		{
			if (__0xA4822F1CF23F4810 == null) __0xA4822F1CF23F4810 = (Function) native.GetObjectProperty("_0xA4822F1CF23F4810");
			var results = (Array) __0xA4822F1CF23F4810.Call(native, outVec, p1, outVec1, p3, p4, p5, p6, p7, p8);
			return ((bool) results[0], JSObjectToVector3(results[1]), JSObjectToVector3(results[2]));
		}

		/// <summary>
		/// On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
		/// </summary>
		public void SetVehicleBurnout(int vehicle, bool toggle)
		{
			if (setVehicleBurnout == null) setVehicleBurnout = (Function) native.GetObjectProperty("setVehicleBurnout");
			setVehicleBurnout.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// vb.net
		/// Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
		/// Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
		/// End Function
		/// </summary>
		/// <returns>Returns whether the specified vehicle is currently in a burnout.</returns>
		public bool IsVehicleInBurnout(int vehicle)
		{
			if (isVehicleInBurnout == null) isVehicleInBurnout = (Function) native.GetObjectProperty("isVehicleInBurnout");
			return (bool) isVehicleInBurnout.Call(native, vehicle);
		}

		/// <summary>
		/// Reduces grip significantly so it's hard to go anywhere.
		/// </summary>
		public void SetVehicleReduceGrip(int vehicle, bool toggle)
		{
			if (setVehicleReduceGrip == null) setVehicleReduceGrip = (Function) native.GetObjectProperty("setVehicleReduceGrip");
			setVehicleReduceGrip.Call(native, vehicle, toggle);
		}

		public void _0x6DEE944E1EE90CFB(object p0, object p1)
		{
			if (__0x6DEE944E1EE90CFB == null) __0x6DEE944E1EE90CFB = (Function) native.GetObjectProperty("_0x6DEE944E1EE90CFB");
			__0x6DEE944E1EE90CFB.Call(native, p0, p1);
		}

		/// <summary>
		/// Sets the turn signal enabled for a vehicle.
		/// Set turnSignal to 1 for left light, 0 for right light.
		/// </summary>
		public void SetVehicleIndicatorLights(int vehicle, int turnSignal, bool toggle)
		{
			if (setVehicleIndicatorLights == null) setVehicleIndicatorLights = (Function) native.GetObjectProperty("setVehicleIndicatorLights");
			setVehicleIndicatorLights.Call(native, vehicle, turnSignal, toggle);
		}

		public void SetVehicleBrakeLights(int vehicle, bool toggle)
		{
			if (setVehicleBrakeLights == null) setVehicleBrakeLights = (Function) native.GetObjectProperty("setVehicleBrakeLights");
			setVehicleBrakeLights.Call(native, vehicle, toggle);
		}

		public void SetVehicleHandbrake(int vehicle, bool toggle)
		{
			if (setVehicleHandbrake == null) setVehicleHandbrake = (Function) native.GetObjectProperty("setVehicleHandbrake");
			setVehicleHandbrake.Call(native, vehicle, toggle);
		}

		public void SetVehicleBrake(int vehicle, bool toggle)
		{
			if (setVehicleBrake == null) setVehicleBrake = (Function) native.GetObjectProperty("setVehicleBrake");
			setVehicleBrake.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// INIT_VISIBLE_LATCH_POPULATION?
		/// </summary>
		public void _0x48ADC8A773564670()
		{
			if (__0x48ADC8A773564670 == null) __0x48ADC8A773564670 = (Function) native.GetObjectProperty("_0x48ADC8A773564670");
			__0x48ADC8A773564670.Call(native);
		}

		/// <summary>
		/// HAS_*
		/// </summary>
		public bool _0x91D6DD290888CBAB()
		{
			if (__0x91D6DD290888CBAB == null) __0x91D6DD290888CBAB = (Function) native.GetObjectProperty("_0x91D6DD290888CBAB");
			return (bool) __0x91D6DD290888CBAB.Call(native);
		}

		public void _0x51DB102F4A3BA5E0(bool toggle)
		{
			if (__0x51DB102F4A3BA5E0 == null) __0x51DB102F4A3BA5E0 = (Function) native.GetObjectProperty("_0x51DB102F4A3BA5E0");
			__0x51DB102F4A3BA5E0.Call(native, toggle);
		}

		public void _0xA4A9A4C40E615885(object p0)
		{
			if (__0xA4A9A4C40E615885 == null) __0xA4A9A4C40E615885 = (Function) native.GetObjectProperty("_0xA4A9A4C40E615885");
			__0xA4A9A4C40E615885.Call(native, p0);
		}

		/// <summary>
		/// Gets the trailer of a vehicle and puts it into the trailer parameter.
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetVehicleTrailerVehicle(int vehicle, int trailer)
		{
			if (getVehicleTrailerVehicle == null) getVehicleTrailerVehicle = (Function) native.GetObjectProperty("getVehicleTrailerVehicle");
			var results = (Array) getVehicleTrailerVehicle.Call(native, vehicle, trailer);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// SET_VEHICLE_*
		/// </summary>
		public void _0xCAC66558B944DA67(int vehicle, bool toggle)
		{
			if (__0xCAC66558B944DA67 == null) __0xCAC66558B944DA67 = (Function) native.GetObjectProperty("_0xCAC66558B944DA67");
			__0xCAC66558B944DA67.Call(native, vehicle, toggle);
		}

		public void SetVehicleRudderBroken(int vehicle, bool toggle)
		{
			if (setVehicleRudderBroken == null) setVehicleRudderBroken = (Function) native.GetObjectProperty("setVehicleRudderBroken");
			setVehicleRudderBroken.Call(native, vehicle, toggle);
		}

		public void SetConvertibleRoofLatchState(int vehicle, bool state)
		{
			if (setConvertibleRoofLatchState == null) setConvertibleRoofLatchState = (Function) native.GetObjectProperty("setConvertibleRoofLatchState");
			setConvertibleRoofLatchState.Call(native, vehicle, state);
		}

		public double GetVehicleEstimatedMaxSpeed(int vehicle)
		{
			if (getVehicleEstimatedMaxSpeed == null) getVehicleEstimatedMaxSpeed = (Function) native.GetObjectProperty("getVehicleEstimatedMaxSpeed");
			return (double) getVehicleEstimatedMaxSpeed.Call(native, vehicle);
		}

		public double GetVehicleMaxBraking(int vehicle)
		{
			if (getVehicleMaxBraking == null) getVehicleMaxBraking = (Function) native.GetObjectProperty("getVehicleMaxBraking");
			return (double) getVehicleMaxBraking.Call(native, vehicle);
		}

		public double GetVehicleMaxTraction(int vehicle)
		{
			if (getVehicleMaxTraction == null) getVehicleMaxTraction = (Function) native.GetObjectProperty("getVehicleMaxTraction");
			return (double) getVehicleMaxTraction.Call(native, vehicle);
		}

		/// <summary>
		/// static - max acceleration
		/// </summary>
		public double GetVehicleAcceleration(int vehicle)
		{
			if (getVehicleAcceleration == null) getVehicleAcceleration = (Function) native.GetObjectProperty("getVehicleAcceleration");
			return (double) getVehicleAcceleration.Call(native, vehicle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns max speed (without mods) of the specified vehicle model in m/s.</returns>
		public double GetVehicleModelEstimatedMaxSpeed(int modelHash)
		{
			if (getVehicleModelEstimatedMaxSpeed == null) getVehicleModelEstimatedMaxSpeed = (Function) native.GetObjectProperty("getVehicleModelEstimatedMaxSpeed");
			return (double) getVehicleModelEstimatedMaxSpeed.Call(native, modelHash);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns max braking of the specified vehicle model.</returns>
		public double GetVehicleModelMaxBraking(int modelHash)
		{
			if (getVehicleModelMaxBraking == null) getVehicleModelMaxBraking = (Function) native.GetObjectProperty("getVehicleModelMaxBraking");
			return (double) getVehicleModelMaxBraking.Call(native, modelHash);
		}

		public double GetVehicleModelMaxBrakingMaxMods(int modelHash)
		{
			if (getVehicleModelMaxBrakingMaxMods == null) getVehicleModelMaxBrakingMaxMods = (Function) native.GetObjectProperty("getVehicleModelMaxBrakingMaxMods");
			return (double) getVehicleModelMaxBrakingMaxMods.Call(native, modelHash);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns max traction of the specified vehicle model.</returns>
		public double GetVehicleModelMaxTraction(int modelHash)
		{
			if (getVehicleModelMaxTraction == null) getVehicleModelMaxTraction = (Function) native.GetObjectProperty("getVehicleModelMaxTraction");
			return (double) getVehicleModelMaxTraction.Call(native, modelHash);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the acceleration of the specified model.</returns>
		public double GetVehicleModelAcceleration(int modelHash)
		{
			if (getVehicleModelAcceleration == null) getVehicleModelAcceleration = (Function) native.GetObjectProperty("getVehicleModelAcceleration");
			return (double) getVehicleModelAcceleration.Call(native, modelHash);
		}

		/// <summary>
		/// GET_VEHICLE_MODEL_*
		/// 9.8 * thrust if air vehicle, else 0.38 + drive force?
		/// </summary>
		public double GetVehicleModelEstimatedAgility(int modelHash)
		{
			if (getVehicleModelEstimatedAgility == null) getVehicleModelEstimatedAgility = (Function) native.GetObjectProperty("getVehicleModelEstimatedAgility");
			return (double) getVehicleModelEstimatedAgility.Call(native, modelHash);
		}

		/// <summary>
		/// GET_VEHICLE_MODEL_*
		/// Function pertains only to aviation vehicles.
		/// </summary>
		public double GetVehicleModelMaxKnots(int modelHash)
		{
			if (getVehicleModelMaxKnots == null) getVehicleModelMaxKnots = (Function) native.GetObjectProperty("getVehicleModelMaxKnots");
			return (double) getVehicleModelMaxKnots.Call(native, modelHash);
		}

		/// <summary>
		/// GET_VEHICLE_MODEL_*
		/// </summary>
		/// <returns>called if the vehicle is a boat -- returns vecMoveResistanceX?</returns>
		public double GetVehicleModelMoveResistance(int modelHash)
		{
			if (getVehicleModelMoveResistance == null) getVehicleModelMoveResistance = (Function) native.GetObjectProperty("getVehicleModelMoveResistance");
			return (double) getVehicleModelMoveResistance.Call(native, modelHash);
		}

		public double GetVehicleClassEstimatedMaxSpeed(int vehicleClass)
		{
			if (getVehicleClassEstimatedMaxSpeed == null) getVehicleClassEstimatedMaxSpeed = (Function) native.GetObjectProperty("getVehicleClassEstimatedMaxSpeed");
			return (double) getVehicleClassEstimatedMaxSpeed.Call(native, vehicleClass);
		}

		public double GetVehicleClassMaxTraction(int vehicleClass)
		{
			if (getVehicleClassMaxTraction == null) getVehicleClassMaxTraction = (Function) native.GetObjectProperty("getVehicleClassMaxTraction");
			return (double) getVehicleClassMaxTraction.Call(native, vehicleClass);
		}

		public double GetVehicleClassMaxAgility(int vehicleClass)
		{
			if (getVehicleClassMaxAgility == null) getVehicleClassMaxAgility = (Function) native.GetObjectProperty("getVehicleClassMaxAgility");
			return (double) getVehicleClassMaxAgility.Call(native, vehicleClass);
		}

		public double GetVehicleClassMaxAcceleration(int vehicleClass)
		{
			if (getVehicleClassMaxAcceleration == null) getVehicleClassMaxAcceleration = (Function) native.GetObjectProperty("getVehicleClassMaxAcceleration");
			return (double) getVehicleClassMaxAcceleration.Call(native, vehicleClass);
		}

		public double GetVehicleClassMaxBraking(int vehicleClass)
		{
			if (getVehicleClassMaxBraking == null) getVehicleClassMaxBraking = (Function) native.GetObjectProperty("getVehicleClassMaxBraking");
			return (double) getVehicleClassMaxBraking.Call(native, vehicleClass);
		}

		/// <summary>
		/// ADD_*
		/// </summary>
		public int AddSpeedZoneForCoord(double x, double y, double z, double radius, double speed, bool p5)
		{
			if (addSpeedZoneForCoord == null) addSpeedZoneForCoord = (Function) native.GetObjectProperty("addSpeedZoneForCoord");
			return (int) addSpeedZoneForCoord.Call(native, x, y, z, radius, speed, p5);
		}

		/// <summary>
		/// REMOVE_*
		/// </summary>
		public bool RemoveSpeedZone(int speedzone)
		{
			if (removeSpeedZone == null) removeSpeedZone = (Function) native.GetObjectProperty("removeSpeedZone");
			return (bool) removeSpeedZone.Call(native, speedzone);
		}

		public void OpenBombBayDoors(int vehicle)
		{
			if (openBombBayDoors == null) openBombBayDoors = (Function) native.GetObjectProperty("openBombBayDoors");
			openBombBayDoors.Call(native, vehicle);
		}

		public void CloseBombBayDoors(int vehicle)
		{
			if (closeBombBayDoors == null) closeBombBayDoors = (Function) native.GetObjectProperty("closeBombBayDoors");
			closeBombBayDoors.Call(native, vehicle);
		}

		public bool AreBombBayDoorsOpen(int aircraft)
		{
			if (areBombBayDoorsOpen == null) areBombBayDoorsOpen = (Function) native.GetObjectProperty("areBombBayDoorsOpen");
			return (bool) areBombBayDoorsOpen.Call(native, aircraft);
		}

		/// <summary>
		/// @Author Nac
		/// </summary>
		/// <returns>Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.</returns>
		public bool IsVehicleSearchlightOn(int vehicle)
		{
			if (isVehicleSearchlightOn == null) isVehicleSearchlightOn = (Function) native.GetObjectProperty("isVehicleSearchlightOn");
			return (bool) isVehicleSearchlightOn.Call(native, vehicle);
		}

		/// <summary>
		/// Only works during nighttime.
		/// </summary>
		public void SetVehicleSearchlight(int heli, bool toggle, bool canBeUsedByAI)
		{
			if (setVehicleSearchlight == null) setVehicleSearchlight = (Function) native.GetObjectProperty("setVehicleSearchlight");
			setVehicleSearchlight.Call(native, heli, toggle, canBeUsedByAI);
		}

		public bool _0x639431E895B9AA57(int ped, int vehicle, bool p2, bool p3, bool p4)
		{
			if (__0x639431E895B9AA57 == null) __0x639431E895B9AA57 = (Function) native.GetObjectProperty("_0x639431E895B9AA57");
			return (bool) __0x639431E895B9AA57.Call(native, ped, vehicle, p2, p3, p4);
		}

		public Vector3 GetEntryPositionOfDoor(int vehicle, int doorIndex)
		{
			if (getEntryPositionOfDoor == null) getEntryPositionOfDoor = (Function) native.GetObjectProperty("getEntryPositionOfDoor");
			return JSObjectToVector3(getEntryPositionOfDoor.Call(native, vehicle, doorIndex));
		}

		public bool CanShuffleSeat(int vehicle, object p1)
		{
			if (canShuffleSeat == null) canShuffleSeat = (Function) native.GetObjectProperty("canShuffleSeat");
			return (bool) canShuffleSeat.Call(native, vehicle, p1);
		}

		public int GetNumModKits(int vehicle)
		{
			if (getNumModKits == null) getNumModKits = (Function) native.GetObjectProperty("getNumModKits");
			return (int) getNumModKits.Call(native, vehicle);
		}

		/// <summary>
		/// Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
		/// </summary>
		public void SetVehicleModKit(int vehicle, int modKit)
		{
			if (setVehicleModKit == null) setVehicleModKit = (Function) native.GetObjectProperty("setVehicleModKit");
			setVehicleModKit.Call(native, vehicle, modKit);
		}

		public int GetVehicleModKit(int vehicle)
		{
			if (getVehicleModKit == null) getVehicleModKit = (Function) native.GetObjectProperty("getVehicleModKit");
			return (int) getVehicleModKit.Call(native, vehicle);
		}

		public int GetVehicleModKitType(int vehicle)
		{
			if (getVehicleModKitType == null) getVehicleModKitType = (Function) native.GetObjectProperty("getVehicleModKitType");
			return (int) getVehicleModKitType.Call(native, vehicle);
		}

		/// <summary>
		/// Wheel Types:
		/// 0: Sport
		/// 1: Muscle
		/// 2: Lowrider
		/// 3: SUV
		/// 4: Offroad
		/// 5: Tuner
		/// 6: Bike Wheels
		/// 7: High End
		/// Tested in Los Santos Customs
		/// </summary>
		/// <returns>Returns an int</returns>
		public int GetVehicleWheelType(int vehicle)
		{
			if (getVehicleWheelType == null) getVehicleWheelType = (Function) native.GetObjectProperty("getVehicleWheelType");
			return (int) getVehicleWheelType.Call(native, vehicle);
		}

		/// <summary>
		/// 0: Sport
		/// 1: Muscle
		/// 2: Lowrider
		/// 3: SUV
		/// 4: Offroad
		/// 5: Tuner
		/// 6: Bike Wheels
		/// 7: High End
		/// </summary>
		public void SetVehicleWheelType(int vehicle, int WheelType)
		{
			if (setVehicleWheelType == null) setVehicleWheelType = (Function) native.GetObjectProperty("setVehicleWheelType");
			setVehicleWheelType.Call(native, vehicle, WheelType);
		}

		public int GetNumModColors(int p0, bool p1)
		{
			if (getNumModColors == null) getNumModColors = (Function) native.GetObjectProperty("getNumModColors");
			return (int) getNumModColors.Call(native, p0, p1);
		}

		/// <summary>
		/// paintType:
		/// 0: Normal
		/// 1: Metallic
		/// 2: Pearl
		/// 3: Matte
		/// 4: Metal
		/// 5: Chrome
		/// color: number of the color.
		/// p3 seems to always be 0.
		/// </summary>
		/// <param name="color">number of the color.</param>
		/// <param name="p3">seems to always be 0.</param>
		public void SetVehicleModColor1(int vehicle, int paintType, int color, int p3)
		{
			if (setVehicleModColor1 == null) setVehicleModColor1 = (Function) native.GetObjectProperty("setVehicleModColor1");
			setVehicleModColor1.Call(native, vehicle, paintType, color, p3);
		}

		/// <summary>
		/// Changes the secondary paint type and color
		/// paintType:
		/// 0: Normal
		/// 1: Metallic
		/// 2: Pearl
		/// 3: Matte
		/// 4: Metal
		/// 5: Chrome
		/// color: number of the color
		/// </summary>
		/// <param name="color">number of the color</param>
		public void SetVehicleModColor2(int vehicle, int paintType, int color)
		{
			if (setVehicleModColor2 == null) setVehicleModColor2 = (Function) native.GetObjectProperty("setVehicleModColor2");
			setVehicleModColor2.Call(native, vehicle, paintType, color);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetVehicleModColor1(int vehicle, int paintType, int color, int p3)
		{
			if (getVehicleModColor1 == null) getVehicleModColor1 = (Function) native.GetObjectProperty("getVehicleModColor1");
			var results = (Array) getVehicleModColor1.Call(native, vehicle, paintType, color, p3);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int></returns>
		public (object, int, int) GetVehicleModColor2(int vehicle, int paintType, int color)
		{
			if (getVehicleModColor2 == null) getVehicleModColor2 = (Function) native.GetObjectProperty("getVehicleModColor2");
			var results = (Array) getVehicleModColor2.Call(native, vehicle, paintType, color);
			return (results[0], (int) results[1], (int) results[2]);
		}

		/// <summary>
		/// p1 is always 0
		/// </summary>
		/// <param name="p1">is always 0</param>
		/// <returns>returns a string which is the codename of the vehicle's currently selected primary color</returns>
		public string GetVehicleModColor1Name(int vehicle, bool p1)
		{
			if (getVehicleModColor1Name == null) getVehicleModColor1Name = (Function) native.GetObjectProperty("getVehicleModColor1Name");
			return (string) getVehicleModColor1Name.Call(native, vehicle, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>returns a string which is the codename of the vehicle's currently selected secondary color</returns>
		public string GetVehicleModColor2Name(int vehicle)
		{
			if (getVehicleModColor2Name == null) getVehicleModColor2Name = (Function) native.GetObjectProperty("getVehicleModColor2Name");
			return (string) getVehicleModColor2Name.Call(native, vehicle);
		}

		/// <summary>
		/// True if it isn't loading mods, false if it is.
		/// </summary>
		/// <returns>Returns whether or not the vehicle has a CVehicleStreamRequestGfx that's trying to load mods.</returns>
		public bool IsVehicleModLoadDone(int vehicle)
		{
			if (isVehicleModLoadDone == null) isVehicleModLoadDone = (Function) native.GetObjectProperty("isVehicleModLoadDone");
			return (bool) isVehicleModLoadDone.Call(native, vehicle);
		}

		/// <summary>
		/// In b944, there are 50 (0 - 49) mod types.
		/// Sets the vehicle mod.
		/// The vehicle must have a mod kit first.
		/// Any out of range ModIndex is stock.
		/// #Mod Type
		/// Spoilers - 0
		/// Front Bumper - 1
		/// Rear Bumper - 2
		/// Side Skirt - 3
		/// See NativeDB for reference: http://natives.altv.mp/#/0x6AF0636DDEDCB6DD
		/// </summary>
		public void SetVehicleMod(int vehicle, int modType, int modIndex, bool customTires)
		{
			if (setVehicleMod == null) setVehicleMod = (Function) native.GetObjectProperty("setVehicleMod");
			setVehicleMod.Call(native, vehicle, modType, modIndex, customTires);
		}

		/// <summary>
		/// In b944, there are 50 (0 - 49) mod types.
		/// </summary>
		/// <returns>Returns -1 if the vehicle mod is stock</returns>
		public int GetVehicleMod(int vehicle, int modType)
		{
			if (getVehicleMod == null) getVehicleMod = (Function) native.GetObjectProperty("getVehicleMod");
			return (int) getVehicleMod.Call(native, vehicle, modType);
		}

		/// <summary>
		/// </summary>
		/// <returns>Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels</returns>
		public bool GetVehicleModVariation(int vehicle, int modType)
		{
			if (getVehicleModVariation == null) getVehicleModVariation = (Function) native.GetObjectProperty("getVehicleModVariation");
			return (bool) getVehicleModVariation.Call(native, vehicle, modType);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns how many possible mods a vehicle has for a given mod type</returns>
		public int GetNumVehicleMods(int vehicle, int modType)
		{
			if (getNumVehicleMods == null) getNumVehicleMods = (Function) native.GetObjectProperty("getNumVehicleMods");
			return (int) getNumVehicleMods.Call(native, vehicle, modType);
		}

		public void RemoveVehicleMod(int vehicle, int modType)
		{
			if (removeVehicleMod == null) removeVehicleMod = (Function) native.GetObjectProperty("removeVehicleMod");
			removeVehicleMod.Call(native, vehicle, modType);
		}

		/// <summary>
		/// Toggles:
		/// UNK17 - 17
		/// Turbo - 18
		/// UNK19 - 19
		/// Tire Smoke - 20
		/// UNK21 - 21
		/// Xenon Headlights - 22
		/// </summary>
		public void ToggleVehicleMod(int vehicle, int modType, bool toggle)
		{
			if (toggleVehicleMod == null) toggleVehicleMod = (Function) native.GetObjectProperty("toggleVehicleMod");
			toggleVehicleMod.Call(native, vehicle, modType, toggle);
		}

		public bool IsToggleModOn(int vehicle, int modType)
		{
			if (isToggleModOn == null) isToggleModOn = (Function) native.GetObjectProperty("isToggleModOn");
			return (bool) isToggleModOn.Call(native, vehicle, modType);
		}

		/// <summary>
		/// Use _GET_LABEL_TEXT to get the part name in the game's language
		/// </summary>
		/// <returns>Returns the text label of a mod type for a given vehicle</returns>
		public string GetModTextLabel(int vehicle, int modType, int modValue)
		{
			if (getModTextLabel == null) getModTextLabel = (Function) native.GetObjectProperty("getModTextLabel");
			return (string) getModTextLabel.Call(native, vehicle, modType, modValue);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the name for the type of vehicle mod(Armour, engine etc)</returns>
		public string GetModSlotName(int vehicle, int modType)
		{
			if (getModSlotName == null) getModSlotName = (Function) native.GetObjectProperty("getModSlotName");
			return (string) getModSlotName.Call(native, vehicle, modType);
		}

		/// <summary>
		/// Second Param = LiveryIndex
		/// example
		/// int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
		/// for (int i = 0; i < count; i++)
		/// {
		/// const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
		/// }
		/// this example will work fine to fetch all names
		/// for example for Sanchez we get
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB4C7A93837C91A1F
		/// </summary>
		public string GetLiveryName(int vehicle, int liveryIndex)
		{
			if (getLiveryName == null) getLiveryName = (Function) native.GetObjectProperty("getLiveryName");
			return (string) getLiveryName.Call(native, vehicle, liveryIndex);
		}

		public double GetVehicleModModifierValue(int vehicle, int modType, int modIndex)
		{
			if (getVehicleModModifierValue == null) getVehicleModModifierValue = (Function) native.GetObjectProperty("getVehicleModModifierValue");
			return (double) getVehicleModModifierValue.Call(native, vehicle, modType, modIndex);
		}

		/// <summary>
		/// Can be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF
		/// </summary>
		public int GetVehicleModIdentifierHash(int vehicle, int modType, int modIndex)
		{
			if (getVehicleModIdentifierHash == null) getVehicleModIdentifierHash = (Function) native.GetObjectProperty("getVehicleModIdentifierHash");
			return (int) getVehicleModIdentifierHash.Call(native, vehicle, modType, modIndex);
		}

		public void PreloadVehicleMod(object p0, int modType, object p2)
		{
			if (preloadVehicleMod == null) preloadVehicleMod = (Function) native.GetObjectProperty("preloadVehicleMod");
			preloadVehicleMod.Call(native, p0, modType, p2);
		}

		public bool HasPreloadModsFinished(object p0)
		{
			if (hasPreloadModsFinished == null) hasPreloadModsFinished = (Function) native.GetObjectProperty("hasPreloadModsFinished");
			return (bool) hasPreloadModsFinished.Call(native, p0);
		}

		public void ReleasePreloadMods(int vehicle)
		{
			if (releasePreloadMods == null) releasePreloadMods = (Function) native.GetObjectProperty("releasePreloadMods");
			releasePreloadMods.Call(native, vehicle);
		}

		/// <summary>
		/// Sets the tire smoke's color of this vehicle.
		/// vehicle: The vehicle that is the target of this method.
		/// r: The red level in the RGB color code.
		/// g: The green level in the RGB color code.
		/// b: The blue level in the RGB color code.
		/// Note:
		/// setting r,g,b to 0 will give the car independance day tyre smoke
		/// </summary>
		/// <param name="vehicle">The vehicle that is the target of this method.</param>
		/// <param name="r">The red level in the RGB color code.</param>
		/// <param name="g">The green level in the RGB color code.</param>
		/// <param name="b">The blue level in the RGB color code.</param>
		public void SetVehicleTyreSmokeColor(int vehicle, int r, int g, int b)
		{
			if (setVehicleTyreSmokeColor == null) setVehicleTyreSmokeColor = (Function) native.GetObjectProperty("setVehicleTyreSmokeColor");
			setVehicleTyreSmokeColor.Call(native, vehicle, r, g, b);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetVehicleTyreSmokeColor(int vehicle, int r, int g, int b)
		{
			if (getVehicleTyreSmokeColor == null) getVehicleTyreSmokeColor = (Function) native.GetObjectProperty("getVehicleTyreSmokeColor");
			var results = (Array) getVehicleTyreSmokeColor.Call(native, vehicle, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// enum WindowTints
		/// {
		/// WINDOWTINT_NONE,
		/// WINDOWTINT_PURE_BLACK,
		/// WINDOWTINT_DARKSMOKE,
		/// WINDOWTINT_LIGHTSMOKE,
		/// WINDOWTINT_STOCK,
		/// WINDOWTINT_LIMO,
		/// WINDOWTINT_GREEN
		/// };
		/// </summary>
		public void SetVehicleWindowTint(int vehicle, int tint)
		{
			if (setVehicleWindowTint == null) setVehicleWindowTint = (Function) native.GetObjectProperty("setVehicleWindowTint");
			setVehicleWindowTint.Call(native, vehicle, tint);
		}

		public int GetVehicleWindowTint(int vehicle)
		{
			if (getVehicleWindowTint == null) getVehicleWindowTint = (Function) native.GetObjectProperty("getVehicleWindowTint");
			return (int) getVehicleWindowTint.Call(native, vehicle);
		}

		public int GetNumVehicleWindowTints()
		{
			if (getNumVehicleWindowTints == null) getNumVehicleWindowTints = (Function) native.GetObjectProperty("getNumVehicleWindowTints");
			return (int) getNumVehicleWindowTints.Call(native);
		}

		/// <summary>
		/// What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetVehicleColor(int vehicle, int r, int g, int b)
		{
			if (getVehicleColor == null) getVehicleColor = (Function) native.GetObjectProperty("getVehicleColor");
			var results = (Array) getVehicleColor.Call(native, vehicle, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// Some kind of flags.
		/// </summary>
		public int _0xEEBFC7A7EFDC35B4(int vehicle)
		{
			if (__0xEEBFC7A7EFDC35B4 == null) __0xEEBFC7A7EFDC35B4 = (Function) native.GetObjectProperty("_0xEEBFC7A7EFDC35B4");
			return (int) __0xEEBFC7A7EFDC35B4.Call(native, vehicle);
		}

		/// <summary>
		/// iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
		/// if (iVar3 == joaat("weapon_stickybomb"))
		/// {
		/// func_171(726);
		/// iLocal_260 = 1;
		/// }
		/// </summary>
		public int GetVehicleCauseOfDestruction(int vehicle)
		{
			if (getVehicleCauseOfDestruction == null) getVehicleCauseOfDestruction = (Function) native.GetObjectProperty("getVehicleCauseOfDestruction");
			return (int) getVehicleCauseOfDestruction.Call(native, vehicle);
		}

		/// <summary>
		/// Sets some health value. Looks like it's used for helis.
		/// </summary>
		public void _0x5EE5632F47AE9695(int vehicle, double health)
		{
			if (__0x5EE5632F47AE9695 == null) __0x5EE5632F47AE9695 = (Function) native.GetObjectProperty("_0x5EE5632F47AE9695");
			__0x5EE5632F47AE9695.Call(native, vehicle, health);
		}

		/// <summary>
		/// From the driver's perspective, is the left headlight broken.
		/// </summary>
		public bool GetIsLeftVehicleHeadlightDamaged(int vehicle)
		{
			if (getIsLeftVehicleHeadlightDamaged == null) getIsLeftVehicleHeadlightDamaged = (Function) native.GetObjectProperty("getIsLeftVehicleHeadlightDamaged");
			return (bool) getIsLeftVehicleHeadlightDamaged.Call(native, vehicle);
		}

		/// <summary>
		/// From the driver's perspective, is the right headlight broken.
		/// </summary>
		public bool GetIsRightVehicleHeadlightDamaged(int vehicle)
		{
			if (getIsRightVehicleHeadlightDamaged == null) getIsRightVehicleHeadlightDamaged = (Function) native.GetObjectProperty("getIsRightVehicleHeadlightDamaged");
			return (bool) getIsRightVehicleHeadlightDamaged.Call(native, vehicle);
		}

		public bool IsVehicleEngineOnFire(int vehicle)
		{
			if (isVehicleEngineOnFire == null) isVehicleEngineOnFire = (Function) native.GetObjectProperty("isVehicleEngineOnFire");
			return (bool) isVehicleEngineOnFire.Call(native, vehicle);
		}

		public void ModifyVehicleTopSpeed(int vehicle, double value)
		{
			if (modifyVehicleTopSpeed == null) modifyVehicleTopSpeed = (Function) native.GetObjectProperty("modifyVehicleTopSpeed");
			modifyVehicleTopSpeed.Call(native, vehicle, value);
		}

		public void SetVehicleMaxSpeed(int vehicle, double speed)
		{
			if (setVehicleMaxSpeed == null) setVehicleMaxSpeed = (Function) native.GetObjectProperty("setVehicleMaxSpeed");
			setVehicleMaxSpeed.Call(native, vehicle, speed);
		}

		public void _0x1CF38D529D7441D9(int vehicle, bool toggle)
		{
			if (__0x1CF38D529D7441D9 == null) __0x1CF38D529D7441D9 = (Function) native.GetObjectProperty("_0x1CF38D529D7441D9");
			__0x1CF38D529D7441D9.Call(native, vehicle, toggle);
		}

		public void _0x1F9FB66F3A3842D2(int vehicle, bool p1)
		{
			if (__0x1F9FB66F3A3842D2 == null) __0x1F9FB66F3A3842D2 = (Function) native.GetObjectProperty("_0x1F9FB66F3A3842D2");
			__0x1F9FB66F3A3842D2.Call(native, vehicle, p1);
		}

		public void _0x59C3757B3B7408E8(object p0, object p1, object p2)
		{
			if (__0x59C3757B3B7408E8 == null) __0x59C3757B3B7408E8 = (Function) native.GetObjectProperty("_0x59C3757B3B7408E8");
			__0x59C3757B3B7408E8.Call(native, p0, p1, p2);
		}

		public object AddVehicleCombatAngledAvoidanceArea(double p0, double p1, double p2, double p3, double p4, double p5, double p6)
		{
			if (addVehicleCombatAngledAvoidanceArea == null) addVehicleCombatAngledAvoidanceArea = (Function) native.GetObjectProperty("addVehicleCombatAngledAvoidanceArea");
			return addVehicleCombatAngledAvoidanceArea.Call(native, p0, p1, p2, p3, p4, p5, p6);
		}

		public void RemoveVehicleCombatAvoidanceArea(object p0)
		{
			if (removeVehicleCombatAvoidanceArea == null) removeVehicleCombatAvoidanceArea = (Function) native.GetObjectProperty("removeVehicleCombatAvoidanceArea");
			removeVehicleCombatAvoidanceArea.Call(native, p0);
		}

		public bool IsAnyPassengerRappelingFromVehicle(int vehicle)
		{
			if (isAnyPassengerRappelingFromVehicle == null) isAnyPassengerRappelingFromVehicle = (Function) native.GetObjectProperty("isAnyPassengerRappelingFromVehicle");
			return (bool) isAnyPassengerRappelingFromVehicle.Call(native, vehicle);
		}

		/// <summary>
		/// <1.0 - Decreased torque
		/// =1.0 - Default torque
		/// >1.0 - Increased torque
		/// Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
		/// value - is between 0.2 and 1.8 in the decompiled scripts.
		/// This needs to be called every frame to take effect.
		/// </summary>
		/// <param name="value">is between 0.2 and 1.8 in the decompiled scripts. </param>
		public void SetVehicleCheatPowerIncrease(int vehicle, double value)
		{
			if (setVehicleCheatPowerIncrease == null) setVehicleCheatPowerIncrease = (Function) native.GetObjectProperty("setVehicleCheatPowerIncrease");
			setVehicleCheatPowerIncrease.Call(native, vehicle, value);
		}

		public void _0x0AD9E8F87FF7C16F(object p0, bool p1)
		{
			if (__0x0AD9E8F87FF7C16F == null) __0x0AD9E8F87FF7C16F = (Function) native.GetObjectProperty("_0x0AD9E8F87FF7C16F");
			__0x0AD9E8F87FF7C16F.Call(native, p0, p1);
		}

		/// <summary>
		/// Sets the wanted state of this vehicle.
		/// </summary>
		public void SetVehicleIsWanted(int vehicle, bool state)
		{
			if (setVehicleIsWanted == null) setVehicleIsWanted = (Function) native.GetObjectProperty("setVehicleIsWanted");
			setVehicleIsWanted.Call(native, vehicle, state);
		}

		public void _0xF488C566413B4232(object p0, double p1)
		{
			if (__0xF488C566413B4232 == null) __0xF488C566413B4232 = (Function) native.GetObjectProperty("_0xF488C566413B4232");
			__0xF488C566413B4232.Call(native, p0, p1);
		}

		/// <summary>
		/// same call as VEHICLE::_0x0F3B4D4E43177236
		/// </summary>
		public void _0xC1F981A6F74F0C23(object p0, bool p1)
		{
			if (__0xC1F981A6F74F0C23 == null) __0xC1F981A6F74F0C23 = (Function) native.GetObjectProperty("_0xC1F981A6F74F0C23");
			__0xC1F981A6F74F0C23.Call(native, p0, p1);
		}

		public void _0x0F3B4D4E43177236(object p0, bool p1)
		{
			if (__0x0F3B4D4E43177236 == null) __0x0F3B4D4E43177236 = (Function) native.GetObjectProperty("_0x0F3B4D4E43177236");
			__0x0F3B4D4E43177236.Call(native, p0, p1);
		}

		public double GetBoatBoomPositionRatio(int vehicle)
		{
			if (getBoatBoomPositionRatio == null) getBoatBoomPositionRatio = (Function) native.GetObjectProperty("getBoatBoomPositionRatio");
			return (double) getBoatBoomPositionRatio.Call(native, vehicle);
		}

		public void DisablePlaneAileron(int vehicle, bool p1, bool p2)
		{
			if (disablePlaneAileron == null) disablePlaneAileron = (Function) native.GetObjectProperty("disablePlaneAileron");
			disablePlaneAileron.Call(native, vehicle, p1, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true when in a vehicle, false whilst entering/exiting.</returns>
		public bool GetIsVehicleEngineRunning(int vehicle)
		{
			if (getIsVehicleEngineRunning == null) getIsVehicleEngineRunning = (Function) native.GetObjectProperty("getIsVehicleEngineRunning");
			return (bool) getIsVehicleEngineRunning.Call(native, vehicle);
		}

		public void SetVehicleUseAlternateHandling(int vehicle, bool toggle)
		{
			if (setVehicleUseAlternateHandling == null) setVehicleUseAlternateHandling = (Function) native.GetObjectProperty("setVehicleUseAlternateHandling");
			setVehicleUseAlternateHandling.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// Only works on bikes, both X and Y work in the -1 - 1 range.
		/// X forces the bike to turn left or right (-1, 1)
		/// Y forces the bike to lean to the left or to the right (-1, 1)
		/// Example with X -1/Y 1
		/// http://i.imgur.com/TgIuAPJ.jpg
		/// </summary>
		/// <param name="x">X forces the bike to turn left or right (-1, 1)</param>
		/// <param name="y">Y forces the bike to lean to the left or to the right (-1, 1)</param>
		public void SetBikeOnStand(int vehicle, double x, double y)
		{
			if (setBikeOnStand == null) setBikeOnStand = (Function) native.GetObjectProperty("setBikeOnStand");
			setBikeOnStand.Call(native, vehicle, x, y);
		}

		public void _0xAB04325045427AAE(int vehicle, bool p1)
		{
			if (__0xAB04325045427AAE == null) __0xAB04325045427AAE = (Function) native.GetObjectProperty("_0xAB04325045427AAE");
			__0xAB04325045427AAE.Call(native, vehicle, p1);
		}

		/// <summary>
		/// what does this do?
		/// </summary>
		public void _0xCFD778E7904C255E(int vehicle)
		{
			if (__0xCFD778E7904C255E == null) __0xCFD778E7904C255E = (Function) native.GetObjectProperty("_0xCFD778E7904C255E");
			__0xCFD778E7904C255E.Call(native, vehicle);
		}

		public void SetLastDrivenVehicle(int vehicle)
		{
			if (setLastDrivenVehicle == null) setLastDrivenVehicle = (Function) native.GetObjectProperty("setLastDrivenVehicle");
			setLastDrivenVehicle.Call(native, vehicle);
		}

		public int GetLastDrivenVehicle()
		{
			if (getLastDrivenVehicle == null) getLastDrivenVehicle = (Function) native.GetObjectProperty("getLastDrivenVehicle");
			return (int) getLastDrivenVehicle.Call(native);
		}

		public void ClearLastDrivenVehicle()
		{
			if (clearLastDrivenVehicle == null) clearLastDrivenVehicle = (Function) native.GetObjectProperty("clearLastDrivenVehicle");
			clearLastDrivenVehicle.Call(native);
		}

		public void SetVehicleHasBeenDrivenFlag(int vehicle, bool toggle)
		{
			if (setVehicleHasBeenDrivenFlag == null) setVehicleHasBeenDrivenFlag = (Function) native.GetObjectProperty("setVehicleHasBeenDrivenFlag");
			setVehicleHasBeenDrivenFlag.Call(native, vehicle, toggle);
		}

		public void SetTaskVehicleGotoPlaneMinHeightAboveTerrain(int plane, int height)
		{
			if (setTaskVehicleGotoPlaneMinHeightAboveTerrain == null) setTaskVehicleGotoPlaneMinHeightAboveTerrain = (Function) native.GetObjectProperty("setTaskVehicleGotoPlaneMinHeightAboveTerrain");
			setTaskVehicleGotoPlaneMinHeightAboveTerrain.Call(native, plane, height);
		}

		public void SetVehicleLodMultiplier(int vehicle, double multiplier)
		{
			if (setVehicleLodMultiplier == null) setVehicleLodMultiplier = (Function) native.GetObjectProperty("setVehicleLodMultiplier");
			setVehicleLodMultiplier.Call(native, vehicle, multiplier);
		}

		public void SetVehicleCanSaveInGarage(int vehicle, bool toggle)
		{
			if (setVehicleCanSaveInGarage == null) setVehicleCanSaveInGarage = (Function) native.GetObjectProperty("setVehicleCanSaveInGarage");
			setVehicleCanSaveInGarage.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// Also includes some "turnOffBones" when vehicle mods are installed.
		/// </summary>
		public int GetVehicleNumberOfBrokenOffBones(int vehicle)
		{
			if (getVehicleNumberOfBrokenOffBones == null) getVehicleNumberOfBrokenOffBones = (Function) native.GetObjectProperty("getVehicleNumberOfBrokenOffBones");
			return (int) getVehicleNumberOfBrokenOffBones.Call(native, vehicle);
		}

		public int GetVehicleNumberOfBrokenBones(int vehicle)
		{
			if (getVehicleNumberOfBrokenBones == null) getVehicleNumberOfBrokenBones = (Function) native.GetObjectProperty("getVehicleNumberOfBrokenBones");
			return (int) getVehicleNumberOfBrokenBones.Call(native, vehicle);
		}

		public void _0x4D9D109F63FEE1D4(object p0, bool p1)
		{
			if (__0x4D9D109F63FEE1D4 == null) __0x4D9D109F63FEE1D4 = (Function) native.GetObjectProperty("_0x4D9D109F63FEE1D4");
			__0x4D9D109F63FEE1D4.Call(native, p0, p1);
		}

		/// <summary>
		/// SET_VEHICLE_*
		/// </summary>
		public void _0x279D50DE5652D935(int vehicle, bool toggle)
		{
			if (__0x279D50DE5652D935 == null) __0x279D50DE5652D935 = (Function) native.GetObjectProperty("_0x279D50DE5652D935");
			__0x279D50DE5652D935.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
		/// </summary>
		public void CopyVehicleDamages(int sourceVehicle, int targetVehicle)
		{
			if (copyVehicleDamages == null) copyVehicleDamages = (Function) native.GetObjectProperty("copyVehicleDamages");
			copyVehicleDamages.Call(native, sourceVehicle, targetVehicle);
		}

		public void _0xF25E02CB9C5818F8()
		{
			if (__0xF25E02CB9C5818F8 == null) __0xF25E02CB9C5818F8 = (Function) native.GetObjectProperty("_0xF25E02CB9C5818F8");
			__0xF25E02CB9C5818F8.Call(native);
		}

		public void SetLightsCutoffDistanceTweak(double distance)
		{
			if (setLightsCutoffDistanceTweak == null) setLightsCutoffDistanceTweak = (Function) native.GetObjectProperty("setLightsCutoffDistanceTweak");
			setLightsCutoffDistanceTweak.Call(native, distance);
		}

		/// <summary>
		/// Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
		/// WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
		/// </summary>
		public void SetVehicleShootAtTarget(int driver, int entity, double xTarget, double yTarget, double zTarget)
		{
			if (setVehicleShootAtTarget == null) setVehicleShootAtTarget = (Function) native.GetObjectProperty("setVehicleShootAtTarget");
			setVehicleShootAtTarget.Call(native, driver, entity, xTarget, yTarget, zTarget);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetVehicleLockOnTarget(int vehicle, int entity)
		{
			if (getVehicleLockOnTarget == null) getVehicleLockOnTarget = (Function) native.GetObjectProperty("getVehicleLockOnTarget");
			var results = (Array) getVehicleLockOnTarget.Call(native, vehicle, entity);
			return ((bool) results[0], (int) results[1]);
		}

		public void SetForceHdVehicle(int vehicle, bool toggle)
		{
			if (setForceHdVehicle == null) setForceHdVehicle = (Function) native.GetObjectProperty("setForceHdVehicle");
			setForceHdVehicle.Call(native, vehicle, toggle);
		}

		public void _0x182F266C2D9E2BEB(int vehicle, double p1)
		{
			if (__0x182F266C2D9E2BEB == null) __0x182F266C2D9E2BEB = (Function) native.GetObjectProperty("_0x182F266C2D9E2BEB");
			__0x182F266C2D9E2BEB.Call(native, vehicle, p1);
		}

		public int GetVehiclePlateType(int vehicle)
		{
			if (getVehiclePlateType == null) getVehiclePlateType = (Function) native.GetObjectProperty("getVehiclePlateType");
			return (int) getVehiclePlateType.Call(native, vehicle);
		}

		/// <summary>
		/// in script hook .net
		/// Vehicle v = ...;
		/// Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
		/// </summary>
		/// <param name="vehicle">Vehicle v = ...;</param>
		public void TrackVehicleVisibility(int vehicle)
		{
			if (trackVehicleVisibility == null) trackVehicleVisibility = (Function) native.GetObjectProperty("trackVehicleVisibility");
			trackVehicleVisibility.Call(native, vehicle);
		}

		/// <summary>
		/// must be called after TRACK_VEHICLE_VISIBILITY
		/// it's not instant so probabilly must pass an 'update' to see correct result.
		/// </summary>
		public bool IsVehicleVisible(int vehicle)
		{
			if (isVehicleVisible == null) isVehicleVisible = (Function) native.GetObjectProperty("isVehicleVisible");
			return (bool) isVehicleVisible.Call(native, vehicle);
		}

		public void SetVehicleGravity(int vehicle, bool toggle)
		{
			if (setVehicleGravity == null) setVehicleGravity = (Function) native.GetObjectProperty("setVehicleGravity");
			setVehicleGravity.Call(native, vehicle, toggle);
		}

		public void _0xE6C0C80B8C867537(bool p0)
		{
			if (__0xE6C0C80B8C867537 == null) __0xE6C0C80B8C867537 = (Function) native.GetObjectProperty("_0xE6C0C80B8C867537");
			__0xE6C0C80B8C867537.Call(native, p0);
		}

		public void _0xF051D9BFB6BA39C0(object p0)
		{
			if (__0xF051D9BFB6BA39C0 == null) __0xF051D9BFB6BA39C0 = (Function) native.GetObjectProperty("_0xF051D9BFB6BA39C0");
			__0xF051D9BFB6BA39C0.Call(native, p0);
		}

		/// <summary>
		/// GET_VEHICLE_*
		/// </summary>
		/// <returns>Returns a float value related to slipstream.</returns>
		public double _0x36492C2F0D134C56(int vehicle)
		{
			if (__0x36492C2F0D134C56 == null) __0x36492C2F0D134C56 = (Function) native.GetObjectProperty("_0x36492C2F0D134C56");
			return (double) __0x36492C2F0D134C56.Call(native, vehicle);
		}

		/// <summary>
		/// IS_VEHICLE_*
		/// </summary>
		public bool _0x48C633E94A8142A7(int vehicle)
		{
			if (__0x48C633E94A8142A7 == null) __0x48C633E94A8142A7 = (Function) native.GetObjectProperty("_0x48C633E94A8142A7");
			return (bool) __0x48C633E94A8142A7.Call(native, vehicle);
		}

		public void SetVehicleInactiveDuringPlayback(int vehicle, bool toggle)
		{
			if (setVehicleInactiveDuringPlayback == null) setVehicleInactiveDuringPlayback = (Function) native.GetObjectProperty("setVehicleInactiveDuringPlayback");
			setVehicleInactiveDuringPlayback.Call(native, vehicle, toggle);
		}

		public void SetVehicleActiveDuringPlayback(object p0, bool p1)
		{
			if (setVehicleActiveDuringPlayback == null) setVehicleActiveDuringPlayback = (Function) native.GetObjectProperty("setVehicleActiveDuringPlayback");
			setVehicleActiveDuringPlayback.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.</returns>
		public bool IsVehicleSprayable(int vehicle)
		{
			if (isVehicleSprayable == null) isVehicleSprayable = (Function) native.GetObjectProperty("isVehicleSprayable");
			return (bool) isVehicleSprayable.Call(native, vehicle);
		}

		public void SetVehicleEngineCanDegrade(int vehicle, bool toggle)
		{
			if (setVehicleEngineCanDegrade == null) setVehicleEngineCanDegrade = (Function) native.GetObjectProperty("setVehicleEngineCanDegrade");
			setVehicleEngineCanDegrade.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// Adds some kind of shadow to the vehicle.
		/// -1 disables the effect.
		/// DISABLE_*
		/// </summary>
		public void _0xF0E4BA16D1DB546C(int vehicle, int p1, int p2)
		{
			if (__0xF0E4BA16D1DB546C == null) __0xF0E4BA16D1DB546C = (Function) native.GetObjectProperty("_0xF0E4BA16D1DB546C");
			__0xF0E4BA16D1DB546C.Call(native, vehicle, p1, p2);
		}

		/// <summary>
		/// ENABLE_*
		/// </summary>
		public void _0xF87D9F2301F7D206(int vehicle)
		{
			if (__0xF87D9F2301F7D206 == null) __0xF87D9F2301F7D206 = (Function) native.GetObjectProperty("_0xF87D9F2301F7D206");
			__0xF87D9F2301F7D206.Call(native, vehicle);
		}

		public bool IsPlaneLandingGearIntact(int plane)
		{
			if (isPlaneLandingGearIntact == null) isPlaneLandingGearIntact = (Function) native.GetObjectProperty("isPlaneLandingGearIntact");
			return (bool) isPlaneLandingGearIntact.Call(native, plane);
		}

		public bool ArePlanePropellersIntact(int plane)
		{
			if (arePlanePropellersIntact == null) arePlanePropellersIntact = (Function) native.GetObjectProperty("arePlanePropellersIntact");
			return (bool) arePlanePropellersIntact.Call(native, plane);
		}

		public object _0x4C815EB175086F84(object p0, object p1)
		{
			if (__0x4C815EB175086F84 == null) __0x4C815EB175086F84 = (Function) native.GetObjectProperty("_0x4C815EB175086F84");
			return __0x4C815EB175086F84.Call(native, p0, p1);
		}

		public void SetVehicleCanDeformWheels(int vehicle, bool toggle)
		{
			if (setVehicleCanDeformWheels == null) setVehicleCanDeformWheels = (Function) native.GetObjectProperty("setVehicleCanDeformWheels");
			setVehicleCanDeformWheels.Call(native, vehicle, toggle);
		}

		public bool IsVehicleStolen(int vehicle)
		{
			if (isVehicleStolen == null) isVehicleStolen = (Function) native.GetObjectProperty("isVehicleStolen");
			return (bool) isVehicleStolen.Call(native, vehicle);
		}

		public void SetVehicleIsStolen(int vehicle, bool isStolen)
		{
			if (setVehicleIsStolen == null) setVehicleIsStolen = (Function) native.GetObjectProperty("setVehicleIsStolen");
			setVehicleIsStolen.Call(native, vehicle, isStolen);
		}

		/// <summary>
		/// For planes only!
		/// value can be 1.0 or lower (higher values will automatically result in 1.0).
		/// </summary>
		/// <param name="value">can be 1.0 or lower (higher values will automatically result in 1.0).</param>
		public void SetPlaneTurbulenceMultiplier(int vehicle, double value)
		{
			if (setPlaneTurbulenceMultiplier == null) setPlaneTurbulenceMultiplier = (Function) native.GetObjectProperty("setPlaneTurbulenceMultiplier");
			setPlaneTurbulenceMultiplier.Call(native, vehicle, value);
		}

		/// <summary>
		/// ADD_A_MARKER_OVER_VEHICLE was a hash collision!!!
		/// Can be used for planes only!
		/// </summary>
		public bool ArePlaneWingsIntact(int plane)
		{
			if (arePlaneWingsIntact == null) arePlaneWingsIntact = (Function) native.GetObjectProperty("arePlaneWingsIntact");
			return (bool) arePlaneWingsIntact.Call(native, plane);
		}

		/// <summary>
		/// This native doesn't seem to do anything, might be a debug-only native.
		/// Confirmed, it is a debug native.
		/// </summary>
		public void _0xB264C4D2F2B0A78B(int vehicle)
		{
			if (__0xB264C4D2F2B0A78B == null) __0xB264C4D2F2B0A78B = (Function) native.GetObjectProperty("_0xB264C4D2F2B0A78B");
			__0xB264C4D2F2B0A78B.Call(native, vehicle);
		}

		public void DetachVehicleFromCargobob(int vehicle, int cargobob)
		{
			if (detachVehicleFromCargobob == null) detachVehicleFromCargobob = (Function) native.GetObjectProperty("detachVehicleFromCargobob");
			detachVehicleFromCargobob.Call(native, vehicle, cargobob);
		}

		public bool DetachVehicleFromAnyCargobob(int vehicle)
		{
			if (detachVehicleFromAnyCargobob == null) detachVehicleFromAnyCargobob = (Function) native.GetObjectProperty("detachVehicleFromAnyCargobob");
			return (bool) detachVehicleFromAnyCargobob.Call(native, vehicle);
		}

		public object DetachEntityFromCargobob(int cargobob, int entity)
		{
			if (detachEntityFromCargobob == null) detachEntityFromCargobob = (Function) native.GetObjectProperty("detachEntityFromCargobob");
			return detachEntityFromCargobob.Call(native, cargobob, entity);
		}

		public bool IsVehicleAttachedToCargobob(int cargobob, int vehicleAttached)
		{
			if (isVehicleAttachedToCargobob == null) isVehicleAttachedToCargobob = (Function) native.GetObjectProperty("isVehicleAttachedToCargobob");
			return (bool) isVehicleAttachedToCargobob.Call(native, cargobob, vehicleAttached);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns attached vehicle (Vehicle in parameter must be cargobob)</returns>
		public int GetVehicleAttachedToCargobob(int cargobob)
		{
			if (getVehicleAttachedToCargobob == null) getVehicleAttachedToCargobob = (Function) native.GetObjectProperty("getVehicleAttachedToCargobob");
			return (int) getVehicleAttachedToCargobob.Call(native, cargobob);
		}

		public object GetEntityAttachedToCargobob(object p0)
		{
			if (getEntityAttachedToCargobob == null) getEntityAttachedToCargobob = (Function) native.GetObjectProperty("getEntityAttachedToCargobob");
			return getEntityAttachedToCargobob.Call(native, p0);
		}

		public void AttachVehicleToCargobob(int vehicle, int cargobob, int p2, double x, double y, double z)
		{
			if (attachVehicleToCargobob == null) attachVehicleToCargobob = (Function) native.GetObjectProperty("attachVehicleToCargobob");
			attachVehicleToCargobob.Call(native, vehicle, cargobob, p2, x, y, z);
		}

		public void AttachEntityToCargobob(object p0, object p1, object p2, object p3, object p4, object p5)
		{
			if (attachEntityToCargobob == null) attachEntityToCargobob = (Function) native.GetObjectProperty("attachEntityToCargobob");
			attachEntityToCargobob.Call(native, p0, p1, p2, p3, p4, p5);
		}

		/// <summary>
		/// consoel hash 0xAEB29F98
		/// </summary>
		public void _0x571FEB383F629926(int cargobob, bool p1)
		{
			if (__0x571FEB383F629926 == null) __0x571FEB383F629926 = (Function) native.GetObjectProperty("_0x571FEB383F629926");
			__0x571FEB383F629926.Call(native, cargobob, p1);
		}

		public void _0x1F34B0626C594380(object p0, object p1)
		{
			if (__0x1F34B0626C594380 == null) __0x1F34B0626C594380 = (Function) native.GetObjectProperty("_0x1F34B0626C594380");
			__0x1F34B0626C594380.Call(native, p0, p1);
		}

		public object _0x2C1D8B3B19E517CC(object p0, object p1)
		{
			if (__0x2C1D8B3B19E517CC == null) __0x2C1D8B3B19E517CC = (Function) native.GetObjectProperty("_0x2C1D8B3B19E517CC");
			return __0x2C1D8B3B19E517CC.Call(native, p0, p1);
		}

		/// <summary>
		/// Gets the position of the cargobob hook, in world coords.
		/// </summary>
		public Vector3 GetCargobobHookPosition(int cargobob)
		{
			if (getCargobobHookPosition == null) getCargobobHookPosition = (Function) native.GetObjectProperty("getCargobobHookPosition");
			return JSObjectToVector3(getCargobobHookPosition.Call(native, cargobob));
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true only when the hook is active, will return false if the magnet is active</returns>
		public bool DoesCargobobHavePickUpRope(int cargobob)
		{
			if (doesCargobobHavePickUpRope == null) doesCargobobHavePickUpRope = (Function) native.GetObjectProperty("doesCargobobHavePickUpRope");
			return (bool) doesCargobobHavePickUpRope.Call(native, cargobob);
		}

		/// <summary>
		/// Drops the Hook/Magnet on a cargobob
		/// state
		/// enum eCargobobHook
		/// {
		/// CARGOBOB_HOOK = 0,
		/// CARGOBOB_MAGNET = 1,
		/// };
		/// </summary>
		public void CreatePickUpRopeForCargobob(int cargobob, int state)
		{
			if (createPickUpRopeForCargobob == null) createPickUpRopeForCargobob = (Function) native.GetObjectProperty("createPickUpRopeForCargobob");
			createPickUpRopeForCargobob.Call(native, cargobob, state);
		}

		/// <summary>
		/// Retracts the hook on the cargobob.
		/// Note: after you retract it the natives for dropping the hook no longer work
		/// </summary>
		public void RemovePickUpRopeForCargobob(int cargobob)
		{
			if (removePickUpRopeForCargobob == null) removePickUpRopeForCargobob = (Function) native.GetObjectProperty("removePickUpRopeForCargobob");
			removePickUpRopeForCargobob.Call(native, cargobob);
		}

		/// <summary>
		/// For now, I changed the last one from bool to int.
		/// According to scripts specifically 'fm_mission_controller' this last parameter is 'false/0' when its called after the create rope native above is called for the magnet and 'true/1' after the create rope native above is called for the hook.
		/// </summary>
		public void SetCargobobHookPosition(object p0, double p1, double p2, int state)
		{
			if (setCargobobHookPosition == null) setCargobobHookPosition = (Function) native.GetObjectProperty("setCargobobHookPosition");
			setCargobobHookPosition.Call(native, p0, p1, p2, state);
		}

		public void _0xC0ED6438E6D39BA8(object p0, object p1, object p2)
		{
			if (__0xC0ED6438E6D39BA8 == null) __0xC0ED6438E6D39BA8 = (Function) native.GetObjectProperty("_0xC0ED6438E6D39BA8");
			__0xC0ED6438E6D39BA8.Call(native, p0, p1, p2);
		}

		public void SetCargobobPickupRopeDampingMultiplier(object p0, object p1)
		{
			if (setCargobobPickupRopeDampingMultiplier == null) setCargobobPickupRopeDampingMultiplier = (Function) native.GetObjectProperty("setCargobobPickupRopeDampingMultiplier");
			setCargobobPickupRopeDampingMultiplier.Call(native, p0, p1);
		}

		public void SetCargobobPickupRopeType(object p0, object p1)
		{
			if (setCargobobPickupRopeType == null) setCargobobPickupRopeType = (Function) native.GetObjectProperty("setCargobobPickupRopeType");
			setCargobobPickupRopeType.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true only when the magnet is active, will return false if the hook is active</returns>
		public bool DoesCargobobHavePickupMagnet(int cargobob)
		{
			if (doesCargobobHavePickupMagnet == null) doesCargobobHavePickupMagnet = (Function) native.GetObjectProperty("doesCargobobHavePickupMagnet");
			return (bool) doesCargobobHavePickupMagnet.Call(native, cargobob);
		}

		/// <summary>
		/// Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
		/// </summary>
		public void SetCargobobPickupMagnetActive(int cargobob, bool isActive)
		{
			if (setCargobobPickupMagnetActive == null) setCargobobPickupMagnetActive = (Function) native.GetObjectProperty("setCargobobPickupMagnetActive");
			setCargobobPickupMagnetActive.Call(native, cargobob, isActive);
		}

		public void SetCargobobPickupMagnetStrength(int cargobob, double strength)
		{
			if (setCargobobPickupMagnetStrength == null) setCargobobPickupMagnetStrength = (Function) native.GetObjectProperty("setCargobobPickupMagnetStrength");
			setCargobobPickupMagnetStrength.Call(native, cargobob, strength);
		}

		public void SetCargobobPickupMagnetEffectRadius(int cargobob, double p1)
		{
			if (setCargobobPickupMagnetEffectRadius == null) setCargobobPickupMagnetEffectRadius = (Function) native.GetObjectProperty("setCargobobPickupMagnetEffectRadius");
			setCargobobPickupMagnetEffectRadius.Call(native, cargobob, p1);
		}

		public void SetCargobobPickupMagnetReducedFalloff(int cargobob, double p1)
		{
			if (setCargobobPickupMagnetReducedFalloff == null) setCargobobPickupMagnetReducedFalloff = (Function) native.GetObjectProperty("setCargobobPickupMagnetReducedFalloff");
			setCargobobPickupMagnetReducedFalloff.Call(native, cargobob, p1);
		}

		public void SetCargobobPickupMagnetPullRopeLength(int cargobob, double p1)
		{
			if (setCargobobPickupMagnetPullRopeLength == null) setCargobobPickupMagnetPullRopeLength = (Function) native.GetObjectProperty("setCargobobPickupMagnetPullRopeLength");
			setCargobobPickupMagnetPullRopeLength.Call(native, cargobob, p1);
		}

		public void SetCargobobPickupMagnetPullStrength(int cargobob, double p1)
		{
			if (setCargobobPickupMagnetPullStrength == null) setCargobobPickupMagnetPullStrength = (Function) native.GetObjectProperty("setCargobobPickupMagnetPullStrength");
			setCargobobPickupMagnetPullStrength.Call(native, cargobob, p1);
		}

		public void SetCargobobPickupMagnetFalloff(int vehicle, double p1)
		{
			if (setCargobobPickupMagnetFalloff == null) setCargobobPickupMagnetFalloff = (Function) native.GetObjectProperty("setCargobobPickupMagnetFalloff");
			setCargobobPickupMagnetFalloff.Call(native, vehicle, p1);
		}

		public void SetCargobobPickupMagnetReducedStrength(int vehicle, int cargobob)
		{
			if (setCargobobPickupMagnetReducedStrength == null) setCargobobPickupMagnetReducedStrength = (Function) native.GetObjectProperty("setCargobobPickupMagnetReducedStrength");
			setCargobobPickupMagnetReducedStrength.Call(native, vehicle, cargobob);
		}

		public void _0x9BDDC73CC6A115D4(int vehicle, bool p1, bool p2)
		{
			if (__0x9BDDC73CC6A115D4 == null) __0x9BDDC73CC6A115D4 = (Function) native.GetObjectProperty("_0x9BDDC73CC6A115D4");
			__0x9BDDC73CC6A115D4.Call(native, vehicle, p1, p2);
		}

		public void _0x56EB5E94318D3FB6(int vehicle, bool p1)
		{
			if (__0x56EB5E94318D3FB6 == null) __0x56EB5E94318D3FB6 = (Function) native.GetObjectProperty("_0x56EB5E94318D3FB6");
			__0x56EB5E94318D3FB6.Call(native, vehicle, p1);
		}

		public bool DoesVehicleHaveWeapons(int vehicle)
		{
			if (doesVehicleHaveWeapons == null) doesVehicleHaveWeapons = (Function) native.GetObjectProperty("doesVehicleHaveWeapons");
			return (bool) doesVehicleHaveWeapons.Call(native, vehicle);
		}

		/// <summary>
		/// SET_VEHICLE_W* (next character is either H or I)
		/// </summary>
		public void _0x2C4A1590ABF43E8B(int vehicle, bool p1)
		{
			if (__0x2C4A1590ABF43E8B == null) __0x2C4A1590ABF43E8B = (Function) native.GetObjectProperty("_0x2C4A1590ABF43E8B");
			__0x2C4A1590ABF43E8B.Call(native, vehicle, p1);
		}

		/// <summary>
		/// how does this work?
		/// </summary>
		public void DisableVehicleWeapon(bool disabled, int weaponHash, int vehicle, int owner)
		{
			if (disableVehicleWeapon == null) disableVehicleWeapon = (Function) native.GetObjectProperty("disableVehicleWeapon");
			disableVehicleWeapon.Call(native, disabled, weaponHash, vehicle, owner);
		}

		public object IsVehicleWeaponDisabled(object p0, object p1, object p2)
		{
			if (isVehicleWeaponDisabled == null) isVehicleWeaponDisabled = (Function) native.GetObjectProperty("isVehicleWeaponDisabled");
			return isVehicleWeaponDisabled.Call(native, p0, p1, p2);
		}

		public void _0xE05DD0E9707003A3(object p0, bool p1)
		{
			if (__0xE05DD0E9707003A3 == null) __0xE05DD0E9707003A3 = (Function) native.GetObjectProperty("_0xE05DD0E9707003A3");
			__0xE05DD0E9707003A3.Call(native, p0, p1);
		}

		public void SetVehicleCloseDoorDeferedAction(object p0, bool p1)
		{
			if (setVehicleCloseDoorDeferedAction == null) setVehicleCloseDoorDeferedAction = (Function) native.GetObjectProperty("setVehicleCloseDoorDeferedAction");
			setVehicleCloseDoorDeferedAction.Call(native, p0, p1);
		}

		/// <summary>
		/// Vehicle Classes:
		/// 0: Compacts
		/// 1: Sedans
		/// 2: SUVs
		/// 3: Coupes
		/// 4: Muscle
		/// 5: Sports Classics
		/// 6: Sports
		/// 7: Super
		/// See NativeDB for reference: http://natives.altv.mp/#/0x29439776AAA00A62
		/// </summary>
		/// <param name="vehicle">Vehicle Classes:</param>
		/// <returns>Returns an int</returns>
		public int GetVehicleClass(int vehicle)
		{
			if (getVehicleClass == null) getVehicleClass = (Function) native.GetObjectProperty("getVehicleClass");
			return (int) getVehicleClass.Call(native, vehicle);
		}

		/// <summary>
		/// For a full enum, see here : pastebin.com/i2GGAjY0
		/// char buffer[128];
		/// std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));
		/// const char* className = UI::_GET_LABEL_TEXT(buffer);
		/// </summary>
		public int GetVehicleClassFromName(int modelHash)
		{
			if (getVehicleClassFromName == null) getVehicleClassFromName = (Function) native.GetObjectProperty("getVehicleClassFromName");
			return (int) getVehicleClassFromName.Call(native, modelHash);
		}

		public void SetPlayersLastVehicle(int vehicle)
		{
			if (setPlayersLastVehicle == null) setPlayersLastVehicle = (Function) native.GetObjectProperty("setPlayersLastVehicle");
			setPlayersLastVehicle.Call(native, vehicle);
		}

		public void SetVehicleCanBeUsedByFleeingPeds(int vehicle, bool toggle)
		{
			if (setVehicleCanBeUsedByFleeingPeds == null) setVehicleCanBeUsedByFleeingPeds = (Function) native.GetObjectProperty("setVehicleCanBeUsedByFleeingPeds");
			setVehicleCanBeUsedByFleeingPeds.Call(native, vehicle, toggle);
		}

		public void _0xE5810AC70602F2F5(int vehicle, double p1)
		{
			if (__0xE5810AC70602F2F5 == null) __0xE5810AC70602F2F5 = (Function) native.GetObjectProperty("_0xE5810AC70602F2F5");
			__0xE5810AC70602F2F5.Call(native, vehicle, p1);
		}

		/// <summary>
		/// Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
		/// youtu.be/3arlUxzHl5Y
		/// i.imgur.com/WrNpYFs.jpg
		/// </summary>
		public void SetVehicleDropsMoneyWhenBlownUp(int vehicle, bool toggle)
		{
			if (setVehicleDropsMoneyWhenBlownUp == null) setVehicleDropsMoneyWhenBlownUp = (Function) native.GetObjectProperty("setVehicleDropsMoneyWhenBlownUp");
			setVehicleDropsMoneyWhenBlownUp.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// VEHICLE::SET_VEHICLE_ENGINE_ON is not enough to start jet engines when not inside the vehicle. But with this native set to true it works: youtu.be/OK0ps2fDpxs
		/// i.imgur.com/7XA14pX.png
		/// Certain planes got jet engines.
		/// </summary>
		public void SetVehicleJetEngineOn(int vehicle, bool toggle)
		{
			if (setVehicleJetEngineOn == null) setVehicleJetEngineOn = (Function) native.GetObjectProperty("setVehicleJetEngineOn");
			setVehicleJetEngineOn.Call(native, vehicle, toggle);
		}

		public void _0x6A973569BA094650(object p0, object p1)
		{
			if (__0x6A973569BA094650 == null) __0x6A973569BA094650 = (Function) native.GetObjectProperty("_0x6A973569BA094650");
			__0x6A973569BA094650.Call(native, p0, p1);
		}

		/// <summary>
		/// Use the "AIHandling" string found in handling.meta
		/// </summary>
		public void SetVehicleHandlingHashForAi(int vehicle, int hash)
		{
			if (setVehicleHandlingHashForAi == null) setVehicleHandlingHashForAi = (Function) native.GetObjectProperty("setVehicleHandlingHashForAi");
			setVehicleHandlingHashForAi.Call(native, vehicle, hash);
		}

		/// <summary>
		/// Max value is 32767
		/// </summary>
		public void SetVehicleExtendedRemovalRange(int vehicle, int range)
		{
			if (setVehicleExtendedRemovalRange == null) setVehicleExtendedRemovalRange = (Function) native.GetObjectProperty("setVehicleExtendedRemovalRange");
			setVehicleExtendedRemovalRange.Call(native, vehicle, range);
		}

		public void SetVehicleSteeringBiasScalar(object p0, double p1)
		{
			if (setVehicleSteeringBiasScalar == null) setVehicleSteeringBiasScalar = (Function) native.GetObjectProperty("setVehicleSteeringBiasScalar");
			setVehicleSteeringBiasScalar.Call(native, p0, p1);
		}

		/// <summary>
		/// value between 0.0 and 1.0
		/// </summary>
		public void SetHelicopterRollPitchYawMult(int helicopter, double multiplier)
		{
			if (setHelicopterRollPitchYawMult == null) setHelicopterRollPitchYawMult = (Function) native.GetObjectProperty("setHelicopterRollPitchYawMult");
			setHelicopterRollPitchYawMult.Call(native, helicopter, multiplier);
		}

		/// <summary>
		/// Seems to be related to the metal parts, not tyres (like i was expecting lol)
		/// </summary>
		public void SetVehicleFrictionOverride(int vehicle, double friction)
		{
			if (setVehicleFrictionOverride == null) setVehicleFrictionOverride = (Function) native.GetObjectProperty("setVehicleFrictionOverride");
			setVehicleFrictionOverride.Call(native, vehicle, friction);
		}

		public void SetVehicleWheelsCanBreakOffWhenBlowUp(int vehicle, bool toggle)
		{
			if (setVehicleWheelsCanBreakOffWhenBlowUp == null) setVehicleWheelsCanBreakOffWhenBlowUp = (Function) native.GetObjectProperty("setVehicleWheelsCanBreakOffWhenBlowUp");
			setVehicleWheelsCanBreakOffWhenBlowUp.Call(native, vehicle, toggle);
		}

		public bool _0xF78F94D60248C737(int vehicle, bool p1)
		{
			if (__0xF78F94D60248C737 == null) __0xF78F94D60248C737 = (Function) native.GetObjectProperty("_0xF78F94D60248C737");
			return (bool) __0xF78F94D60248C737.Call(native, vehicle, p1);
		}

		/// <summary>
		/// Previously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision)
		/// from Decrypted Scripts I found
		/// VEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[22], 420.0);
		/// </summary>
		public void SetVehicleCeilingHeight(int vehicle, double height)
		{
			if (setVehicleCeilingHeight == null) setVehicleCeilingHeight = (Function) native.GetObjectProperty("setVehicleCeilingHeight");
			setVehicleCeilingHeight.Call(native, vehicle, height);
		}

		public void _0x5E569EC46EC21CAE(int vehicle, bool toggle)
		{
			if (__0x5E569EC46EC21CAE == null) __0x5E569EC46EC21CAE = (Function) native.GetObjectProperty("_0x5E569EC46EC21CAE");
			__0x5E569EC46EC21CAE.Call(native, vehicle, toggle);
		}

		public void ClearVehicleRouteHistory(int vehicle)
		{
			if (clearVehicleRouteHistory == null) clearVehicleRouteHistory = (Function) native.GetObjectProperty("clearVehicleRouteHistory");
			clearVehicleRouteHistory.Call(native, vehicle);
		}

		public bool DoesVehicleExistWithDecorator(string decorator)
		{
			if (doesVehicleExistWithDecorator == null) doesVehicleExistWithDecorator = (Function) native.GetObjectProperty("doesVehicleExistWithDecorator");
			return (bool) doesVehicleExistWithDecorator.Call(native, decorator);
		}

		public void SetVehicleExclusiveDriver(int vehicle, bool toggle)
		{
			if (setVehicleExclusiveDriver == null) setVehicleExclusiveDriver = (Function) native.GetObjectProperty("setVehicleExclusiveDriver");
			setVehicleExclusiveDriver.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// index: 0 - 1
		/// </summary>
		/// <param name="index">0 - 1</param>
		public void SetVehicleExclusiveDriver2(int vehicle, int ped, int index)
		{
			if (setVehicleExclusiveDriver2 == null) setVehicleExclusiveDriver2 = (Function) native.GetObjectProperty("setVehicleExclusiveDriver2");
			setVehicleExclusiveDriver2.Call(native, vehicle, ped, index);
		}

		public object _0xB09D25E77C33EB3F(object p0, object p1, object p2)
		{
			if (__0xB09D25E77C33EB3F == null) __0xB09D25E77C33EB3F = (Function) native.GetObjectProperty("_0xB09D25E77C33EB3F");
			return __0xB09D25E77C33EB3F.Call(native, p0, p1, p2);
		}

		public void DisablePlanePropeller(int vehicle, object p1)
		{
			if (disablePlanePropeller == null) disablePlanePropeller = (Function) native.GetObjectProperty("disablePlanePropeller");
			disablePlanePropeller.Call(native, vehicle, p1);
		}

		public void SetVehicleForceAfterburner(int vehicle, bool toggle)
		{
			if (setVehicleForceAfterburner == null) setVehicleForceAfterburner = (Function) native.GetObjectProperty("setVehicleForceAfterburner");
			setVehicleForceAfterburner.Call(native, vehicle, toggle);
		}

		public void SetDisableVehicleWindowCollisions(object p0, object p1)
		{
			if (setDisableVehicleWindowCollisions == null) setDisableVehicleWindowCollisions = (Function) native.GetObjectProperty("setDisableVehicleWindowCollisions");
			setDisableVehicleWindowCollisions.Call(native, p0, p1);
		}

		public void _0xB68CFAF83A02768D(object p0, object p1)
		{
			if (__0xB68CFAF83A02768D == null) __0xB68CFAF83A02768D = (Function) native.GetObjectProperty("_0xB68CFAF83A02768D");
			__0xB68CFAF83A02768D.Call(native, p0, p1);
		}

		public void _0x0205F5365292D2EB(object p0, object p1)
		{
			if (__0x0205F5365292D2EB == null) __0x0205F5365292D2EB = (Function) native.GetObjectProperty("_0x0205F5365292D2EB");
			__0x0205F5365292D2EB.Call(native, p0, p1);
		}

		public void _0xCF9159024555488C(object p0)
		{
			if (__0xCF9159024555488C == null) __0xCF9159024555488C = (Function) native.GetObjectProperty("_0xCF9159024555488C");
			__0xCF9159024555488C.Call(native, p0);
		}

		/// <summary>
		/// Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
		/// </summary>
		public void SetDistantCarsEnabled(bool toggle)
		{
			if (setDistantCarsEnabled == null) setDistantCarsEnabled = (Function) native.GetObjectProperty("setDistantCarsEnabled");
			setDistantCarsEnabled.Call(native, toggle);
		}

		/// <summary>
		/// Sets the color of the neon lights of the specified vehicle.
		/// More info: pastebin.com/G49gqy8b
		/// </summary>
		public void SetVehicleNeonLightsColour(int vehicle, int r, int g, int b)
		{
			if (setVehicleNeonLightsColour == null) setVehicleNeonLightsColour = (Function) native.GetObjectProperty("setVehicleNeonLightsColour");
			setVehicleNeonLightsColour.Call(native, vehicle, r, g, b);
		}

		public void _0xB93B2867F7B479D1(object p0, object p1)
		{
			if (__0xB93B2867F7B479D1 == null) __0xB93B2867F7B479D1 = (Function) native.GetObjectProperty("_0xB93B2867F7B479D1");
			__0xB93B2867F7B479D1.Call(native, p0, p1);
		}

		/// <summary>
		/// Gets the color of the neon lights of the specified vehicle.
		/// See _SET_VEHICLE_NEON_LIGHTS_COLOUR (0x8E0A582209A62695) for more information
		/// </summary>
		/// <returns>Array<void, int, int, int></returns>
		public (object, int, int, int) GetVehicleNeonLightsColour(int vehicle, int r, int g, int b)
		{
			if (getVehicleNeonLightsColour == null) getVehicleNeonLightsColour = (Function) native.GetObjectProperty("getVehicleNeonLightsColour");
			var results = (Array) getVehicleNeonLightsColour.Call(native, vehicle, r, g, b);
			return (results[0], (int) results[1], (int) results[2], (int) results[3]);
		}

		/// <summary>
		/// Sets the neon lights of the specified vehicle on/off.
		/// Indices:
		/// 0 = Left
		/// 1 = Right
		/// 2 = Front
		/// 3 = Back
		/// </summary>
		public void SetVehicleNeonLightEnabled(int vehicle, int index, bool toggle)
		{
			if (setVehicleNeonLightEnabled == null) setVehicleNeonLightEnabled = (Function) native.GetObjectProperty("setVehicleNeonLightEnabled");
			setVehicleNeonLightEnabled.Call(native, vehicle, index, toggle);
		}

		/// <summary>
		/// indices:
		/// 0 = Left
		/// 1 = Right
		/// 2 = Front
		/// 3 = Back
		/// </summary>
		public bool IsVehicleNeonLightEnabled(int vehicle, int index)
		{
			if (isVehicleNeonLightEnabled == null) isVehicleNeonLightEnabled = (Function) native.GetObjectProperty("isVehicleNeonLightEnabled");
			return (bool) isVehicleNeonLightEnabled.Call(native, vehicle, index);
		}

		public void _0x35E0654F4BAD7971(bool p0)
		{
			if (__0x35E0654F4BAD7971 == null) __0x35E0654F4BAD7971 = (Function) native.GetObjectProperty("_0x35E0654F4BAD7971");
			__0x35E0654F4BAD7971.Call(native, p0);
		}

		public void DisableVehicleNeonLights(int vehicle, bool toggle)
		{
			if (disableVehicleNeonLights == null) disableVehicleNeonLights = (Function) native.GetObjectProperty("disableVehicleNeonLights");
			disableVehicleNeonLights.Call(native, vehicle, toggle);
		}

		public void _0xB088E9A47AE6EDD5(int vehicle, bool p1)
		{
			if (__0xB088E9A47AE6EDD5 == null) __0xB088E9A47AE6EDD5 = (Function) native.GetObjectProperty("_0xB088E9A47AE6EDD5");
			__0xB088E9A47AE6EDD5.Call(native, vehicle, p1);
		}

		/// <summary>
		/// REQUEST_VEHICLE_*
		/// </summary>
		public void RequestVehicleDashboardScaleformMovie(int vehicle)
		{
			if (requestVehicleDashboardScaleformMovie == null) requestVehicleDashboardScaleformMovie = (Function) native.GetObjectProperty("requestVehicleDashboardScaleformMovie");
			requestVehicleDashboardScaleformMovie.Call(native, vehicle);
		}

		/// <summary>
		/// Seems related to vehicle health, like the one in IV.
		/// Max 1000, min 0.
		/// Vehicle does not necessarily explode or become undrivable at 0.
		/// </summary>
		/// <param name="vehicle">Vehicle does not necessarily explode or become undrivable at 0.</param>
		public double GetVehicleBodyHealth(int vehicle)
		{
			if (getVehicleBodyHealth == null) getVehicleBodyHealth = (Function) native.GetObjectProperty("getVehicleBodyHealth");
			return (double) getVehicleBodyHealth.Call(native, vehicle);
		}

		/// <summary>
		/// p2 often set to 1000.0 in the decompiled scripts.
		/// </summary>
		public void SetVehicleBodyHealth(int vehicle, double value)
		{
			if (setVehicleBodyHealth == null) setVehicleBodyHealth = (Function) native.GetObjectProperty("setVehicleBodyHealth");
			setVehicleBodyHealth.Call(native, vehicle, value);
		}

		/// <summary>
		/// Outputs 2 Vector3's.
		/// Scripts check if out2.x - out1.x > someshit.x
		/// Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
		/// </summary>
		/// <returns>Array<void, Vector3, Vector3></returns>
		public (object, Vector3, Vector3) GetVehicleSuspensionBounds(int vehicle, Vector3 out1, Vector3 out2)
		{
			if (getVehicleSuspensionBounds == null) getVehicleSuspensionBounds = (Function) native.GetObjectProperty("getVehicleSuspensionBounds");
			var results = (Array) getVehicleSuspensionBounds.Call(native, vehicle, out1, out2);
			return (results[0], JSObjectToVector3(results[1]), JSObjectToVector3(results[2]));
		}

		/// <summary>
		/// Gets the height of the vehicle's suspension.
		/// The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
		/// 0.000 is the stock suspension.
		/// 0.008 is Ultra Suspension.
		/// </summary>
		public double GetVehicleSuspensionHeight(int vehicle)
		{
			if (getVehicleSuspensionHeight == null) getVehicleSuspensionHeight = (Function) native.GetObjectProperty("getVehicleSuspensionHeight");
			return (double) getVehicleSuspensionHeight.Call(native, vehicle);
		}

		/// <summary>
		/// Something to do with "high speed bump severity"?
		/// if (!sub_87a46("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER")) {
		/// VEHICLE::_84FD40F56075E816(0.0);
		/// sub_8795b("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER", 1);
		/// }
		/// </summary>
		public void SetCarHighSpeedBumpSeverityMultiplier(double multiplier)
		{
			if (setCarHighSpeedBumpSeverityMultiplier == null) setCarHighSpeedBumpSeverityMultiplier = (Function) native.GetObjectProperty("setCarHighSpeedBumpSeverityMultiplier");
			setCarHighSpeedBumpSeverityMultiplier.Call(native, multiplier);
		}

		public int GetNumberOfVehicleDoors(int vehicle)
		{
			if (getNumberOfVehicleDoors == null) getNumberOfVehicleDoors = (Function) native.GetObjectProperty("getNumberOfVehicleDoors");
			return (int) getNumberOfVehicleDoors.Call(native, vehicle);
		}

		public void SetHydraulicRaised(object p0, object p1)
		{
			if (setHydraulicRaised == null) setHydraulicRaised = (Function) native.GetObjectProperty("setHydraulicRaised");
			setHydraulicRaised.Call(native, p0, p1);
		}

		public void _0xA7DCDF4DED40A8F4(int vehicle, bool p1)
		{
			if (__0xA7DCDF4DED40A8F4 == null) __0xA7DCDF4DED40A8F4 = (Function) native.GetObjectProperty("_0xA7DCDF4DED40A8F4");
			__0xA7DCDF4DED40A8F4.Call(native, vehicle, p1);
		}

		/// <summary>
		/// 0 min 100 max
		/// starts at 100
		/// Seams to have health zones
		/// Front of vehicle when damaged goes from 100-50 and stops at 50.
		/// Rear can be damaged from 100-0
		/// Only tested with two cars.
		/// any idea how this differs from the first one?
		/// --
		/// May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
		/// See NativeDB for reference: http://natives.altv.mp/#/0xB8EF61207C2393A9
		/// </summary>
		public double GetVehicleBodyHealth2(int vehicle, object p1, object p2, object p3, object p4, object p5, object p6)
		{
			if (getVehicleBodyHealth2 == null) getVehicleBodyHealth2 = (Function) native.GetObjectProperty("getVehicleBodyHealth2");
			return (double) getVehicleBodyHealth2.Call(native, vehicle, p1, p2, p3, p4, p5, p6);
		}

		/// <summary>
		/// Only used like this:
		/// if (VEHICLE::_D4C4642CB7F50B5D(ENTITY::GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(v_3))) {
		/// sub_157e9c(g_40001._f1868, 0);
		/// }
		/// </summary>
		public bool _0xD4C4642CB7F50B5D(int vehicle)
		{
			if (__0xD4C4642CB7F50B5D == null) __0xD4C4642CB7F50B5D = (Function) native.GetObjectProperty("_0xD4C4642CB7F50B5D");
			return (bool) __0xD4C4642CB7F50B5D.Call(native, vehicle);
		}

		public void _0xC361AA040D6637A8(int vehicle, bool p1)
		{
			if (__0xC361AA040D6637A8 == null) __0xC361AA040D6637A8 = (Function) native.GetObjectProperty("_0xC361AA040D6637A8");
			__0xC361AA040D6637A8.Call(native, vehicle, p1);
		}

		public void SetVehicleKersAllowed(int vehicle, bool toggle)
		{
			if (setVehicleKersAllowed == null) setVehicleKersAllowed = (Function) native.GetObjectProperty("setVehicleKersAllowed");
			setVehicleKersAllowed.Call(native, vehicle, toggle);
		}

		public bool GetVehicleHasKers(int vehicle)
		{
			if (getVehicleHasKers == null) getVehicleHasKers = (Function) native.GetObjectProperty("getVehicleHasKers");
			return (bool) getVehicleHasKers.Call(native, vehicle);
		}

		public void _0xE16142B94664DEFD(int vehicle, bool p1)
		{
			if (__0xE16142B94664DEFD == null) __0xE16142B94664DEFD = (Function) native.GetObjectProperty("_0xE16142B94664DEFD");
			__0xE16142B94664DEFD.Call(native, vehicle, p1);
		}

		public void _0x26D99D5A82FD18E8(object p0)
		{
			if (__0x26D99D5A82FD18E8 == null) __0x26D99D5A82FD18E8 = (Function) native.GetObjectProperty("_0x26D99D5A82FD18E8");
			__0x26D99D5A82FD18E8.Call(native, p0);
		}

		public void SetHydraulicState(object p0, object p1, object p2)
		{
			if (setHydraulicState == null) setHydraulicState = (Function) native.GetObjectProperty("setHydraulicState");
			setHydraulicState.Call(native, p0, p1, p2);
		}

		public void SetCamberedWheelsDisabled(object p0, object p1)
		{
			if (setCamberedWheelsDisabled == null) setCamberedWheelsDisabled = (Function) native.GetObjectProperty("setCamberedWheelsDisabled");
			setCamberedWheelsDisabled.Call(native, p0, p1);
		}

		public void SetHydraulicWheelState(object p0, object p1)
		{
			if (setHydraulicWheelState == null) setHydraulicWheelState = (Function) native.GetObjectProperty("setHydraulicWheelState");
			setHydraulicWheelState.Call(native, p0, p1);
		}

		public void SetHydraulicWheelStateTransition(object p0, object p1, object p2, object p3, object p4)
		{
			if (setHydraulicWheelStateTransition == null) setHydraulicWheelStateTransition = (Function) native.GetObjectProperty("setHydraulicWheelStateTransition");
			setHydraulicWheelStateTransition.Call(native, p0, p1, p2, p3, p4);
		}

		public object _0x5BA68A0840D546AC(object p0, object p1)
		{
			if (__0x5BA68A0840D546AC == null) __0x5BA68A0840D546AC = (Function) native.GetObjectProperty("_0x5BA68A0840D546AC");
			return __0x5BA68A0840D546AC.Call(native, p0, p1);
		}

		/// <summary>
		/// CLEAR_VEHICLE_*
		/// </summary>
		public void _0x4419966C9936071A(int vehicle)
		{
			if (__0x4419966C9936071A == null) __0x4419966C9936071A = (Function) native.GetObjectProperty("_0x4419966C9936071A");
			__0x4419966C9936071A.Call(native, vehicle);
		}

		public void _0x870B8B7A766615C8(object p0, object p1, object p2)
		{
			if (__0x870B8B7A766615C8 == null) __0x870B8B7A766615C8 = (Function) native.GetObjectProperty("_0x870B8B7A766615C8");
			__0x870B8B7A766615C8.Call(native, p0, p1, p2);
		}

		public object _0x8533CAFDE1F0F336(object p0)
		{
			if (__0x8533CAFDE1F0F336 == null) __0x8533CAFDE1F0F336 = (Function) native.GetObjectProperty("_0x8533CAFDE1F0F336");
			return __0x8533CAFDE1F0F336.Call(native, p0);
		}

		/// <summary>
		/// SET_VEHICLE_D*
		/// </summary>
		public object SetVehicleDamageModifier(int vehicle, double p1)
		{
			if (setVehicleDamageModifier == null) setVehicleDamageModifier = (Function) native.GetObjectProperty("setVehicleDamageModifier");
			return setVehicleDamageModifier.Call(native, vehicle, p1);
		}

		public void SetVehicleUnkDamageMultiplier(int vehicle, double multiplier)
		{
			if (setVehicleUnkDamageMultiplier == null) setVehicleUnkDamageMultiplier = (Function) native.GetObjectProperty("setVehicleUnkDamageMultiplier");
			setVehicleUnkDamageMultiplier.Call(native, vehicle, multiplier);
		}

		public object _0xD4196117AF7BB974(object p0, object p1)
		{
			if (__0xD4196117AF7BB974 == null) __0xD4196117AF7BB974 = (Function) native.GetObjectProperty("_0xD4196117AF7BB974");
			return __0xD4196117AF7BB974.Call(native, p0, p1);
		}

		public void _0xBB2333BB87DDD87F(object p0, object p1)
		{
			if (__0xBB2333BB87DDD87F == null) __0xBB2333BB87DDD87F = (Function) native.GetObjectProperty("_0xBB2333BB87DDD87F");
			__0xBB2333BB87DDD87F.Call(native, p0, p1);
		}

		public void _0x73561D4425A021A2(object p0, object p1)
		{
			if (__0x73561D4425A021A2 == null) __0x73561D4425A021A2 = (Function) native.GetObjectProperty("_0x73561D4425A021A2");
			__0x73561D4425A021A2.Call(native, p0, p1);
		}

		public void _0x5B91B229243351A8(object p0, object p1)
		{
			if (__0x5B91B229243351A8 == null) __0x5B91B229243351A8 = (Function) native.GetObjectProperty("_0x5B91B229243351A8");
			__0x5B91B229243351A8.Call(native, p0, p1);
		}

		public void _0x7BBE7FF626A591FE(object p0)
		{
			if (__0x7BBE7FF626A591FE == null) __0x7BBE7FF626A591FE = (Function) native.GetObjectProperty("_0x7BBE7FF626A591FE");
			__0x7BBE7FF626A591FE.Call(native, p0);
		}

		public void _0x65B080555EA48149(object p0)
		{
			if (__0x65B080555EA48149 == null) __0x65B080555EA48149 = (Function) native.GetObjectProperty("_0x65B080555EA48149");
			__0x65B080555EA48149.Call(native, p0);
		}

		/// <summary>
		/// SET_*
		/// </summary>
		public void _0x428AD3E26C8D9EB0(int vehicle, double x, double y, double z, double p4)
		{
			if (__0x428AD3E26C8D9EB0 == null) __0x428AD3E26C8D9EB0 = (Function) native.GetObjectProperty("_0x428AD3E26C8D9EB0");
			__0x428AD3E26C8D9EB0.Call(native, vehicle, x, y, z, p4);
		}

		/// <summary>
		/// RESET_*
		/// Resets the effect of 0x428AD3E26C8D9EB0
		/// </summary>
		public void _0xE2F53F172B45EDE1()
		{
			if (__0xE2F53F172B45EDE1 == null) __0xE2F53F172B45EDE1 = (Function) native.GetObjectProperty("_0xE2F53F172B45EDE1");
			__0xE2F53F172B45EDE1.Call(native);
		}

		public bool _0xBA91D045575699AD(int vehicle)
		{
			if (__0xBA91D045575699AD == null) __0xBA91D045575699AD = (Function) native.GetObjectProperty("_0xBA91D045575699AD");
			return (bool) __0xBA91D045575699AD.Call(native, vehicle);
		}

		public void _0x80E3357FDEF45C21(object p0, object p1)
		{
			if (__0x80E3357FDEF45C21 == null) __0x80E3357FDEF45C21 = (Function) native.GetObjectProperty("_0x80E3357FDEF45C21");
			__0x80E3357FDEF45C21.Call(native, p0, p1);
		}

		public void SetVehicleRampLaunchModifier(object p0, object p1)
		{
			if (setVehicleRampLaunchModifier == null) setVehicleRampLaunchModifier = (Function) native.GetObjectProperty("setVehicleRampLaunchModifier");
			setVehicleRampLaunchModifier.Call(native, p0, p1);
		}

		public bool GetIsDoorValid(int vehicle, int doorIndex)
		{
			if (getIsDoorValid == null) getIsDoorValid = (Function) native.GetObjectProperty("getIsDoorValid");
			return (bool) getIsDoorValid.Call(native, vehicle, doorIndex);
		}

		public void SetVehicleRocketBoostRefillTime(int vehicle, double seconds)
		{
			if (setVehicleRocketBoostRefillTime == null) setVehicleRocketBoostRefillTime = (Function) native.GetObjectProperty("setVehicleRocketBoostRefillTime");
			setVehicleRocketBoostRefillTime.Call(native, vehicle, seconds);
		}

		public bool GetHasRocketBoost(int vehicle)
		{
			if (getHasRocketBoost == null) getHasRocketBoost = (Function) native.GetObjectProperty("getHasRocketBoost");
			return (bool) getHasRocketBoost.Call(native, vehicle);
		}

		public bool IsVehicleRocketBoostActive(int vehicle)
		{
			if (isVehicleRocketBoostActive == null) isVehicleRocketBoostActive = (Function) native.GetObjectProperty("isVehicleRocketBoostActive");
			return (bool) isVehicleRocketBoostActive.Call(native, vehicle);
		}

		public void SetVehicleRocketBoostActive(int vehicle, bool active)
		{
			if (setVehicleRocketBoostActive == null) setVehicleRocketBoostActive = (Function) native.GetObjectProperty("setVehicleRocketBoostActive");
			setVehicleRocketBoostActive.Call(native, vehicle, active);
		}

		public bool GetHasRetractableWheels(int vehicle)
		{
			if (getHasRetractableWheels == null) getHasRetractableWheels = (Function) native.GetObjectProperty("getHasRetractableWheels");
			return (bool) getHasRetractableWheels.Call(native, vehicle);
		}

		public bool GetIsWheelsLoweredStateActive(int vehicle)
		{
			if (getIsWheelsLoweredStateActive == null) getIsWheelsLoweredStateActive = (Function) native.GetObjectProperty("getIsWheelsLoweredStateActive");
			return (bool) getIsWheelsLoweredStateActive.Call(native, vehicle);
		}

		public void RaiseRetractableWheels(int vehicle)
		{
			if (raiseRetractableWheels == null) raiseRetractableWheels = (Function) native.GetObjectProperty("raiseRetractableWheels");
			raiseRetractableWheels.Call(native, vehicle);
		}

		public void LowerRetractableWheels(int vehicle)
		{
			if (lowerRetractableWheels == null) lowerRetractableWheels = (Function) native.GetObjectProperty("lowerRetractableWheels");
			lowerRetractableWheels.Call(native, vehicle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.</returns>
		public bool GetCanVehicleJump(int vehicle)
		{
			if (getCanVehicleJump == null) getCanVehicleJump = (Function) native.GetObjectProperty("getCanVehicleJump");
			return (bool) getCanVehicleJump.Call(native, vehicle);
		}

		/// <summary>
		/// Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher.
		/// </summary>
		public void SetUseHigherVehicleJumpForce(int vehicle, bool toggle)
		{
			if (setUseHigherVehicleJumpForce == null) setUseHigherVehicleJumpForce = (Function) native.GetObjectProperty("setUseHigherVehicleJumpForce");
			setUseHigherVehicleJumpForce.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// SET_C*
		/// </summary>
		public void _0xB2E0C0D6922D31F2(int vehicle, bool toggle)
		{
			if (__0xB2E0C0D6922D31F2 == null) __0xB2E0C0D6922D31F2 = (Function) native.GetObjectProperty("_0xB2E0C0D6922D31F2");
			__0xB2E0C0D6922D31F2.Call(native, vehicle, toggle);
		}

		public void SetVehicleWeaponCapacity(int vehicle, int weaponIndex, int capacity)
		{
			if (setVehicleWeaponCapacity == null) setVehicleWeaponCapacity = (Function) native.GetObjectProperty("setVehicleWeaponCapacity");
			setVehicleWeaponCapacity.Call(native, vehicle, weaponIndex, capacity);
		}

		public int GetVehicleWeaponCapacity(int vehicle, int weaponIndex)
		{
			if (getVehicleWeaponCapacity == null) getVehicleWeaponCapacity = (Function) native.GetObjectProperty("getVehicleWeaponCapacity");
			return (int) getVehicleWeaponCapacity.Call(native, vehicle, weaponIndex);
		}

		public bool GetVehicleHasParachute(int vehicle)
		{
			if (getVehicleHasParachute == null) getVehicleHasParachute = (Function) native.GetObjectProperty("getVehicleHasParachute");
			return (bool) getVehicleHasParachute.Call(native, vehicle);
		}

		public bool GetVehicleCanActivateParachute(int vehicle)
		{
			if (getVehicleCanActivateParachute == null) getVehicleCanActivateParachute = (Function) native.GetObjectProperty("getVehicleCanActivateParachute");
			return (bool) getVehicleCanActivateParachute.Call(native, vehicle);
		}

		public void SetVehicleParachuteActive(int vehicle, bool active)
		{
			if (setVehicleParachuteActive == null) setVehicleParachuteActive = (Function) native.GetObjectProperty("setVehicleParachuteActive");
			setVehicleParachuteActive.Call(native, vehicle, active);
		}

		public object _0x3DE51E9C80B116CF(object p0)
		{
			if (__0x3DE51E9C80B116CF == null) __0x3DE51E9C80B116CF = (Function) native.GetObjectProperty("_0x3DE51E9C80B116CF");
			return __0x3DE51E9C80B116CF.Call(native, p0);
		}

		public void SetVehicleReceivesRampDamage(int vehicle, bool toggle)
		{
			if (setVehicleReceivesRampDamage == null) setVehicleReceivesRampDamage = (Function) native.GetObjectProperty("setVehicleReceivesRampDamage");
			setVehicleReceivesRampDamage.Call(native, vehicle, toggle);
		}

		public void SetVehicleRampSidewaysLaunchMotion(object p0, object p1)
		{
			if (setVehicleRampSidewaysLaunchMotion == null) setVehicleRampSidewaysLaunchMotion = (Function) native.GetObjectProperty("setVehicleRampSidewaysLaunchMotion");
			setVehicleRampSidewaysLaunchMotion.Call(native, p0, p1);
		}

		public void SetVehicleRampUpwardsLaunchMotion(object p0, object p1)
		{
			if (setVehicleRampUpwardsLaunchMotion == null) setVehicleRampUpwardsLaunchMotion = (Function) native.GetObjectProperty("setVehicleRampUpwardsLaunchMotion");
			setVehicleRampUpwardsLaunchMotion.Call(native, p0, p1);
		}

		public void _0x9D30687C57BAA0BB(object p0)
		{
			if (__0x9D30687C57BAA0BB == null) __0x9D30687C57BAA0BB = (Function) native.GetObjectProperty("_0x9D30687C57BAA0BB");
			__0x9D30687C57BAA0BB.Call(native, p0);
		}

		public void SetVehicleWeaponsDisabled(object p0, object p1)
		{
			if (setVehicleWeaponsDisabled == null) setVehicleWeaponsDisabled = (Function) native.GetObjectProperty("setVehicleWeaponsDisabled");
			setVehicleWeaponsDisabled.Call(native, p0, p1);
		}

		public void _0x41290B40FA63E6DA(object p0)
		{
			if (__0x41290B40FA63E6DA == null) __0x41290B40FA63E6DA = (Function) native.GetObjectProperty("_0x41290B40FA63E6DA");
			__0x41290B40FA63E6DA.Call(native, p0);
		}

		/// <summary>
		/// parachuteModel = 230075693
		/// </summary>
		public void SetVehicleParachuteModel(int vehicle, int modelHash)
		{
			if (setVehicleParachuteModel == null) setVehicleParachuteModel = (Function) native.GetObjectProperty("setVehicleParachuteModel");
			setVehicleParachuteModel.Call(native, vehicle, modelHash);
		}

		/// <summary>
		/// colorIndex = 0 - 7
		/// </summary>
		public void SetVehicleParachuteTextureVariatiion(int vehicle, int textureVariation)
		{
			if (setVehicleParachuteTextureVariatiion == null) setVehicleParachuteTextureVariatiion = (Function) native.GetObjectProperty("setVehicleParachuteTextureVariatiion");
			setVehicleParachuteTextureVariatiion.Call(native, vehicle, textureVariation);
		}

		public object _0x0419B167EE128F33(object p0, object p1)
		{
			if (__0x0419B167EE128F33 == null) __0x0419B167EE128F33 = (Function) native.GetObjectProperty("_0x0419B167EE128F33");
			return __0x0419B167EE128F33.Call(native, p0, p1);
		}

		public object _0xF3B0E0AED097A3F5(object p0, object p1)
		{
			if (__0xF3B0E0AED097A3F5 == null) __0xF3B0E0AED097A3F5 = (Function) native.GetObjectProperty("_0xF3B0E0AED097A3F5");
			return __0xF3B0E0AED097A3F5.Call(native, p0, p1);
		}

		public object _0xD3E51C0AB8C26EEE(object p0, object p1)
		{
			if (__0xD3E51C0AB8C26EEE == null) __0xD3E51C0AB8C26EEE = (Function) native.GetObjectProperty("_0xD3E51C0AB8C26EEE");
			return __0xD3E51C0AB8C26EEE.Call(native, p0, p1);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<int, int></returns>
		public (int, int) GetAllVehicles(int vehsStruct)
		{
			if (getAllVehicles == null) getAllVehicles = (Function) native.GetObjectProperty("getAllVehicles");
			var results = (Array) getAllVehicles.Call(native, vehsStruct);
			return ((int) results[0], (int) results[1]);
		}

		public void _0x72BECCF4B829522E(object p0, object p1)
		{
			if (__0x72BECCF4B829522E == null) __0x72BECCF4B829522E = (Function) native.GetObjectProperty("_0x72BECCF4B829522E");
			__0x72BECCF4B829522E.Call(native, p0, p1);
		}

		public void _0x66E3AAFACE2D1EB8(object p0, object p1, object p2)
		{
			if (__0x66E3AAFACE2D1EB8 == null) __0x66E3AAFACE2D1EB8 = (Function) native.GetObjectProperty("_0x66E3AAFACE2D1EB8");
			__0x66E3AAFACE2D1EB8.Call(native, p0, p1, p2);
		}

		public void _0x1312DDD8385AEE4E(object p0, object p1)
		{
			if (__0x1312DDD8385AEE4E == null) __0x1312DDD8385AEE4E = (Function) native.GetObjectProperty("_0x1312DDD8385AEE4E");
			__0x1312DDD8385AEE4E.Call(native, p0, p1);
		}

		public void _0xEDBC8405B3895CC9(object p0, object p1)
		{
			if (__0xEDBC8405B3895CC9 == null) __0xEDBC8405B3895CC9 = (Function) native.GetObjectProperty("_0xEDBC8405B3895CC9");
			__0xEDBC8405B3895CC9.Call(native, p0, p1);
		}

		public void _0x26E13D440E7F6064(int vehicle, double value)
		{
			if (__0x26E13D440E7F6064 == null) __0x26E13D440E7F6064 = (Function) native.GetObjectProperty("_0x26E13D440E7F6064");
			__0x26E13D440E7F6064.Call(native, vehicle, value);
		}

		public void _0x2FA2494B47FDD009(object p0, object p1)
		{
			if (__0x2FA2494B47FDD009 == null) __0x2FA2494B47FDD009 = (Function) native.GetObjectProperty("_0x2FA2494B47FDD009");
			__0x2FA2494B47FDD009.Call(native, p0, p1);
		}

		public void SetVehicleRocketBoostPercentage(int vehicle, double percentage)
		{
			if (setVehicleRocketBoostPercentage == null) setVehicleRocketBoostPercentage = (Function) native.GetObjectProperty("setVehicleRocketBoostPercentage");
			setVehicleRocketBoostPercentage.Call(native, vehicle, percentage);
		}

		public void _0x544996C0081ABDEB(object p0, object p1)
		{
			if (__0x544996C0081ABDEB == null) __0x544996C0081ABDEB = (Function) native.GetObjectProperty("_0x544996C0081ABDEB");
			__0x544996C0081ABDEB.Call(native, p0, p1);
		}

		public void _0x78CEEE41F49F421F(object p0, object p1)
		{
			if (__0x78CEEE41F49F421F == null) __0x78CEEE41F49F421F = (Function) native.GetObjectProperty("_0x78CEEE41F49F421F");
			__0x78CEEE41F49F421F.Call(native, p0, p1);
		}

		public void _0xAF60E6A2936F982A(object p0, object p1)
		{
			if (__0xAF60E6A2936F982A == null) __0xAF60E6A2936F982A = (Function) native.GetObjectProperty("_0xAF60E6A2936F982A");
			__0xAF60E6A2936F982A.Call(native, p0, p1);
		}

		public void _0x430A7631A84C9BE7(object p0)
		{
			if (__0x430A7631A84C9BE7 == null) __0x430A7631A84C9BE7 = (Function) native.GetObjectProperty("_0x430A7631A84C9BE7");
			__0x430A7631A84C9BE7.Call(native, p0);
		}

		public void _0x75627043C6AA90AD(object p0)
		{
			if (__0x75627043C6AA90AD == null) __0x75627043C6AA90AD = (Function) native.GetObjectProperty("_0x75627043C6AA90AD");
			__0x75627043C6AA90AD.Call(native, p0);
		}

		public void _0x8235F1BEAD557629(object p0, object p1)
		{
			if (__0x8235F1BEAD557629 == null) __0x8235F1BEAD557629 = (Function) native.GetObjectProperty("_0x8235F1BEAD557629");
			__0x8235F1BEAD557629.Call(native, p0, p1);
		}

		public void _0x9640E30A7F395E4B(object p0, object p1, object p2, object p3, object p4)
		{
			if (__0x9640E30A7F395E4B == null) __0x9640E30A7F395E4B = (Function) native.GetObjectProperty("_0x9640E30A7F395E4B");
			__0x9640E30A7F395E4B.Call(native, p0, p1, p2, p3, p4);
		}

		public void _0x0BBB9A7A8FFE931B(object p0, object p1, object p2)
		{
			if (__0x0BBB9A7A8FFE931B == null) __0x0BBB9A7A8FFE931B = (Function) native.GetObjectProperty("_0x0BBB9A7A8FFE931B");
			__0x0BBB9A7A8FFE931B.Call(native, p0, p1, p2);
		}

		public void _0x94A68DA412C4007D(object p0, object p1)
		{
			if (__0x94A68DA412C4007D == null) __0x94A68DA412C4007D = (Function) native.GetObjectProperty("_0x94A68DA412C4007D");
			__0x94A68DA412C4007D.Call(native, p0, p1);
		}

		public void SetVehicleBombCount(int vehicle, int bombCount)
		{
			if (setVehicleBombCount == null) setVehicleBombCount = (Function) native.GetObjectProperty("setVehicleBombCount");
			setVehicleBombCount.Call(native, vehicle, bombCount);
		}

		public int GetVehicleBombCount(int vehicle)
		{
			if (getVehicleBombCount == null) getVehicleBombCount = (Function) native.GetObjectProperty("getVehicleBombCount");
			return (int) getVehicleBombCount.Call(native, vehicle);
		}

		public void SetVehicleCountermeasureCount(int vehicle, int counterMeasureCount)
		{
			if (setVehicleCountermeasureCount == null) setVehicleCountermeasureCount = (Function) native.GetObjectProperty("setVehicleCountermeasureCount");
			setVehicleCountermeasureCount.Call(native, vehicle, counterMeasureCount);
		}

		public int GetVehicleCountermeasureCount(int vehicle)
		{
			if (getVehicleCountermeasureCount == null) getVehicleCountermeasureCount = (Function) native.GetObjectProperty("getVehicleCountermeasureCount");
			return (int) getVehicleCountermeasureCount.Call(native, vehicle);
		}

		public void _0x0A3F820A9A9A9AC5(object p0, object p1, object p2, object p3)
		{
			if (__0x0A3F820A9A9A9AC5 == null) __0x0A3F820A9A9A9AC5 = (Function) native.GetObjectProperty("_0x0A3F820A9A9A9AC5");
			__0x0A3F820A9A9A9AC5.Call(native, p0, p1, p2, p3);
		}

		public object _0x51F30DB60626A20E(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8)
		{
			if (__0x51F30DB60626A20E == null) __0x51F30DB60626A20E = (Function) native.GetObjectProperty("_0x51F30DB60626A20E");
			return __0x51F30DB60626A20E.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}

		public void _0x97841634EF7DF1D6(object p0, object p1)
		{
			if (__0x97841634EF7DF1D6 == null) __0x97841634EF7DF1D6 = (Function) native.GetObjectProperty("_0x97841634EF7DF1D6");
			__0x97841634EF7DF1D6.Call(native, p0, p1);
		}

		public void SetVehicleHoverTransformRatio(int vehicle, double ratio)
		{
			if (setVehicleHoverTransformRatio == null) setVehicleHoverTransformRatio = (Function) native.GetObjectProperty("setVehicleHoverTransformRatio");
			setVehicleHoverTransformRatio.Call(native, vehicle, ratio);
		}

		public void SetVehicleHoverTransformPercentage(int vehicle, double percentage)
		{
			if (setVehicleHoverTransformPercentage == null) setVehicleHoverTransformPercentage = (Function) native.GetObjectProperty("setVehicleHoverTransformPercentage");
			setVehicleHoverTransformPercentage.Call(native, vehicle, percentage);
		}

		public void SetVehicleHoverTransformEnabled(object p0, object p1)
		{
			if (setVehicleHoverTransformEnabled == null) setVehicleHoverTransformEnabled = (Function) native.GetObjectProperty("setVehicleHoverTransformEnabled");
			setVehicleHoverTransformEnabled.Call(native, p0, p1);
		}

		public void SetVehicleHoverTransformActive(int vehicle, bool toggle)
		{
			if (setVehicleHoverTransformActive == null) setVehicleHoverTransformActive = (Function) native.GetObjectProperty("setVehicleHoverTransformActive");
			setVehicleHoverTransformActive.Call(native, vehicle, toggle);
		}

		public object _0x3A9128352EAC9E85(object p0)
		{
			if (__0x3A9128352EAC9E85 == null) __0x3A9128352EAC9E85 = (Function) native.GetObjectProperty("_0x3A9128352EAC9E85");
			return __0x3A9128352EAC9E85.Call(native, p0);
		}

		public object _0x8DC9675797123522(object p0)
		{
			if (__0x8DC9675797123522 == null) __0x8DC9675797123522 = (Function) native.GetObjectProperty("_0x8DC9675797123522");
			return __0x8DC9675797123522.Call(native, p0);
		}

		public void _0xB251E0B33E58B424(object p0, object p1, object p2)
		{
			if (__0xB251E0B33E58B424 == null) __0xB251E0B33E58B424 = (Function) native.GetObjectProperty("_0xB251E0B33E58B424");
			__0xB251E0B33E58B424.Call(native, p0, p1, p2);
		}

		public object _0xAEF12960FA943792(object p0)
		{
			if (__0xAEF12960FA943792 == null) __0xAEF12960FA943792 = (Function) native.GetObjectProperty("_0xAEF12960FA943792");
			return __0xAEF12960FA943792.Call(native, p0);
		}

		public void _0xAA653AE61924B0A0(object p0, object p1)
		{
			if (__0xAA653AE61924B0A0 == null) __0xAA653AE61924B0A0 = (Function) native.GetObjectProperty("_0xAA653AE61924B0A0");
			__0xAA653AE61924B0A0.Call(native, p0, p1);
		}

		public void _0xC60060EB0D8AC7B1(object p0, object p1, object p2)
		{
			if (__0xC60060EB0D8AC7B1 == null) __0xC60060EB0D8AC7B1 = (Function) native.GetObjectProperty("_0xC60060EB0D8AC7B1");
			__0xC60060EB0D8AC7B1.Call(native, p0, p1, p2);
		}

		public void SetSpecialflightWingRatio(int vehicle, double ratio)
		{
			if (setSpecialflightWingRatio == null) setSpecialflightWingRatio = (Function) native.GetObjectProperty("setSpecialflightWingRatio");
			setSpecialflightWingRatio.Call(native, vehicle, ratio);
		}

		public void _0xE615BB7A7752C76A(object p0, object p1)
		{
			if (__0xE615BB7A7752C76A == null) __0xE615BB7A7752C76A = (Function) native.GetObjectProperty("_0xE615BB7A7752C76A");
			__0xE615BB7A7752C76A.Call(native, p0, p1);
		}

		public void _0x887FA38787DE8C72(object p0)
		{
			if (__0x887FA38787DE8C72 == null) __0x887FA38787DE8C72 = (Function) native.GetObjectProperty("_0x887FA38787DE8C72");
			__0x887FA38787DE8C72.Call(native, p0);
		}

		public void SetUnkFloat0x104ForSubmarineVehicleTask(int vehicle, double value)
		{
			if (setUnkFloat0x104ForSubmarineVehicleTask == null) setUnkFloat0x104ForSubmarineVehicleTask = (Function) native.GetObjectProperty("setUnkFloat0x104ForSubmarineVehicleTask");
			setUnkFloat0x104ForSubmarineVehicleTask.Call(native, vehicle, value);
		}

		public void SetUnkBool0x102ForSubmarineVehicleTask(int vehicle, bool value)
		{
			if (setUnkBool0x102ForSubmarineVehicleTask == null) setUnkBool0x102ForSubmarineVehicleTask = (Function) native.GetObjectProperty("setUnkBool0x102ForSubmarineVehicleTask");
			setUnkBool0x102ForSubmarineVehicleTask.Call(native, vehicle, value);
		}

		/// <summary>
		/// Does nothing. It's a nullsub.
		/// </summary>
		public void _0x36DE109527A2C0C4(bool toggle)
		{
			if (__0x36DE109527A2C0C4 == null) __0x36DE109527A2C0C4 = (Function) native.GetObjectProperty("_0x36DE109527A2C0C4");
			__0x36DE109527A2C0C4.Call(native, toggle);
		}

		/// <summary>
		/// Does nothing. It's a nullsub.
		/// </summary>
		public void _0x82E0AC411E41A5B4(bool toggle)
		{
			if (__0x82E0AC411E41A5B4 == null) __0x82E0AC411E41A5B4 = (Function) native.GetObjectProperty("_0x82E0AC411E41A5B4");
			__0x82E0AC411E41A5B4.Call(native, toggle);
		}

		/// <summary>
		/// Does nothing. It's a nullsub.
		/// </summary>
		public void _0x99A05839C46CE316(bool toggle)
		{
			if (__0x99A05839C46CE316 == null) __0x99A05839C46CE316 = (Function) native.GetObjectProperty("_0x99A05839C46CE316");
			__0x99A05839C46CE316.Call(native, toggle);
		}

		public bool GetIsVehicleShuntBoostActive(int vehicle)
		{
			if (getIsVehicleShuntBoostActive == null) getIsVehicleShuntBoostActive = (Function) native.GetObjectProperty("getIsVehicleShuntBoostActive");
			return (bool) getIsVehicleShuntBoostActive.Call(native, vehicle);
		}

		/// <summary>
		/// GET_H*
		/// </summary>
		public bool _0xE8718FAF591FD224(int vehicle)
		{
			if (__0xE8718FAF591FD224 == null) __0xE8718FAF591FD224 = (Function) native.GetObjectProperty("_0xE8718FAF591FD224");
			return (bool) __0xE8718FAF591FD224.Call(native, vehicle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns last vehicle that was rammed by the given vehicle using the shunt boost.</returns>
		public int GetLastRammedVehicle(int vehicle)
		{
			if (getLastRammedVehicle == null) getLastRammedVehicle = (Function) native.GetObjectProperty("getLastRammedVehicle");
			return (int) getLastRammedVehicle.Call(native, vehicle);
		}

		public void SetDisableVehicleUnk(bool toggle)
		{
			if (setDisableVehicleUnk == null) setDisableVehicleUnk = (Function) native.GetObjectProperty("setDisableVehicleUnk");
			setDisableVehicleUnk.Call(native, toggle);
		}

		public void SetVehicleNitroEnabled(int vehicle, bool toggle)
		{
			if (setVehicleNitroEnabled == null) setVehicleNitroEnabled = (Function) native.GetObjectProperty("setVehicleNitroEnabled");
			setVehicleNitroEnabled.Call(native, vehicle, toggle);
		}

		public void SetVehicleWheelsDealDamage(int vehicle, bool toggle)
		{
			if (setVehicleWheelsDealDamage == null) setVehicleWheelsDealDamage = (Function) native.GetObjectProperty("setVehicleWheelsDealDamage");
			setVehicleWheelsDealDamage.Call(native, vehicle, toggle);
		}

		public void SetDisableVehicleUnk2(bool toggle)
		{
			if (setDisableVehicleUnk2 == null) setDisableVehicleUnk2 = (Function) native.GetObjectProperty("setDisableVehicleUnk2");
			setDisableVehicleUnk2.Call(native, toggle);
		}

		public void _0x5BBCF35BF6E456F7(bool toggle)
		{
			if (__0x5BBCF35BF6E456F7 == null) __0x5BBCF35BF6E456F7 = (Function) native.GetObjectProperty("_0x5BBCF35BF6E456F7");
			__0x5BBCF35BF6E456F7.Call(native, toggle);
		}

		public bool GetDoesVehicleHaveTombstone(int vehicle)
		{
			if (getDoesVehicleHaveTombstone == null) getDoesVehicleHaveTombstone = (Function) native.GetObjectProperty("getDoesVehicleHaveTombstone");
			return (bool) getDoesVehicleHaveTombstone.Call(native, vehicle);
		}

		public void HideVehicleTombstone(int vehicle, bool toggle)
		{
			if (hideVehicleTombstone == null) hideVehicleTombstone = (Function) native.GetObjectProperty("hideVehicleTombstone");
			hideVehicleTombstone.Call(native, vehicle, toggle);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns whether this vehicle is currently disabled by an EMP mine.</returns>
		public bool GetIsVehicleEmpDisabled(int vehicle)
		{
			if (getIsVehicleEmpDisabled == null) getIsVehicleEmpDisabled = (Function) native.GetObjectProperty("getIsVehicleEmpDisabled");
			return (bool) getIsVehicleEmpDisabled.Call(native, vehicle);
		}

		public void _0x8F0D5BA1C2CC91D7(bool toggle)
		{
			if (__0x8F0D5BA1C2CC91D7 == null) __0x8F0D5BA1C2CC91D7 = (Function) native.GetObjectProperty("_0x8F0D5BA1C2CC91D7");
			__0x8F0D5BA1C2CC91D7.Call(native, toggle);
		}

		/// <summary>
		/// This function set height to the value of z-axis of the water surface.
		/// This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
		/// note: seems to return true when you are in water
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) GetWaterHeight(double x, double y, double z, double height)
		{
			if (getWaterHeight == null) getWaterHeight = (Function) native.GetObjectProperty("getWaterHeight");
			var results = (Array) getWaterHeight.Call(native, x, y, z, height);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) GetWaterHeightNoWaves(double x, double y, double z, double height)
		{
			if (getWaterHeightNoWaves == null) getWaterHeightNoWaves = (Function) native.GetObjectProperty("getWaterHeightNoWaves");
			var results = (Array) getWaterHeightNoWaves.Call(native, x, y, z, height);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) TestProbeAgainstWater(double x1, double y1, double z1, double x2, double y2, double z2, Vector3 result)
		{
			if (testProbeAgainstWater == null) testProbeAgainstWater = (Function) native.GetObjectProperty("testProbeAgainstWater");
			var results = (Array) testProbeAgainstWater.Call(native, x1, y1, z1, x2, y2, z2, result);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		public bool TestProbeAgainstAllWater(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7)
		{
			if (testProbeAgainstAllWater == null) testProbeAgainstAllWater = (Function) native.GetObjectProperty("testProbeAgainstAllWater");
			return (bool) testProbeAgainstAllWater.Call(native, p0, p1, p2, p3, p4, p5, p6, p7);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, double></returns>
		public (bool, double) TestVerticalProbeAgainstAllWater(double x, double y, double z, object p3, double height)
		{
			if (testVerticalProbeAgainstAllWater == null) testVerticalProbeAgainstAllWater = (Function) native.GetObjectProperty("testVerticalProbeAgainstAllWater");
			var results = (Array) testVerticalProbeAgainstAllWater.Call(native, x, y, z, p3, height);
			return ((bool) results[0], (double) results[1]);
		}

		/// <summary>
		/// Sets the water height for a given position and radius.
		/// </summary>
		public void ModifyWater(double x, double y, double radius, double height)
		{
			if (modifyWater == null) modifyWater = (Function) native.GetObjectProperty("modifyWater");
			modifyWater.Call(native, x, y, radius, height);
		}

		/// <summary>
		/// Most likely ADD_CURRENT_*
		/// </summary>
		public int AddCurrentRise(double x, double y, double z, double radius, double unk)
		{
			if (addCurrentRise == null) addCurrentRise = (Function) native.GetObjectProperty("addCurrentRise");
			return (int) addCurrentRise.Call(native, x, y, z, radius, unk);
		}

		/// <summary>
		/// p0 is the handle returned from _0xFDBF4CDBC07E1706
		/// Most likely REMOVE_CURRENT_*
		/// </summary>
		/// <param name="p0">is the handle returned from _0xFDBF4CDBC07E1706</param>
		public void RemoveCurrentRise(int p0)
		{
			if (removeCurrentRise == null) removeCurrentRise = (Function) native.GetObjectProperty("removeCurrentRise");
			removeCurrentRise.Call(native, p0);
		}

		/// <summary>
		/// Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
		/// Works only ~200 meters around the player.
		/// </summary>
		public void SetDeepOceanScaler(double intensity)
		{
			if (setDeepOceanScaler == null) setDeepOceanScaler = (Function) native.GetObjectProperty("setDeepOceanScaler");
			setDeepOceanScaler.Call(native, intensity);
		}

		/// <summary>
		/// Gets the aggressiveness factor of the ocean waves.
		/// </summary>
		public double GetDeepOceanScaler()
		{
			if (getDeepOceanScaler == null) getDeepOceanScaler = (Function) native.GetObjectProperty("getDeepOceanScaler");
			return (double) getDeepOceanScaler.Call(native);
		}

		public void _0x547237AA71AB44DE(double p0)
		{
			if (__0x547237AA71AB44DE == null) __0x547237AA71AB44DE = (Function) native.GetObjectProperty("_0x547237AA71AB44DE");
			__0x547237AA71AB44DE.Call(native, p0);
		}

		/// <summary>
		/// Sets the waves intensity back to original (1.0 in most cases).
		/// </summary>
		public void ResetDeepOceanScaler()
		{
			if (resetDeepOceanScaler == null) resetDeepOceanScaler = (Function) native.GetObjectProperty("resetDeepOceanScaler");
			resetDeepOceanScaler.Call(native);
		}

		/// <summary>
		/// Enables laser sight on any weapon.
		/// It doesn't work. Neither on tick nor OnKeyDown
		/// </summary>
		public void EnableLaserSightRendering(bool toggle)
		{
			if (enableLaserSightRendering == null) enableLaserSightRendering = (Function) native.GetObjectProperty("enableLaserSightRendering");
			enableLaserSightRendering.Call(native, toggle);
		}

		public int GetWeaponComponentTypeModel(int componentHash)
		{
			if (getWeaponComponentTypeModel == null) getWeaponComponentTypeModel = (Function) native.GetObjectProperty("getWeaponComponentTypeModel");
			return (int) getWeaponComponentTypeModel.Call(native, componentHash);
		}

		/// <summary>
		/// Can also take an ammo hash?
		/// sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
		/// </summary>
		/// <returns>Returns the model of any weapon.</returns>
		public int GetWeapontypeModel(int weaponHash)
		{
			if (getWeapontypeModel == null) getWeapontypeModel = (Function) native.GetObjectProperty("getWeapontypeModel");
			return (int) getWeapontypeModel.Call(native, weaponHash);
		}

		public int GetWeapontypeSlot(int weaponHash)
		{
			if (getWeapontypeSlot == null) getWeapontypeSlot = (Function) native.GetObjectProperty("getWeapontypeSlot");
			return (int) getWeapontypeSlot.Call(native, weaponHash);
		}

		public int GetWeapontypeGroup(int weaponHash)
		{
			if (getWeapontypeGroup == null) getWeapontypeGroup = (Function) native.GetObjectProperty("getWeapontypeGroup");
			return (int) getWeapontypeGroup.Call(native, weaponHash);
		}

		/// <summary>
		/// Returns -1 if the component isn't of type CWeaponComponentVariantModel.
		/// </summary>
		/// <returns>Returns the amount of extra components the specified component has.</returns>
		public int GetWeaponComponentVariantExtraComponentCount(int componentHash)
		{
			if (getWeaponComponentVariantExtraComponentCount == null) getWeaponComponentVariantExtraComponentCount = (Function) native.GetObjectProperty("getWeaponComponentVariantExtraComponentCount");
			return (int) getWeaponComponentVariantExtraComponentCount.Call(native, componentHash);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns the model hash of the extra component at specified index.</returns>
		public int GetWeaponComponentVariantExtraComponentModel(int componentHash, int extraComponentIndex)
		{
			if (getWeaponComponentVariantExtraComponentModel == null) getWeaponComponentVariantExtraComponentModel = (Function) native.GetObjectProperty("getWeaponComponentVariantExtraComponentModel");
			return (int) getWeaponComponentVariantExtraComponentModel.Call(native, componentHash, extraComponentIndex);
		}

		public void SetCurrentPedWeapon(int ped, int weaponHash, bool equipNow)
		{
			if (setCurrentPedWeapon == null) setCurrentPedWeapon = (Function) native.GetObjectProperty("setCurrentPedWeapon");
			setCurrentPedWeapon.Call(native, ped, weaponHash, equipNow);
		}

		/// <summary>
		/// p2 seems to be 1 most of the time.
		/// p2 is not implemented
		/// disassembly said that?
		/// </summary>
		/// <param name="p2">is not implemented</param>
		/// <returns>Array<bool, int> The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.</returns>
		public (bool, int) GetCurrentPedWeapon(int ped, int weaponHash, bool p2)
		{
			if (getCurrentPedWeapon == null) getCurrentPedWeapon = (Function) native.GetObjectProperty("getCurrentPedWeapon");
			var results = (Array) getCurrentPedWeapon.Call(native, ped, weaponHash, p2);
			return ((bool) results[0], (int) results[1]);
		}

		public int GetCurrentPedWeaponEntityIndex(int ped)
		{
			if (getCurrentPedWeaponEntityIndex == null) getCurrentPedWeaponEntityIndex = (Function) native.GetObjectProperty("getCurrentPedWeaponEntityIndex");
			return (int) getCurrentPedWeaponEntityIndex.Call(native, ped);
		}

		/// <summary>
		/// p1 is always 0 in the scripts.
		/// </summary>
		/// <param name="p1">is always 0 in the scripts.</param>
		public int GetBestPedWeapon(int ped, bool p1)
		{
			if (getBestPedWeapon == null) getBestPedWeapon = (Function) native.GetObjectProperty("getBestPedWeapon");
			return (int) getBestPedWeapon.Call(native, ped, p1);
		}

		public bool SetCurrentPedVehicleWeapon(int ped, int weaponHash)
		{
			if (setCurrentPedVehicleWeapon == null) setCurrentPedVehicleWeapon = (Function) native.GetObjectProperty("setCurrentPedVehicleWeapon");
			return (bool) setCurrentPedVehicleWeapon.Call(native, ped, weaponHash);
		}

		/// <summary>
		/// Example in VB
		/// Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
		/// Dim arg As New OutputArgument()
		/// Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
		/// Return arg.GetResult(Of Integer)()
		/// End Function
		/// Usage:
		/// If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
		/// Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetCurrentPedVehicleWeapon(int ped, int weaponHash)
		{
			if (getCurrentPedVehicleWeapon == null) getCurrentPedVehicleWeapon = (Function) native.GetObjectProperty("getCurrentPedVehicleWeapon");
			var results = (Array) getCurrentPedVehicleWeapon.Call(native, ped, weaponHash);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// SET_PED_*
		/// </summary>
		public void _0x50276EF8172F5F12(int ped)
		{
			if (__0x50276EF8172F5F12 == null) __0x50276EF8172F5F12 = (Function) native.GetObjectProperty("_0x50276EF8172F5F12");
			__0x50276EF8172F5F12.Call(native, ped);
		}

		/// <summary>
		/// p1 is anywhere from 4 to 7 in the scripts. Might be a weapon wheel group?
		/// ^It's kinda like that.
		/// 6 returns true if you are equipped with any weapon except melee weapons.
		/// 5 returns true if you are equipped with any weapon except the Explosives weapon group.
		/// 4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
		/// 3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
		/// 2 returns true only if you are equipped with any weapon from the Explosives weapon group.
		/// 1 returns true only if you are equipped with any Melee weapon.
		/// 0 never returns true.
		/// Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
		/// </summary>
		/// <param name="p1">is anywhere from 4 to 7 in the scripts. Might be a weapon wheel group?</param>
		/// <returns>7 returns true if you are equipped with any weapon except your fists.</returns>
		public bool IsPedArmed(int ped, int p1)
		{
			if (isPedArmed == null) isPedArmed = (Function) native.GetObjectProperty("isPedArmed");
			return (bool) isPedArmed.Call(native, ped, p1);
		}

		public bool IsWeaponValid(int weaponHash)
		{
			if (isWeaponValid == null) isWeaponValid = (Function) native.GetObjectProperty("isWeaponValid");
			return (bool) isWeaponValid.Call(native, weaponHash);
		}

		/// <summary>
		/// p2 should be FALSE, otherwise it seems to always return FALSE
		/// Bool does not check if the weapon is current equipped, unfortunately.
		/// </summary>
		/// <param name="p2">should be FALSE, otherwise it seems to always return FALSE</param>
		public bool HasPedGotWeapon(int ped, int weaponHash, bool p2)
		{
			if (hasPedGotWeapon == null) hasPedGotWeapon = (Function) native.GetObjectProperty("hasPedGotWeapon");
			return (bool) hasPedGotWeapon.Call(native, ped, weaponHash, p2);
		}

		public bool IsPedWeaponReadyToShoot(int ped)
		{
			if (isPedWeaponReadyToShoot == null) isPedWeaponReadyToShoot = (Function) native.GetObjectProperty("isPedWeaponReadyToShoot");
			return (bool) isPedWeaponReadyToShoot.Call(native, ped);
		}

		public int GetPedWeapontypeInSlot(int ped, int weaponSlot)
		{
			if (getPedWeapontypeInSlot == null) getPedWeapontypeInSlot = (Function) native.GetObjectProperty("getPedWeapontypeInSlot");
			return (int) getPedWeapontypeInSlot.Call(native, ped, weaponSlot);
		}

		/// <summary>
		/// WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)
		/// From decompiled scripts
		/// GTALua Example :
		/// natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
		/// </summary>
		/// <returns>Returns total ammo in weapon</returns>
		public int GetAmmoInPedWeapon(int ped, int weaponhash)
		{
			if (getAmmoInPedWeapon == null) getAmmoInPedWeapon = (Function) native.GetObjectProperty("getAmmoInPedWeapon");
			return (int) getAmmoInPedWeapon.Call(native, ped, weaponhash);
		}

		public void AddAmmoToPed(int ped, int weaponHash, int ammo)
		{
			if (addAmmoToPed == null) addAmmoToPed = (Function) native.GetObjectProperty("addAmmoToPed");
			addAmmoToPed.Call(native, ped, weaponHash, ammo);
		}

		public void SetPedAmmo(int ped, int weaponHash, int ammo, bool p3)
		{
			if (setPedAmmo == null) setPedAmmo = (Function) native.GetObjectProperty("setPedAmmo");
			setPedAmmo.Call(native, ped, weaponHash, ammo, p3);
		}

		public void SetPedInfiniteAmmo(int ped, bool toggle, int weaponHash)
		{
			if (setPedInfiniteAmmo == null) setPedInfiniteAmmo = (Function) native.GetObjectProperty("setPedInfiniteAmmo");
			setPedInfiniteAmmo.Call(native, ped, toggle, weaponHash);
		}

		public void SetPedInfiniteAmmoClip(int ped, bool toggle)
		{
			if (setPedInfiniteAmmoClip == null) setPedInfiniteAmmoClip = (Function) native.GetObjectProperty("setPedInfiniteAmmoClip");
			setPedInfiniteAmmoClip.Call(native, ped, toggle);
		}

		/// <summary>
		/// isHidden - ????
		/// All weapon names (add to the list if something is missing), use GAMEPLAY::GET_HASH_KEY((char *)weaponNames[i]) to get get the hash:
		/// static LPCSTR weaponNames[] = {
		/// "WEAPON_KNIFE", "WEAPON_NIGHTSTICK", "WEAPON_HAMMER", "WEAPON_BAT", "WEAPON_GOLFCLUB",
		/// "WEAPON_CROWBAR", "WEAPON_PISTOL", "WEAPON_COMBATPISTOL", "WEAPON_APPISTOL", "WEAPON_PISTOL50",
		/// "WEAPON_MICROSMG", "WEAPON_SMG", "WEAPON_ASSAULTSMG", "WEAPON_ASSAULTRIFLE",
		/// "WEAPON_CARBINERIFLE", "WEAPON_ADVANCEDRIFLE", "WEAPON_MG", "WEAPON_COMBATMG", "WEAPON_PUMPSHOTGUN",
		/// "WEAPON_SAWNOFFSHOTGUN", "WEAPON_ASSAULTSHOTGUN", "WEAPON_BULLPUPSHOTGUN", "WEAPON_STUNGUN", "WEAPON_SNIPERRIFLE",
		/// "WEAPON_HEAVYSNIPER", "WEAPON_GRENADELAUNCHER", "WEAPON_GRENADELAUNCHER_SMOKE", "WEAPON_RPG", "WEAPON_MINIGUN",
		/// See NativeDB for reference: http://natives.altv.mp/#/0xBF0FD6E56C964FCB
		/// </summary>
		/// <param name="isHidden">????</param>
		public void GiveWeaponToPed(int ped, int weaponHash, int ammoCount, bool isHidden, bool equipNow)
		{
			if (giveWeaponToPed == null) giveWeaponToPed = (Function) native.GetObjectProperty("giveWeaponToPed");
			giveWeaponToPed.Call(native, ped, weaponHash, ammoCount, isHidden, equipNow);
		}

		/// <summary>
		/// Gives a weapon to PED with a delay, example:
		/// WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
		/// ----------------------------------------------------------------------------------------------------------------------------------------
		/// Translation table:
		/// pastebin.com/a39K8Nz8
		/// </summary>
		public void GiveDelayedWeaponToPed(int ped, int weaponHash, int ammoCount, bool equipNow)
		{
			if (giveDelayedWeaponToPed == null) giveDelayedWeaponToPed = (Function) native.GetObjectProperty("giveDelayedWeaponToPed");
			giveDelayedWeaponToPed.Call(native, ped, weaponHash, ammoCount, equipNow);
		}

		/// <summary>
		/// setting the last params to false it does that same so I would suggest its not a toggle
		/// </summary>
		public void RemoveAllPedWeapons(int ped, bool p1)
		{
			if (removeAllPedWeapons == null) removeAllPedWeapons = (Function) native.GetObjectProperty("removeAllPedWeapons");
			removeAllPedWeapons.Call(native, ped, p1);
		}

		/// <summary>
		/// This native removes a specified weapon from your selected ped.
		/// Weapon Hashes: pastebin.com/0wwDZgkF
		/// Example:
		/// C#:
		/// Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
		/// C++:
		/// WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
		/// The code above removes the knife from the player.
		/// </summary>
		public void RemoveWeaponFromPed(int ped, int weaponHash)
		{
			if (removeWeaponFromPed == null) removeWeaponFromPed = (Function) native.GetObjectProperty("removeWeaponFromPed");
			removeWeaponFromPed.Call(native, ped, weaponHash);
		}

		/// <summary>
		/// Hides the players weapon during a cutscene.
		/// </summary>
		public void HidePedWeaponForScriptedCutscene(int ped, bool toggle)
		{
			if (hidePedWeaponForScriptedCutscene == null) hidePedWeaponForScriptedCutscene = (Function) native.GetObjectProperty("hidePedWeaponForScriptedCutscene");
			hidePedWeaponForScriptedCutscene.Call(native, ped, toggle);
		}

		/// <summary>
		/// Has 5 parameters since latest patches.
		/// </summary>
		public void SetPedCurrentWeaponVisible(int ped, bool visible, bool deselectWeapon, bool p3, bool p4)
		{
			if (setPedCurrentWeaponVisible == null) setPedCurrentWeaponVisible = (Function) native.GetObjectProperty("setPedCurrentWeaponVisible");
			setPedCurrentWeaponVisible.Call(native, ped, visible, deselectWeapon, p3, p4);
		}

		public void SetPedDropsWeaponsWhenDead(int ped, bool toggle)
		{
			if (setPedDropsWeaponsWhenDead == null) setPedDropsWeaponsWhenDead = (Function) native.GetObjectProperty("setPedDropsWeaponsWhenDead");
			setPedDropsWeaponsWhenDead.Call(native, ped, toggle);
		}

		/// <summary>
		/// It determines what weapons caused damage:
		/// If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
		/// If you want to define any melee weapon, second parameter=0, third parameter=1.
		/// If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
		/// </summary>
		public bool HasPedBeenDamagedByWeapon(int ped, int weaponHash, int weaponType)
		{
			if (hasPedBeenDamagedByWeapon == null) hasPedBeenDamagedByWeapon = (Function) native.GetObjectProperty("hasPedBeenDamagedByWeapon");
			return (bool) hasPedBeenDamagedByWeapon.Call(native, ped, weaponHash, weaponType);
		}

		public void ClearPedLastWeaponDamage(int ped)
		{
			if (clearPedLastWeaponDamage == null) clearPedLastWeaponDamage = (Function) native.GetObjectProperty("clearPedLastWeaponDamage");
			clearPedLastWeaponDamage.Call(native, ped);
		}

		/// <summary>
		/// It determines what weapons caused damage:
		/// If youu want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
		/// If you want to define any melee weapon, second parameter=0, third parameter=1.
		/// If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
		/// </summary>
		public bool HasEntityBeenDamagedByWeapon(int entity, int weaponHash, int weaponType)
		{
			if (hasEntityBeenDamagedByWeapon == null) hasEntityBeenDamagedByWeapon = (Function) native.GetObjectProperty("hasEntityBeenDamagedByWeapon");
			return (bool) hasEntityBeenDamagedByWeapon.Call(native, entity, weaponHash, weaponType);
		}

		public void ClearEntityLastWeaponDamage(int entity)
		{
			if (clearEntityLastWeaponDamage == null) clearEntityLastWeaponDamage = (Function) native.GetObjectProperty("clearEntityLastWeaponDamage");
			clearEntityLastWeaponDamage.Call(native, entity);
		}

		public void SetPedDropsWeapon(int ped)
		{
			if (setPedDropsWeapon == null) setPedDropsWeapon = (Function) native.GetObjectProperty("setPedDropsWeapon");
			setPedDropsWeapon.Call(native, ped);
		}

		public void SetPedDropsInventoryWeapon(int ped, int weaponHash, double xOffset, double yOffset, double zOffset, int ammoCount)
		{
			if (setPedDropsInventoryWeapon == null) setPedDropsInventoryWeapon = (Function) native.GetObjectProperty("setPedDropsInventoryWeapon");
			setPedDropsInventoryWeapon.Call(native, ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
		}

		/// <summary>
		/// p2 is mostly 1 in the scripts.
		/// </summary>
		/// <param name="p2">is mostly 1 in the scripts.</param>
		public int GetMaxAmmoInClip(int ped, int weaponHash, bool p2)
		{
			if (getMaxAmmoInClip == null) getMaxAmmoInClip = (Function) native.GetObjectProperty("getMaxAmmoInClip");
			return (int) getMaxAmmoInClip.Call(native, ped, weaponHash, p2);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetAmmoInClip(int ped, int weaponHash, int ammo)
		{
			if (getAmmoInClip == null) getAmmoInClip = (Function) native.GetObjectProperty("getAmmoInClip");
			var results = (Array) getAmmoInClip.Call(native, ped, weaponHash, ammo);
			return ((bool) results[0], (int) results[1]);
		}

		public bool SetAmmoInClip(int ped, int weaponHash, int ammo)
		{
			if (setAmmoInClip == null) setAmmoInClip = (Function) native.GetObjectProperty("setAmmoInClip");
			return (bool) setAmmoInClip.Call(native, ped, weaponHash, ammo);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetMaxAmmo(int ped, int weaponHash, int ammo)
		{
			if (getMaxAmmo == null) getMaxAmmo = (Function) native.GetObjectProperty("getMaxAmmo");
			var results = (Array) getMaxAmmo.Call(native, ped, weaponHash, ammo);
			return ((bool) results[0], (int) results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, int></returns>
		public (bool, int) GetMaxAmmo2(int ped, int weaponHash, int ammo)
		{
			if (getMaxAmmo2 == null) getMaxAmmo2 = (Function) native.GetObjectProperty("getMaxAmmo2");
			var results = (Array) getMaxAmmo2.Call(native, ped, weaponHash, ammo);
			return ((bool) results[0], (int) results[1]);
		}

		public void AddPedAmmo(int ped, int weaponHash, int ammo)
		{
			if (addPedAmmo == null) addPedAmmo = (Function) native.GetObjectProperty("addPedAmmo");
			addPedAmmo.Call(native, ped, weaponHash, ammo);
		}

		public void SetPedAmmoByType(int ped, object ammoType, int ammo)
		{
			if (setPedAmmoByType == null) setPedAmmoByType = (Function) native.GetObjectProperty("setPedAmmoByType");
			setPedAmmoByType.Call(native, ped, ammoType, ammo);
		}

		public int GetPedAmmoByType(int ped, object ammoType)
		{
			if (getPedAmmoByType == null) getPedAmmoByType = (Function) native.GetObjectProperty("getPedAmmoByType");
			return (int) getPedAmmoByType.Call(native, ped, ammoType);
		}

		public void SetPedAmmoToDrop(int ped, int p1)
		{
			if (setPedAmmoToDrop == null) setPedAmmoToDrop = (Function) native.GetObjectProperty("setPedAmmoToDrop");
			setPedAmmoToDrop.Call(native, ped, p1);
		}

		public void _0xE620FD3512A04F18(double p0)
		{
			if (__0xE620FD3512A04F18 == null) __0xE620FD3512A04F18 = (Function) native.GetObjectProperty("_0xE620FD3512A04F18");
			__0xE620FD3512A04F18.Call(native, p0);
		}

		public int GetPedAmmoTypeFromWeapon(int ped, int weaponHash)
		{
			if (getPedAmmoTypeFromWeapon == null) getPedAmmoTypeFromWeapon = (Function) native.GetObjectProperty("getPedAmmoTypeFromWeapon");
			return (int) getPedAmmoTypeFromWeapon.Call(native, ped, weaponHash);
		}

		public int GetPedAmmoTypeFromWeapon2(int ped, int weaponHash)
		{
			if (getPedAmmoTypeFromWeapon2 == null) getPedAmmoTypeFromWeapon2 = (Function) native.GetObjectProperty("getPedAmmoTypeFromWeapon2");
			return (int) getPedAmmoTypeFromWeapon2.Call(native, ped, weaponHash);
		}

		/// <summary>
		/// Pass ped. Pass address of Vector3.
		/// The coord will be put into the Vector3.
		/// The return will determine whether there was a coord found or not.
		/// </summary>
		/// <returns>Array<bool, Vector3></returns>
		public (bool, Vector3) GetPedLastWeaponImpactCoord(int ped, Vector3 coords)
		{
			if (getPedLastWeaponImpactCoord == null) getPedLastWeaponImpactCoord = (Function) native.GetObjectProperty("getPedLastWeaponImpactCoord");
			var results = (Array) getPedLastWeaponImpactCoord.Call(native, ped, coords);
			return ((bool) results[0], JSObjectToVector3(results[1]));
		}

		/// <summary>
		/// p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
		/// p2 is always true.
		/// </summary>
		/// <param name="p2">is always true.</param>
		public void SetPedGadget(int ped, int gadgetHash, bool p2)
		{
			if (setPedGadget == null) setPedGadget = (Function) native.GetObjectProperty("setPedGadget");
			setPedGadget.Call(native, ped, gadgetHash, p2);
		}

		/// <summary>
		/// gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
		/// </summary>
		/// <param name="gadgetHash">was always 0xFBAB5776 ("GADGET_PARACHUTE").</param>
		public bool GetIsPedGadgetEquipped(int ped, int gadgetHash)
		{
			if (getIsPedGadgetEquipped == null) getIsPedGadgetEquipped = (Function) native.GetObjectProperty("getIsPedGadgetEquipped");
			return (bool) getIsPedGadgetEquipped.Call(native, ped, gadgetHash);
		}

		/// <summary>
		/// var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
		/// sub_27D3(num7);
		/// switch (num7)
		/// {
		/// case 0x24B17070:
		/// Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?
		/// -------------------------------------------------------------------------
		/// The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
		/// </summary>
		/// <returns>Returns the hash of the weapon.</returns>
		public int GetSelectedPedWeapon(int ped)
		{
			if (getSelectedPedWeapon == null) getSelectedPedWeapon = (Function) native.GetObjectProperty("getSelectedPedWeapon");
			return (int) getSelectedPedWeapon.Call(native, ped);
		}

		/// <summary>
		/// WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
		/// </summary>
		public void ExplodeProjectiles(int ped, int weaponHash, bool p2)
		{
			if (explodeProjectiles == null) explodeProjectiles = (Function) native.GetObjectProperty("explodeProjectiles");
			explodeProjectiles.Call(native, ped, weaponHash, p2);
		}

		/// <summary>
		/// p1 seems always to be 0
		/// </summary>
		/// <param name="p1">seems always to be 0</param>
		public void RemoveAllProjectilesOfType(int weaponHash, bool p1)
		{
			if (removeAllProjectilesOfType == null) removeAllProjectilesOfType = (Function) native.GetObjectProperty("removeAllProjectilesOfType");
			removeAllProjectilesOfType.Call(native, weaponHash, p1);
		}

		public double GetLockonDistanceOfCurrentPedWeapon(int ped)
		{
			if (getLockonDistanceOfCurrentPedWeapon == null) getLockonDistanceOfCurrentPedWeapon = (Function) native.GetObjectProperty("getLockonDistanceOfCurrentPedWeapon");
			return (double) getLockonDistanceOfCurrentPedWeapon.Call(native, ped);
		}

		public double GetMaxRangeOfCurrentPedWeapon(int ped)
		{
			if (getMaxRangeOfCurrentPedWeapon == null) getMaxRangeOfCurrentPedWeapon = (Function) native.GetObjectProperty("getMaxRangeOfCurrentPedWeapon");
			return (double) getMaxRangeOfCurrentPedWeapon.Call(native, ped);
		}

		/// <summary>
		/// Third Parameter = unsure, but pretty sure it is weapon hash
		/// --> get_hash_key("weapon_stickybomb")
		/// Fourth Parameter = unsure, almost always -1
		/// </summary>
		public bool HasVehicleGotProjectileAttached(int driver, int vehicle, int weaponHash, object p3)
		{
			if (hasVehicleGotProjectileAttached == null) hasVehicleGotProjectileAttached = (Function) native.GetObjectProperty("hasVehicleGotProjectileAttached");
			return (bool) hasVehicleGotProjectileAttached.Call(native, driver, vehicle, weaponHash, p3);
		}

		public void GiveWeaponComponentToPed(int ped, int weaponHash, int componentHash)
		{
			if (giveWeaponComponentToPed == null) giveWeaponComponentToPed = (Function) native.GetObjectProperty("giveWeaponComponentToPed");
			giveWeaponComponentToPed.Call(native, ped, weaponHash, componentHash);
		}

		public void RemoveWeaponComponentFromPed(int ped, int weaponHash, int componentHash)
		{
			if (removeWeaponComponentFromPed == null) removeWeaponComponentFromPed = (Function) native.GetObjectProperty("removeWeaponComponentFromPed");
			removeWeaponComponentFromPed.Call(native, ped, weaponHash, componentHash);
		}

		public bool HasPedGotWeaponComponent(int ped, int weaponHash, int componentHash)
		{
			if (hasPedGotWeaponComponent == null) hasPedGotWeaponComponent = (Function) native.GetObjectProperty("hasPedGotWeaponComponent");
			return (bool) hasPedGotWeaponComponent.Call(native, ped, weaponHash, componentHash);
		}

		public bool IsPedWeaponComponentActive(int ped, int weaponHash, int componentHash)
		{
			if (isPedWeaponComponentActive == null) isPedWeaponComponentActive = (Function) native.GetObjectProperty("isPedWeaponComponentActive");
			return (bool) isPedWeaponComponentActive.Call(native, ped, weaponHash, componentHash);
		}

		/// <summary>
		/// [23.03.2017 19:08] by ins1de :
		/// "_IS_PED_RELOADING" is totally a wrong name...
		/// This native actually disables the reloading animation and script for the specified ped. Native renamed.
		/// R*
		/// </summary>
		public bool PedSkipNextReloading(int ped)
		{
			if (pedSkipNextReloading == null) pedSkipNextReloading = (Function) native.GetObjectProperty("pedSkipNextReloading");
			return (bool) pedSkipNextReloading.Call(native, ped);
		}

		public bool MakePedReload(int ped)
		{
			if (makePedReload == null) makePedReload = (Function) native.GetObjectProperty("makePedReload");
			return (bool) makePedReload.Call(native, ped);
		}

		/// <summary>
		/// Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
		/// REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
		/// </summary>
		public void RequestWeaponAsset(int weaponHash, int p1, int p2)
		{
			if (requestWeaponAsset == null) requestWeaponAsset = (Function) native.GetObjectProperty("requestWeaponAsset");
			requestWeaponAsset.Call(native, weaponHash, p1, p2);
		}

		public bool HasWeaponAssetLoaded(int weaponHash)
		{
			if (hasWeaponAssetLoaded == null) hasWeaponAssetLoaded = (Function) native.GetObjectProperty("hasWeaponAssetLoaded");
			return (bool) hasWeaponAssetLoaded.Call(native, weaponHash);
		}

		public void RemoveWeaponAsset(int weaponHash)
		{
			if (removeWeaponAsset == null) removeWeaponAsset = (Function) native.GetObjectProperty("removeWeaponAsset");
			removeWeaponAsset.Call(native, weaponHash);
		}

		/// <summary>
		/// Now has 8 params.
		/// </summary>
		public int CreateWeaponObject(int weaponHash, int ammoCount, double x, double y, double z, bool showWorldModel, double heading, object p7, object p8, object p9)
		{
			if (createWeaponObject == null) createWeaponObject = (Function) native.GetObjectProperty("createWeaponObject");
			return (int) createWeaponObject.Call(native, weaponHash, ammoCount, x, y, z, showWorldModel, heading, p7, p8, p9);
		}

		/// <summary>
		/// addonHash:
		/// (use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
		/// ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
		/// </summary>
		public void GiveWeaponComponentToWeaponObject(int weaponObject, int addonHash)
		{
			if (giveWeaponComponentToWeaponObject == null) giveWeaponComponentToWeaponObject = (Function) native.GetObjectProperty("giveWeaponComponentToWeaponObject");
			giveWeaponComponentToWeaponObject.Call(native, weaponObject, addonHash);
		}

		public void RemoveWeaponComponentFromWeaponObject(object p0, object p1)
		{
			if (removeWeaponComponentFromWeaponObject == null) removeWeaponComponentFromWeaponObject = (Function) native.GetObjectProperty("removeWeaponComponentFromWeaponObject");
			removeWeaponComponentFromWeaponObject.Call(native, p0, p1);
		}

		public bool HasWeaponGotWeaponComponent(int weapon, int addonHash)
		{
			if (hasWeaponGotWeaponComponent == null) hasWeaponGotWeaponComponent = (Function) native.GetObjectProperty("hasWeaponGotWeaponComponent");
			return (bool) hasWeaponGotWeaponComponent.Call(native, weapon, addonHash);
		}

		public void GiveWeaponObjectToPed(int weaponObject, int ped)
		{
			if (giveWeaponObjectToPed == null) giveWeaponObjectToPed = (Function) native.GetObjectProperty("giveWeaponObjectToPed");
			giveWeaponObjectToPed.Call(native, weaponObject, ped);
		}

		public bool DoesWeaponTakeWeaponComponent(int weaponHash, int componentHash)
		{
			if (doesWeaponTakeWeaponComponent == null) doesWeaponTakeWeaponComponent = (Function) native.GetObjectProperty("doesWeaponTakeWeaponComponent");
			return (bool) doesWeaponTakeWeaponComponent.Call(native, weaponHash, componentHash);
		}

		/// <summary>
		/// Unknown behavior when unarmed.
		/// </summary>
		/// <returns>Drops the current weapon and returns the object</returns>
		public int GetWeaponObjectFromPed(int ped, bool p1)
		{
			if (getWeaponObjectFromPed == null) getWeaponObjectFromPed = (Function) native.GetObjectProperty("getWeaponObjectFromPed");
			return (int) getWeaponObjectFromPed.Call(native, ped, p1);
		}

		/// <summary>
		/// GIVE_*
		/// </summary>
		public void GiveLoadoutToPed(int ped, int loadoutHash)
		{
			if (giveLoadoutToPed == null) giveLoadoutToPed = (Function) native.GetObjectProperty("giveLoadoutToPed");
			giveLoadoutToPed.Call(native, ped, loadoutHash);
		}

		/// <summary>
		/// tintIndex can be the following:
		/// 0 - Normal
		/// 1 - Green
		/// 2 - Gold
		/// 3 - Pink
		/// 4 - Army
		/// 5 - LSPD
		/// 6 - Orange
		/// 7 - Platinum
		/// </summary>
		/// <param name="tintIndex">can be the following:</param>
		public void SetPedWeaponTintIndex(int ped, int weaponHash, int tintIndex)
		{
			if (setPedWeaponTintIndex == null) setPedWeaponTintIndex = (Function) native.GetObjectProperty("setPedWeaponTintIndex");
			setPedWeaponTintIndex.Call(native, ped, weaponHash, tintIndex);
		}

		public int GetPedWeaponTintIndex(int ped, int weaponHash)
		{
			if (getPedWeaponTintIndex == null) getPedWeaponTintIndex = (Function) native.GetObjectProperty("getPedWeaponTintIndex");
			return (int) getPedWeaponTintIndex.Call(native, ped, weaponHash);
		}

		public void SetWeaponObjectTintIndex(int weapon, int tintIndex)
		{
			if (setWeaponObjectTintIndex == null) setWeaponObjectTintIndex = (Function) native.GetObjectProperty("setWeaponObjectTintIndex");
			setWeaponObjectTintIndex.Call(native, weapon, tintIndex);
		}

		public int GetWeaponObjectTintIndex(int weapon)
		{
			if (getWeaponObjectTintIndex == null) getWeaponObjectTintIndex = (Function) native.GetObjectProperty("getWeaponObjectTintIndex");
			return (int) getWeaponObjectTintIndex.Call(native, weapon);
		}

		public int GetWeaponTintCount(int weaponHash)
		{
			if (getWeaponTintCount == null) getWeaponTintCount = (Function) native.GetObjectProperty("getWeaponTintCount");
			return (int) getWeaponTintCount.Call(native, weaponHash);
		}

		/// <summary>
		/// Colors:
		/// 0 = Gray
		/// 1 = Dark Gray
		/// 2 = Black
		/// 3 = White
		/// 4 = Blue
		/// 5 = Cyan
		/// 6 = Aqua
		/// 7 = Cool Blue
		/// See NativeDB for reference: http://natives.altv.mp/#/0x9FE5633880ECD8ED
		/// </summary>
		public void SetPedWeaponLiveryColor(int ped, int weaponHash, int camoComponentHash, int colorIndex)
		{
			if (setPedWeaponLiveryColor == null) setPedWeaponLiveryColor = (Function) native.GetObjectProperty("setPedWeaponLiveryColor");
			setPedWeaponLiveryColor.Call(native, ped, weaponHash, camoComponentHash, colorIndex);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns -1 if camoComponentHash is invalid/not attached to the weapon.</returns>
		public int GetPedWeaponLiveryColor(int ped, int weaponHash, int camoComponentHash)
		{
			if (getPedWeaponLiveryColor == null) getPedWeaponLiveryColor = (Function) native.GetObjectProperty("getPedWeaponLiveryColor");
			return (int) getPedWeaponLiveryColor.Call(native, ped, weaponHash, camoComponentHash);
		}

		/// <summary>
		/// Colors:
		/// 0 = Gray
		/// 1 = Dark Gray
		/// 2 = Black
		/// 3 = White
		/// 4 = Blue
		/// 5 = Cyan
		/// 6 = Aqua
		/// 7 = Cool Blue
		/// See NativeDB for reference: http://natives.altv.mp/#/0x5DA825A85D0EA6E6
		/// </summary>
		public void SetWeaponObjectLiveryColor(int weaponObject, int camoComponentHash, int colorIndex)
		{
			if (setWeaponObjectLiveryColor == null) setWeaponObjectLiveryColor = (Function) native.GetObjectProperty("setWeaponObjectLiveryColor");
			setWeaponObjectLiveryColor.Call(native, weaponObject, camoComponentHash, colorIndex);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns -1 if camoComponentHash is invalid/not attached to the weapon object.</returns>
		public int GetWeaponObjectLiveryColor(int weaponObject, int camoComponentHash)
		{
			if (getWeaponObjectLiveryColor == null) getWeaponObjectLiveryColor = (Function) native.GetObjectProperty("getWeaponObjectLiveryColor");
			return (int) getWeaponObjectLiveryColor.Call(native, weaponObject, camoComponentHash);
		}

		/// <summary>
		/// GET_PED_WEAPON_*
		/// </summary>
		public int _0xA2C9AC24B4061285(int ped, int weaponHash)
		{
			if (__0xA2C9AC24B4061285 == null) __0xA2C9AC24B4061285 = (Function) native.GetObjectProperty("_0xA2C9AC24B4061285");
			return (int) __0xA2C9AC24B4061285.Call(native, ped, weaponHash);
		}

		/// <summary>
		/// SET_WEAPON_OBJECT_*
		/// </summary>
		public void _0x977CA98939E82E4B(int weaponObject, int p1)
		{
			if (__0x977CA98939E82E4B == null) __0x977CA98939E82E4B = (Function) native.GetObjectProperty("_0x977CA98939E82E4B");
			__0x977CA98939E82E4B.Call(native, weaponObject, p1);
		}

		/// <summary>
		/// struct WeaponHudStatsData
		/// {
		/// BYTE hudDamage; // 0x0000
		/// char _0x0001[0x7]; // 0x0001
		/// BYTE hudSpeed; // 0x0008
		/// char _0x0009[0x7]; // 0x0009
		/// BYTE hudCapacity; // 0x0010
		/// char _0x0011[0x7]; // 0x0011
		/// BYTE hudAccuracy; // 0x0018
		/// See NativeDB for reference: http://natives.altv.mp/#/0xD92C739EE34C9EBA
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) GetWeaponHudStats(int weaponHash, object outData)
		{
			if (getWeaponHudStats == null) getWeaponHudStats = (Function) native.GetObjectProperty("getWeaponHudStats");
			var results = (Array) getWeaponHudStats.Call(native, weaponHash, outData);
			return ((bool) results[0], results[1]);
		}

		/// <summary>
		/// </summary>
		/// <returns>Array<bool, object></returns>
		public (bool, object) GetWeaponComponentHudStats(int componentHash, object outData)
		{
			if (getWeaponComponentHudStats == null) getWeaponComponentHudStats = (Function) native.GetObjectProperty("getWeaponComponentHudStats");
			var results = (Array) getWeaponComponentHudStats.Call(native, componentHash, outData);
			return ((bool) results[0], results[1]);
		}

		public double GetWeaponDamage(int weaponHash, int componentHash)
		{
			if (getWeaponDamage == null) getWeaponDamage = (Function) native.GetObjectProperty("getWeaponDamage");
			return (double) getWeaponDamage.Call(native, weaponHash, componentHash);
		}

		/// <summary>
		/// Use it like this:
		/// char cClipSize[32];
		/// Hash cur;
		/// if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
		/// {
		/// if (WEAPON::IS_WEAPON_VALID(cur))
		/// {
		/// int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
		/// sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
		/// See NativeDB for reference: http://natives.altv.mp/#/0x583BE370B1EC6EB4
		/// </summary>
		/// <returns>// Returns the size of the default weapon component clip.</returns>
		public int GetWeaponClipSize(int weaponHash)
		{
			if (getWeaponClipSize == null) getWeaponClipSize = (Function) native.GetObjectProperty("getWeaponClipSize");
			return (int) getWeaponClipSize.Call(native, weaponHash);
		}

		public double GetWeaponTimeBetweenShots(int weaponHash)
		{
			if (getWeaponTimeBetweenShots == null) getWeaponTimeBetweenShots = (Function) native.GetObjectProperty("getWeaponTimeBetweenShots");
			return (double) getWeaponTimeBetweenShots.Call(native, weaponHash);
		}

		public void SetPedChanceOfFiringBlanks(int ped, double xBias, double yBias)
		{
			if (setPedChanceOfFiringBlanks == null) setPedChanceOfFiringBlanks = (Function) native.GetObjectProperty("setPedChanceOfFiringBlanks");
			setPedChanceOfFiringBlanks.Call(native, ped, xBias, yBias);
		}

		/// <summary>
		/// </summary>
		/// <returns>Returns handle of the projectile.</returns>
		public int SetPedShootOrdnanceWeapon(int ped, double p1)
		{
			if (setPedShootOrdnanceWeapon == null) setPedShootOrdnanceWeapon = (Function) native.GetObjectProperty("setPedShootOrdnanceWeapon");
			return (int) setPedShootOrdnanceWeapon.Call(native, ped, p1);
		}

		public void RequestWeaponHighDetailModel(int weaponObject)
		{
			if (requestWeaponHighDetailModel == null) requestWeaponHighDetailModel = (Function) native.GetObjectProperty("requestWeaponHighDetailModel");
			requestWeaponHighDetailModel.Call(native, weaponObject);
		}

		public void SetWeaponDamageModifier(int weaponHash, double damageAmount)
		{
			if (setWeaponDamageModifier == null) setWeaponDamageModifier = (Function) native.GetObjectProperty("setWeaponDamageModifier");
			setWeaponDamageModifier.Call(native, weaponHash, damageAmount);
		}

		/// <summary>
		/// Ped ped = The ped whose weapon you want to check.
		/// </summary>
		/// <param name="ped">Ped The ped whose weapon you want to check.</param>
		/// <returns>This native returns a true or false value.</returns>
		public bool IsPedCurrentWeaponSilenced(int ped)
		{
			if (isPedCurrentWeaponSilenced == null) isPedCurrentWeaponSilenced = (Function) native.GetObjectProperty("isPedCurrentWeaponSilenced");
			return (bool) isPedCurrentWeaponSilenced.Call(native, ped);
		}

		public bool IsFlashLightOn(int ped)
		{
			if (isFlashLightOn == null) isFlashLightOn = (Function) native.GetObjectProperty("isFlashLightOn");
			return (bool) isFlashLightOn.Call(native, ped);
		}

		public object SetFlashLightFadeDistance(double distance)
		{
			if (setFlashLightFadeDistance == null) setFlashLightFadeDistance = (Function) native.GetObjectProperty("setFlashLightFadeDistance");
			return setFlashLightFadeDistance.Call(native, distance);
		}

		/// <summary>
		/// Changes the selected ped aiming animation style.
		/// Note : You must use GET_HASH_KEY!
		/// Strings to use with GET_HASH_KEY :
		/// "Ballistic",
		/// "Default",
		/// "Fat",
		/// "Female",
		/// "FirstPerson",
		/// "FirstPersonAiming",
		/// See NativeDB for reference: http://natives.altv.mp/#/0x1055AC3A667F09D9
		/// </summary>
		public void SetWeaponAnimationOverride(int ped, int animStyle)
		{
			if (setWeaponAnimationOverride == null) setWeaponAnimationOverride = (Function) native.GetObjectProperty("setWeaponAnimationOverride");
			setWeaponAnimationOverride.Call(native, ped, animStyle);
		}

		/// <summary>
		/// 0=unknown (or incorrect weaponHash)
		/// 1= no damage (flare,snowball, petrolcan)
		/// 2=melee
		/// 3=bullet
		/// 4=force ragdoll fall
		/// 5=explosive (RPG, Railgun, grenade)
		/// 6=fire(molotov)
		/// 8=fall(WEAPON_HELI_CRASH)
		/// 10=electric
		/// See NativeDB for reference: http://natives.altv.mp/#/0x3BE0BB12D25FB305
		/// </summary>
		public int GetWeaponDamageType(int weaponHash)
		{
			if (getWeaponDamageType == null) getWeaponDamageType = (Function) native.GetObjectProperty("getWeaponDamageType");
			return (int) getWeaponDamageType.Call(native, weaponHash);
		}

		public void _0xE4DCEC7FD5B739A5(int ped)
		{
			if (__0xE4DCEC7FD5B739A5 == null) __0xE4DCEC7FD5B739A5 = (Function) native.GetObjectProperty("_0xE4DCEC7FD5B739A5");
			__0xE4DCEC7FD5B739A5.Call(native, ped);
		}

		/// <summary>
		/// </summary>
		/// <returns>this returns if you can use the weapon while using a parachute</returns>
		public bool CanUseWeaponOnParachute(int weaponHash)
		{
			if (canUseWeaponOnParachute == null) canUseWeaponOnParachute = (Function) native.GetObjectProperty("canUseWeaponOnParachute");
			return (bool) canUseWeaponOnParachute.Call(native, weaponHash);
		}

		public int CreateAirDefenseSphere(double p0, double p1, double p2, double radius, double p4, double p5, double p6, int weaponHash)
		{
			if (createAirDefenseSphere == null) createAirDefenseSphere = (Function) native.GetObjectProperty("createAirDefenseSphere");
			return (int) createAirDefenseSphere.Call(native, p0, p1, p2, radius, p4, p5, p6, weaponHash);
		}

		public int CreateAirDefenseArea(double p0, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, int weaponHash)
		{
			if (createAirDefenseArea == null) createAirDefenseArea = (Function) native.GetObjectProperty("createAirDefenseArea");
			return (int) createAirDefenseArea.Call(native, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, weaponHash);
		}

		public bool RemoveAirDefenseZone(int zoneId)
		{
			if (removeAirDefenseZone == null) removeAirDefenseZone = (Function) native.GetObjectProperty("removeAirDefenseZone");
			return (bool) removeAirDefenseZone.Call(native, zoneId);
		}

		public void RemoveAllAirDefenseZones()
		{
			if (removeAllAirDefenseZones == null) removeAllAirDefenseZones = (Function) native.GetObjectProperty("removeAllAirDefenseZones");
			removeAllAirDefenseZones.Call(native);
		}

		public void SetPlayerAirDefenseZoneFlag(int player, int zoneId, bool enable)
		{
			if (setPlayerAirDefenseZoneFlag == null) setPlayerAirDefenseZoneFlag = (Function) native.GetObjectProperty("setPlayerAirDefenseZoneFlag");
			setPlayerAirDefenseZoneFlag.Call(native, player, zoneId, enable);
		}

		public bool IsAirDefenseZoneInsideSphere(double x, double y, double z, double radius, int zoneId)
		{
			if (isAirDefenseZoneInsideSphere == null) isAirDefenseZoneInsideSphere = (Function) native.GetObjectProperty("isAirDefenseZoneInsideSphere");
			return (bool) isAirDefenseZoneInsideSphere.Call(native, x, y, z, radius, zoneId);
		}

		public void FireAirDefenseWeapon(int zoneId, double x, double y, double z)
		{
			if (fireAirDefenseWeapon == null) fireAirDefenseWeapon = (Function) native.GetObjectProperty("fireAirDefenseWeapon");
			fireAirDefenseWeapon.Call(native, zoneId, x, y, z);
		}

		public bool DoesAirDefenseZoneExist(int zoneId)
		{
			if (doesAirDefenseZoneExist == null) doesAirDefenseZoneExist = (Function) native.GetObjectProperty("doesAirDefenseZoneExist");
			return (bool) doesAirDefenseZoneExist.Call(native, zoneId);
		}

		/// <summary>
		/// For the player ped this will also gray out the weapon in the weapon wheel.
		/// </summary>
		public void SetCanPedEquipWeapon(int ped, int weaponHash, bool toggle)
		{
			if (setCanPedEquipWeapon == null) setCanPedEquipWeapon = (Function) native.GetObjectProperty("setCanPedEquipWeapon");
			setCanPedEquipWeapon.Call(native, ped, weaponHash, toggle);
		}

		/// <summary>
		/// Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
		/// </summary>
		public void SetCanPedEquipAllWeapons(int ped, bool toggle)
		{
			if (setCanPedEquipAllWeapons == null) setCanPedEquipAllWeapons = (Function) native.GetObjectProperty("setCanPedEquipAllWeapons");
			setCanPedEquipAllWeapons.Call(native, ped, toggle);
		}

		public int GetZoneAtCoords(double x, double y, double z)
		{
			if (getZoneAtCoords == null) getZoneAtCoords = (Function) native.GetObjectProperty("getZoneAtCoords");
			return (int) getZoneAtCoords.Call(native, x, y, z);
		}

		/// <summary>
		/// 'zoneName' corresponds to an entry in 'popzone.ipl'.
		/// AIRP = Los Santos International Airport
		/// ALAMO = Alamo Sea
		/// ALTA = Alta
		/// ARMYB = Fort Zancudo
		/// BANHAMC = Banham Canyon Dr
		/// BANNING = Banning
		/// BEACH = Vespucci Beach
		/// BHAMCA = Banham Canyon
		/// See NativeDB for reference: http://natives.altv.mp/#/0x98CD1D2934B76CC1
		/// </summary>
		public int GetZoneFromNameId(string zoneName)
		{
			if (getZoneFromNameId == null) getZoneFromNameId = (Function) native.GetObjectProperty("getZoneFromNameId");
			return (int) getZoneFromNameId.Call(native, zoneName);
		}

		public int GetZonePopschedule(int zoneId)
		{
			if (getZonePopschedule == null) getZonePopschedule = (Function) native.GetObjectProperty("getZonePopschedule");
			return (int) getZonePopschedule.Call(native, zoneId);
		}

		/// <summary>
		/// AIRP = Los Santos International Airport
		/// ALAMO = Alamo Sea
		/// ALTA = Alta
		/// ARMYB = Fort Zancudo
		/// BANHAMC = Banham Canyon Dr
		/// BANNING = Banning
		/// BEACH = Vespucci Beach
		/// BHAMCA = Banham Canyon
		/// BRADP = Braddock Pass
		/// See NativeDB for reference: http://natives.altv.mp/#/0xCD90657D4C30E1CA
		/// </summary>
		public string GetNameOfZone(double x, double y, double z)
		{
			if (getNameOfZone == null) getNameOfZone = (Function) native.GetObjectProperty("getNameOfZone");
			return (string) getNameOfZone.Call(native, x, y, z);
		}

		public void SetZoneEnabled(int zoneId, bool toggle)
		{
			if (setZoneEnabled == null) setZoneEnabled = (Function) native.GetObjectProperty("setZoneEnabled");
			setZoneEnabled.Call(native, zoneId, toggle);
		}

		/// <summary>
		/// cellphone range 1- 5 used for signal bar in iFruit phone
		/// </summary>
		public int GetZoneScumminess(int zoneId)
		{
			if (getZoneScumminess == null) getZoneScumminess = (Function) native.GetObjectProperty("getZoneScumminess");
			return (int) getZoneScumminess.Call(native, zoneId);
		}

		/// <summary>
		/// Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
		/// Modified example from "am_imp_exp.c4", line 6406:
		/// popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
		/// etc.
		/// 
		/// ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
		/// STREAMING::REQUEST_MODEL(vehicleHash);
		/// </summary>
		public void OverridePopscheduleVehicleModel(int scheduleId, int vehicleHash)
		{
			if (overridePopscheduleVehicleModel == null) overridePopscheduleVehicleModel = (Function) native.GetObjectProperty("overridePopscheduleVehicleModel");
			overridePopscheduleVehicleModel.Call(native, scheduleId, vehicleHash);
		}

		/// <summary>
		/// Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
		/// Modified example from "am_imp_exp.c4", line 6418:
		/// popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
		/// etc.
		/// 
		/// STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
		/// ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
		/// </summary>
		public void ClearPopscheduleOverrideVehicleModel(int scheduleId)
		{
			if (clearPopscheduleOverrideVehicleModel == null) clearPopscheduleOverrideVehicleModel = (Function) native.GetObjectProperty("clearPopscheduleOverrideVehicleModel");
			clearPopscheduleOverrideVehicleModel.Call(native, scheduleId);
		}

		/// <summary>
		/// Possible return values:
		/// (Hash of) city -> -289320599
		/// (Hash of) countryside -> 2072609373
		/// C# Example :
		/// Ped player = Game.Player.Character;
		/// Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
		/// </summary>
		/// <returns>Returns a hash representing which part of the map the given coords are located.</returns>
		public int GetHashOfMapAreaAtCoords(double x, double y, double z)
		{
			if (getHashOfMapAreaAtCoords == null) getHashOfMapAreaAtCoords = (Function) native.GetObjectProperty("getHashOfMapAreaAtCoords");
			return (int) getHashOfMapAreaAtCoords.Call(native, x, y, z);
		}

	}
}
